,author,body,number,created_at,empty
0,madmaxio,Can be workarounded with manual build with wb cli.,855,2021-12-03T02:49:14Z,0
1,Urhengulas,"Hello @Tarnadas üëãüèΩ

The patch looks great :)

You should be able to make `wasm-opt` run successfully by passing the `--enable-reference-types` command line flag. This way you could still get the optimization üöÄ ",888,2020-08-08T23:09:32Z,0
2,richardlett,"I tried this out, and found this bug. Not sure if its related to this particular commit, or due to wasm-bindgen.

https://github.com/rustwasm/wasm-bindgen/issues/2291
",888,2020-08-21T00:57:16Z,0
3,Tarnadas,"This shouldn‚Äôt be related to this particular commit.

It rather sounds like a memory allocation issue, which might be totally normal. I‚Äôm not sure if there is an option for wasm-bindgen to increase the initial memory size, but you could do it manually in the generated JS glue code file and see if that fixes your problem:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory

Also I don‚Äôt quite get why this shouldn‚Äôt happen without reference types enabled.

Btw today I will be fixing the wasm-opt stuff. Thanks for the hint @Urhengulas",888,2020-08-21T04:30:02Z,0
4,richardlett,"Excuse my ignorance on javascript/wasm.

I cant seem to find in the glue code where to memory is allocated -- I can find  a buffer with ref-types disabled, as there is a ""heap"", but I can't see anything of the like here.

Strangely, even if I'm just missing that, I preallocated  using `Vec::with_capacity(1 million)`, (which is not included in the benchmarks), and the issue is totally outside of that (and there's no further allocations are made besides the Vec, unless the gluecode is doing it somehow, but that does not seem to be the case).",888,2020-08-21T05:59:18Z,0
5,Tarnadas,"Apparently the JS glue code does not instantiate a WebAssembly memory, which would result in the default values being used.

You should see a line in your JS glue code which looks somewhat like this:
```js
const wasmModule = new WebAssembly.Module(bytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
```

Here you can instantiate a WebAssembly Memory with a larger initial size:
```js
const wasmModule = new WebAssembly.Module(bytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, {
  js: {
    mem: new WebAssembly.Memory({ initial: /* large number */, maximum: /* large number */ })
  },
  ...imports
});
```",888,2020-08-21T08:09:03Z,0
6,Tarnadas,"Unfortunately adding the `--enable-reference-types` to wasm-opt doesn't do the trick. I still get the same error.

Should we still accept the PR as is and add a tracking issue until this has been fixed by either wasm-bindgen or wasm-opt?
What do you think @ashleygwilliams?",888,2020-08-21T10:21:32Z,0
7,whatisaphone,The corresponding flag for wasm-bindgen is called `--reference-types`. Maybe we should use the same longer name here for consistency?,888,2020-09-12T20:08:12Z,0
8,Tarnadas,"That sounds definitely like a good idea. I‚Äôll update my PR, but I‚Äôm a little worried about the maintenance of this repository ",888,2020-09-20T19:08:45Z,0
9,Tarnadas,"Hey @drager @azriel91,
I just rebased my PR with the latest master branch.
Any chance this could be reviewed and merged?",888,2021-07-02T15:23:58Z,0
10,azriel91,"@Tarnadas heya, I'm simply a fellow contributor; that said the changes look good :v:",888,2021-07-05T08:13:29Z,0
11,Tarnadas,"Hey, I haven‚Äôt looked into this for a very long time. Maybe we no longer need to disable wasm-opt. Has it been updated in the meantime?",888,2021-10-14T10:48:07Z,0
12,ashleygwilliams,i think this sounds great! once i get 0.6.0 out the door we can schedule this for the next release,457,2018-12-18T21:03:38Z,0
13,hobofan,"Here is another solution using `cargo-watch`:
```
cargo watch -i .gitignore -i ""pkg/*"" -s ""wasm-pack build""
```",457,2019-01-24T00:51:04Z,0
14,ashleygwilliams,update! looking to do this soon :) cc @fitzgen https://github.com/rustwasm/rfcs/pull/10/commits/8aae141bb09eb91b50a53e74bc33bd95813b9da9,457,2019-07-16T15:26:57Z,0
15,boringcactus,"there's a draft implementation of this (and the proposed `serve` command from rustwasm/rfcs#10 as well) in #745, for what it's worth",457,2020-08-08T06:30:13Z,0
16,jasonwilliams,@ashleygwilliams @boringcactus what happened to this? Is there still any work in progress?,457,2021-12-03T17:22:57Z,0
17,Serveny,Use `cargo install wasm-pack` instead,1064,2021-10-11T07:39:01Z,0
18,d3lm,"Yep, using `cargo install` works fine.",1064,2021-12-03T19:37:18Z,0
19,vovacodes,"Can we merge it? ""type"": ""module"" is also a best practice for the browser-targeted packages that export code using esm format so that the modern bundlers can do a better job handling them. We should also include the `""exports"": ""./<crate-name>.js""` field (https://nodejs.org/api/packages.html#packages_exports_sugar)",936,2021-02-05T13:52:44Z,0
20,azriel91,"Heya, would like for https://github.com/rustwasm/wasm-pack/issues/698 to be fixed in the next release (PR: https://github.com/rustwasm/wasm-pack/pull/851).",929,2020-10-22T08:03:53Z,0
21,robojumper,It would be great if #886 could be fixed (PR at #887) because the issue broke the game of life example (and basically every rust wasm app derived from it).,929,2020-10-22T09:05:37Z,0
22,lucashorward,"- CI should be functional again, and preferably moved to github actions so that open-source contributors can also see what is happening and fix it / make improvements. I see a lot of the travis ci actions are on pending, but not sure what is wrong (and can't see the details to investigate that either as that requires admin access vs a github action with files inside the repo)
- Old versions of other libs should be updated. In #919, #917  and #926 I see wasm-opt, chromedriver and possibly openssl/curl versions are outdated. In some cases these seem to be responsibly for crashes.


",929,2020-10-22T19:59:38Z,0
23,lwansbrough,#888 can probably ship with trivial changes,929,2020-10-25T09:43:30Z,0
24,quaos,Deno support?,929,2020-11-20T02:51:02Z,0
25,oplik0,"> Deno support?

#908 addresses this, and it looks like it could be merged with minimal changes - it doesn't change much code and it seems the biggest questionable thing there is creating an empty `.gitignore` file (instead of adding `*` to its contents), so that might be reverted (I think the idea is that deno modules are usually kept online with git and imported from urls, so no reason to make default `.gitignore` ignore the result).

One thing that should be added there is listing `deno` target in `wasm-pack build --help`.",929,2020-12-06T23:50:43Z,0
26,torokati44,"Having a new release with newer `wasm-opt` would indeed be really nice! As requested in #919 as well.
(The old `wasm-opt` in the 0.9.1 release has a crash which is the current blocker for https://github.com/ruffle-rs/ruffle/pull/2173. However, at least version 98 seems to work fine.)
",929,2021-01-12T03:02:04Z,0
27,domoritz,"https://github.com/rustwasm/wasm-pack/pull/937 would also be awesome so that wasm-pack passes --weak-refs --reference-types through to wasm-bindgen.

For anyone else wondering about a new release, https://github.com/rustwasm/wasm-pack/issues/928 helped clarify the status of this repo for me.",929,2021-02-04T19:08:17Z,0
28,tv42,"This issue seems to one of the two new issues mentioned in https://github.com/rustwasm/wasm-pack/issues/914 without linking. Since #914 is now locked, mention it here so hopefully it'll cross-reference right.",929,2021-09-21T14:23:14Z,0
29,serprex,#1089 is necessary for importing wasm-pack modules in node,929,2021-12-05T13:44:58Z,0
30,gthb,See https://github.com/rustwasm/wasm-pack/pull/1061 ‚Äî is this not the same thing?,1089,2021-12-05T14:51:19Z,0
31,serprex,@gthb yes,1089,2021-12-05T14:54:23Z,0
32,tijlleenders,"Hi Jon,

What problem are you trying to solve with the Cargo switching?

For now, I'm guessing you want two Cargo.toml files for building to different targets.
If not, why else would you want this?

Have you read the Cargo docs?
It supports [release profiles](https://doc.rust-lang.org/book/ch14-01-release-profiles.html).

Cargo also supports conditional dependencies:
```
[target.'cfg(target_arch = ""wasm32"")'.dependencies]
crate = ""0.1.0""
etc...

[target.'cfg(not(target_arch = ""wasm32""))'.dependencies]
crate = ""0.2.1
etc...
```

If this somehow doesn't suit you... can you use git branches?


 ",1090,2021-12-06T05:08:30Z,0
33,gthb,"I use a separate crate for the WebAssembly wrapper code and build config, so a top-level `my-project/Cargo.toml`:

```
[workspace]

members = [
	""my-rust-lib"",
	""my-wasm-wrapper"",
]
```

... and then those crates have separate files `my-rust-lib/Cargo.toml` and `my-wasm-wrapper/Cargo.toml`.

Keep things simple and clear. Does this kind of workspace separation suit you, @jiyinyiyong ?",1090,2021-12-06T12:37:40Z,0
34,jiyinyiyong,"@tijlleenders I thought about that for a while, it was not for dependencies, but for lib types:

```
[lib]
crate-types = [...]
```

it appears that it's still not supported according to https://github.com/rust-lang/cargo/issues/4881 so I cannot use in that way.
",1090,2021-12-06T13:13:34Z,0
35,jiyinyiyong,"@gthb thanks, it might work, but I think it does not fit my current case. I have to compile a same piece of code to multiple targets. Splitting code into multiple crates add extra complexities. I have a dirty solution at now.",1090,2021-12-06T13:31:21Z,0
36,tijlleenders,"Wow... [that issue](https://github.com/rust-lang/cargo/issues/4881) is three years old.
Seems pretty clear it's not solvable at the moment.

My workaround would be to swap the cargo.toml in the build pipeline.",1090,2021-12-06T13:34:39Z,0
37,jiyinyiyong,"> My workaround would be to swap the cargo.toml in the build pipeline.

yep. my current dirty way.",1090,2021-12-06T13:43:09Z,0
38,ahwatts,"I'm getting this, too. I installed the prebuilt binary, on Fedora 32.

Interestingly, if I run it with `RUST_BACKTRACE=1`, the segfault goes away. If I run it in `gdb`, I get this:

```
awatts@ironic-mullet ~ $ gdb $(which wasm-pack)
GNU gdb (GDB) Fedora 9.1-5.fc32
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type ""show copying"" and ""show warranty"" for details.
This GDB was configured as ""x86_64-redhat-linux-gnu"".
Type ""show configuration"" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type ""help"".
Type ""apropos word"" to search for commands related to ""word""...
Reading symbols from /home/awatts/.cargo/bin/wasm-pack...
(gdb) run --help
Starting program: /home/awatts/.cargo/bin/wasm-pack --help
[New LWP 78640]
wasm-pack 0.9.1
Ashley Williams <ashley666ashley@gmail.com>
üì¶ ‚ú®  pack and publish your wasm!

USAGE:
    wasm-pack [FLAGS] [OPTIONS] <SUBCOMMAND>

FLAGS:
    -h, --help       Prints help information
    -q, --quiet      No output printed to stdout
    -V, --version    Prints version information
    -v, --verbose    Log verbosity is based off the number of v used

OPTIONS:
        --log-level <log_level>    The maximum level of messages that should be logged by wasm-pack. [possible values:
                                   info, warn, error] [default: info]

SUBCOMMANDS:
    build      üèóÔ∏è  build your npm package!
    help       Prints this message or the help of the given subcommand(s)
    login      üë§  Add an npm registry user account! (aliases: adduser, add-user)
    new        üêë create a new project with a template
    pack       üç±  create a tar of your npm package but don't publish!
    publish    üéÜ  pack up your npm package and publish!
    test       üë©‚Äçüî¨  test your wasm!

Thread 1 ""wasm-pack"" received signal SIGSEGV, Segmentation fault.
0x00000000009bb64b in __bin_chunk ()
(gdb) bt
#0  0x00000000009bb64b in __bin_chunk ()
#1  0x0000000000ee6950 in ?? ()
#2  0x000000000000ddc0 in ?? ()
#3  0x0000000000000036 in ?? ()
#4  0x0000000000000060 in ?? ()
#5  0x0000000000000510 in ?? ()
#6  0x0000003600000000 in ?? ()
#7  0x0000000000000003 in ?? ()
#8  0x0000000000ee4050 in mal ()
#9  0x0000000000000080 in ?? ()
#10 0x0000000000eee020 in ?? ()
#11 0x000000000098a750 in ?? () at /rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libcore/slice/mod.rs:2857
#12 0x00007fffffffcea0 in ?? ()
#13 0x00007fffffffc4d8 in ?? ()
#14 0x00000000007528e5 in OPENSSL_LH_free ()
#15 0x000000000073ab0d in err_cleanup ()
#16 0x0000000000750aa1 in OPENSSL_cleanup ()
#17 0x00000000009ba858 in __funcs_on_exit ()
#18 0x0000000000000000 in ?? ()
(gdb) quit
A debugging session is active.

	Inferior 1 [process 78636] will be killed.

Quit anyway? (y or n) y
```

I realize that stack trace is not super helpful.

Also, I just tried it again with no changes and now it's not segfaulting, so it appears to be an intermittent error.",823,2020-05-15T19:41:53Z,0
39,Pauan,"This is really weird, I've never seen this before. Maybe you were running low on RAM or disk space and that's why it crashed?",823,2020-06-04T09:57:22Z,0
40,ghost,"Me, too. `RUST_BACKTRACE=1` didn't help. RAM and the disk were free.
According to the backtrace bellow, a thread was calling [`ERR_load_strings_const()`](https://github.com/openssl/openssl/blob/33388b44b67145af2181b1e9528c381c8ea0d1b6/crypto/err/err.c#L340-L346) while the program was exiting. That function accessed a global object ([`err_string_lock`](https://github.com/openssl/openssl/blob/33388b44b67145af2181b1e9528c381c8ea0d1b6/crypto/err/err.c#L128)) which was being destroyed or had already been destroyed (by [`OPENSSL_cleanup()`](https://github.com/openssl/openssl/blob/1d78129dd205e3e85083a91c33540a70c51b0a23/crypto/init.c#L430), it was registered to be called by `exit()` by [`atexit()`](https://github.com/openssl/openssl/blob/1d78129dd205e3e85083a91c33540a70c51b0a23/crypto/init.c#L93)). I believe this is the reason.
<details>
<summary>Backtrace</summary>

```
thread #1, name = 'wasm-pack'
    frame #0: 0x00007ffff7fe1abf ld-2.31.so`.annobin_dl_fini.c + 255
    frame #1: 0x00007ffff79f33d7 libc.so.6`.annobin_exit.c + 247
    frame #2: 0x00007ffff79f3580 libc.so.6`exit + 32
    frame #3: 0x0000555555b9eb67 wasm-pack`std::sys::unix::os::exit::h6eb9114244f31004 at os.rs:605:14
    frame #4: 0x0000555555b95d6f wasm-pack`std::process::exit::he2412758ae21d38b at process.rs:1562:5
    frame #5: 0x0000555555a8a8df wasm-pack`clap::app::App::get_matches_from::_$u7b$$u7b$closure$u7d$$u7d$::hab942e53b3bcb4a3 + 879
    frame #6: 0x0000555555a8a529 wasm-pack`clap::app::App::get_matches::hdd97dc0605dd8aab + 409
    frame #7: 0x00005555557d66d7 wasm-pack`wasm_pack::main::h7bf7c0c2edc27a93 + 3191
    frame #8: 0x00005555557d2333 wasm-pack`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::habfc61eae7eb3c19 + 3
    frame #9: 0x0000555555b9ab68 wasm-pack`std::rt::lang_start_internal::hf4abd869024c3270 [inlined] std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hcf986077e2da8d6b at rt.rs:52:13
    frame #10: 0x0000555555b9ab5d wasm-pack`std::rt::lang_start_internal::hf4abd869024c3270 [inlined] std::panicking::try::do_call::h076edd10f2a91969 at panicking.rs:297
    frame #11: 0x0000555555b9ab5d wasm-pack`std::rt::lang_start_internal::hf4abd869024c3270 [inlined] std::panicking::try::h54343dd1a9d830aa at panicking.rs:274
    frame #12: 0x0000555555b9ab5d wasm-pack`std::rt::lang_start_internal::hf4abd869024c3270 [inlined] std::panic::catch_unwind::h81799eb8afacafdd at panic.rs:394
    frame #13: 0x0000555555b9ab5d wasm-pack`std::rt::lang_start_internal::hf4abd869024c3270 at rt.rs:51
    frame #14: 0x00005555557d7072 wasm-pack`main + 34
    frame #15: 0x00007ffff79db042 libc.so.6`__libc_start_main + 242
    frame #16: 0x00005555557cf44e wasm-pack`_start + 46
* thread #2, name = 'wasm-pack', stop reason = signal SIGSEGV: invalid address (fault address: 0x18)
  * frame #0: 0x00007ffff799868e libpthread.so.0`__pthread_rwlock_unlock + 14
    frame #1: 0x00007ffff7e1a89d libcrypto.so.1.1`CRYPTO_THREAD_unlock + 13
    frame #2: 0x00007ffff7d82495 libcrypto.so.1.1`ERR_load_strings_const + 85
    frame #3: 0x00007ffff7d99564 libcrypto.so.1.1`ERR_load_EVP_strings + 52
    frame #4: 0x00007ffff7d837a0 libcrypto.so.1.1`err_load_crypto_strings_int + 64
    frame #5: 0x00007ffff7dab1dd libcrypto.so.1.1`ossl_init_load_crypto_strings_ossl_ + 13
    frame #6: 0x00007ffff799aacf libpthread.so.0`.annobin_pthread_setcanceltype.c_end + 191
    frame #7: 0x00007ffff7e1a8fd libcrypto.so.1.1`CRYPTO_THREAD_run_once + 13
    frame #8: 0x00007ffff7dab71b libcrypto.so.1.1`OPENSSL_init_crypto + 491
    frame #9: 0x00007ffff7d82ae6 libcrypto.so.1.1`ERR_get_state + 246
    frame #10: 0x00007ffff7d82c1d libcrypto.so.1.1`ERR_clear_error + 13
    frame #11: 0x00007ffff7dab0ed libcrypto.so.1.1`ossl_init_engine_rdrand_ossl_ + 13
    frame #12: 0x00007ffff799aacf libpthread.so.0`.annobin_pthread_setcanceltype.c_end + 191
    frame #13: 0x00007ffff7e1a8fd libcrypto.so.1.1`CRYPTO_THREAD_run_once + 13
    frame #14: 0x00007ffff7dab8ed libcrypto.so.1.1`OPENSSL_init_crypto + 957
    frame #15: 0x00007ffff7be7365 libcurl.so.4`Curl_ossl_init + 21
    frame #16: 0x00007ffff7baf8e4 libcurl.so.4`global_init.part.0 + 84
    frame #17: 0x0000555555a2d41a wasm-pack`std::sync::once::Once::call_once::_$u7b$$u7b$closure$u7d$$u7d$::h76a301350f818854 + 26
    frame #18: 0x0000555555b9678b wasm-pack`std::sync::once::Once::call_inner::hb7f6320e166dc07b at once.rs:416:21
    frame #19: 0x0000555555a2e1c0 wasm-pack`curl::init::hab6efe0f8eeb6aab + 64
    frame #20: 0x0000555555841e25 wasm-pack`curl::easy::handler::Easy2$LT$H$GT$::new::h92fea0c2720a273d + 21
    frame #21: 0x000055555586c5ac wasm-pack`wasm_pack::manifest::Crate::return_api_call_result::hed7ece7b1ab9670e + 76
    frame #22: 0x000055555586c2c1 wasm-pack`wasm_pack::manifest::Crate::return_wasm_pack_latest_version::h04e6ec39cedd00ff + 353
    frame #23: 0x0000555555827366 wasm-pack`wasm_pack::build::check_wasm_pack_versions::hf3649c403f85d039 + 166
    frame #24: 0x00005555557d90df wasm-pack`std::sys_common::backtrace::__rust_begin_short_backtrace::hb32ca9c2e4ef7092 + 31
    frame #25: 0x00005555557d264e wasm-pack`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::hcd39e8ee8620d7f3 + 78
    frame #26: 0x0000555555ba391a wasm-pack`std::sys::unix::thread::Thread::new::thread_start::h62c1349f59256f0d [inlined] _$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::h54527dd7ea0101d8 at boxed.rs:1076:9
    frame #27: 0x0000555555ba3914 wasm-pack`std::sys::unix::thread::Thread::new::thread_start::h62c1349f59256f0d [inlined] _$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$::call_once::h731fd1bfc62ba945 at boxed.rs:1076
    frame #28: 0x0000555555ba390b wasm-pack`std::sys::unix::thread::Thread::new::thread_start::h62c1349f59256f0d at thread.rs:87
    frame #29: 0x00007ffff7992432 libpthread.so.0`start_thread + 226
    frame #30: 0x00007ffff7ab59d3 libc.so.6`__clone + 67
```

</details>",823,2020-06-23T08:55:04Z,0
41,ghost,"alexcrichton/curl-rust#333 is related to this, as the backtrace shows the second thread was calling `curl::init()`. I sometimes got a double free error, too. alexcrichton/curl-rust#334 has fixed that issue. That fix is included in curl-rust 0.4.30. Updating it may solve this issue.
**Edit:** I'm not getting this anymore after updating curl to 0.4.30. ~~I believe it will fix this issue.~~ I believe it will fix this issue *partially*, as sfackler/rust-openssl#1293 (openssl/openssl#6214) can also lead to segfault.",823,2020-06-30T03:48:04Z,0
42,ghost,sfackler/rust-openssl#1324 has been [merged](https://github.com/sfackler/rust-openssl/commit/08d8367ff2a5a1e34102090296765bff12044f37) (but not released) now and we should update [`openssl`](https://github.com/sfackler/rust-openssl) (by using `[patch.crates-io]`?) instead.,823,2020-08-09T07:30:24Z,0
43,dannywillems,"Seeing same issue on `wasm-pack 0.9.1`, `ubuntu 20.04`",823,2020-08-27T14:21:49Z,0
44,fnxln,the latest commits fixed for me,823,2021-11-04T12:41:51Z,0
45,yogainalift,"I just installed rustup and wasm-pack and tried to run a hello world example and got a segmentation fault.
wasm-pack version: 0.10.1
rust version: 1.56.1
```
GNU gdb (GDB) 11.1
Copyright (C) 2021 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type ""show copying"" and ""show warranty"" for details.
This GDB was configured as ""x86_64-pc-linux-gnu"".
Type ""show configuration"" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type ""help"".
Type ""apropos word"" to search for commands related to ""word""...
Reading symbols from wasm-pack...
(gdb) run build
Starting program: /home/yoga/.cargo/bin/wasm-pack build
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/usr/lib/libthread_db.so.1"".
[New Thread 0x7ffff7302640 (LWP 17180)]
[New Thread 0x7ffff7101640 (LWP 17182)]
[Detaching after vfork from child process 17181]
warning: Corrupted shared library list: 0x7ffff732b100 != 0x7fffe80010f0
[Detaching after vfork from child process 17183]
[INFO]: Checking for the Wasm target...
[Detaching after vfork from child process 17184]
[INFO]: Compiling to Wasm...
[Detaching after vfork from child process 17186]
[Thread 0x7ffff7101640 (LWP 17182) exited]
    Finished release [optimized] target(s) in 0.00s
[WARN]: :-) origin crate has no README
[INFO]: Installing wasm-bindgen...
[New Thread 0x7ffff7101640 (LWP 17188)]
[Thread 0x7ffff7101640 (LWP 17188) exited]

Thread 2 ""wasm-pack"" received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff7302640 (LWP 17180)]
0x00007ffff7aa32c3 in SSL_get_peer_certificate () from /usr/lib/libssl.so.1.1
```
Running `RUST_BACKTRACE=1 wasm-pack build` doesn't give any more info.",823,2021-11-05T18:34:37Z,0
46,M4GNV5,"I am having the same issue, but only when building in a docker file. Running directly on my Computer it works fine.

The Dockerfile:

```Dockerfile
FROM rust:1
WORKDIR /opt
COPY my-folder .
RUN cargo install wasm-pack
RUN wasm-pack build
```

I first thought this might be caused by a newer rustc inside the docker, but both rustc and wasm-pack seem to be the same version:

```
Step 5/18 : RUN rustc --version
 ---> Running in c494bdd3da53
rustc 1.55.0 (c8dfcfe04 2021-09-06)
Removing intermediate container c494bdd3da53
 ---> 975680e06f36
Step 6/18 : RUN wasm-pack --version
 ---> Running in 15f2de23f1f5
wasm-pack 0.10.1
Removing intermediate container 15f2de23f1f5
```

Any ideas on how to fix this? adding `RUST_BACKTRACE=1` has no effect.


EDIT: I tried using different versions of `rustc` (i.e. different version of the rust docker image), but none worked (1.54, 1.56, bullseye/buster, ...). I also tried installing wasm-pack directly from git using `cargo install --git https://github.com/rustwasm/wasm-pack`, but no luck either.
I am out of ideas at this point, especially as it used to work a few days ago",823,2021-11-09T09:41:53Z,0
47,5thHarbinger,"Same issue here. I even tried to do the [Wasm tutorial](https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm) juste to be sure it wasn't just my project.

But when I build with `wasm-pack build --target web` I get :

```
[INFO]: Checking for the Wasm target...
[INFO]: Compiling to Wasm...
   Compiling demo v0.1.0 (/home/marius/Projects/Wasm/demo)
    Finished release [optimized] target(s) in 0.12s
[1]    33739 segmentation fault (core dumped)  RUST_BACKTRACE=1 wasm-pack build --target web
```

I thought it was because of Rust 2021 but I tried with 2018 and got the same result.

I saw this thread was active some days ago but it seems no one find a suitable solution.

**EDIT**: I tried once more and got an even weirder result

```
[marius:~/Projects/Wasm/demo]$ RUST_BACKTRACE=1 wasm-pack build --target web                             (master‚ú±) 
[INFO]: Checking for the Wasm target...
[INFO]: Compiling to Wasm...
[1]    35367 segmentation fault (core dumped)  RUST_BACKTRACE=1 wasm-pack build --target web
[marius:~/Projects/Wasm/demo]$    Compiling proc-macro2 v1.0.32                                          (master‚ú±) 
   Compiling unicode-xid v0.2.2
   Compiling log v0.4.14
   Compiling wasm-bindgen-shared v0.2.78
   Compiling syn v1.0.81
   Compiling cfg-if v1.0.0
   Compiling lazy_static v1.4.0
   Compiling bumpalo v3.8.0
   Compiling wasm-bindgen v0.2.78
   Compiling quote v1.0.10
   Compiling wasm-bindgen-backend v0.2.78
   Compiling wasm-bindgen-macro-support v0.2.78
   Compiling wasm-bindgen-macro v0.2.78
   Compiling demo v0.1.0 (/home/marius/Projects/Wasm/demo)
    Finished release [optimized] target(s) in 4.91s
```
It segfaulted and gave me back control of my shell but ""started building"" nonetheless. `./pkg/` folder was still empty tho...",823,2021-11-13T15:12:05Z,0
48,TrueBrain,"As I couldn't find a workaround, I fiddled a bit with it myself. In the end, I ended up changing the `curl` dependency to use `static-curl`, which seems to be solving this issue (sadly, this cannot be done via `patch`, as that doesn't support changing `features`):

```patch
-curl = ""0.4.13""
+curl = { version = ""0.4.13"", features = ['static-curl'] }
```

In `Config.toml`. It seems the `curl` rust package doesn't pin `libcurl`, and so it picks the latest. I can imagine that this `libcurl` is not compatible with my system `libcurl`. And making curl static solves that issue, as now it no longer depends on my system `libcurl`. But I am really guessing here, and stopped looking into this after my fixes unbroke my system :)",823,2021-11-14T12:51:51Z,0
49,wuerges,"My backtrace also points to a libcurl/libssl issue.
It has a curious `warning: Corrupted shared library list: 0x7ffff7313100 != 0x7fffe80031e0`

```
(gdb) run build
Starting program: /home/ew/.cargo/bin/wasm-pack build
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/usr/lib/libthread_db.so.1"".
[New Thread 0x7ffff72ea640 (LWP 140377)]
[New Thread 0x7ffff70e9640 (LWP 140378)]
[Detaching after vfork from child process 140379]
warning: Corrupted shared library list: 0x7ffff7313100 != 0x7fffe80031e0
[Thread 0x7ffff70e9640 (LWP 140378) exited]
[Detaching after vfork from child process 140380]

Thread 2 ""wasm-pack"" received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff72ea640 (LWP 140377)]
0x00007ffff7a8b2c3 in SSL_get_peer_certificate () from /usr/lib/libssl.so.1.1
(gdb) bt
#0  0x00007ffff7a8b2c3 in SSL_get_peer_certificate () from /usr/lib/libssl.so.1.1
#1  0x00007ffff7f4cd66 in ?? () from /usr/lib/libcurl.so.4
#2  0x00007ffff7f50f05 in ?? () from /usr/lib/libcurl.so.4
#3  0x00007ffff7f51fd7 in ?? () from /usr/lib/libcurl.so.4
#4  0x00007ffff7f09149 in ?? () from /usr/lib/libcurl.so.4
#5  0x00007ffff7f22508 in ?? () from /usr/lib/libcurl.so.4
#6  0x00007ffff7f23b06 in curl_multi_perform () from /usr/lib/libcurl.so.4
#7  0x00007ffff7efbd0c in curl_easy_perform () from /usr/lib/libcurl.so.4
#8  0x00005555557054c0 in wasm_pack::manifest::Crate::return_api_call_result ()
#9  0x0000555555704f98 in wasm_pack::manifest::Crate::return_wasm_pack_latest_version ()
#10 0x00005555556c5b14 in wasm_pack::build::check_wasm_pack_versions ()
#11 0x00005555556a9745 in std::sys_common::backtrace::__rust_begin_short_backtrace ()
#12 0x00005555556a6c53 in core::ops::function::FnOnce::call_once{{vtable.shim}} ()
#13 0x0000555555c72fd3 in alloc::boxed::{impl#44}::call_once<(), dyn core::ops::function::FnOnce<(), Output=()>, alloc::alloc::Global> ()
    at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/boxed.rs:1636
#14 alloc::boxed::{impl#44}::call_once<(), alloc::boxed::Box<dyn core::ops::function::FnOnce<(), Output=()>, alloc::alloc::Global>, alloc::alloc::Global> ()
    at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/boxed.rs:1636
#15 std::sys::unix::thread::{impl#2}::new::thread_start () at library/std/src/sys/unix/thread.rs:106
#16 0x00007ffff7cdf259 in start_thread () from /usr/lib/libpthread.so.0
#17 0x00007ffff7e105e3 in clone () from /usr/lib/libc.so.6
```",823,2021-11-17T22:01:45Z,0
50,nyvs,"I had a different problem with similar outcome: wasm-pack always segfaulted on `wasm-pack build`.
For me the solution was to downgrade from wasm-pack 0.10.x to 0.9.1 like this:
`cargo install wasm-pack --version 0.9.1`
Apparently 0.10.x introduced a bug",823,2021-11-22T13:36:44Z,0
51,wuerges,"> For me the solution was to downgrade from wasm-pack 0.10.x to 0.9.1

This worked for me here.

",823,2021-11-24T19:29:13Z,0
52,notaphplover,"In my case I was missing `crate-type` metadata at `Cargo.toml`

```
[lib]
crate-type = [""cdylib"", ""rlib""]
```

Consider [docs](https://rustwasm.github.io/docs/wasm-pack/tutorials/npm-browser-packages/template-deep-dive/cargo-toml.html) as reference

**Edit**: it seems not to be related to `crate-type` metadata. Installing version `0.9.1` solves the issue. Installing version `0.9.1` and installing version `0.10.1` also solves the issue.

You can recreate the issue with this docker image:

```dockerfile
# See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.205.2/containers/javascript-node/.devcontainer/base.Dockerfile

# [Choice] Node.js version (use -bullseye variants on local arm64/Apple Silicon): 16, 14, 12, 16-bullseye, 14-bullseye, 12-bullseye, 16-buster, 14-buster, 12-buster
ARG VARIANT=""16""
FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:0-${VARIANT}

# Install emscripten dependencies
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
     && apt-get -y install --no-install-recommends cmake git python3 python3-pip

ENV EMSDK /emsdk

RUN git clone https://github.com/emscripten-core/emsdk.git ${EMSDK}
RUN cd ${EMSDK} \
    && ./emsdk install 1.40.1 \
    && ./emsdk activate 1.40.1 \
    && . ./emsdk_env.sh

USER node

# Install rust via rustup
ARG RUST_VERSION=1.56.1
RUN curl https://sh.rustup.rs -sSf | \
    sh -s -- -y --default-toolchain $RUST_VERSION && \
    . ~/.cargo/env && \
    rustup target add asmjs-unknown-emscripten && \
    rustup target add wasm32-unknown-emscripten && \
    rustup target add wasm32-unknown-unknown

RUN echo ""source ~/.cargo/env"" >> ~/.bashrc

```

An vscode dev container is included if someone else is interested:

```json
{
	""name"": ""Node.js"",
	""build"": {
		""dockerfile"": ""Dockerfile"",
		""args"": { ""VARIANT"": ""16"" }
	},
	""settings"": {},
	""extensions"": [
		""dbaeumer.vscode-eslint"",
		""ms-vscode.cpptools-extension-pack"",
		""rust-lang.rust"",
		""serayuzgur.crates""
	],
	""remoteUser"": ""node"",
	""features"": {}
}

```",823,2021-12-02T19:26:06Z,0
53,gnunicorn,"For me, it works fine if I install without default features (`--no-defaults-features`).",823,2021-12-06T13:21:03Z,0
54,wuerges,"> In my case I was missing `crate-type` metadata at `Cargo.toml`

My `Cargo.toml` already has the `crate-type` metadata. But my wasm-pack project is set up as a sub-module. I wonder if cargo is ignoring it... gotta test it!

> Edit: 
> My wasm-pack project was inside a workspace. 
> I added an empty `[workspace]` in my `Cargo.toml` to exclude it from the main workspace.
> 
> Now I'm back to `0.10.1` without the segfault.",823,2021-12-07T12:28:05Z,0
55,codefionn,"It outright failed with a custom SSL-certificate installed for localhost:

```
==19091== Invalid read of size 8
==19091==    at 0x4D652C3: SSL_get_peer_certificate (in /usr/lib/libssl.so.1.1)
==19091==    by 0x4904D65: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x4908F04: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x4909FD6: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x48C1148: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x48DA507: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x48DBB05: curl_multi_perform (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x48B3D0B: curl_easy_perform (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x2BFE8F: wasm_pack::manifest::Crate::return_api_call_result (in /home/user/.cargo/bin/wasm-pack)
==19091==    by 0x2BF944: wasm_pack::manifest::Crate::return_wasm_pack_latest_version (in /home/user/.cargo/bin/wasm-pack)
==19091==    by 0x272A33: wasm_pack::build::check_wasm_pack_versions (in /home/user/.cargo/bin/wasm-pack)
==19091==    by 0x2533F4: _ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h929fb148881a151bE.llvm.7723325994159813072 (in /home/user/.cargo/bin/wasm-pack)
==19091==  Address 0x1000001b7 is not stack'd, malloc'd or (recently) free'd
==19091==
==19091==
==19091== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==19091==  Access not within mapped region at address 0x1000001B7
==19091==    at 0x4D652C3: SSL_get_peer_certificate (in /usr/lib/libssl.so.1.1)
==19091==    by 0x4904D65: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x4908F04: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x4909FD6: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x48C1148: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x48DA507: ??? (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x48DBB05: curl_multi_perform (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x48B3D0B: curl_easy_perform (in /usr/lib/libcurl.so.4.7.0)
==19091==    by 0x2BFE8F: wasm_pack::manifest::Crate::return_api_call_result (in /home/user/.cargo/bin/wasm-pack)
==19091==    by 0x2BF944: wasm_pack::manifest::Crate::return_wasm_pack_latest_version (in /home/user/.cargo/bin/wasm-pack)
==19091==    by 0x272A33: wasm_pack::build::check_wasm_pack_versions (in /home/user/.cargo/bin/wasm-pack)
==19091==    by 0x2533F4: _ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h929fb148881a151bE.llvm.7723325994159813072 (in /home/user/.cargo/bin/wasm-pack)
```
After I removed the custom certificate, it still made a segmentation fault, but the build step was started.

It could also be that this behavior was just undefined behavior.",823,2021-12-07T13:33:50Z,0
56,oles,"Same issue here on a clean install:

```
$¬†rustc -V
rustc 1.57.0 (Arch Linux rust 1:1.57.0-1)

$ wasm-pack -V
wasm-pack 0.10.1

$ wasm-pack new hello-wasm
[INFO]: Installing cargo-generate...
Segmentation fault (core dumped)
```

Works when downgrading to 0.9.1",823,2021-12-07T16:29:23Z,0
57,PiepsC,"I ran into a completely different issue with wasm-opt as well which was solved by downgrading to 0.8.1. I reckon that will not solve anything for you considering the lack of binaries.

Have you tried disabling wasm-opt altogether? `To disable wasm-opt, add wasm-opt = false to your package metadata in your Cargo.toml.` Obviously doesn't address the issue here, but perhaps it'll at least allow you to continue.",913,2020-09-09T15:29:06Z,0
58,SebastienGllmt,I think this is a duplicate of https://github.com/rustwasm/wasm-pack/issues/886,913,2020-09-28T07:00:07Z,0
59,JHBonarius,"> I think this is a duplicate of #886

No, because that bug occurs when wasm-opt is actually running. In my case, the wasm-opt binaries are not found at all.",913,2020-09-28T07:05:10Z,0
60,rambip,"Same issue here with a raspberry-pi 4

everything compiles well but wasm-opt fails.",913,2020-11-06T21:15:44Z,0
61,Dygear,Same problem on an ARM Mac.,913,2020-12-17T01:03:20Z,0
62,darkoverlordofdata,Same problem occurs on 12.2-STABLE FreeBSD 12.2-STABLE GENERIC  amd64,913,2021-01-06T00:43:12Z,0
63,mattdamon108,exactly the same issue on m1 Mac. Any resolution?,913,2021-01-31T03:44:24Z,0
64,INCHMAN1900,"Running into the same problem: everything but `wasm-opt` works perfectly fine.

`find_wasm_opt` method only check cache folders(like `/Users/user/Library/Caches` on MacOS). If there is no `.wasm-pack`, it try to download from Github.

There are two solutions I think:
1. disable `wasm-opt` and manually do the opt
2. change the `wasm_opt_path` in `wasm-opt.rs` file to the executable path on my machine, then build my own `wasm-pack`",913,2021-02-05T17:00:58Z,0
65,adamaho,I also can't `wasm-pack` the hello world application on an M1 MacBook Air. Hopefully a resolution comes soon :) ,913,2021-02-16T00:13:32Z,0
66,INCHMAN1900,"> I also can't `wasm-pack` the hello world application on an M1 MacBook Air. Hopefully a resolution comes soon :)

try add
```
[package.metadata.wasm-pack.profile.release]
wasm-opt = false
```
to your Cargo.toml to disable wasm-opt step.",913,2021-02-22T16:05:39Z,0
67,JHBonarius,"> 
> 
> > I also can't `wasm-pack` the hello world application on an M1 MacBook Air. Hopefully a resolution comes soon :)
> 
> try add
> 
> ```
> [package.metadata.wasm-pack.profile.release]
> wasm-opt = false
> ```
> 
> to your Cargo.toml to disable wasm-opt step.

That's what the first reply says. But it's not a fix, but a work-around.",913,2021-03-01T11:35:21Z,0
68,willmcpherson2,"For M1 users, you can manually run `wasm-opt`.

Disable automatic wasm-opt in your Cargo.toml:

```
[package.metadata.wasm-pack.profile.release]
wasm-opt = false
```

Install standalone wasm-opt binary:

```
brew install binaryen
```

Run it on your built wasm file, for example:

```
wasm-opt -Oz -o out.wasm in.wasm
```",913,2021-03-21T11:50:58Z,0
69,titaneric,"I want to build a wasm in a container without any network access. @willmcpherson2 may be a work-around solution to this (pre-installed it), but hope `wasm-pack` can find `wasm-opt` locally without disabling `wasm-opt` in Cargo.toml.",913,2021-03-25T14:54:34Z,0
70,INCHMAN1900,"> I want to build a wasm in a container without any network access. @willmcpherson2 may be a work-around solution to this (pre-installed it), but hope `wasm-pack` can find `wasm-opt` locally without disabling `wasm-opt` in Cargo.toml.

change the `wasm_opt_path` in `wasm-opt.rs` to the local executable path in your container(so wasm-pack won't need to download it from internet), then build your own `wasm-pack`.",913,2021-03-25T16:47:19Z,0
71,Nessex,"As an alternative to the above, if you would like the `wasm-pack` command to work normally you can install the `wasm-pack` from [this PR](https://github.com/rustwasm/wasm-pack/pull/957) which looks for binaries in your PATH. At least, until such a time as the PR is merged:

```
# By latest commit at time of this comment
cargo install wasm-pack --git https://github.com/bloveless/wasm-pack --rev fee0938c3417dbcd5d72544a8c1981d761590042
```

This allows me to just run `wasm-pack build --target web` without a separate `wasm-opt` stage.

Note that you'll also need to follow the instructions above to download or build a working `wasm-opt` binary and put it in your PATH.",913,2021-05-06T12:26:40Z,0
72,Kade-Powell,"yep, same issue here.. starting to regret this M1 Mac purchase",913,2021-05-13T01:11:01Z,0
73,tami5,"> As an alternative to the above, if you would like the `wasm-pack` command to work normally you can install the `wasm-pack` from [this PR](https://github.com/rustwasm/wasm-pack/pull/957) which looks for binaries in your PATH. At least, until such a time as the PR is merged:
> 
> ```
> # By latest commit at time of this comment
> cargo install wasm-pack --git https://github.com/bloveless/wasm-pack --rev fee0938c3417dbcd5d72544a8c1981d761590042
> ```
> 
> This allows me to just run `wasm-pack build --target web` without a separate `wasm-opt` stage.
> 
> Note that you'll also need to follow the instructions above to download or build a working `wasm-opt` binary and put it in your PATH.

Which instruction?  where can I download and build `wasm-opt` binary?

M1 mac

Thanks",913,2021-06-29T19:00:23Z,0
74,mtiller,"As far as I can tell, the original repo from @bloveless has been made private (or removed).  I presume this is because the changes were merged into the `wasm-pack` code base.  But it doesn't look like the merged version is released yet.  So it is, at least as of today, unclear how we are supposed to solver this problem.  Yes, I could disable wasm-opt, but I'd prefer to use it since I managed to download it with `homebrew`.  Any suggestions?  Anybody know the specific incantation required to install `wasm-pack` (with merged PR) directly from `git`?  I'm new to `cargo`, so I'm not quite sure what I should do.  Or perhaps the merged version has been released and I'm somehow missing something about how to use it?

Any assistance here is appreciated.",913,2021-08-29T02:48:15Z,0
75,mtiller,"Just a quick follow up.  I tried something.  I cannot say if it is ""correct"", but it did seem to work.  Although I should make clear that this installs an **unreleased** version of `wasm-pack`.  Here are the steps I followed to get this working on my M1 Mac:

1. [Install `homebrew`](https://brew.sh/) (most people probably already have this, but just in case).
2. Run `brew install binaryen` (as suggested by @willmcpherson2)
3. Install the unreleased version of `wasm-pack` using: `cargo install wasm-pack --git https://github.com/rustwasm/wasm-pack --rev c9ea9aebbccf5029846a24a6a823b18bb41736c7`
4. Run your build as usual with: `wasm-pack build --target web` (should run without complaint)

If anybody has any reason to think one of these steps is incorrect, please speak up.  I just thought an update was in order since some of the previous instructions seem to be out of date now.  Hopefully the next release of `wasm-pack` will be released soon and people will no longer see this issue (at least on platforms where a binary of `wasm-opt` is available).

Hope that helps.",913,2021-08-29T02:55:34Z,0
76,dkozma,"Wanted to follow up to @mtiller's instructions with changes I had to make for my M1 Mac running macOS Monterey. After installing homebrew and running `brew install binaryen`, run the following (Git SHA updated with current HEAD):

```
export MACOSX_DEPLOYMENT_TARGET=10.7
cargo install wasm-pack --git https://github.com/rustwasm/wasm-pack --rev ae10c23cc14b79ed37a7be222daf5fd851b9cd0d
```

This sets the deployment target as specified [in this issue](https://github.com/rust-lang/rust/issues/90342) to resolve the linker issues in Monterey.",913,2021-11-16T15:18:20Z,0
77,reinmind,"I think the bug is caused by the binaryen version_90 doesn't have a macos_aarch prebuild release
https://github.com/WebAssembly/binaryen/releases/tag/version_90
I found the predownload link in the file `mod.rs `
```rust
Tool::WasmOpt => {
            Ok(format!(
        ""https://github.com/WebAssembly/binaryen/releases/download/{vers}/binaryen-{vers}-{target}.tar.gz"",
        vers = ""version_90"",
        target = target,
            ))
        }
``` 
and 'os-configuration' in `target.rs`
```rust
#![allow(missing_docs)]

pub const LINUX: bool = cfg!(target_os = ""linux"");
pub const MACOS: bool = cfg!(target_os = ""macos"");
pub const WINDOWS: bool = cfg!(target_os = ""windows"");

#[allow(non_upper_case_globals)]
pub const x86_64: bool = cfg!(target_arch = ""x86_64"");
#[allow(non_upper_case_globals)]
pub const x86: bool = cfg!(target_arch = ""x86"");
```
It should be solved by a new binaryen osx_aarch64 release",913,2021-11-27T18:53:05Z,0
78,d3lm,I just submitted a PR (#1088) to fix this issue for Apple Sillicon.,913,2021-12-03T19:42:26Z,0
79,babldev,"You can test @d3lm's change with:

```sh
cargo install wasm-pack --git https://github.com/d3lm/wasm-pack --rev 713868b204f151acd1989c3f29ff9d3bc944c306
```

It did the trick for me!",913,2021-12-13T21:58:03Z,0
80,abalmos,"@iiSeymour try

```
$ wasm-pack build --release --target web -- --features wasm
```

Looks like the docs need a PR.",1059,2021-09-23T18:48:05Z,0
81,drager,Fixed in #1095 ,1091,2021-12-16T20:07:53Z,0
82,anp,"I'm also getting set up on an M1 machine, although I build my wasm-pack from source so didn't run into this. Based on the [NPM installer](https://github.com/rustwasm/wasm-pack/blob/master/npm/binary.js#L27) I think the project will also need to upload aarch64-apple-darwin binaries to GitHub Releases.",952,2021-01-04T22:05:50Z,0
83,anp,"Also FYI once you get it installed there are still [some limitations](https://github.com/rustwasm/wasm-pack/issues/954), through no fault of wasm-pack's maintainers AIUI.",952,2021-01-04T22:07:49Z,0
84,richiksc,You mention wasm-pack working flawlessly on M1 if installed via cargo or compiled from source. I run into the issue described at #907 when running wasm-pack compiled from source on an M1-based Mac.,952,2021-01-13T23:38:21Z,0
85,iugo,"```
‚ûú  curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
wasm-pack-init: no precompiled binaries available for CPU architecture: arm64
```",952,2021-02-23T04:50:46Z,0
86,tholu,"@iugo Ran into the same issue, tried `cargo install wasm-pack` instead and it works so far.",952,2021-03-08T15:38:00Z,0
87,Xayaan,"Curl command doesn't work on M1, as @tholu stated above. Running `cargo install wasm-pack` works perfectly. ",952,2021-07-07T13:04:29Z,0
88,huntc,"Having followed the `cargo install` route, I note that the resultant `wasm-pack` is built for x86:

```
huntc@MBP14inch2021 ~ % file `which wasm-pack`
/Users/huntc/.cargo/bin/wasm-pack: Mach-O 64-bit executable x86_64
```",952,2021-11-05T06:02:21Z,0
89,fishcharlie,Is there any plans to fix the curl installer and make the bundle universal or Apple Silicon compatible?,952,2021-11-19T22:53:12Z,0
90,d3lm,"Yes. This should work on an M1. `wasm-opt` has a prebuilt for x86-64 and wasm-pack should just download that one for OSX. If rosetta is installed, it will run the x86 automatically without `arch`. The M1s have been around for a while and we should try and address this issue. Anything I can help with?

I saw [it uses the x86](https://github.com/rustwasm/wasm-pack/blob/ca4af7660f266b9347e4a00c882b0e3adfd13a1d/src/install/mod.rs#L175-L176) but only if the `target` is specified as such. But I think for OSX we can just download the x86 always if I am not mistaken. What do ya'all think?",952,2021-11-22T09:28:26Z,0
91,fishcharlie,"> Yes. This should work on an M1. `wasm-opt` has a prebuilt for x86-64 and wasm-pack should just download that one for OSX. If rosetta is installed, it will run the x86 automatically without `arch`. The M1s have been around for a while and we should try and address this issue. Anything I can help with?
> 
> 
> 
> I saw [it uses the x86](https://github.com/rustwasm/wasm-pack/blob/ca4af7660f266b9347e4a00c882b0e3adfd13a1d/src/install/mod.rs#L175-L176) but only if the `target` is specified as such. But I think for OSX we can just download the x86 always if I am not mistaken. What do ya'all think?

@d3lm I think relying on Rosetta is a bad idea. Just like with Rosetta 1, someday Apple will remove support for Rosetta 2. It's best to support Apple Silicon natively for increased performance, and long term stability.

Personally, I'm holding off installing Rosetta for as long as possible. Much more willing to put in the effort in migrating and finding alternatives now, as opposed to later when support is removed.",952,2021-11-22T13:51:24Z,0
92,d3lm,"@fishcharlie Yes, fair enough. If we can make this work without rosetta that'd be even better. Does that mean we need to build wasm-opt for aarch-64?",952,2021-11-22T20:01:39Z,0
93,XinyiXiang,"In the installation process of Rust the default settings are as follows:
```
Current installation options:

   default host triple: aarch64-apple-darwin
     default toolchain: stable (default)
               profile: default
  modify PATH variable: yes
```

Using ```cargo``` seems to be the most reliable way for building on M1s",952,2021-11-22T23:01:52Z,0
94,d3lm,@XinyiXiang Using `cargo` to build `wasm-pack` or what did you mean?,952,2021-11-23T10:34:32Z,0
95,Keavon,"I believe this was fixed in [0.10.2](https://github.com/rustwasm/wasm-pack/releases/tag/v0.10.2) via #1088. If I'm not mistaken, this issue can be closed?",952,2021-12-16T20:10:23Z,0
96,d3lm,Yes I think so!,952,2021-12-16T20:19:24Z,0
97,serprex,"#937 adds `--weak-refs` like any other flag, but I agree that there should be a mechanism to pass arbitrary flags to wasm-bindgen",1092,2021-12-17T13:52:16Z,0
98,jaycuse,"I had a similar issue. This link made me realize my problem.

https://users.rust-lang.org/t/webassembly-with-rust-problem-compiling-wasm/29575",1071,2021-12-20T00:50:24Z,0
99,dhardy,"Now that my system-update is done, I notice there is ongoing network activity after ""Finished"" appears, and after 10 or so seconds the process does terminate with a little more output:
```
[INFO]: Optimizing wasm binaries with `wasm-opt`...
[INFO]: Optional fields missing from Cargo.toml: 'description', 'repository', and 'license'. These are not necessary, but recommended
[INFO]: :-) Done in 51.97s
[INFO]: :-) Your wasm pkg is ready to publish at /home/dhardy/projects/wasm/wasm-game-of-life/pkg.
```

Yes, my internet is SLOW. Regardless, this should say it's waiting on a download.",1093,2021-12-16T13:40:57Z,0
100,TrickyPi,Same as #946 ?,1093,2021-12-20T07:54:24Z,0
101,00imvj00,"I really really want to get on this. very new to wasm and good in rust, but the heart is there. :) ",928,2020-10-22T09:32:01Z,0
102,AlphaHot,"@ashleygwilliams I'd like to help, but I'm new to wasm",928,2020-10-22T11:49:34Z,0
103,dakom,"I'm trying to understand the situation here... the repo owner is ""rustwasm"" but the publishing owner is only ""ashleygwilliams""

Isn't it standard practice for rustwasm crates to be publishable, i.e. co-owned on crates.io, by individuals _and_ the rustwasm team?

I get what you're saying - it's not really solving the problem 100%, but surely it's a step in the right direction.... the decision to deliberately withhold sharing those rights with the team seems unnecessarily negative, almost spiteful, from the outside - which is even more strange since you're on the team and generally seem to care a lot about community developer relationship issues!

Can you please just grant the rustwasm team the rights on crates.io, even if you think it won't solve the problem, it surely doesn't _hurt_ and then perhaps the team will invite new members down the line who can help maintain the package (both on a code level and in terms of publishing releases)",928,2020-10-22T16:30:42Z,0
104,dakom,"How is my point ""off-topic""?

> there should be a set of people who maintain this project. let's find that set of people and figure out how to set them up for success.

I'm merely suggesting that the set of people you add should include the rustwasm team, which is an entity that exists now. It's a positive step you can take right this minute towards a long term maintenance strategy.",928,2020-10-22T17:35:23Z,0
105,ashleygwilliams,I am not transferring the publish rights to a defunct group.,928,2020-10-22T17:40:00Z,0
106,colelawrence,"I can't offer a lot of support for new feature development, but I would be happy to find lightweight or advisory responsibilities over pull requests and direction. My company's central product is built with wasm-pack and TypeScript (and several bespoke codegen tools for Rust and TypeScript type safety).",928,2020-10-22T18:18:15Z,0
107,dakom,"> I am not transferring the publish rights to a defunct group.

No need to transfer, just add them as additional owners so that the group can publish if/when it is ""revived"".

As far as I can tell this is the same approach taken by several other crates, such as the ubiquitous [wasm-bindgen](https://crates.io/crates/wasm-bindgen)

Please try and look at this from another perspective... pretend you had no personal involvement with this at all. The [homepage of the team](https://rustwasm.github.io/) has a big purple button suggesting to download wasm-pack. The repo is owned by the team. Yet the team has no rights to publish it. Additionally there have been complaints about this from community members as well as former members of the team. Doesn't this all strike you as fundamentally broken and wrong??

I do hope the rustwasm group gets back to its former glory days, and I think adding ""them"" as co-owners here is a step towards that direction. Even if it doesn't have much of an impact, it's the right move. Just do it and stop playing games, please.",928,2020-10-23T08:49:54Z,0
108,ashleygwilliams,@dakom if you use this issue to continue to press this i am going to have to take more serious moderation actions. you have my personal email if you'd like to pursue this line of argument. i will not be transferring the crate to an inactive group of people. this is my final ask that you please stop using this issue to pursue this topic. if you continue i will take further action to restrict your interaction on this repo.,928,2020-10-23T14:08:33Z,0
109,ashleygwilliams,"hey folks! if you've replied here, please also email me at ashley666ashley@gmail.com to make sure i can send you a response! thanks again for reaching out and wanting to help wasm-pack. GitHub issues are not well designed to have threaded conversations, so it'll be easier for me to talk to each of you personally via email.",928,2020-10-23T14:26:40Z,0
110,dakom,"I don't think this discussion should be happening in a private email. It should be out in the open. Threating to shut up anyone who points out the mistake you're making here (namely wishing to retain sole ownership of the publish rights, when the crate is and should be owned by the team), and then trying to deflect that to a private discussion that nobody can see, is an abusive tactic.

My points are absolutely relevant for ""long term maintenance strategy for wasm-pack"". If anything, it's not so relevant for _short term_ maintenance strategy for wasm-pack. But long term? It's all about getting the team stable, which means giving them publish rights to a tool people are relying on. A tool that happens to be otherwise owned by that team (for good reason).

It's true, there was an issue that was more directly to the _exact_ point I'm making, but you erroneously shut that down for getting ""too heated"" (https://github.com/rustwasm/wasm-pack/issues/914) (side-point, where was the heat? Did someone say something inflammatory? I didn't catch that... it seems that it's just that it bothered you, and so you felt heat that wasn't there üôÑ )

It's also true, that the team isn't capable of doing much right now, but it's still a correct step (to add them as a co-owner, not sole transfer) and your refusal to do it makes no sense at all.

Go ahead - follow through on your promise and ban me, for doing nothing other than pushing a salient point you, and as far as I can tell - you alone, disagree with. At least there will be a record of your moderator abuse.

I won't be able to follow through for a day or so by the way. So if there _is_ further sensible discussion, please don't take my delayed response as anything other than that.",928,2020-10-23T14:53:28Z,0
111,kettle11,"@ashleygwilliams's point makes sense that it's unwise to transfer ownership to a defunct group just because the name sounds official.

But that raises a few questions:
* *What is the state of the working group?* 
* *Can the working group be improved enough to safely take ownership of `wasm-pack`?*
* *If the working group is beyond repair what does that mean for its other projects?*

@fitzgen is listed [here](https://www.rust-lang.org/governance/wgs/wasm) as the sole member of the Rust WebAssembly working group and the team leader. Is @fitzgen still the leader of the working group? If so he should weigh in as well.",928,2020-10-23T19:31:57Z,0
112,ashleygwilliams,"@kettle11 historically there has been a core team of the rustwasm working group, that consisted of me, @alexcrichton, @fitzgen, and for a time, @Pauan. do we think we could move this question to a new issue on the team repo https://github.com/rustwasm/team? it's probably a better place for this conversation :) 

i would like to move the search for wasm-pack maintainers forward and not block on reviving the working group. this is because i think re-establishing the working group will take a lot longer and will involve more things than setting up a new maintainership for this single project (both will be significant and different effort). that being said, i am eager to see the group revived and super support all efforts to do so!",928,2020-10-23T21:54:13Z,0
113,kettle11,">  i would like to move the search for wasm-pack maintainers forward and not block on reviving the working group. this is because i think re-establishing the working group will take a lot longer and will involve more things than setting up a new maintainership for this single project

That sounds like a good assessment and a pragmatic approach.

Just to summarize key points from what you've said:

* In the immediate term the focus should be on getting `wasm-pack` up and running with new maintainers
* Transferring publish rights from yourself to the WASM working group is a bad idea because it's a large group of inactive members, which may pose a security risk.
* Long term it may be possible to revive the WASM working group, but that requires significant effort and getting `wasm-pack` to a good spot should come first.

From my perspective that all makes sense.

And thanks for creating `wasm-pack` and many of the Rust+Wasm resources! It's a (perhaps not ideal) testament to the value of your work that people are so passionate with their opinions about `wasm-pack`'s future.

Hopefully members of the community who are invested in Rust + Wasm will step up and help!
",928,2020-10-24T00:25:52Z,0
114,pauldorehill,"At its core this is an issue of a personal crate existing under the guise of a working group crate. The cleanest solution would be to transfer the crate back to @ashleygwilliams and out of the rustwasm organization:

- It's then clearly Ashley's decision on how to move forward with maintaining crate
- While the rustwasm group is in its current state of semi stasis it doesn't have the implied responsibility for maintaining it",928,2020-10-24T03:57:13Z,0
115,ashleygwilliams,"@kettle11 yup! that's a great summary.

@pauldorehill i don't think that's a great idea. the reason i don't think that is a great idea is because rustwasm, while a defunct group of people, is still a coherent and coupled set of software and resources. there are several templates, books, examples, and docs, in this repo that are coupled with wasm-pack. many of those also need some love and depend on wasm-pack to work and be effective.

i've been considering if creating a new wasm-pack org is the right call. or simply focusing on getting maintainership of wasm-pack as step 1 in the process of reviving the rustwasm working group. personally i would much prefer to see this as step one of getting the working group back to a normal spot. i'm not sure it's useful or necessary to transfer several repositories out of this org in an effort to eventually transfer them back in. if my other rustwasm colleagues feel differently i'm happy to reconsider, but for the moment i don't see any value of moving it.

------

> While the rustwasm group is in its current state of semi stasis it doesn't have the implied responsibility for maintaining it

and just to address this point for what i hope is the last time:

there is no rustwasm group of people. any repos/crates existing in a rustwasm org implies a set of rustwasm people. moving wasm-pack doesn't change this sense of implied maintenance. nearly every repo in this org has that implication and is not being maintained, from the rustwasm book, to the team repo, to gloo and twiggy. i understand that no one seems upset about those resources at the moment, but they are in the same state. as we think about solutions, i think we should be considering that this is not wasm-pack ""leaving a working group"" but that we are in a place of rebuilding the working group, at first, just for wasm-pack.",928,2020-10-24T12:59:12Z,0
116,frehberg,"In terms of code, what needs to be done? Is there any roadmap? Any TODOs?",928,2020-10-28T19:09:02Z,0
117,ashleygwilliams,"@frehberg i'm hoping to come up with a brief roadmap/todos in #929 - and then once a group of maintainers is brought together and is done getting out the next release we can set up a more formal plan of action. if you have any suggestions please feel free to comment on the aforementioned issue!

i'm running a bit behind because of a personal issue but i am hoping to have a kick off meeting with folks next week (sending emails out tomorrow, apologies for the delay).",928,2020-11-05T22:37:29Z,0
118,drager,"I think it would be a good idea to keep this repository and others (such as https://github.com/rustwasm/binary-install) in an organization, just like we have today. The problem is though that the group of people who consist of this rustwasm group is somewhat inactive right now and have been for a couple of months before. I think it would be good to do some planning and set a roadmap and which people should be involved in this as you're saying @ashleygwilliams.",928,2020-11-13T20:03:58Z,0
119,beyera,"@drager & @ashleygwilliams: I'll add [yet another call](https://twitter.com/firebeyer/status/1400640009418334217) for please adding someone else to help maintain this project. I'd be happy to donate some time, but there's plenty of small meaningful MRs going undressed. ",928,2021-08-31T09:25:22Z,0
120,drager,"> @drager & @ashleygwilliams: I'll add [yet another call](https://twitter.com/firebeyer/status/1400640009418334217) for please adding someone else to help maintain this project. I'd be happy to donate some time, but there's plenty of small meaningful MRs going undressed.

I'm planning on releasing a `0.9.2` with just the binary-install fix and then go through the latest issues/PRs and publish a `0.10.2` as soon as I'm done with that. In the meantime, feel free to review PRs and let me know what you expect from `wasm-pack` further down the road. Thanks üòä ",928,2021-08-31T09:30:59Z,0
121,somethingelseentirely,"So happy to see some activity! ‚ù§Ô∏è 
Can't wait to pass that `--weak-refs` flag to bindgen some day üòÖ ‚ú®",928,2021-09-04T16:46:18Z,0
122,tv42,"This issue seems to one of the two new issues mentioned in https://github.com/rustwasm/wasm-pack/issues/914 without linking. Since #914 is now locked, mention it here so hopefully it'll cross-reference right.",928,2021-09-21T14:22:55Z,0
123,ms-ati,"Checking in from the future (Mon, Dec 20 2021) -- what is the current state of finding new maintainers for `wasm-pack`?",928,2021-12-20T20:08:08Z,0
124,shore-yong,https://apple.stackexchange.com/questions/408375/zsh-bad-cpu-type-in-executable ?,1040,2021-12-21T06:58:48Z,0
125,Redrield,"Wen I was experimenting with the generated package.json to try to find a workaround to #663, I found that the .gitignore that is generated is also interpreted by npm as an implicit file exclusion list. Removing the ""files"" key entirely results in the archive only containing the README and license files.",557,2019-07-04T19:52:17Z,0
126,ashleygwilliams,"after discussion in the the rustwasm meeting last week, we've opted to continue using the files key but to populate it with the set of the files found in `pkg/` at time of calling `wasm-pack publish`. ",557,2019-07-23T15:03:31Z,0
127,ibaryshnikov,Any progress here? It looks important becase it prevents inline snippets (which is a very cool feature itself) from being published by default. The workaround is to `rm pkg/.gitignore pkg/package.json` and to provide your own `package.json`,557,2019-10-20T10:03:22Z,0
128,shore-yong,Any progress here?,557,2021-12-21T10:30:13Z,0
129,d3lm,Yay! Looking forward for a `aarch64` so it runs on an M1.,1065,2021-11-22T09:33:26Z,0
130,d3lm,Couldn't we use `macos-11` for the time being until `macos-latest` gets updated? @nacardin ,1065,2021-11-22T09:35:00Z,0
131,Sotatek-NguyenNguyen4,"I'm using macos monterey, I try to do step by step on above, and it doesn't work. I'm really not clearly step: ""You ran cargo fmt on the code base before submitting"". Could anyone explain it for me?",1065,2021-12-21T11:53:21Z,0
132,drager,"@d3lm New version released: https://crates.io/crates/wasm-pack/0.10.2 https://www.npmjs.com/package/wasm-pack/v/0.10.2

Can probably close this now then? ",1087,2021-12-16T20:11:01Z,0
133,d3lm,"I think so yes! Tho I think the error I pointed out above is still present I guess, or at least we should mention it that when you provide extra args that a working directory is required. Or isn't that true? Maybe I was doing something wrong.",1087,2021-12-16T20:21:00Z,0
134,d3lm,Yep this is fixed üí™ Thanks!,1087,2021-12-21T12:08:59Z,0
135,d3lm,"Tho, I think we should update the README, to point out that the cwd is *required* if you pass extra args. WDYT @drager?",1087,2021-12-21T12:09:26Z,0
136,pauldorehill,"Hi,

It would be good to also update the [NPM package](https://github.com/rustwasm/wasm-pack/blob/ae10c23cc14b79ed37a7be222daf5fd851b9cd0d/npm/binary.js#L16) with this pull request by adding something like:

```js
if (type === ""Darwin"" && arch === ""arm64"") {
    return ""x86_64-apple-darwin"";
}
```",1088,2021-12-08T22:24:30Z,0
137,d3lm,"@pauldorehill I think that's not strictly needed, because `wasm-pack` can be installed with `cargo` without issues if this PR was merged. Or maybe I am missing something?",1088,2021-12-09T10:55:51Z,0
138,pauldorehill,"@d3lm the issue is that the package runs a [postinstall](https://github.com/rustwasm/wasm-pack/blob/ae10c23cc14b79ed37a7be222daf5fd851b9cd0d/npm/package.json#L7) script which throws and means none of your other node packages get installed. It's easy enough to just remove it from any of your own packages and just call your local cargo installation, but the problem arises if any of your other node packages take it as a dependancy. 

You can solve it by using `npm install --ignore-scripts`, but I think it would be better to fix it üòÑ ",1088,2021-12-09T21:03:32Z,0
139,d3lm,"Oh gotcha. So if it got installed via a package manager you mean? Yep sure, I can change that too üëç ",1088,2021-12-10T07:52:54Z,0
140,d3lm,@drager Do you want me to address this in another PR or include it in this PR?,1088,2021-12-10T14:06:54Z,0
141,drager,"> @drager Do you want me to address this in another PR or include it in this PR?

Include it in this PR if possible",1088,2021-12-11T14:00:39Z,0
142,d3lm,"Ok, I have updated the PR and added support for arm64 when using npm too.",1088,2021-12-14T07:56:45Z,0
143,vitvakatu,"Hi, @drager, could you make a new release of `wasm-pack` after this PR is merged? It blocks myself and my team, and I'd love to see this fix.",1088,2021-12-15T14:03:48Z,0
144,drager,"> Hi, @drager, could you make a new release of `wasm-pack` after this PR is merged? It blocks myself and my team, and I'd love to see this fix.

Absolutely! I will try to get this merged tomorrow.",1088,2021-12-15T20:13:55Z,0
145,d3lm,Yay! Thanks for merging ü•≥ ,1088,2021-12-16T19:19:38Z,0
146,d3lm,@drager Are you going to publish a new version today too?,1088,2021-12-16T19:31:33Z,0
147,drager,"> @drager Are you going to publish a new version today too?

On it. See https://github.com/rustwasm/wasm-pack/pull/1095",1088,2021-12-16T19:32:36Z,0
148,d3lm,Can confirm that it works now üôå Thanks for getting out a new release <3,1088,2021-12-16T21:17:39Z,0
149,Sotatek-NguyenNguyen4,"I'm using mac m1 and I updated version 0.10.2 but this issue is not fixed. It's still ""Error: no prebuilt wasm-opt binaries are available for this platform: Unrecognized target!"". I have no ideal about this problem. Could anyone help me, please?
 ",1088,2021-12-21T07:11:29Z,0
150,vitvakatu,@Sotatek-NguyenNguyen4 are you sure you have an updated version of the wasm-pack? What's the output of `wasm-pack --version`? It certainly works for me.,1088,2021-12-21T09:13:15Z,0
151,Sotatek-NguyenNguyen4,"@vitvakatu Yes, it's exactly version 0.10.2. I don't understand why it doesn't work for me. Have I miss any step by step?
<img width=""1073"" alt=""Screenshot at Dec 21 18-25-01"" src=""https://user-images.githubusercontent.com/93501310/146922450-2ccba639-e319-4d5e-a258-488395c0c32e.png"">
",1088,2021-12-21T11:25:55Z,0
152,d3lm,It's certainly fixed for me too. Did you install `wasm-pack` via `cargo` -> `cargo install wasm-pack`?,1088,2021-12-21T12:10:25Z,0
153,vitvakatu,"@Sotatek-NguyenNguyen4 I think something is not right with your installation, perhaps two different versions of `wasm-pack` are available in the system. Your code seems to call `/usr/local/cargo/bin/wasm-pack`, while `cargo` usually uses `$HOME/.cargo/bin` directory for binaries. 

I recommend avoiding using system package managers (`homebrew` in your case) and using `rustup` from https://rustup.rs to install and manage the Rust compiler and other tools.",1088,2021-12-21T13:06:37Z,0
154,tmpfs,Not sure if it is relevant but switching from `slim` to `rust:1.57-buster` got me past an issue compiling `openssl-sys` in docker.,1029,2021-12-17T07:11:38Z,0
155,EthanZeigler,i'm running into this same issue now. It does seem to be right in that pkg-config is missing. The question is why and how to fix it.,1029,2021-12-21T18:22:21Z,0
156,tmpfs,"@EthanZeigler, not sure if it helps but here is a Dockerfile that works for me, after the `openssl` issue I also needed to install `clang` for some dependencies, you may be able to skip that part:

https://github.com/LavaMoat/ecdsa-wasm/blob/main/Dockerfile",1029,2021-12-22T00:47:57Z,0
157,mikefarmer01,"Your question is not related to wasm-pack.
You should check wasm_bindgen documentation and source.
",1085,2021-12-03T15:58:55Z,0
158,bes,"Safari 14.1 added support for weak refs. Safari 14.1 was released April 26, 2021.

This feature would be very appreciated üëç 

Edit: Supported on iOS Safari from 14.5
",930,2021-12-22T11:14:54Z,0
159,shrinktofit,Also happened to me.,921,2020-11-13T14:33:16Z,0
160,codepunkt,"Same here, this time in WSL2 Ubuntu `20.04`. Running with `--dev` works, without it, just running `wasm-pack --verbose build --target nodejs` logs:

```
[INFO]: Checking for the Wasm target...
[INFO]: Compiling to Wasm...
    Finished release [optimized] target(s) in 0.02s
```

then hangs indefinitely without exiting and doesn't generate a `package.json` file.",921,2020-12-20T16:03:56Z,0
161,ashleygwilliams,"i think this might be due to wasm-opt, gonna tag as a wasm-opt bug, i'm working on a PR that makes wasm-opt opt-in by default. can you try to add this to your `Cargo.toml` and see if it fixes your issues?

```
# `wasm-opt` is on by default in for the release profile, but it can be
# disabled by setting it to `false`
[package.metadata.wasm-pack.profile.release]
wasm-opt = false
```",921,2020-12-21T17:24:45Z,0
162,patricksuo,"@ashleygwilliams 
yes, it fixes my issue.",921,2020-12-25T14:43:35Z,0
163,codepunkt,"comment was a leftover from my other issue. disabling wasm-opt also helps here.

thanks @ashleygwilliams",921,2020-12-26T22:53:11Z,0
164,d0u9,Same problem. Hasn't it been fixed? ,921,2021-12-22T15:39:16Z,0
165,tmcguire,"This is causing our GitHub Actions CI to fail on Windows with the following:

```
/c/Rust/.cargo/bin/wasm-pack: cannot execute binary file: Exec format error
```

Just putting it here in case someone searches for that error message.

Downgrading wasm-pack to 0.10.1 fixed our CI problem.",1097,2021-12-20T14:43:01Z,0
166,nickbabcock,"Current workaround to downgrade to 0.10.1 (OP has been updated to include this):

```diff
-curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh 
+npm install -g wasm-pack@0.10.1
```

As for the root cause, maybe there is a bug in 7zip? I see it is used to [create the tarball](https://github.com/rustwasm/wasm-pack/runs/4552304830?check_suite_focus=true#step:13:2), and verified reported size matches download size. 7zip can extract the generated tarball, but it prints a warning, so if 0.10.2 is necessary, one can manually download the windows tarball and extract with 7zip while ignoring warnings.
",1097,2021-12-23T14:24:15Z,0
167,dragonware-com,"‚ùØ RUST_LOG=info wasm-pack build

[INFO]: ‚¨áÔ∏è  Installing wasm-bindgen...
 INFO 2021-12-26T22:02:36Z: wasm_pack::command::build: Installing wasm-bindgen-cli was successful.
 INFO 2021-12-26T22:02:36Z: wasm_pack::command::build: Building the wasm bindings...
 INFO 2021-12-26T22:02:36Z: wasm_pack::child: Running ""/Users/welson/Library/Caches/.wasm-pack/wasm-bindgen-e2403975ebca0635/wasm-bindgen"" ""--version""
Error: Bad CPU type in executable (os error 86)

So looks like installed wasm-bindgen is not for M1 ?
",1098,2021-12-26T22:06:01Z,0
168,dragonware-com,"Workaround: (manually install wasm-bindgen)

1. cargo install wasm-bindgen-cli
2. Disable wasm-opt: Add the following to Cargo.toml
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

‚ùØ wasm-pack build
[INFO]: üéØ  Checking for the Wasm target...
[INFO]: üåÄ  Compiling to Wasm...
warning: function is never used: `set_panic_hook`
 --> src/utils.rs:1:8
  |
1 | pub fn set_panic_hook() {
  |        ^^^^^^^^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: `wasm-game-of-life` (lib) generated 1 warning
    Finished release [optimized] target(s) in 0.01s
[INFO]: Optional fields missing from Cargo.toml: 'description', 'repository', and 'license'. These are not necessary, but recommended
[INFO]: ‚ú®   Done in 0.17s
[INFO]: üì¶   Your wasm pkg is ready to publish at /Users/welson/git/wasm-game-of-life/pkg.",1098,2021-12-26T23:16:33Z,0
169,dragonware-com,"To enable wasm-opt, install from source: https://github.com/WebAssembly/binaryen

copy build/lib and build/bin/wasm-opt to ~/.cargo

OR

brew install binaryyen",1098,2021-12-26T23:30:18Z,0
170,kud1ing,"Hm, this is strange even `cargo build --target wasm32-unknown-unknown` gives the error.",1103,2022-01-11T13:15:00Z,0
171,kud1ing,"Ah, sorry. There is still an outdated nightly configured for the project.",1103,2022-01-11T13:17:39Z,0
172,mattcollier,"@serprex Thank you for putting this together. It appears that a patch is also required to `wasm-opt`?

I've been successfully building my project using:
```
cargo build --target wasm32-unknown-unknown
wasm-bindgen ./target/wasm32-unknown-unknown/release/wasm_test.wasm --out-dir pkg --target web --reference-types
```

But when I attempt to build with your fork I get:
```
matt@matt-X570-AORUS-ELITE:~/rust/wasm_test$ ~/rust/wasm-pack/target/debug/wasm-pack build --target web --reference-types
[INFO]: Checking for the Wasm target...
[INFO]: Compiling to Wasm...
    Finished release [optimized] target(s) in 0.01s
:-) [WARN]: origin crate has no README
[INFO]: Installing wasm-bindgen...
[INFO]: Optimizing wasm binaries with `wasm-opt`...
[parse exception: Only 1 table definition allowed in MVP (at 0:467)]
Fatal: error in parsing input
Error: failed to execute `wasm-opt`: exited with exit code: 1
  full command: ""/home/matt/.cache/.wasm-pack/wasm-opt-4d7a65327e9363b7/wasm-opt"" ""/home/matt/rust/wasm_test/pkg/wasm_test_bg.wasm"" ""-o"" ""/home/matt/rust/wasm_test/pkg/wasm_test_bg.wasm-opt.wasm"" ""-O""
To disable `wasm-opt`, add `wasm-opt = false` to your package metadata in your `Cargo.toml`.
```",937,2020-11-29T02:30:02Z,0
173,serprex,"Yes, I've disabled wasm-opt in my project because it raises errors about mutable global state not being allowed. I added reference-types since that exists in wasm bindgen, but am only actually using `--weak-refs`",937,2020-11-29T02:44:02Z,0
174,lights0123,@serprex https://stackoverflow.com/a/64507864,937,2020-11-29T02:47:23Z,0
175,felipellrocha,Any updates on this. This could be really useful.,937,2022-01-11T16:40:08Z,0
176,jmole,"+1, I've been doing this by hand and would love a build system that does it automatically.",1074,2021-10-25T06:36:10Z,0
177,SabrinaJewson,See also #831. I posted a workaround there that works with Webpack.,1074,2021-10-26T20:45:26Z,0
178,sassman,so you proposing essentially `--target inline` and base64 encoded inline wasm loading?,1074,2021-11-17T01:27:06Z,0
179,jmole,"@sassman that's the gist of it, at least from my perspective. It offers a nice ""one-file"" solution to incorporate wasm into a webpage. ",1074,2021-11-19T19:46:46Z,0
180,expertfox,I've been searching something like this for days. Has anyone done this with binding any canvas functions? ,1074,2022-01-13T08:40:50Z,0
181,fuho,"@weihualiu Hi, have you ever resolved this?",1045,2021-11-26T16:01:25Z,0
182,SebastienGllmt,"This repo is for Rust->WASM
Perhaps you meant to file this for wasm-bindgen which is WASM->JS

https://github.com/rustwasm/wasm-bindgen/issues/2706",1045,2022-01-13T16:24:24Z,0
183,Kelerchian,"@ashleygwilliams Passing through and dropping a possible clue

`env` is added in
https://github.com/rustwasm/wasm-bindgen/blame/master/crates/threads-xform/src/lib.rs#L236

printed in
https://github.com/rustwasm/wasm-bindgen/blame/master/crates/cli-support/src/lib.rs#L726

`require('env')` will actually refer to this 8 years old module https://www.npmjs.com/package/env which I believe is not the intention

Should env be process.env?
If so `JsGenerated.generate_node_wasm_import` should need a more flexible imports definition, where other modules should be able to `imports.add(""process.env"")` instead of `imports.add(""env"")`",743,2020-02-06T18:02:53Z,0
184,d3lm,I am running into the same issue. Cannot run my binary on node because of `require('env')`.,743,2020-05-12T21:08:33Z,0
185,cedeber,"Don't know if it helps, but happens only on release. (with target web, so I should be able to run it on the browser as generated - no npm install)",743,2020-06-06T16:37:14Z,0
186,d3lm,"@cedeber Yea, this is related to the `nodejs` target. When compiling to `web` everything works as expected.",743,2020-06-14T17:18:13Z,0
187,cedeber,"I use the `web` target, and it's not working as you can see here: https://github.com/cedeber/fluss",743,2020-06-17T06:10:57Z,0
188,cedeber,"Looks like the culpable is, or one of the optimizations in Cargo.toml (I used `lto` and `opt-level`), or `wasm-opt` I ran after `wasm-pack`. I didn't check which one exactly yet.",743,2020-06-18T06:30:34Z,0
189,d3lm,"Hm interesting. It should not be caused by the opt-level nor the lto, cause I am also compiling for `web` and for the release profile I use
```
[profile.release]
lto = true
opt-level = ""z""
```
I see [here](https://github.com/cedeber/fluss/blob/master/public/index.html#L13) you are simply calling `init`, shouldn't you pass in a string so that the wasm is internally fetched via `instantiateStreaming`? At least that's what I am doing.",743,2020-06-18T21:47:54Z,0
190,cedeber,"I have 
```
lto = true
opt-level = ""s""
```
so `s` instead of `z` for `opt-level`

I tried:
- none: works ‚úÖ
- `opt-level=""s""` alone: works ‚úÖ
- `lto = true` alone: fails ‚ùå",743,2020-06-19T15:34:06Z,0
191,tindron,If I'm using rustc 1.44.1 I have to remove `lto = true` to produce a working wasm.  With rustc 1.45.0-beta.3 I can leave `lto = true` and I get a wasm without this error.,743,2020-07-09T16:56:13Z,0
192,d3lm,Not sure why but I am using nightly and lto works perfectly fine for me.,743,2020-07-10T11:16:49Z,0
193,jakearchibald,This problem went away for me by updating to Rust 1.46,743,2020-09-21T15:58:18Z,0
194,d3lm,"@jakearchibald Do you know why it's fixed? Cause it still `require`'s `env` and that package does not exist, cause to me this still seems to be an issue with the glue code generated by wasm-bindgen for the node target.",743,2020-09-23T12:48:45Z,0
195,jakearchibald,"No idea, sorry üò¢ ",743,2020-09-23T15:08:07Z,0
196,Bajix,Any new insights to this? Running into the same issue..,743,2020-10-05T23:14:05Z,0
197,arik-so,"Same here! Also, do we know what exactly within Rust code triggers whether `require('env')` gets added to the Javascript output?",743,2020-10-06T18:48:19Z,0
198,Bajix,What're the odds of this being fixed in a timely fashion? My options are this being fixed this week or rewriting in JS...,743,2020-10-08T02:19:46Z,0
199,d3lm,I personally think this is a bug with wasm-bindgen that generates the `require('env')` in the binding.,743,2020-10-08T11:53:56Z,0
200,Bajix,Perhaps specific versions fo wasm-bindgen don't have this issue and could be used as a stop gap measure?,743,2020-10-08T19:24:00Z,0
201,rllola,I have the same issue. I am using rust 1.46. It just appeared and wasn't there before.,743,2021-01-05T15:27:25Z,0
202,str4d,"I'm encountering this problem (currently observable in [this commit](https://github.com/str4d/wage/pull/20/commits/515f9acf20b7cd6b02c86eadf78e70c4a586a539)) in the WASM file itself:
```
This dependency was not found:

* env in ./node_modules/wage/wage_bg.wasm
```
I do not have `lto` enabled, and I get this problem with `opt-level`s of `s`, `z`, and commented out.
```
$ rustc --version
rustc 1.50.0 (cb75ad5db 2021-02-10)
$ wasm-pack --version
wasm-pack 0.9.1
```",743,2021-03-14T09:52:57Z,0
203,str4d,https://github.com/rustwasm/wasm-bindgen/issues/2160 is a promising-looking thread.,743,2021-03-14T09:58:21Z,0
204,str4d,"In my case, https://github.com/Amanieu/parking_lot/issues/269 was the root cause; an errant `cargo update` bumped my `Cargo.lock` to a version of `parking_lot_core` that triggers the problem. The workaround for me was to manually pin:
```
parking_lot_core = ""=0.8.0""
```",743,2021-03-14T10:14:44Z,0
205,rishflab,"We were having this issue when trying to build [rust-secp256k1]( https://github.com/rust-bitcoin/rust-secp256k1) on MacOS (we did not experience this issue on ubuntu).

We were able to work around it by installing llvm and using `clang` from the new install instead of the default provided by MacOS and setting the env variables

```
brew install llvm
```

```
CC=/usr/local/opt/llvm/bin/clang
AR=/usr/local/opt/llvm/bin/llvm-ar
```

before running

```
wasm-pack build
wasm-pack test --node
```

",743,2021-07-14T04:54:34Z,0
206,vovacodes,"Still reproducible on MacOS, Rust 1.56, `parking_lot_core = ""0.8.5""` and the following cargo profile.
```toml
opt-level = ""z""
lto = true
``` 

Fixed following @str4d 's [advice](https://github.com/rustwasm/wasm-pack/issues/743#issuecomment-798881356), thanks!",743,2021-11-02T12:15:26Z,0
207,EdgeKing810,"FYI, this problem still exists. Opened up a new issue to get more attention and with more details.
@PSeitz have you been able to find a solution please?

#1100",743,2021-12-30T17:28:26Z,0
208,d3lm,"For those using `parking_lot` you should update to the latest version 0.11.2. The timer issue, which in some cases caused the missing `env`, has been addressed.",743,2021-12-30T23:07:07Z,0
209,MatthewHerbst,"I'm getting a similar issue when targeting `web`. Specifically, the generated `.js` file has the line `import * as __wbg_star0 from 'env';` at the top, and then in the `init` function does `imports['env'] = __wbg_star0;`. When trying to load the script on an HTML page I get the error `Uncaught TypeError: Failed to resolve module specifier ""env"". Relative references must start with either ""/"", ""./"", or ""../"".`

Build command: `wasm-pack build --target web --release`

I have all optimizations and such turned off. I've tried enabling them in different combinations based on advice in this and other threads but nothing has worked so far.
```
[package.metadata.wasm-pack.profile.release]
# wasm-opt = true

[lib]
crate-type = [""cdylib""]

[profile.release]
# lto = true
# opt-level = ""s""
# opt-level = ""z""
# panic = ""abort""
```

```sh
$ rustup show
...
active toolchain
----------------

nightly-x86_64-apple-darwin (default)
rustc 1.60.0-nightly (89b9f7b28 2022-01-10)
```

`parking_lot` is not in our dependency tree at all.
",743,2022-01-13T22:56:40Z,0
210,EdgeKing810,"Update: I tried copying the exact same content of the `Cargo.toml` file in another project with every other file EXCLUDING those in the `src/` file in another project and building. This works flawlessly with no weird `require('env')` in the generate js file. I'm still investigating what in my code is causing this line to be added, still blurry but surely progressing.",1100,2021-12-31T06:11:16Z,0
211,EdgeKing810,"Okay, found where this originates. It was really painful to troubleshoot and find this. Turns out it comes from the `bcrypt` package. It has a hash function used to verify passwords. Commenting the following line effectively solved my problem:

```rust
 user.password = hash(password.trim(), DEFAULT_COST).unwrap().to_string();
```

I'm trying to patch this myself, and eventually use another solution if I am not able to get this working. Will update soon.",1100,2021-12-31T08:06:10Z,0
212,EdgeKing810,"Update: Tried replacing `bcrypt` with `argonautica` and `rust-argon2`. The latter works and compiles but I get the same exact error that I did initially. For the former, well, it doesn't even compile to wasm and I didn't dig deeper than that, I just assumed it doesn't support building to wasm and abandoned it.

Just check out the implementation that I did in my 2 latest commits if that interests you.
https://github.com/EdgeKing810/kinesis-db/commits/master

* https://github.com/bcmyers/argonautica (17b7937a02b88198f3778de0bac17b0e32fd22aa)
* https://github.com/sru-systems/rust-argon2 (52511987d61d40723bafc3141ae86ed67da3ea99)",1100,2021-12-31T11:45:24Z,0
213,simlay,Hey so I had this issue with this (was ~8 months ago) but the issue was around `parking_lot` or a dependency that used `parking_lot`. https://github.com/Amanieu/parking_lot/issues/269 might be relevant or https://github.com/rustwasm/wasm-bindgen/issues/2215.,1100,2022-01-03T03:08:26Z,0
214,EdgeKing810,"Hey @simlay, thanks for the info but I really don't believe I'm currently facing this issue because of the `parking_lot` crate since there is absolutely no mention of it in my `Cargo.lock` file. If it was coming from this crate, it should've been a dependency technically and be listed in that file ://",1100,2022-01-03T03:37:01Z,0
215,EdgeKing810,"Update: Got an idea upon waking up to use the wasm bridge to call the hashing and verifying function for storing passwords from JS instead. It was either that or implementing my own hashing algorithm (aka bad idea). So I did that, completely removed the `rust-argon2` crate and updated functions calls to call the following functions from Rust instead in the following fashion:

```rust
#[wasm_bindgen]
extern ""C"" {
    // #[wasm_bindgen(method, js_name = hash)]
    fn hash(s: &str, salt: &str) -> String;
    // #[wasm_bindgen(method, js_name = verify)]
    fn verify(s: &str, hash: &str) -> usize;
}
```

After compiling the code down to wasm, I found that I still had the initial error and I am sure that it is linked to the functions related to hash/verify passwords itself since upon removing calls to parts of the code doing this, I ceased to have initial issue with the `'env'` dependency. Further on, calling Rust functions from the NodeJS code with the wasm bridge caused even more issues that I couldn't fix. A simple [Rust] function with the goal of reading a file then outputting its contents didn't return anything in JS. After a while of fighting against this, I just realized that it just wasn't worth it using wasm. Here's one of the common errors I got while calling Rust functions from JS.

```bash
wasm://wasm/002f3a3a:1


RuntimeError: unreachable
    at wasm://wasm/002f3a3a:wasm-function[300]:0x49c84
    at wasm://wasm/002f3a3a:wasm-function[776]:0x5b4bd
    at wasm://wasm/002f3a3a:wasm-function[887]:0x5d54d
    at wasm://wasm/002f3a3a:wasm-function[509]:0x541ce
    at wasm://wasm/002f3a3a:wasm-function[904]:0x5d832
    at wasm://wasm/002f3a3a:wasm-function[91]:0x2fc0a
    at wasm://wasm/002f3a3a:wasm-function[234]:0x41e99
    at wasm://wasm/002f3a3a:wasm-function[302]:0x49ff6
    at module.exports.save_users (/home/edgeking810/Documents/Rust/kinesis-db/pkg/kinesis_db.js:417:10)
    at file:///home/edgeking810/Documents/Rust/kinesis-db/api/index.js:41:18

Node.js v17.2.0
```

In conclusion, I find Rust to be already powerful enough to do what I want it to do and I think I've got the time to learn and build the API in Rust itself. I was initially against this since I have more knowledge in building APIs in JS than Rust but at this point, I can't trust the wasm bridge enough to have the peace of mind of running a prod API using this technology. It is going to be fun learning about Rocket nonetheless and I hope to have a really robust API by the end. If anyone wants to try out and troubleshoot what I did, I made a branch just about it: https://github.com/EdgeKing810/kinesis-db/tree/wasm. It only needs running the `build-wasm.sh` script and going in the `api/` directory and doing a `node index.js`, The code that have been commented in order to prevent the `'env'` issue from popping up are just 2 blocks inside of `src/bindings/bindings_user.rs`.",1100,2022-01-03T12:22:03Z,0
216,MatthewHerbst,@EdgeKing810 do you have any tips on how to identify code that might be causing `env` to be imported? I'm having a similar issue but `bcrypt` is not in my dependency tree at all. Thanks!,1100,2022-01-14T00:30:19Z,0
217,EdgeKing810,"> @EdgeKing810 do you have any tips on how to identify code that might be causing `env` to be imported? I'm having a similar issue but `bcrypt` is not in my dependency tree at all. Thanks!

@MatthewHerbst Unfortunately, you just have to comment out parts of the code block by block and running a `wasm-pack build` until that `require('env')` line thingy is not present anymore. When you identify the problem, you can find an alternative. ",1100,2022-01-14T05:44:14Z,0
218,jiyinyiyong,"some updated related on V8: https://v8.dev/blog/v8-release-96

> The Reference Types proposal, shipped in V8 v9.6, allows using external references from JavaScript opaquely in WebAssembly modules. The externref (formerly known as anyref) data type provides a secure way of holding a reference to a JavaScript object and is fully integrated with V8's garbage collector.
>
> Few toolchains that already have optional support for reference types are wasm-bindgen for Rust and AssemblyScript.
",1047,2021-11-09T16:12:09Z,0
219,hcgaron,"Any update on this? I landed here exactly for the same reason, would love to use the reference types through a CLI arg or api",1047,2022-01-14T14:44:35Z,0
220,protheory8,"Well it seems like the feature is implemented by #937, but it isn't merged yet.",1047,2022-01-15T12:20:52Z,0
221,ashleygwilliams,"@greyltc are you still experiencing this issue? if so, please reopen this issue with some more information, i'm not able to reproduce with the info provided in this issue.",931,2020-12-21T17:17:45Z,0
222,AzamkhonKh,"Hello, I am new to rust. now I am trying to build the sample from the yew framework on their page 
rust-std-1.47.0-wasm32-unknown-unknown, I moved it to /usr/lib/rustlib
https://yew.rs/docs/en/getting-started/build-a-sample-app

`

> azamkhon@HPAzam:~/projects/yew-app$ /home/azamkhon/.cargo/bin/wasm-pack build --target web --out-name wasm --out-dir ./static
> [INFO]: Checking for the Wasm target...
> [INFO]: Compiling to Wasm...
>    Compiling cfg-if v1.0.0
>    Compiling proc-macro-nested v0.1.7
>    Compiling memchr v2.4.0
>    Compiling futures-core v0.3.14
>    Compiling futures-sink v0.3.14
>    Compiling serde v1.0.125
>    Compiling slab v0.4.3
>    Compiling autocfg v1.0.1
> error[E0514]: found crate `core` compiled by an incompatible version of rustc
>   |
>   = help: please recompile that crate using this compiler (rustc 1.47.0)
>   = note: the following crate versions were found:
>           crate `core` compiled by rustc 1.47.0 (18bf6b4f0 2020-10-07): /usr/lib/rustlib/wasm32-unknown-unknown/lib/libcore-97fd83a794191c6c.rlib
> 
> error: aborting due to previous error
> 
> error: could not compile `cfg-if`.
> 
> To learn more, run the command again with --verbose.
> warning: build failed, waiting for other jobs to finish...
> error[E0514]: found crate `std` compiled by an incompatible version of rustc
>   |
>   = help: please recompile that crate using this compiler (rustc 1.47.0)
>   = note: the following crate versions were found:
>           crate `std` compiled by rustc 1.47.0 (18bf6b4f0 2020-10-07): /usr/lib/rustlib/wasm32-unknown-unknown/lib/libstd-21a3b9d7550b557e.rlib
> 
> error[E0514]: found crate `std` compiled by an incompatible version of rustc
>   |
>   = help: please recompile that crate using this compiler (rustc 1.47.0)
>   = note: the following crate versions were found:
>           crate `std` compiled by rustc 1.47.0 (18bf6b4f0 2020-10-07): /usr/lib/rustlib/wasm32-unknown-unknown/lib/libstd-21a3b9d7550b557e.rlib
> 
> error: aborting due to previous error
> 
> error: aborting due to previous error
> 
> error[E0514]: found crate `std` compiled by an incompatible version of rustc
>   |
>   = help: please recompile that crate using this compiler (rustc 1.47.0)
>   = note: the following crate versions were found:
>           crate `std` compiled by rustc 1.47.0 (18bf6b4f0 2020-10-07): /usr/lib/rustlib/wasm32-unknown-unknown/lib/libstd-21a3b9d7550b557e.rlib
> 
> error: aborting due to previous error
> 
> error: build failed
> Error: Compiling your crate to WebAssembly failed
> Caused by: failed to execute `cargo build`: exited with exit code: 101
>   full command: ""cargo"" ""build"" ""--lib"" ""--release"" ""--target"" ""wasm32-unknown-unknown""
> azamkhon@HPAzam:~/projects/yew-app$ `

i am using ubuntu 20.04 
rustc -version : 1.47.0
cargo version : 1.47.0

if need other information just tell me",931,2021-05-09T19:44:18Z,0
223,Feleys,"Hi, 
in my case, I installed rust in brew and rustup.
`brew uninstall rust` fix this problem",931,2022-01-16T07:11:47Z,0
224,namse,"Actually, there is chromedriver binary. i guess the file or directory in message(`No such file or directory`) is not chrome driver.
![image](https://user-images.githubusercontent.com/3580430/149671718-f99bd875-6a94-4459-93a2-5a609ef20949.png)
",1105,2022-01-16T17:52:26Z,0
225,namse,"I found very related stakoverflow question https://stackoverflow.com/questions/55254920/chromedriver-not-working-with-alpine-base-docker-image, 
After install chromium-chromedriver, it works. I had to search in google with error first. sorry ^^;;",1105,2022-01-16T17:59:25Z,0
226,ashleygwilliams,hello! i'm not sure what you are trying to achieve here. i'm going to close this issue but if you can add more info i can try to help you debug.,911,2020-12-21T17:16:04Z,0
227,kabouzeid,"I have the same problem. Just want to use the code in my vite app.

`import { my_rust_func } from ""../pkg/my_rust_lib.js"";`

I'm also getting
`Uncaught TypeError: malloc is not a function`",911,2021-03-26T12:25:12Z,0
228,gliheng,You have to use wasm-pack build --target web,911,2021-09-13T06:50:20Z,0
229,Septias,"The approach used in `https://rustwasm.github.io/docs/book/introduction.html` is that you add your `pkg` as a dependency in your package.json file:
```json 
{ 
  },
  ""dependencies"": {
    ""rust_lib"": ""../backend/pkg""
  },
}
```
But that doesn't work for me with Vite because `TypeError: wasm.greet is not a function`
The approach that works is as @gliheng mentioned to export for web and then use it as it says on the Vite website:
https://vitejs.dev/guide/features.html#webassembly
```js
import init, {greet} from './example.wasm'

init().then((_exports) => {
  greet()
})
```
",911,2021-09-25T11:50:56Z,0
230,Niedzwiedzw,@gliheng  and what then?,911,2022-01-28T01:29:58Z,0
231,fosskers,See also https://github.com/rustwasm/wasm-bindgen/issues/2700.,1070,2021-10-20T17:31:41Z,0
232,fosskers,We are using this downstream and it's working well.,1070,2021-10-22T21:30:08Z,0
233,fosskers,"Hi there, any thoughts on this?",1070,2021-12-10T16:29:19Z,0
234,gthb,LGTM (as a random person on the internet with no approval/commit rights),1070,2021-12-10T18:48:49Z,0
235,fosskers,"Hi there, it's been another month. Any thoughts?",1070,2022-01-20T02:57:48Z,0
236,RonaldColyar,"LGTM
",1070,2022-01-28T09:53:07Z,0
237,Niedzwiedzw,https://github.com/rustwasm/wasm-bindgen/issues/2779 cross-posting  the issue partially solved but still in progress on wasm-bindgen repo,1106,2022-01-29T11:07:44Z,0

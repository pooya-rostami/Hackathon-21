,author,body,number,created_at,empty
0,thiolliere,"yes, but we have to careful that people don't miss this change, and execute some system stuff 2 times.
Maybe for a better transition we should do: rename `AllPalletsWithSystem to AllPallet` in another release or find another name which doesn't conflict, like `AllPalletsTuple` or `PalletsTuple` while deprecating `AllPallets`",9105,2021-06-14T11:51:52Z,0
1,KiChjang,I like to be more pedantic and have `AllPalletsWithSystem` and `AllPalletsWithoutSystem`. That way there's no way people can mistake one for the other.,9105,2021-06-14T11:55:57Z,0
2,TomaszWaszczyk,"The issue relies only on renaming  types `AllPallets` and `AllPalletsWithSystem` or also some changes in logic? What version of changes should be implemented, version of @shawntabrizi or @KiChjang ?

I look for practical experience in Rust and I am willing to implement simple tasks.",9105,2021-09-27T22:12:59Z,0
3,thiolliere,"IMO we should do KiChjang suggestion, otherwise people will very likely miss the breaking change.",9105,2021-09-28T10:39:17Z,0
4,thiolliere,"Or a new name with deprecated old type alias
```rust
type AllPalletsTuple = ..
type AllPalletsTypleWithoutSystem = ..
#[deprecated(..)]
type AllPallets = AllPalletsTupleWithoutSystem
#[deprecated(..)]
type AllPalletsWithSystem = AllPalletsTuple
```",9105,2021-09-28T10:42:34Z,0
5,thiolliere,maybe this should be into substrate 2.0,6280,2020-08-10T14:57:44Z,0
6,thiolliere,"maybe one solution is to fix it and allow to keep old behavior with an attribute in construct_runtime:
```rust
construct_runtime!(
#[set_all_module_reversed_order]
	pub enum Runtime where
		Block = Block,
		NodeBlock = node_primitives::Block,
		UncheckedExtrinsic = UncheckedExtrinsic
	{
...
})
```
",6280,2020-12-03T14:37:03Z,0
7,gavofyork,I believe two of the consensus pallets' `on_initialize` is sensitive to their ordering.,6280,2021-05-17T10:35:01Z,0
8,apopiak,"IMO we will want to have the same order for all hooks, including `on_runtime_upgrade`. (And some runtime upgrades are sensitive to the order.)
Maybe we will want `on_finalize` in reverse order.",6280,2021-05-17T11:04:10Z,0
9,thiolliere,"maybe we can use some on_finalize_requirement and on_initialize_requirement in hooks, those would return the required pallet to be executed before.

```rust
enum HookRequirement {
  PalletIndex(u32),
  Misc([u8; 8]),
}

impl Hooks for Pallet {
  fn on_finalize_requirement() -> Vec<HookRequirement> { ... }
}
```",6280,2021-05-18T09:35:24Z,0
10,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",6280,2021-07-07T17:13:11Z,0
11,thiolliere,issue is still relevant,6280,2021-07-08T08:47:09Z,0
12,thiolliere,"for the polkadot It seems we don't need any changes:
maybe scheduler should be put last instead of 2nd. So that the execution of scheduled call happens after other pallet initialization ?",10043,2021-10-18T15:13:27Z,0
13,shawntabrizi,Does `construct_runtime!` require System is first?,10043,2021-10-30T14:26:00Z,0
14,thiolliere,"> Does `construct_runtime!` require System is first?

no, it is allowed to have it not first",10043,2021-10-30T14:31:01Z,0
15,shawntabrizi,"> > Does `construct_runtime!` require System is first?
> 
> no, it is allowed to have it not first

Then this should also be a note in the PR IMO, that ordering is relevant even more now",10043,2021-10-30T14:33:28Z,0
16,thiolliere,so I added `AllPalletsReversedWithSystemFirst` which allows not to break order at all. (except pre_upgrade/post_upgrade but I think they are minor),10043,2021-10-30T15:00:47Z,0
17,thiolliere,"> The code looks good but abstaining from approving for now since I think we can do a better job at providing an upgrade guide for teams, to do either of
> 
>     1. use `AllPalletsReversedWithSystem`, which would mean they are sticking to their old logic, with no change to `construct_runtime`
> 
>     2. Use the new `AllPalletsWithSystem`, but this would mean that they might need to reorder some stuff in `construct_runtime`.
> 
> 
> I also wonder if we could come up with a test scenario to make sure this order never changes. I can imagine something like a ui test, where a representation of the order of `AllPallets` (in any form) is stored as a file and then checked per runtime.

Yes I added your suggestion to provide an upgrade guide,
Order of execution of hooks is tested in the test in frame-support-test, thus this PR changes them.
As you suggest I added some test for all the type alias to ensure they don't change in https://github.com/paritytech/substrate/pull/10043/commits/2180da699391960358275dfd454de71a0e342159
",10043,2021-11-22T04:23:30Z,0
18,thiolliere,bot merge,10043,2021-11-23T23:07:39Z,0
19,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4181,10043,2021-11-23T23:07:47Z,0
20,thiolliere,bot merge,10043,2021-11-23T23:09:41Z,0
21,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4181,10043,2021-11-23T23:09:49Z,0
22,shawntabrizi,what happened with this one?,10043,2021-11-30T21:20:12Z,0
23,KiChjang,bot merge,10043,2021-11-30T23:21:54Z,0
24,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4181 is not mergeable,10043,2021-11-30T23:22:01Z,0
25,KiChjang,bot merge,10043,2021-12-01T00:58:27Z,0
26,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4181,10043,2021-12-01T00:58:35Z,0
27,KiChjang,bot merge,10043,2021-12-01T00:58:54Z,0
28,bkchr,This annotation isn't used for anything anyway? Can we not just remove it entirely? ,10293,2021-11-17T08:57:02Z,0
29,thiolliere,yes annotation was removed,10293,2021-12-01T05:22:10Z,0
30,thiolliere,bot merge,10398,2021-12-01T05:37:22Z,0
31,tomaka,Relevant comment in smoldot: https://github.com/paritytech/smoldot/blob/7f6c36960c5524a85fb218f039c7c67126a58ddd/src/author/runtime.rs#L720-L726,10392,2021-11-30T09:33:42Z,0
32,bkchr,"As we already had this topic multiple times, the Substrate extrinsic format is already prefixed with the length, aka like a `Vec<u8>`.

If you just use the opaque extrinsic, you can decode this without any problems. Other locations like `apply_extrinsic` also use the same semantic. ",10392,2021-11-30T13:01:09Z,0
33,tomaka,"> the Substrate extrinsic format is already prefixed with the length

No, the Polkadot, Kusama, Westend and Rococo runtimes have an extrinsic format prefixed with their length, but this is a leak in the abstraction layers that isn't guaranteed to be true and relies literally on one line in each runtime.",10392,2021-11-30T13:37:10Z,0
34,bkchr,This is no leak in abstraction layers. We have opaque types for the client and the normal types in the runtime. You just need to know the type that is being used.,10392,2021-11-30T13:41:55Z,0
35,bkchr,"And you are right, that everybody could change this in its Substrate based blockchain, but that is fine because you then need to specify this type.",10392,2021-11-30T13:42:49Z,0
36,tomaka,"Shouldn't we try to remove usage of runtime-specific types in the client, so that the runtimes can properly update without the client needing an update as well?
Right now if we changed `type Extrinsic = ;` to a different type, all non-up-to-date clients would break.",10392,2021-11-30T14:09:44Z,0
37,tomaka,"I just don't understand. We know it's a flaw, we know that it can backfire at the worst possible moment, we know it's easy to fix, but we intentionally don't fix it.",10392,2021-11-30T14:15:55Z,0
38,bkchr,"> Shouldn't we try to remove usage of runtime-specific types in the client, so that the runtimes can properly update without the client needing an update as well? Right now if we changed `type Extrinsic = ;` to a different type, all non-up-to-date clients would break.

The transaction encoding, as the hash type or block number are things that you need to choose before and can not easily change, aka forking or writing complex migrations. 

The transaction format is already chosen in a way that it is prefixed with the length of the tx, aka it is already scale encoded. This is exactly the same discussion as we had multiple times regarding transaction pool, because there we use the same format. If we would change here the return type to a new format, we would need to update the db, `BlockBuilderApi`, `TransactionPoolApi` and everything else that uses the transaction type.",10392,2021-11-30T16:16:13Z,0
39,tomaka,"> This is exactly the same discussion as we had multiple times regarding transaction pool, because there we use the same format

This is not the same discussion.
The return value of `inherent_extrinsics()` is the only single place where a client needs to know how to decode an extrinsic.
Everything else, be it the networking, the transactions pool, JSON-RPC, etc. can be implemented by passing around encoded extrinsics in an opaque way.
But you can't possible parse the value returned by `inherent_extrinsics()` without having to decode extrinsics.

>  If we would change here the return type to a new format, we would need to update the db, BlockBuilderApi, TransactionPoolApi and everything else that uses the transaction type.

No, all I'm saying is that `inherent_extrinsics()` alone should return the encoded extrinsics. Then the client can decode them if it really wants to. Nothing else needs to be changed.
It's purely about being able to understand the value that `inherent_extrinsics()` writes in the memory of the Wasm.
",10392,2021-11-30T16:29:35Z,0
40,bkchr,"What is with https://github.com/paritytech/substrate/blob/master/client/network/src/transactions.rs#L353-L359

Or the block type itself: https://github.com/paritytech/substrate/blob/master/primitives/runtime/src/generic/block.rs#L88-L93",10392,2021-11-30T18:43:39Z,0
41,tomaka,"> What is with https://github.com/paritytech/substrate/blob/master/client/network/src/transactions.rs#L353-L359

The transaction pool's API uses decoded extrinsics, but we could easily refactor it to keep them in their opaque encoded form. Nothing in the client requires knowing what an extrinsic actually is. It's only the runtime that ever interprets extrinsics.",10392,2021-11-30T18:58:02Z,0
42,bkchr,"But these lines in the transaction pool gossipping protocol uses `Vec<Extrinsic>`, aka it needs to know the format of `Extrinsic` to decode this vector.",10392,2021-11-30T19:45:40Z,0
43,bkchr,"> Nothing in the client requires knowing what an extrinsic actually is. It's only the runtime that ever interprets extrinsics.

Yes, that is right. However, if we want to change this we need to refactor quite a lot of code.",10392,2021-11-30T19:47:57Z,0
44,tomaka,"> But these lines in the transaction pool gossipping protocol uses Vec<Extrinsic>, aka it needs to know the format of Extrinsic to decode this vector.

Ah, right. In the past I changed the protocol in order to send transactions one by one (so the length of the vec would always be 1), which is better for the substreams multiplexing we're doing, but this has been changed back at some point (not by me).",10392,2021-12-01T08:18:22Z,0
45,bkchr,Works for me :thinking: ,10393,2021-11-30T20:28:11Z,0
46,xlc,"I think it is related to CPU usage. On lower spec machine, syncing exhausted CPU and causing RPC become unresponsive. Sounds like something cannot be fixed.",10393,2021-12-01T00:15:31Z,0
47,bkchr,"FWIW, I tried this on my laptop with a debug build. But yeah, was probably still not low spec enough :D ",10393,2021-12-01T08:50:36Z,0
48,KiChjang,"Getting this to work with the pallet declarative macros is really tough, I've been trying different methods for a while now and it is looking like that there's no possible solution for this.

The primary problem that I'm facing now is that `decl_event!` contains no information about the `Pallet`/`Module` struct, so it can't implement `SubstratePalletEvent` on it since it lacks the trait bounds and generics on the `Pallet`/`Module`, which will be used in the impl syntax. I am also unable to move the impl into `decl_module!` either, since it doesn't contain any information about the `Event` type.

I have half a mind to simply restrict this feature to pallet proc macros, but then I'll have to figure out a way to feature gate this so that it only works with proc macros, which should be doable but not ideal...",9658,2021-09-09T00:15:29Z,0
49,shawntabrizi,"> I have half a mind to simply restrict this feature to pallet proc macros, but then I'll have to figure out a way to feature gate this so that it only works with proc macros, which should be doable but not ideal...

I think this is sensible... also we must be very close to having no decl macros anymore. Maybe working to get that past the finish line is the way to go.",9658,2021-09-09T01:28:28Z,0
50,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9658,2021-10-09T02:07:14Z,0
51,thiolliere,I don't understand why do we need this after https://github.com/paritytech/substrate/pull/9681 ?,9658,2021-10-18T09:41:16Z,0
52,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9658,2021-11-17T10:17:10Z,0
53,tomusdrw,bot merge,10307,2021-12-01T11:45:27Z,0
54,kianenigma,"also find this a bit over the top. It think the difference between: 

1. `impl pallet::Config for Runtime`
2. `impl pallet::SomeAPI for Runtime`

is pretty clear.

have you actually heard that people make this mistake often? Also if an API is called `Config` then what? ",10381,2021-11-30T12:30:00Z,0
55,gilescope,"I managed to make that mistake. I am pretty sure I won`t be the only one. @bkchr how about if I change the error to only spit out if there are multiple ""Config"" defined for which we would error out anyway? That would let someone do one if they wanted. but someone who got the wrong idea would likely have multiple...",10381,2021-11-30T15:47:37Z,0
56,bkchr,"Here come multiple things into play:

1. Runtime api is not Frame specific, it is Substrate core.
2. No one forces you to name your pallet trait `Config`, before it was for example called `Trait`(really bad naming). However, this name could maybe change again in the future.

Can we not improve the error message when you implement the ""same"" runtime api? ",10381,2021-11-30T16:01:17Z,0
57,bkchr,"This will require a full burn-in on Kusama and polkadot.

Use this here to do the burn-in: https://burnins.parity-chains.parity.io/

Use ""Sync from Scratch (only applies to full nodes)""",10025,2021-10-13T17:14:56Z,0
58,gilescope,"Hmm, the burnin seems to indicate it has slowed down finalisation... have checked the schnorrkel benches and they don't seem to have changed. Will check benchmarks near usage sites.",10025,2021-10-14T16:40:39Z,0
59,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10025,2021-11-17T15:02:21Z,0
60,shawntabrizi,bot merge,10379,2021-11-29T19:34:50Z,0
61,paritytech-processbot[bot]," Error: 
Error: When trying to meet the ""Project Owners"" approval requirements: this pull request does not belong to a project defined in Process.json.

Approval by ""Project Owners"" is only attempted if other means defined in the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge) are not satisfied first.

The following errors **might** have affected the outcome of this attempt:
- 'Batch: Availability and Validity' does not match any projects in polkadot's Process.json
- 'Batch: Codebase Restructure' does not match any projects in polkadot's Process.json

Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are members of substrateteamleads or core-devs.
",10379,2021-11-29T19:35:00Z,0
62,KiChjang,"Well, this is a bit awkward... the cumulus companion CI check is failing, because the cumulus PR requires changes from the polkadot companion PR, but the cumulus companion CI check doesn't use the polkadot companion to compile with the cumulus companion, sooo... wat do?",10379,2021-11-29T22:13:26Z,0
63,Mr-Leshiy,"@shawntabrizi , @KiChjang do I need to do any update here to fix it ? Or as I understood it is related to the another repositories ?",10379,2021-11-30T07:31:14Z,0
64,kianenigma,the cumulus companion check is a bit broken. I think you are good @Mr-Leshiy. ,10379,2021-11-30T07:51:00Z,0
65,bkchr,bot merge,10379,2021-12-01T21:30:17Z,0
66,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/cumulus/pull/810,10379,2021-12-01T21:30:26Z,0
67,bkchr,bot merge,10379,2021-12-01T21:31:01Z,0
68,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4405,10379,2021-12-01T21:31:12Z,0
69,bkchr,bot merge,10379,2021-12-01T21:31:44Z,0
70,kevlu93,I would be interested in helping out! New to the code base though so would need some pointers to get started.,8457,2021-03-25T19:53:21Z,0
71,xlc,This helps but immortal tx with nonce of 0 is still going to be replayable ,8457,2021-03-31T00:40:42Z,0
72,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8457,2021-07-07T19:13:19Z,0
73,Lohann,"Can I take this one? I just faced this issue trying to figure why two transactions in different blocks have the exactly same hash and signature, block explores rely in the tx_hash as unique transaction identifier.

Tx hash: `0x313da69888b43486a5bf717958d02e7228467fa48654c8bd690fe38b56370113`

https://polkascan.io/polkadot/block/7911545
https://polkascan.io/polkadot/block/7854172",8457,2021-12-02T00:39:06Z,0
74,shawntabrizi,"That problem is not the same thing as mentioned in this issue.

A tx hash is literally a hash of the tx input data, and can be the same if the same inputs are used AFAIK.

The unique identifier for a tx is (block number, extrinsic index).",8457,2021-12-02T01:55:36Z,0
75,Lohann,"Correct, they have the same hash because the account reuse the same nonce and call the same extrinsic twice. You can see here that the account `13Z4eAVmUt4we1K623cFgYHMnFSDC4cmuJUrGTuUEbZRuyf3` was reaped and created many times:
https://polkascan.io/polkadot/account/13Z4eAVmUt4we1K623cFgYHMnFSDC4cmuJUrGTuUEbZRuyf3#balance-history

This is very counter intuitive, once in all other blockchain I know the transaction hash is global unique (bitcoin, ethereum, cardano, etc), using `block_number + extrinsic_index` as unique identifier is not very usual and should be better documented. Also I don't think the block explorers are aware about this issue, if you use polkascan for example and click in the transaction, it will display the same block instead show the tx in different blocks.",8457,2021-12-02T02:23:45Z,0
76,Lohann,"In my opinion, is better to disable the `Pallet::<T>::on_killed_account(who.clone())` functionality in the System Pallet until this issue if fixed, then create a migration which deletes all accounts without providers in the future. Because I consider the risk o replay attack worst than the risk of state bloating.

https://github.com/paritytech/substrate/blob/polkadot-v0.9.13/frame/system/src/lib.rs#L1080-L1085

I don't think people are aware that if their account is deleted then re-created, they can suffer replay attacks.",8457,2021-12-02T02:29:14Z,0
77,Lohann,"I noticed that fixing the nonce initialization is not trivial:
- https://github.com/paritytech/substrate/pull/8822
- https://github.com/paritytech/frontier/issues/445

So my suggestion is doing a band-aid solution to prevent replay attacks, maybe something like this:

[frame/system/src/lib.rs#L1080-L1085](https://github.com/paritytech/substrate/blob/polkadot-v0.9.13/frame/system/src/lib.rs#L1080-L1085)
```rust
(1, 0, 0) => {
	// No providers left (and no consumers) and no sufficients. Account dead.

	if account.nonce == 0 {
		Pallet::<T>::on_killed_account(who.clone());
		Ok(DecRefStatus::Reaped)
	} else {
		// Mark the account to be reaped in a future migration
	}
},
```",8457,2021-12-02T02:45:20Z,0
78,shawntabrizi,"> same hash because the account reuse the same nonce and call the same extrinsic twice

This is not accurate. The tx hash does not include the nonce of the user or the account. Any two accounts will generate the same tx hash with the same tx and inputs. It is literally the hash of the tx bytes, not a unique identifier.

> I don't think people are aware that if their account is deleted then re-created, they can suffer replay attacks.

This is a completely documented and known thing with functions already built into polkadot to prevent it.

All extrinsics have a configurable transaction lifetime or mortality. You can learn more about that here: https://wiki.polkadot.network/docs/build-protocol-info#transaction-mortality

Transaction hash is different than a transaction payload + signature, which could look the same if an immortal transaction is generated. But as noted in our documentation and done by all the APIs, this is not recommended to do ever.",8457,2021-12-02T02:47:21Z,0
79,shawntabrizi,"I am not sure what to respond here. It is a part of the protocol, I am sure you and I both don't know every detail of Polkadot, however this is a feature which exists and when used correctly, can prevent tx replays.

Every wallet creator worth their salt in the Polkadot ecosystem should definitely make sure to provide only mortal transactions by default.

The document I provide above talks about both transaction mortality, and also mentions the misconception about transaction hash. I recommend you read the full document, then re-engage into the conversation.",8457,2021-12-02T03:03:47Z,0
80,shawntabrizi,Please add some tests.,10397,2021-11-30T20:29:18Z,0
81,athei,No longer needed because I was able to solve this differently: I am no longer reserving the balance at the sender before sending it to the receiver. I send it as free balance (which is allowed to create an account)  and then reserve it in the receiver account.,10397,2021-12-01T14:16:26Z,0
82,kianenigma,"A very good example + inspiration of how this can be done is implemented by @apopiak here: https://github.com/apopiak/stablecoin/blob/master/storage-adapters/src/priority_queue.rs

(I don't mean the logic of chunking, but rather the way you can create new types that are generic over some arguments that are bounded to `StorageMap` and `StorageValue` etc.)",2619,2020-04-07T15:33:13Z,0
83,apopiak,"@kianenigma Was wondering whether to take a shot at implementing this, but cannot find the Council and Indices implementations. :sweat_smile: 
Any pointers?",2619,2020-04-07T17:14:24Z,0
84,apopiak,"ok, I think I found it, do you mean the voters in elections [here](https://github.com/paritytech/substrate/blob/028a71594f93edc1c105c85f425760943a362f8e/frame/elections/src/lib.rs#L248)?",2619,2020-04-07T17:20:37Z,0
85,marcio-diaz,"> ok, I think I found it, do you mean the voters in elections [here](https://github.com/paritytech/substrate/blob/028a71594f93edc1c105c85f425760943a362f8e/frame/elections/src/lib.rs#L248)?

Yes, I  was just going to paste a link there.",2619,2020-04-07T17:30:00Z,0
86,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",2619,2021-07-07T20:23:34Z,0
87,kianenigma,"This issue is quite old, but I think it is still interesting to keep around. It can be implemented now easier with the new storage types.",2619,2021-07-08T09:06:39Z,0
88,pepyakin,сс @andresilva ,10401,2021-12-01T15:43:47Z,0
89,bkchr,"As the error says, you can not return an empty vector there. What you are decoding there, is clearly not a correct vector with the required values.",10401,2021-12-01T21:09:15Z,0
90,MatthewDarnell,"> As the error says, you can not return an empty vector there. What you are decoding there, is clearly not a correct vector with the required values.

I realize it's not a correct vector. I'm assuming that the correct byte layout of looks like a `Vec<( [u8; 32], u64)>`. I just thought that it's a bug because it self reports as a bug and crashes the node.",10401,2021-12-01T21:21:20Z,0
91,bkchr,"> I just thought that it's a bug because it self reports as a bug and crashes the node

That is because it is a panic/a hard constraint.",10401,2021-12-01T22:38:46Z,0
92,MatthewDarnell,"> > I just thought that it's a bug because it self reports as a bug and crashes the node
> 
> That is because it is a panic/a hard constraint.

So it's expected behavior? That's fine, I will close the issue if so.

Btw, I'm just trying to find any return value from the function that passes. The function signature in the wasm says it returns an `i64` but it seems too small to return a Vector containing this tuple. ",10401,2021-12-02T00:45:08Z,0
93,bkchr,"https://github.com/paritytech/substrate/blob/master/primitives/core/src/lib.rs#L400-L420

All runtime api functions return an `i64`. This `i64` is the pointer + length of the SCALE encoded return type. The function I listed above is the one that creates this return type. This should help you to create the correct value.",10401,2021-12-02T08:49:00Z,0
94,bkchr,"> So it's expected behavior? That's fine, I will close the issue if so.

Yes that is expected. Aka we require that genesis always returns a non-empty vec.",10401,2021-12-02T08:49:33Z,0
95,pepyakin,"In Parity we stick to this ""proof or remove"" policy about panics. That is, the panics should either come with a proof that they will never-ever fire or removed completely (either by type-system or returning a `Result` or w/e).

Correct me if I am wrong, but the proof there is a complete bogus. It, apparently, relies on the `GrandpaApi_grandpa_authorities` to return a non-empty list. The client code cannot rely on this particular behavior, because, well as was proven by the OP's counter-example, nothing stops runtime to return anything. Hence, the proof is wrong and the code needs to be changed.

↑ This said with my pedantic hat on.
↓ That said with my pragmatic hat on.

I understand that fixing this may lead to massive refactorings and won't give any benefit because all sane runtimes do return some values from here. If that's the case, I think we can still leave this issue be until it can be fixed. Say, if a massive refactoring is planned anyway, we can fix this as well. Then perhaps we should add a comment explaining situation and change the comment in a way that it does not pretend that this is a real proof meanwhile.

",10401,2021-12-02T10:57:41Z,0
96,bkchr,"> Correct me if I am wrong, but the proof there is a complete bogus. It, apparently, relies on the `GrandpaApi_grandpa_authorities` to return a non-empty list. The client code cannot rely on this particular behavior, because, well as was proven by the OP's counter-example, nothing stops runtime to return anything. Hence, the proof is wrong and the code needs to be changed.

Without having checked the code, I assume that you could also return an error. The point here being, that you *NEED* to have authorities in genesis, if not it is wrong/a failure or call it whatever you want. We have certain places where we have such panics, where if something is not that way we can only panic because it is just wrong.",10401,2021-12-02T11:49:52Z,0
97,pepyakin,"Yeah, I didn't mean to say that this is a correct condition, just that the panic seems to be inappropriate and a graceful error should be used instead.",10401,2021-12-02T11:57:39Z,0
98,andresilva,"We could turn this into an error, but what we'll end up doing anyway is panic once we see that error. I'd prefer that instead we use some kind of `NonEmptyVec` type for such cases.",10401,2021-12-02T12:18:20Z,0
99,bkchr,"Please use master, this old version doesn't compile anymore because this one `parking_lot` version was removed from crates.io.",10404,2021-12-02T10:33:03Z,0
100,kittywhiskers,Noted. Are there any plans to have an LTS release?,10404,2021-12-02T10:36:10Z,0
101,bkchr,Not at the moment.,10404,2021-12-02T13:22:20Z,0
102,bkchr,Why isn't that implemented in Polkadot itself?,10410,2021-12-02T15:24:04Z,0
103,sandreim,"> Why isn't that implemented in Polkadot itself?

I initially wanted to do it in Polkadot, but I didn't find a way without adding the extension in substrate. However, after discussing with @drahnr I understand that we can reuse the `WasmTracing` interface (`event` API helps our usecase) and just implement the metrics publishing in Polkadot.
That being said, I'll close this PR.

",10410,2021-12-02T15:57:10Z,0
104,sander2,"I looked some more into this. It turns out that the `author_extrinsicUpdate` _always_ is fired with `""result"":""ready""` and `""result"":{""inBlock`, but `""result"":{""finalized""` is fired only sometimes. I ruled out a client-side issue by testing with both SubXt and PolkadotJs, and I verified that the message is not sent by using `tcpdump`.  

Steps to reproduce:
- Build any runtime with instant-seal, with `finalize: true`
- run tcpdump, e.g. `tcpdump -l -i lo -A port 9944 | grep author_extrinsicUpdate`
- dispatch any extrinsic and listen for the result
- observe that `{""jsonrpc"":""2.0"",""method"":""author_extrinsicUpdate"",""params"":{""result"":{""finalized""` only sometimes shows up",10279,2021-12-02T16:41:11Z,0
105,apopiak,"IMO the `transaction_version` would still need to change on removal, but the migration would be trivial.",10408,2021-12-02T13:47:36Z,0
106,bkchr,"> IMO the `transaction_version` would still need to change on removal, but the migration would be trivial.

No, because there would be no harm. The call would fail to decode, aka nothing serious would happen.",10408,2021-12-02T21:22:51Z,0
107,xlc,Um... Does this means `remove_all` is unsafe to be used by parachains? Do we need to re-audit all the usage of it?,10231,2021-11-16T21:44:18Z,0
108,thiolliere,"> Um... Does this means `remove_all` is unsafe to be used by parachains? Do we need to re-audit all the usage of it?

remove_all for counted storage map doesn't allow to give bounds on the number of value to remove from backend, thus in case you remove too many keys, this can go beyond PoV size.

Also benchmarks should already count the number of storage access in general.",10231,2021-11-17T00:54:14Z,0
109,xlc,Ok. So as long as we correctly benchmark all the calls using remove_all we should be mostly fine.,10231,2021-11-17T01:09:23Z,0
110,thiolliere,bot merge,10231,2021-11-17T01:29:25Z,0
111,paritytech-processbot[bot]," Error: 
Error: When trying to meet the ""Project Owners"" approval requirements: this pull request does not belong to a project defined in Process.json.

Approval by ""Project Owners"" is only attempted if other means defined in the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge) are not satisfied first.

The following errors **might** have affected the outcome of this attempt:
- 'Batch: Availability and Validity' does not match any projects in polkadot's Process.json
- 'Batch: Codebase Restructure' does not match any projects in polkadot's Process.json

Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are members of substrateteamleads or core-devs.
",10231,2021-11-17T01:29:33Z,0
112,thiolliere,companion needs a review,10231,2021-12-01T05:22:49Z,0
113,shawntabrizi,reminder on this one,10231,2021-12-02T16:08:30Z,0
114,thiolliere,bot merge,10231,2021-12-03T04:06:46Z,0
115,paritytech-processbot[bot],Waiting for commit status.,10231,2021-12-03T04:06:56Z,0
116,paritytech-processbot[bot],Merge cancelled due to error. Error: Companion https://github.com/paritytech/polkadot/pull/4306 has error: Checks failed for bfccb973507ebc8d3a28a514e6a8f38073216fdb,10231,2021-12-03T04:11:14Z,0
117,thiolliere,bot merge,10231,2021-12-03T05:58:01Z,0
118,athei,/benchmark runtime pallet pallet_contracts,10146,2021-11-01T22:32:37Z,0
119,athei,/benchmark runtime pallet pallet_contracts,10146,2021-11-02T11:45:43Z,0
120,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-fix-instantiate-benchmark"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.866
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.866
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      1.1
    + k    2.177
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     65.12     0.751    1.1%
   20     62.86     0.931    1.4%
   40     100.9     0.782    0.7%
   60     138.4     0.789    0.5%
   80     176.3     0.641    0.3%
  100     215.1     0.884    0.4%
  120     255.1     1.999    0.7%
  140     296.2     2.187    0.7%
  160     339.8      1.89    0.5%
  180     385.5     1.734    0.4%
  200     426.5     1.323    0.3%
  220       475     4.752    1.0%
  240     514.2     1.529    0.2%
  260     555.7     6.212    1.1%
  280       600     2.755    0.4%
  300     637.8     4.784    0.7%
  320     695.8     7.228    1.0%
  340     739.6     5.171    0.6%
  360       783     2.727    0.3%
  380     821.4     6.265    0.7%
  400     875.4      3.58    0.4%
  420     922.6     10.22    1.1%
  440     968.1     8.859    0.9%
  460      1007     2.583    0.2%
  480      1049     8.587    0.8%
  500      1095      5.08    0.4%
  520      1144     8.939    0.7%
  540      1177     4.734    0.4%
  560      1214     7.082    0.5%
  580      1251     10.65    0.8%
  600      1287     11.69    0.9%
  620      1342     6.363    0.4%
  640      1387     26.24    1.8%
  660      1427     15.03    1.0%
  680      1472     14.44    0.9%
  700      1521     14.78    0.9%
  720      1581     13.45    0.8%
  740      1605     17.62    1.0%
  760      1665     8.267    0.4%
  780      1691     14.71    0.8%
  800      1750     17.24    0.9%
  820      1803     24.26    1.3%
  840      1853     16.56    0.8%
  860      1882     16.02    0.8%
  880      1912     13.21    0.6%
  900      1992     20.42    1.0%
  920      2014      24.1    1.1%
  940      2060     25.67    1.2%
  960      2109     18.82    0.8%
  980      2139     17.77    0.8%
 1000      2192     27.66    1.2%
 1020      2236     27.23    1.2%

Quality and confidence:
param     error
k         0.002

Model:
Time ~=        0
    + k    2.185
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    90.97
    + q    0.338
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.858     0.028    0.9%
   20     82.18     0.803    0.9%
   40     94.32     0.931    0.9%
   60     102.9     1.131    1.0%
   80     113.5     1.651    1.4%
  100     123.7     1.663    1.3%
  120     132.3      1.14    0.8%
  140     141.9     0.947    0.6%
  160       152     1.625    1.0%
  180     163.5     1.851    1.1%
  200     171.5     1.187    0.6%
  220     180.9     1.606    0.8%
  240     190.6     1.987    1.0%
  260     197.4     1.409    0.7%
  280     178.6     1.455    0.8%
  300     207.9     1.407    0.6%
  320     192.6     1.005    0.5%
  340     199.8     1.712    0.8%
  360     210.4     1.052    0.4%
  380     222.4      8.76    3.9%
  400     225.9     2.084    0.9%
  420       267     2.822    1.0%
  440     238.5     1.709    0.7%
  460     245.4     0.829    0.3%
  480     250.6     1.292    0.5%
  500     257.6     1.317    0.5%
  520     267.5     2.722    1.0%
  540     273.7     2.013    0.7%
  560     279.5     3.292    1.1%
  580     285.3     1.945    0.6%
  600     294.7      2.16    0.7%
  620     302.2     2.201    0.7%
  640     306.3     2.199    0.7%
  660     321.6     5.217    1.6%
  680     322.8     1.984    0.6%
  700       335     4.444    1.3%
  720     336.5     1.819    0.5%
  740     348.2      4.09    1.1%
  760     350.5     2.027    0.5%
  780     358.3     1.511    0.4%
  800       364     1.932    0.5%
  820     371.5     2.228    0.5%
  840     377.6     2.358    0.6%
  860     381.8     0.797    0.2%
  880     387.7     0.515    0.1%
  900     393.2     1.426    0.3%
  920     397.2       1.5    0.3%
  940     403.6     2.028    0.5%
  960       411     0.787    0.1%
  980     417.4     1.541    0.3%
 1000       423     2.507    0.5%
 1020     426.5     1.168    0.2%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=     87.8
    + q    0.344
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""instrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    46.01
    + c    71.69
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     54.39     0.462    0.8%
    2     200.4     0.393    0.1%
    4     340.2     0.344    0.1%
    6     468.8     0.247    0.0%
    8     619.3     4.617    0.7%
   10     747.4     0.566    0.0%
   12     876.2     8.592    0.9%
   14      1062     14.88    1.4%
   16      1176     6.556    0.5%
   18      1340     14.67    1.0%
   20      1459     11.11    0.7%
   22      1587     13.22    0.8%
   24      1721     17.85    1.0%
   26      1947     14.47    0.7%
   28      2072     10.72    0.5%
   30      2195     18.07    0.8%
   32      2317      15.1    0.6%
   34      2499     12.17    0.4%
   36      2616     14.97    0.5%
   38      2739     13.18    0.4%
   40      2887     15.24    0.5%
   42      3015      18.9    0.6%
   44      3113     17.06    0.5%
   46      3239     13.14    0.4%
   48      3369     14.11    0.4%
   50      3715     11.85    0.3%
   52      3834     12.73    0.3%
   54      3960     3.834    0.0%
   56      4078     10.43    0.2%
   58      4221     11.95    0.2%
   60      4324     12.75    0.2%
   62      4482     30.26    0.6%
   64      4582     18.04    0.3%
   66      4844     14.14    0.2%
   68      4957     23.05    0.4%
   70      5099      14.5    0.2%
   72      5206     14.38    0.2%
   74      5355     14.37    0.2%
   76      5480     27.46    0.5%
   78      5577      18.5    0.3%
   80      5723     28.51    0.4%
   82      5864     20.61    0.3%
   84      5987     22.94    0.3%
   86      6101     15.33    0.2%
   88      6237     14.48    0.2%
   90      6345     22.15    0.3%
   92      6482     35.64    0.5%
   94      6614     23.23    0.3%
   96      6733     18.07    0.2%
   98      7272     23.81    0.3%
  100      7402     17.68    0.2%
  102      7521     16.98    0.2%
  104      7670     27.31    0.3%
  106      7752     13.32    0.1%
  108      7939     21.51    0.2%
  110      8018     20.31    0.2%
  112      8160     30.48    0.3%
  114      8272     10.21    0.1%
  116      8387     11.45    0.1%
  118      8574     51.86    0.6%
  120      8638     27.29    0.3%
  122      8765     22.99    0.2%
  124      8875     23.06    0.2%
  126      9015     12.92    0.1%
  128      9126     22.22    0.2%

Quality and confidence:
param     error
c         0.087

Model:
Time ~=    28.32
    + c    71.88
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_load"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.038
    + c    1.422
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     5.172     0.039    0.7%
    2     8.895     0.049    0.5%
    4     11.65     0.052    0.4%
    6     14.41     0.056    0.3%
    8     17.26     0.058    0.3%
   10     20.01     0.068    0.3%
   12     22.47     0.149    0.6%
   14     25.96     0.063    0.2%
   16     28.81     0.067    0.2%
   18     31.56     0.034    0.1%
   20     35.28     0.096    0.2%
   22     37.89     0.321    0.8%
   24     41.23     0.072    0.1%
   26     43.16     0.115    0.2%
   28     47.01     0.092    0.1%
   30     49.97      0.16    0.3%
   32     51.56     0.475    0.9%
   34     54.43     0.162    0.2%
   36     58.39     0.088    0.1%
   38     60.17     0.226    0.3%
   40     62.84      0.04    0.0%
   42     65.95     0.169    0.2%
   44     69.98     0.155    0.2%
   46     71.77      0.07    0.0%
   48     74.29     0.085    0.1%
   50     77.07     0.086    0.1%
   52     80.02     0.105    0.1%
   54     82.75     0.055    0.0%
   56     85.81     0.046    0.0%
   58     88.44      0.07    0.0%
   60     91.39     0.151    0.1%
   62     93.94     0.081    0.0%
   64     96.71     0.125    0.1%
   66     99.55     0.293    0.2%
   68     102.3     0.223    0.2%
   70       105     0.129    0.1%
   72     108.1     0.145    0.1%
   74       111     0.126    0.1%
   76     114.1     0.101    0.0%
   78     116.8     0.138    0.1%
   80     119.8     0.261    0.2%
   82     122.4     0.102    0.0%
   84     125.6      0.07    0.0%
   86     128.3      0.11    0.0%
   88     131.4     0.087    0.0%
   90     133.8     0.151    0.1%
   92     136.5      0.17    0.1%
   94     139.8     0.081    0.0%
   96     142.4     0.136    0.0%
   98     145.3     0.161    0.1%
  100     148.2     0.157    0.1%
  102     150.9     0.216    0.1%
  104     153.7     0.218    0.1%
  106     156.5     0.307    0.1%
  108     159.3     0.342    0.2%
  110     163.3      1.44    0.8%
  112     165.3     0.089    0.0%
  114     167.8     0.084    0.0%
  116     171.1      0.29    0.1%
  118     174.2     0.142    0.0%
  120     177.1     0.224    0.1%
  122       180     0.321    0.1%
  124     183.1     0.313    0.1%
  126     185.4     0.386    0.2%
  128       189     0.269    0.1%

Quality and confidence:
param     error
c             0

Model:
Time ~=    6.109
    + c    1.423
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_refcount"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    9.322
    + c    2.271
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     8.742      0.07    0.8%
    2     13.98     0.092    0.6%
    4     18.76     0.082    0.4%
    6     22.97      0.11    0.4%
    8     27.58     0.148    0.5%
   10     31.15     0.125    0.4%
   12     36.09     0.282    0.7%
   14     41.54     0.235    0.5%
   16     46.07     0.166    0.3%
   18     51.47     0.238    0.4%
   20     54.59     0.067    0.1%
   22     59.52     0.079    0.1%
   24     64.02     0.105    0.1%
   26     70.02     0.123    0.1%
   28     73.26     0.092    0.1%
   30     77.26     0.114    0.1%
   32     81.55     0.159    0.1%
   34     85.95     0.074    0.0%
   36     90.72     0.071    0.0%
   38     95.67     0.106    0.1%
   40     100.3     0.222    0.2%
   42     105.5      0.21    0.1%
   44     109.8     0.174    0.1%
   46     114.6     0.129    0.1%
   48     118.7     0.139    0.1%
   50     123.1     0.151    0.1%
   52     127.7     0.105    0.0%
   54     131.5     0.093    0.0%
   56     135.9      0.21    0.1%
   58     140.6     0.262    0.1%
   60       145     0.091    0.0%
   62     149.8      0.16    0.1%
   64     153.9     0.153    0.0%
   66     158.5     0.089    0.0%
   68       163     0.113    0.0%
   70     167.6     0.261    0.1%
   72     172.2     0.144    0.0%
   74       177     0.187    0.1%
   76     181.6     0.284    0.1%
   78     186.1     0.483    0.2%
   80     190.8     0.319    0.1%
   82     195.2     0.456    0.2%
   84     200.2     0.121    0.0%
   86     204.4     0.583    0.2%
   88     208.7     0.252    0.1%
   90     213.5     0.281    0.1%
   92     218.3     0.152    0.0%
   94     222.4     0.153    0.0%
   96     227.5     0.139    0.0%
   98     231.9     0.214    0.0%
  100     236.4     0.141    0.0%
  102     240.5     0.216    0.0%
  104     245.5     0.368    0.1%
  106     249.9     0.209    0.0%
  108     254.8     0.228    0.0%
  110     258.9     0.182    0.0%
  112     263.8      0.84    0.3%
  114       269     0.164    0.0%
  116     272.9     0.246    0.0%
  118     277.2     0.261    0.0%
  120     281.7      0.17    0.0%
  122     286.6     0.327    0.1%
  124     291.6     0.198    0.0%
  126     295.6      0.34    0.1%
  128       301     0.276    0.0%

Quality and confidence:
param     error
c             0

Model:
Time ~=    9.333
    + c    2.271
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    518.9
    + c    172.1
    + s     2.04
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 5 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2589     12.21    0.4%
    1  1024      2767      15.3    0.5%
    2  1024      2928     16.59    0.5%
    3  1024      3125     12.81    0.4%
    4  1024      3284      7.71    0.2%
    5  1024      3454     10.86    0.3%
    6  1024      3603     10.41    0.2%
    7  1024      3824     33.47    0.8%
    8  1024      3939      18.7    0.4%
    9  1024      4159     10.36    0.2%
   10  1024      4330     6.463    0.1%
   11  1024      4456     9.807    0.2%
   12  1024      4618     15.16    0.3%
   13  1024      4867     18.71    0.3%
   14  1024      5013     14.21    0.2%
   15  1024      5158     15.96    0.3%
   16  1024      5316     20.21    0.3%
   17  1024      5606     20.35    0.3%
   18  1024      5758     15.67    0.2%
   19  1024      5906     15.33    0.2%
   20  1024      6047     12.23    0.2%
   21  1024      6195     16.97    0.2%
   22  1024      6373     19.32    0.3%
   23  1024      6512     24.11    0.3%
   24  1024      6664     28.37    0.4%
   25  1024      6968     18.94    0.2%
   26  1024      7125     18.54    0.2%
   27  1024      7294     13.52    0.1%
   28  1024      7434     25.62    0.3%
   29  1024      7559     19.09    0.2%
   30  1024      7720     19.16    0.2%
   31  1024      7878     25.13    0.3%
   32  1024      8038     18.89    0.2%
   33  1024      8448     20.07    0.2%
   34  1024      8632     22.75    0.2%
   35  1024      8751     20.66    0.2%
   36  1024      8903     20.72    0.2%
   37  1024      9057     20.83    0.2%
   38  1024      9220     25.45    0.2%
   39  1024      9399     29.47    0.3%
   40  1024      9515     33.54    0.3%
   41  1024      9782     49.36    0.5%
   42  1024      9841     38.79    0.3%
   43  1024      9971     14.43    0.1%
   44  1024     10120     26.51    0.2%
   45  1024     10260     18.61    0.1%
   46  1024     10410     19.42    0.1%
   47  1024     10590     25.55    0.2%
   48  1024     10720     19.36    0.1%
   49  1024     11220     33.69    0.3%
   50  1024     11350     12.35    0.1%
   51  1024     11520     30.54    0.2%
   52  1024     11680     22.18    0.1%
   53  1024     11810     24.69    0.2%
   54  1024     11960     28.07    0.2%
   55  1024     12140     20.82    0.1%
   56  1024     12260     26.17    0.2%
   57  1024     12410     37.38    0.3%
   58  1024     12590     21.07    0.1%
   59  1024     12710     36.92    0.2%
   60  1024     12880      26.8    0.2%
   61  1024     13020     25.77    0.1%
   62  1024     13160     23.75    0.1%
   63  1024     13300     33.61    0.2%
   64     0     11340      21.1    0.1%
   64    20     11420      33.3    0.2%
   64    40     11450     44.77    0.3%
   64    60     11490     45.11    0.3%
   64    80     11540     25.45    0.2%
   64   100     11560     25.42    0.2%
   64   120     11610     32.68    0.2%
   64   140     11690     56.77    0.4%
   64   160     11680     29.46    0.2%
   64   180     11730     27.06    0.2%
   64   200     11780     34.48    0.2%
   64   220     11840     31.91    0.2%
   64   240     11860     23.62    0.1%
   64   260     11910     39.04    0.3%
   64   280     11940     31.24    0.2%
   64   300     12040     36.38    0.3%
   64   320     12010     38.36    0.3%
   64   340     12080     46.08    0.3%
   64   360     12110     37.47    0.3%
   64   380     12130     24.83    0.2%
   64   400     12170      28.3    0.2%
   64   420     12210     29.58    0.2%
   64   440     12260     26.38    0.2%
   64   460     12320     27.36    0.2%
   64   480     12340      36.8    0.2%
   64   500     12400     27.78    0.2%
   64   520     12440     25.52    0.2%
   64   540     12450     29.81    0.2%
   64   560     12510      46.4    0.3%
   64   580     12550     29.77    0.2%
   64   600     12580     21.62    0.1%
   64   620     12650      38.7    0.3%
   64   640     12660     29.17    0.2%
   64   660     12720      36.8    0.2%
   64   680     12780     32.96    0.2%
   64   700     12820     41.38    0.3%
   64   720     12860     54.89    0.4%
   64   740     12870     15.28    0.1%
   64   760     12930     27.91    0.2%
   64   780     12980     63.77    0.4%
   64   800     13010     41.69    0.3%
   64   820     13010     40.24    0.3%
   64   840     13090     32.93    0.2%
   64   860     13150     53.58    0.4%
   64   880     13170     19.12    0.1%
   64   900     13220     34.93    0.2%
   64   920     13270     56.28    0.4%
   64   940     13290     29.41    0.2%
   64   960     13320     31.51    0.2%
   64   980     13360     46.08    0.3%
   64  1000     13440     43.25    0.3%
   64  1020     13430     23.74    0.1%
   64  1024     13450     19.04    0.1%

Quality and confidence:
param     error
c         0.132
s         0.008

Model:
Time ~=    420.3
    + c    170.4
    + s    2.173
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 5 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    183.1
    + s    2.009
              µs

Reads = 5 + (0 * s)
Writes = 4 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     182.9     0.296    0.1%
   20     224.2     0.593    0.2%
   40     264.4      0.33    0.1%
   60     304.2     0.816    0.2%
   80     344.1     0.829    0.2%
  100     383.4     0.628    0.1%
  120     425.3      4.41    1.0%
  140     468.4     10.61    2.2%
  160     502.3     0.545    0.1%
  180     543.1     0.746    0.1%
  200     585.5     7.419    1.2%
  220     621.6     0.754    0.1%
  240       671     15.65    2.3%
  260     714.2     14.17    1.9%
  280     751.7     14.75    1.9%
  300     789.2     12.73    1.6%
  320     825.9     10.64    1.2%
  340     863.6     9.462    1.0%
  360       909     12.27    1.3%
  380     948.5     11.66    1.2%
  400     977.3     0.255    0.0%
  420      1022     10.89    1.0%
  440      1069     16.45    1.5%
  460      1101     11.76    1.0%
  480      1146     12.07    1.0%
  500      1182     10.93    0.9%
  520      1229     1.273    0.1%
  540      1271     6.414    0.5%
  560      1323     14.64    1.1%
  580      1367     15.71    1.1%
  600      1400     15.04    1.0%
  620      1441     12.86    0.8%
  640      1478     20.22    1.3%
  660      1521     13.89    0.9%
  680      1561     14.92    0.9%
  700      1605     13.09    0.8%
  720      1651     12.42    0.7%
  740      1681     13.97    0.8%
  760      1732      11.1    0.6%
  780      1760     14.77    0.8%
  800      1794     12.36    0.6%
  820      1844     15.72    0.8%
  840      1872     11.13    0.5%
  860      1927     11.51    0.5%
  880      2008     2.097    0.1%
  900      1989     11.28    0.5%
  920      2028     9.306    0.4%
  940      2086        18    0.8%
  960      2116     15.78    0.7%
  980      2170     12.87    0.5%
 1000      2208     16.36    0.7%
 1020      2245     14.33    0.6%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    180.2
    + s    2.027
              µs

Reads = 5 + (0 * s)
Writes = 4 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    153.4
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    153.4
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    420.3
    + r    112.9
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.4      0.25    0.0%
    1     529.2     0.448    0.0%
    2       646     4.777    0.7%
    3     754.3     1.334    0.1%
    4     875.6     11.53    1.3%
    5     982.3     4.292    0.4%
    6      1095     7.688    0.7%
    7      1223     11.61    0.9%
    8      1334     9.943    0.7%
    9      1452     13.49    0.9%
   10      1553     14.16    0.9%
   11      1671     12.74    0.7%
   12      1786      10.5    0.5%
   13      1877     8.789    0.4%
   14      2018     13.81    0.6%
   15      2114     15.18    0.7%
   16      2235     9.211    0.4%
   17      2353     9.859    0.4%
   18      2444     10.52    0.4%
   19      2572     9.397    0.3%
   20      2681     14.67    0.5%

Quality and confidence:
param     error
r         0.147

Model:
Time ~=    419.8
    + r    113.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    417.3
    + r    113.8
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.3     0.252    0.0%
    1     530.3     1.487    0.2%
    2     644.7     0.872    0.1%
    3     757.9     0.623    0.0%
    4     869.7     0.445    0.0%
    5     984.9     9.903    1.0%
    6      1111     15.92    1.4%
    7      1228     15.05    1.2%
    8      1339      14.7    1.0%
    9      1458     15.03    1.0%
   10      1557     10.83    0.6%
   11      1673     21.32    1.2%
   12      1788     14.33    0.8%
   13      1889     13.45    0.7%
   14      2017     13.45    0.6%
   15      2134     10.73    0.5%
   16      2244      13.8    0.6%
   17      2350     10.49    0.4%
   18      2488     12.94    0.5%
   19      2587     6.437    0.2%
   20      2704     11.16    0.4%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    417.2
    + r    114.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      420
    + r    112.2
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.6     0.312    0.0%
    1     528.6     0.867    0.1%
    2       645     5.236    0.8%
    3     753.9     0.465    0.0%
    4       878     13.46    1.5%
    5     985.1      10.3    1.0%
    6      1094      10.6    0.9%
    7      1225     13.11    1.0%
    8      1339      14.7    1.0%
    9      1447     12.46    0.8%
   10      1547     14.43    0.9%
   11      1674      12.8    0.7%
   12      1767     13.67    0.7%
   13      1879     17.76    0.9%
   14      1994     12.82    0.6%
   15      2114     12.73    0.6%
   16      2226     13.24    0.5%
   17      2332     14.02    0.6%
   18      2460     5.026    0.2%
   19      2571     10.87    0.4%
   20      2661     15.03    0.5%

Quality and confidence:
param     error
r         0.166

Model:
Time ~=    421.8
    + r    112.7
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    430.3
    + r    335.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.6     4.665    1.1%
    1     755.2     1.661    0.2%
    2      1093     3.447    0.3%
    3      1437     9.657    0.6%
    4      1787     13.58    0.7%
    5      2101     8.428    0.4%
    6      2454     8.115    0.3%
    7      2777        12    0.4%
    8      3131     11.57    0.3%
    9      3464     14.87    0.4%
   10      3806      14.5    0.3%
   11      4116     3.801    0.0%
   12      4458      14.2    0.3%
   13      4791     15.93    0.3%
   14      5125     17.05    0.3%
   15      5475     22.09    0.4%
   16      5815     27.64    0.4%
   17      6146     32.82    0.5%
   18      6472        24    0.3%
   19      6778     23.64    0.3%
   20      7130     17.24    0.2%

Quality and confidence:
param     error
r         0.235

Model:
Time ~=      431
    + r    335.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    408.1
    + r    115.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     415.1     4.338    1.0%
    1     516.3      1.34    0.2%
    2     632.5     1.272    0.2%
    3     742.4     1.438    0.1%
    4     863.8     1.798    0.2%
    5     976.5     10.82    1.1%
    6      1090     12.72    1.1%
    7      1226     12.26    0.9%
    8      1347     12.39    0.9%
    9      1447     12.66    0.8%
   10      1566     13.54    0.8%
   11      1674     12.19    0.7%
   12      1793     9.412    0.5%
   13      1891     12.09    0.6%
   14      2036     12.93    0.6%
   15      2155     12.14    0.5%
   16      2264        10    0.4%
   17      2385     14.26    0.5%
   18      2475     11.44    0.4%
   19      2590     16.08    0.6%
   20      2722     6.298    0.2%

Quality and confidence:
param     error
r         0.166

Model:
Time ~=    404.4
    + r    115.8
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.7
    + r    114.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.4     0.175    0.0%
    1     517.6     4.042    0.7%
    2     630.7      1.59    0.2%
    3       742     3.691    0.4%
    4     864.4        13    1.5%
    5     970.4     4.698    0.4%
    6      1089     11.87    1.0%
    7      1218     13.84    1.1%
    8      1324     9.355    0.7%
    9      1442      13.1    0.9%
   10      1556     15.92    1.0%
   11      1655     11.74    0.7%
   12      1780     13.68    0.7%
   13      1877      7.97    0.4%
   14      2031     10.45    0.5%
   15      2140     14.32    0.6%
   16      2244     13.59    0.6%
   17      2352     14.09    0.5%
   18      2481     15.75    0.6%
   19      2578     13.13    0.5%
   20      2699     12.13    0.4%

Quality and confidence:
param     error
r         0.165

Model:
Time ~=    403.8
    + r    114.9
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_tombstone_deposit"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    411.8
    + r    114.5
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.9     0.742    0.1%
    1     515.7     0.297    0.0%
    2     630.7     1.039    0.1%
    3     745.2     8.085    1.0%
    4     857.6     1.421    0.1%
    5     976.7     11.78    1.2%
    6      1105     9.461    0.8%
    7      1228     14.91    1.2%
    8      1340     18.01    1.3%
    9      1438     12.45    0.8%
   10      1559     12.65    0.8%
   11      1668        10    0.5%
   12      1784     14.92    0.8%
   13      1886     12.96    0.6%
   14      2037     16.46    0.8%
   15      2134      10.7    0.5%
   16      2239     13.02    0.5%
   17      2356     7.936    0.3%
   18      2484     10.09    0.4%
   19      2584     15.21    0.5%
   20      2705     16.84    0.6%

Quality and confidence:
param     error
r         0.169

Model:
Time ~=    406.9
    + r    114.9
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    410.2
    + r    114.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.3     0.319    0.0%
    1       516     1.432    0.2%
    2     637.9     10.79    1.6%
    3       746     9.815    1.3%
    4     857.4     1.306    0.1%
    5     978.6     11.59    1.1%
    6      1080     6.669    0.6%
    7      1219        12    0.9%
    8      1336     15.27    1.1%
    9      1446     12.75    0.8%
   10      1556     13.03    0.8%
   11      1668     12.57    0.7%
   12      1787     11.25    0.6%
   13      1882     13.09    0.6%
   14      2032     15.12    0.7%
   15      2132     10.13    0.4%
   16      2250     15.33    0.6%
   17      2371     12.01    0.5%
   18      2449     7.863    0.3%
   19      2598     12.28    0.4%
   20      2688     7.182    0.2%

Quality and confidence:
param     error
r         0.175

Model:
Time ~=    406.5
    + r    114.8
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    414.7
    + r    115.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     399.2     0.169    0.0%
    1     517.9     0.639    0.1%
    2     648.6     1.416    0.2%
    3     763.9     4.928    0.6%
    4     882.5     8.401    0.9%
    5     997.7      7.23    0.7%
    6      1106     5.801    0.5%
    7      1234     6.351    0.5%
    8      1346     4.361    0.3%
    9      1451     2.724    0.1%
   10      1568     2.153    0.1%
   11      1677      5.85    0.3%
   12      1786     3.226    0.1%
   13      1899     5.529    0.2%
   14      2044     8.218    0.4%
   15      2160     3.606    0.1%
   16      2270     7.648    0.3%
   17      2366     14.24    0.6%
   18      2493     7.296    0.2%
   19      2604      3.69    0.1%
   20      2713     11.72    0.4%

Quality and confidence:
param     error
r          0.13

Model:
Time ~=    413.8
    + r    115.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      414
    + r    270.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.7     0.237    0.0%
    1     674.3     1.509    0.2%
    2     958.6     6.295    0.6%
    3      1223     11.58    0.9%
    4      1506     12.44    0.8%
    5      1762      14.1    0.8%
    6      2033     9.415    0.4%
    7      2307      10.4    0.4%
    8      2571     10.87    0.4%
    9      2845     12.09    0.4%
   10      3112     15.57    0.5%
   11      3426     14.69    0.4%
   12      3663     11.33    0.3%
   13      3941     15.17    0.3%
   14      4215     14.16    0.3%
   15      4465     10.27    0.2%
   16      4736     10.26    0.2%
   17      5018     17.23    0.3%
   18      5286     15.21    0.2%
   19      5563     18.77    0.3%
   20      5817     20.74    0.3%

Quality and confidence:
param     error
r         0.188

Model:
Time ~=    413.1
    + r    270.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    150.1
    + r    51.28
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     140.2     0.234    0.1%
    1     196.1     0.273    0.1%
    2     247.7     0.241    0.0%
    3     303.5     0.262    0.0%
    4     356.1     0.658    0.1%
    5     404.6     1.753    0.4%
    6     474.3     1.252    0.2%
    7     527.7     1.778    0.3%
    8     580.8     2.391    0.4%
    9     617.8     5.922    0.9%
   10       666     1.007    0.1%
   11     713.3     0.823    0.1%
   12     767.2     11.61    1.5%
   13     811.7     3.334    0.4%
   14       866     6.267    0.7%
   15     931.5     12.89    1.3%
   16     971.6     14.21    1.4%
   17      1030     11.02    1.0%
   18      1069     12.05    1.1%
   19      1116     3.102    0.2%
   20      1176     14.26    1.2%

Quality and confidence:
param     error
r         0.126

Model:
Time ~=    151.9
    + r    51.33
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    419.8
    + r    96.93
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.9      1.03    0.2%
    1     513.6     1.048    0.2%
    2     623.5     15.22    2.4%
    3     706.9     2.287    0.3%
    4     806.1     1.515    0.1%
    5     907.8     12.78    1.4%
    6     996.3     8.938    0.8%
    7      1109     10.66    0.9%
    8      1209     13.88    1.1%
    9      1295     8.967    0.6%
   10      1407     14.64    1.0%
   11      1490     16.04    1.0%
   12      1584     9.524    0.6%
   13      1691     15.58    0.9%
   14      1793     12.66    0.7%
   15      1879     13.42    0.7%
   16      1990     15.01    0.7%
   17      2077     14.57    0.7%
   18      2160     10.24    0.4%
   19      2261     8.767    0.3%
   20      2368     9.859    0.4%

Quality and confidence:
param     error
r         0.154

Model:
Time ~=    420.3
    + r    97.41
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      552
    + n    38.01
              µs

Reads = 3 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     514.5     1.452    0.2%
   20      1298     14.78    1.1%
   40      2051     14.19    0.6%
   60      2814     14.38    0.5%
   80      3584     4.193    0.1%
  100      4340     4.518    0.1%
  120      5099     17.59    0.3%
  140      5895     19.48    0.3%
  160      6644     17.61    0.2%
  180      7402     19.53    0.2%
  200      8153     22.63    0.2%
  220      8919     25.32    0.2%
  240      9673     13.34    0.1%
  260     10440     24.15    0.2%
  280     11190     26.65    0.2%
  300     11960     12.64    0.1%
  320     12750     42.74    0.3%
  340     13480     26.48    0.1%
  360     14260     29.05    0.2%
  380     15000     36.26    0.2%
  400     15750      29.8    0.1%
  420     16560     38.95    0.2%
  440     17300     53.25    0.3%
  460     18050      37.7    0.2%
  480     18800     42.06    0.2%
  500     19590     72.97    0.3%
  520     20290     37.83    0.1%
  540     21090     27.27    0.1%
  560     21840     45.76    0.2%
  580     22610     38.74    0.1%
  600     23380     40.92    0.1%
  620     24150      33.8    0.1%
  640     24890     53.82    0.2%
  660     25640     57.58    0.2%
  680     26410     54.06    0.2%
  700     27180     22.49    0.0%
  720     27910     25.96    0.0%
  740     28670     30.82    0.1%
  760     29420     41.05    0.1%
  780     30460     234.1    0.7%
  800     30940     37.88    0.1%
  820     31730     39.84    0.1%
  840     32430     32.28    0.0%
  860     33230     38.13    0.1%
  880     33980     48.46    0.1%
  900     34750     33.89    0.0%
  920     35530     48.14    0.1%
  940     36260     43.99    0.1%
  960     37010     49.27    0.1%
  980     37820     70.23    0.1%
 1000     38530     25.69    0.0%
 1020     39340     50.48    0.1%

Quality and confidence:
param     error
n         0.009

Model:
Time ~=    553.9
    + n    38.02
              µs

Reads = 3 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    404.4
    + r    0.366
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     404.5     0.159    0.0%
    1     407.6     8.298    2.0%

Quality and confidence:
param     error
r         2.766

Model:
Time ~=    404.5
    + r    3.142
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    405.4
    + n    0.624
              µs

Reads = 3 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     404.9     0.215    0.0%
   20     428.6     13.26    3.0%
   40     430.2     0.275    0.0%
   60     442.6     0.283    0.0%
   80     457.9     5.671    1.2%
  100     471.1     8.248    1.7%
  120     480.6     0.208    0.0%
  140     493.9     3.508    0.7%
  160     505.4     0.208    0.0%
  180     518.9     3.753    0.7%
  200     535.3      11.3    2.1%
  220     542.5     0.159    0.0%
  240     556.6     5.556    0.9%
  260     567.6     0.296    0.0%
  280       580      0.27    0.0%
  300     592.6     0.284    0.0%
  320     612.3     14.01    2.2%
  340     625.6     12.67    2.0%
  360     630.1     0.302    0.0%
  380     644.6      5.68    0.8%
  400     656.1     4.413    0.6%
  420     667.6       0.4    0.0%
  440     696.2     9.704    1.3%
  460     692.5     0.189    0.0%
  480     706.3     4.036    0.5%
  500     721.9     9.659    1.3%
  520     745.2     16.69    2.2%
  540       754     14.82    1.9%
  560     769.6     18.14    2.3%
  580     769.8     5.197    0.6%
  600     781.1     2.883    0.3%
  620       800     11.81    1.4%
  640     808.9     7.748    0.9%
  660     816.2     4.151    0.5%
  680     834.7     14.36    1.7%
  700       849     10.37    1.2%
  720     860.3     8.813    1.0%
  740     874.2     11.23    1.2%
  760     894.4      12.8    1.4%
  780     899.9     10.46    1.1%
  800     913.1     12.63    1.3%
  820     916.8     0.348    0.0%
  840       931     4.458    0.4%
  860     946.7     9.953    1.0%
  880     963.5     13.61    1.4%
  900     969.5     7.761    0.8%
  920     989.3     11.77    1.1%
  940     998.5     9.071    0.9%
  960      1010     10.96    1.0%
  980      1026     12.05    1.1%
 1000      1037      9.25    0.8%
 1020      1052     14.44    1.3%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    406.7
    + n    0.631
              µs

Reads = 3 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    411.6
    + r    65.51
              µs

Reads = 3 + (3 * r)
Writes = 1 + (4 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.7     0.471    0.1%
    1     479.1     4.422    0.9%

Quality and confidence:
param     error
r         1.482

Model:
Time ~=    411.7
    + r    67.38
              µs

Reads = 3 + (3 * r)
Writes = 1 + (4 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    426.2
    + r    362.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.4     0.216    0.0%
    1     781.4      0.92    0.1%
    2      1165     13.54    1.1%
    3      1532     8.554    0.5%
    4      1882       7.2    0.3%
    5      2258     7.067    0.3%
    6      2597     14.85    0.5%
    7      2969     8.926    0.3%
    8      3321     14.07    0.4%
    9      3686     7.984    0.2%
   10      4052     8.006    0.1%
   11      4398     7.741    0.1%
   12      4749     13.53    0.2%
   13      5110     16.31    0.3%
   14      5492      28.4    0.5%
   15      5837     14.37    0.2%
   16      6212     16.96    0.2%
   17      6622     19.84    0.2%
   18      6997     16.63    0.2%
   19      7323     19.72    0.2%
   20      7672     17.39    0.2%

Quality and confidence:
param     error
r         0.269

Model:
Time ~=    425.2
    + r    362.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    421.7
    + r    628.7
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     403.2     0.284    0.0%
    1      1058      13.5    1.2%
    2      1682     13.77    0.8%
    3      2321     7.497    0.3%
    4      2934     8.725    0.2%
    5      3562     10.33    0.2%
    6      4224     13.91    0.3%
    7      4847     19.52    0.4%
    8      5451     15.81    0.2%
    9      6081     12.97    0.2%
   10      6698     24.36    0.3%
   11      7318      26.7    0.3%
   12      8029     60.82    0.7%
   13      8560     35.48    0.4%
   14      9186     49.37    0.5%
   15      9851     47.74    0.4%
   16     10490     31.31    0.2%
   17     11150     40.89    0.3%
   18     11790     24.25    0.2%
   19     12300     43.17    0.3%
   20     12960     43.51    0.3%

Quality and confidence:
param     error
r         0.489

Model:
Time ~=    428.1
    + r    628.2
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1146
    + t    466.7
    + n    164.6
              µs

Reads = 3 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3703     21.59    0.5%
    1    16      4297     23.09    0.5%
    2    16      4742       7.3    0.1%
    3    16      5224     14.91    0.2%
    4     0      2962     18.47    0.6%
    4     1      3161     16.37    0.5%
    4     2      3295     11.21    0.3%
    4     3      3467     22.24    0.6%
    4     4      3637     14.66    0.4%
    4     5      3788     18.15    0.4%
    4     6      3955      19.4    0.4%
    4     7      4079     6.935    0.1%
    4     8      4366     8.238    0.1%
    4     9      4416     13.87    0.3%
    4    10      4620     11.13    0.2%
    4    11      4774      12.4    0.2%
    4    12      4933     18.96    0.3%
    4    13      5095     13.58    0.2%
    4    14      5280     14.35    0.2%
    4    15      5431      15.2    0.2%
    4    16      5620     16.42    0.2%

Quality and confidence:
param     error
t         2.786
n         0.549

Model:
Time ~=     1127
    + t    459.3
    + n    165.9
              µs

Reads = 3 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    160.9
    + r    67.87
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     160.7      0.16    0.0%
    1     234.3     0.326    0.1%
    2     288.5     0.374    0.1%
    3     374.4     0.313    0.0%
    4     423.9     0.591    0.1%
    5     501.9     1.134    0.2%
    6     565.5     0.657    0.1%
    7       634     8.974    1.4%
    8     697.1     9.231    1.3%
    9     763.6     7.914    1.0%
   10     830.8     8.395    1.0%
   11     933.9     12.06    1.2%
   12     979.8     5.443    0.5%
   13      1045     7.752    0.7%
   14      1115     6.392    0.5%
   15      1181     9.295    0.7%
   16      1253     16.44    1.3%
   17      1326     17.25    1.3%
   18      1382     10.95    0.7%
   19      1455     15.83    1.0%
   20      1518     11.03    0.7%

Quality and confidence:
param     error
r         0.137

Model:
Time ~=    159.1
    + r    68.21
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    399.5
    + r    233.8
              µs

Reads = 3 + (0 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     399.2     0.228    0.0%
    1     651.2      9.64    1.4%
    2     866.6     2.017    0.2%
    3      1097     2.355    0.2%
    4      1315     13.49    1.0%
    5      1556     13.97    0.8%
    6      1811     13.19    0.7%
    7      2038     11.86    0.5%
    8      2234     17.11    0.7%
    9      2493     15.64    0.6%
   10      2707     12.89    0.4%
   11      2993     14.45    0.4%
   12      3199     14.68    0.4%
   13      3438     13.65    0.3%
   14      3688     13.13    0.3%
   15      3906     16.26    0.4%
   16      4114     17.32    0.4%
   17      4364     21.66    0.4%
   18      4628     20.21    0.4%
   19      4849     10.46    0.2%
   20      5108     23.26    0.4%

Quality and confidence:
param     error
r         0.254

Model:
Time ~=    391.8
    + r    234.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    612.7
    + n    71.34
              µs

Reads = 3 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     587.1     0.744    0.1%
    1     686.6     0.726    0.1%
    2     757.7      0.57    0.0%
    3     829.7     12.36    1.4%
    4     901.3      13.4    1.4%
    5     965.4     7.381    0.7%
    6      1039      15.3    1.4%
    7      1106     13.73    1.2%
    8      1190     14.38    1.2%
    9      1275     10.04    0.7%
   10      1316     1.221    0.0%
   11      1407     15.85    1.1%
   12      1472     13.62    0.9%
   13      1552      11.4    0.7%
   14      1610     11.86    0.7%
   15      1701     14.72    0.8%
   16      1732     16.08    0.9%

Quality and confidence:
param     error
n         0.257

Model:
Time ~=    609.2
    + n    71.88
              µs

Reads = 3 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    440.5
    + r      209
              µs

Reads = 3 + (0 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.2     1.311    0.3%
    1     665.6     8.764    1.3%
    2     862.3      1.02    0.1%
    3      1076     3.316    0.3%
    4      1264     3.554    0.2%
    5      1476     13.63    0.9%
    6      1690     12.18    0.7%
    7      1890     10.26    0.5%
    8      2090     14.61    0.6%
    9      2314     17.15    0.7%
   10      2527     14.23    0.5%
   11      2750     15.73    0.5%
   12      2968     23.28    0.7%
   13      3148     11.52    0.3%
   14      3356     10.73    0.3%
   15      3550     16.65    0.4%
   16      3774     9.831    0.2%
   17      3973     10.16    0.2%
   18      4234      14.4    0.3%
   19      4413     7.088    0.1%
   20      4650     20.14    0.4%

Quality and confidence:
param     error
r         0.235

Model:
Time ~=    431.7
    + r    209.6
              µs

Reads = 3 + (0 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    288.5
    + r    497.9
              µs

Reads = 3 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.5      0.24    0.0%
    1     862.7     8.742    1.0%
    2      1330     12.36    0.9%
    3      1799     15.05    0.8%
    4      2243     12.67    0.5%
    5      2771     25.34    0.9%
    6      3226     7.516    0.2%
    7      3719     10.13    0.2%
    8      4165     15.06    0.3%
    9      4727     14.32    0.3%
   10      5224     17.17    0.3%
   11      5760     27.04    0.4%
   12      6229     25.11    0.4%
   13      6740     26.02    0.3%
   14      7200     27.92    0.3%
   15      7824     53.43    0.6%
   16      8239     24.57    0.2%
   17      8768      37.3    0.4%
   18      9341     37.06    0.3%
   19      9853     47.12    0.4%
   20     10370     43.57    0.4%

Quality and confidence:
param     error
r         0.798

Model:
Time ~=    279.8
    + r    499.7
              µs

Reads = 3 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    696.6
    + n    110.3
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     669.8     1.936    0.2%
    1     796.1     1.574    0.1%
    2     931.7     15.94    1.7%
    3      1025     1.072    0.1%
    4      1144     10.55    0.9%
    5      1276     8.724    0.6%
    6      1376      18.1    1.3%
    7      1482     12.21    0.8%
    8      1586     15.53    0.9%
    9      1691     14.31    0.8%
   10      1793     11.39    0.6%
   11      1903     13.63    0.7%
   12      2016     12.52    0.6%
   13      2130     14.52    0.6%
   14      2244     10.33    0.4%
   15      2347      16.1    0.6%
   16      2481      7.01    0.2%

Quality and confidence:
param     error
n         0.276

Model:
Time ~=    696.5
    + n    110.7
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:101 w:101)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    309.2
    + r     4113
              µs

Reads = 4 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       418     0.253    0.0%
    1      4484     12.13    0.2%
    2      8522     23.44    0.2%
    3     12610     24.36    0.1%
    4     16670     40.98    0.2%
    5     20780     83.46    0.4%
    6     24910     47.64    0.1%
    7     28960     45.13    0.1%
    8     33240     42.65    0.1%
    9     37340     50.56    0.1%
   10     41470     63.85    0.1%
   11     45700     100.3    0.2%
   12     49800     148.4    0.2%
   13     53790     64.18    0.1%
   14     57810     156.7    0.2%
   15     62080     97.12    0.1%
   16     65900     61.26    0.0%
   17     70510     113.2    0.1%
   18     74790     120.5    0.1%
   19     78470     114.4    0.1%
   20     82230     136.7    0.1%

Quality and confidence:
param     error
r         2.101

Model:
Time ~=    299.6
    + r     4115
              µs

Reads = 4 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    39450
              µs

Reads = 4 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     417.8     0.353    0.0%
    1     38420     81.56    0.2%
    2     76400     58.03    0.0%
    3    114400     43.34    0.0%
    4    158000     41.72    0.0%
    5    197200     100.2    0.0%
    6    236900     104.5    0.0%
    7    275600     83.37    0.0%
    8    314900     164.8    0.0%
    9    355100       153    0.0%
   10    394800     89.86    0.0%
   11    434200       166    0.0%
   12    473000     140.3    0.0%
   13    512800     114.4    0.0%
   14    552200     185.1    0.0%
   15    592300     400.5    0.0%
   16    630500     190.6    0.0%
   17    669600       227    0.0%
   18    709000     269.2    0.0%
   19    749400     212.5    0.0%
   20    788800     217.2    0.0%

Quality and confidence:
param     error
r         11.64

Model:
Time ~=        0
    + r    39490
              µs

Reads = 4 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:101 w:101)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    38530
    + t     3328
    + i    63.41
    + o    101.3
              µs

Reads = 104 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    200700     111.6    0.0%
    1     0   960    139300     134.6    0.0%
    1    20   960    140600     93.24    0.0%
    1    40   960    141800     84.91    0.0%
    1    60   960    143200     103.2    0.0%
    1    80   960    144400     104.7    0.0%
    1   100   960    145600     64.91    0.0%
    1   120   960    146800     146.4    0.0%
    1   140   960    148200     84.17    0.0%
    1   160   960    149200     48.76    0.0%
    1   180   960    150700     118.7    0.0%
    1   200   960    151900     59.16    0.0%
    1   220   960    153100     55.29    0.0%
    1   240   960    154500     85.21    0.0%
    1   260   960    155700     114.8    0.0%
    1   280   960    157000       102    0.0%
    1   300   960    158100     49.84    0.0%
    1   320   960    159300     77.69    0.0%
    1   340   960    160500        75    0.0%
    1   360   960    161800     62.81    0.0%
    1   380   960    163400     99.48    0.0%
    1   400   960    164700     84.39    0.0%
    1   420   960    165700     55.22    0.0%
    1   440   960    167100     79.98    0.0%
    1   460   960    168200     53.58    0.0%
    1   480   960    169800      57.2    0.0%
    1   500   960    171100     59.89    0.0%
    1   520   960    172400     56.35    0.0%
    1   540   960    173500     124.9    0.0%
    1   560   960    174600     82.05    0.0%
    1   580   960    176000     82.35    0.0%
    1   600   960    177300     67.84    0.0%
    1   620   960    178600     97.59    0.0%
    1   640   960    179700     38.75    0.0%
    1   660   960    181200     43.93    0.0%
    1   680   960    182300     57.38    0.0%
    1   700   960    183700     143.9    0.0%
    1   720   960    185100     104.9    0.0%
    1   740   960    186300     61.27    0.0%
    1   760   960    187600     109.6    0.0%
    1   780   960    188700     70.68    0.0%
    1   800   960    190000     126.5    0.0%
    1   820   960    191400     126.8    0.0%
    1   840   960    192600     117.8    0.0%
    1   860   960    193700       139    0.0%
    1   880   960    195100     70.46    0.0%
    1   900   960    196300     103.4    0.0%
    1   920   960    197600     52.34    0.0%
    1   940   960    198900     84.51    0.0%
    1   960   960    200200     73.23    0.0%
    1   980   960    201300     88.79    0.0%
    1  1000   960    202400     47.78    0.0%
    1  1020   960    203900     88.31    0.0%
    1  1024     0    110500      1461    1.3%
    1  1024    19    108800     53.68    0.0%
    1  1024    38    110700     51.86    0.0%
    1  1024    57    112800     57.58    0.0%
    1  1024    76    114500     94.75    0.0%
    1  1024    95    116500     47.11    0.0%
    1  1024   114    118800       389    0.3%
    1  1024   133    120400     54.57    0.0%
    1  1024   152    122300     79.05    0.0%
    1  1024   171    124100     43.56    0.0%
    1  1024   190    126100     69.33    0.0%
    1  1024   209    127900     54.02    0.0%
    1  1<truncated>...
```

</details>",10146,2021-11-02T11:45:45Z,0
121,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10146,2021-12-03T09:10:15Z,0
122,bkchr,CC @apopiak ,10417,2021-12-03T11:00:36Z,0
123,apopiak,"Assets marked as `is_sufficient` are assets that are valuable enough that holding their minimum balance merits account existence on its own.
Just marking all assets as sufficient means that you consider any asset to merit storing which is very unlikely (and unsafe) if you allow permissionless asset creation. If you tightly control your assets and only create sufficient ones, then this can be a valid strategy AFAICT.
The question to ask yourself is: do all the assets marked `is_sufficient` really hold enough value (with their minimum balance) to store them?
If the answer is no, you will want to change your approach.",10417,2021-12-03T11:12:42Z,0
124,girazoki,"We dont allow permissionless asset creation, so from that side we are good.

Thanks for the answer, indeed we will evaluate based on the question. Thanks!",10417,2021-12-03T11:25:08Z,0
125,bkchr,bot merge,10412,2021-12-03T11:29:48Z,0
126,paritytech-processbot[bot],Waiting for commit status.,10412,2021-12-03T11:29:56Z,0
127,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 9f8f3c82a284fc3919753d0f44f0d2485f94b680,10412,2021-12-03T12:17:54Z,0
128,cheme,"Naïve question, why not storing a hash of `:code` in the state instead?",5047,2020-04-21T09:45:11Z,0
129,svyatonik,"> Naïve question, why not storing a hash of :code in the state instead?

Because light client has no local access to the state. It would need to fetch proof of read of that `:code_hash` at every block. Digest is available from headers => we'll know when we really need to fetch new `:code`. It is like polling vs subscription.",5047,2020-04-21T09:57:05Z,0
130,cheme,"Feels like `:code` is not needed anymore in the state since we got it from the headers (at least when managing a cht). Yet keeping the hash of the code in the state is probably harmless. I guess having a separate storage for runtimes is another issue, but maybe the light client specific runtime management could be generalized to full client for possible future changes.",5047,2020-04-21T10:14:47Z,0
131,svyatonik,"> Feels like :code is not needed anymore in the state since we got it from the headers (at least when managing a cht).

I may be missing something from your comment, but the idea was never to include the whole `:code` in the header. Just the signal that the code has been changed and we need to fetch the new version. I do not think that including the code itself is a good idea (given its size).",5047,2020-04-21T10:21:48Z,0
132,cheme,"yes I was just saying that we can fetch runtime hash from the headers (given on genesis we include a initial change), so it is not strictly needed in state as long as client got the cht.

I was not proposing to put those big blobs in header :) , quite the opposite (removing them from the state could be good but then we need to store them somewhere and a way to share them: so if there is a dedicated storage used by light, it could probably be use by full client to, but it needs a specific rpc to query it afterward).

Ok, I misread the description, I was thinking the `RuntimeCodeChange` digest would include a hash of the new runtime, but it does not have to. My comment only make sense if it does.",5047,2020-04-21T10:31:18Z,0
133,svyatonik,"OK, I got your idea now, thanks :) Yes - `hash(code)` should probably be a part of that digest. But what you're talking about is quite a significant change that, imo, deserves separate discussion/issue :)",5047,2020-04-21T10:40:10Z,0
134,seunlanlege,interested in light client mechanics if anyone's willing to mentor this issue :eyes: ,5047,2020-06-04T07:29:22Z,0
135,svyatonik,"@seunlanlege Great! Thanks for your interest :) Imo, it could be done roughly as follows (every point could be a separate PR, order matters):
1) introducing a 'DigestItem::RuntimeChanged' (or `RuntimeCodeChange`) digest item - it should have some unqiue code id. The most straightforward way is to include hash (code), so the item would be 'DigestItem::RuntimeChanged(Hash)';
2) emitting this item when code is changed - i.e. from `System::set_code()` function (you could take a look at the `System::set_changes_trie_config` for example);
3) whenever client imports header with 'DigestItem::RuntimeChanged', it inserts new entry into blockchain cache (`client/src/cache/*`). This entry means that starting from this header, runtime code has given hash. The code itself should be stored in some parallel storage (would it be extension to blockchain cache, or separate column - it is up to you);
4) whenever client has request for remote execution at some block, it:
4.1) reads `hash(runtime_code)` entry from the blockchain cache;
4.2) asks that 'parallel storage' if it already has code for that block. If yes - returns that code;
4.3) if no - asks remote nodes for `storage_proof(runtime_code, at_block)`, inserts that code into 'parallel storage' and returns that code;
5) so now we have locally available runtime code. The only thing we need are trie nodes that are touched during execution. So:
5.1) we're changing how `message::RemoteCallRequest` is processed - it should not include runtime code in the proof (that's the goal of this issue);
5.2) we're passing cached runtime code to the `execution_proof_check()`.

OK, while I was writing this, I've also noticed that the `RuntimeCode` requires `heap_pages`. I assume that it is consensus-critical => we need to have same value both on full and light nodes. So I also suggest to include `heap_pages` into 'DigestItem::RuntimeChanged(Hash, u64)'. This `u64` may be stored in the blockchain cache itself (not in that 'parallel storage'). And `System::set_heap_pages` should also emit 'DigestItem::RuntimeChanged`. So we may have the same code spanning through several blocks ranges, but different `heap_pages`.

If you have any further questions - please ask here, or DM me! Good luck :)",5047,2020-06-04T08:46:20Z,0
136,tomaka,"Now that the light client is dead, we can probably revisit this issue and no longer include the runtime code in the proof?",5047,2021-12-03T13:45:35Z,0
137,bkchr,Sound good to me,5047,2021-12-03T13:55:30Z,0
138,chevdor,I would also add simple integer and floating point calculations: performance changes on those benchmarks  can give good hints on significant changes of the machine/cpu arch. running the benchmarks and explain deviations in other tests.,9581,2021-08-27T08:16:00Z,0
139,shawntabrizi,closed by https://github.com/paritytech/substrate/pull/9691/files,9581,2021-12-03T19:04:54Z,0
140,thiolliere,"~I don't really understand, why does the runtime needs to implement `nimbus_primitives::AuthorFilterAPI<Block, NimbusId>` ?
Why don't you just remove this implementation ?~

~You say:~
~> we are currently forced to continue implementing the 2 traits on the runtime side, otherwise it won't compile.~

~But AFAICT nothing is forcing the runtime to implement a runtime API.~

~Sidenote: at first I thought you were talking about removing a method from a runtime api, in this case maybe we can have a new attribute similar to `changed_in`, but in order to remove a method, so like `removed_in` might work, not sure.~

EDIT: missunderstood the client constraint",10405,2021-12-03T05:42:49Z,0
141,bkchr,We will need to rewrite the runtime apis stuff in the near future anyway and then this restriction will be gone that rustc needs to check for the trait bound being full-filled. ,10405,2021-12-03T10:59:20Z,0
142,librelois,"> We will need to rewrite the runtime apis stuff in the near future anyway and then this restriction will be gone

Is there any issue or PR that explains why and what changes are planned?",10405,2021-12-03T12:49:45Z,0
143,bkchr,"Not yet, I still not to create it :see_no_evil: ",10405,2021-12-03T13:28:36Z,0
144,adoerr,@de-sh thanks a lot for the PR! Could you please cargo fmt `commitment.rs`,10409,2021-12-02T16:12:56Z,0
145,tomusdrw,bot merge,10409,2021-12-03T21:08:48Z,0
146,paritytech-processbot[bot],Waiting for commit status.,10409,2021-12-03T21:08:56Z,0
147,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for eae01524e6c51c075ce1a4aff758382cf63926cb,10409,2021-12-03T21:09:05Z,0
148,tomusdrw,bot merge,10409,2021-12-03T21:11:06Z,0
149,paritytech-processbot[bot],Waiting for commit status.,10409,2021-12-03T21:11:14Z,0
150,kianenigma,@bkchr @cheme thanks for the feedback. your comments are all addressed.,10372,2021-11-29T09:42:32Z,0
151,stechu,"@bkchr @kianenigma what is the ""reasonable"" PoV size range in your view?",10372,2021-12-02T01:37:15Z,0
152,kianenigma,"> @bkchr @kianenigma what is the ""reasonable"" PoV size range in your view?

It depend on how much storage is being read. I don't think there's any reasonable range. ",10372,2021-12-02T08:03:11Z,0
153,kianenigma,bot merge,10372,2021-12-03T22:46:58Z,0
154,paritytech-processbot[bot],Waiting for commit status.,10372,2021-12-03T22:47:08Z,0
155,paritytech-processbot[bot],Merge cancelled due to error. Error: Head SHA changed from c519d98d5c06789da0807c1ee8caac20b0ac1fa1 to ee94f32cf3b0d6bbf955d5132f7915d66cd0577f,10372,2021-12-03T23:21:18Z,0
156,kianenigma,bot merge,10372,2021-12-04T06:11:16Z,0
157,tomaka,bot merge,10419,2021-12-03T15:30:39Z,0
158,paritytech-processbot[bot],Waiting for commit status.,10419,2021-12-03T15:30:47Z,0
159,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for db9f59ae115c57d9b97e3e5b4aaddfc07370789c,10419,2021-12-03T15:34:19Z,0
160,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10072,2021-11-20T09:28:58Z,0
161,kianenigma,needs the staking miner to also be updated. ,9229,2021-08-06T13:39:32Z,0
162,kianenigma,"```javascript
const ED = new BN(10000000000);
const ledgers = await api.query.staking.ledger.entries();
let count = 0;
let stale = 0;
for (let [ctrl, ledger] of ledgers) {
	const total = ledger.unwrapOrDefault().total;
	count += 1;
	if (total.toBn().lte(ED)) {
		stale += 1;
		console.log(`🚨 ${ctrl.args[0].toHuman()} has ledger ${api.createType('Balance', total).toHuman()}.`)
	}
}

console.log(`${stale} / ${count} are stale`);
```

unravels that there are `2275` out of `41990` garbage ledgers in polkadot, for instance. 
",10178,2021-11-04T14:30:24Z,0
163,kianenigma,bot merge,10178,2021-11-12T13:46:58Z,0
164,paritytech-processbot[bot],Waiting for commit status.,10178,2021-11-12T13:47:06Z,0
165,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 459359e463f9bb460d976c9dabe20b90b31213b3,10178,2021-11-12T14:29:44Z,0
166,kianenigma,bot merge,10178,2021-11-14T15:04:11Z,0
167,nazar-pc,Was this resolved by #9737?,9643,2021-12-05T16:42:31Z,0
168,bkchr,Yes ;) Ty for reminding me.,9643,2021-12-05T18:53:08Z,0
169,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8833,2021-07-07T17:13:21Z,0
170,tomaka,Issue still relevant and important.,8833,2021-07-08T07:23:04Z,0
171,wigy-opensource-developer,"I have checked the `sc-authority-discovery` implementation, and was wondering if there will be authorities on the network with and without this patch. I suspect there will be, so we need a 2-phase deployment: First we warn if signatures are missing from found DHT records, and later we reject/ignore those DHT records. Do we have a good mechanism for those kinds of ""authority-voted"" hard forks?",8833,2021-11-19T08:33:20Z,0
172,wigy-opensource-developer,"@bkchr At the moment the private key for PeerId is [parsed from CLI params](https://github.com/paritytech/substrate/blob/f846ee0d56e3882cdfa78616d8e9a36885379c98/client/cli/src/config.rs#L479) into a `NetworkConfiguration`, then [passed to `build_transport`](https://github.com/paritytech/substrate/blob/c45c1cbfde0037e6ef650146789a0aa0190fdefb/client/network/src/service.rs#L321), where it is [buried in the Noise-based authentication layer](https://github.com/paritytech/substrate/blob/25eb7ac459211d8f06a98713d9ef60a4f7dd6b69/client/network/src/transport.rs#L79). There are several ways to expose the key to `sc-authority-discovery`, which all have different long-term consequences:

1. Wrap all DHT records put into Kademlia with PeerId/signature (DHT is only used by `sc-authority-discovery` in our codebase) and keep private key not exposed from `sc-network`
2. Expose a synchronous sign/verify interface on `NetworkService` so `sc-authority-discovery` can sign/verify records it puts into Kademlia
3. Add the network identity keys to `LocalKeyStore` and let the transport take it from there.
4. Pass the network identity key to authority discovery worker, too.
5. Other

My personal preference would be 2 or 3, but I might be missing pieces of code that suggest another design.",8833,2021-11-22T10:05:01Z,0
173,bkchr,"> Add the network identity keys to LocalKeyStore and let the transport take it from there.

Sounds reasonable to me :+1: 

We probably could create a follow up issue to move sc-networking itself to use `LocalKeyStore` to get the key and ""burry"" it in noise.

You should also create a new `KeyType` for it.",8833,2021-11-22T10:32:58Z,0
174,bkchr,Is this ready for review?,10317,2021-11-29T16:09:53Z,0
175,wigy-opensource-developer,"Now it is code complete in my view, especially if the CI passes. Where do I need to document the new command-line option?",10317,2021-11-29T16:28:06Z,0
176,wigy-opensource-developer,"> Can we add a test that the old dht entry is still decodable?

At the moment I have added tests that do not sign the record. The wire format should be the same as the old records. Should I record an encoded record from a test on master and try to decode it with the current proto definition in a test?",10317,2021-12-01T15:06:22Z,0
177,bkchr,"> Should I record an encoded record from a test on master and try to decode it with the current proto definition in a test?

Yes that was my idea, but if you are sure that the format is compatible. I'm also okay without any test.",10317,2021-12-01T21:11:39Z,0
178,wigy-opensource-developer,bot merge,10317,2021-12-03T14:02:55Z,0
179,paritytech-processbot[bot],Waiting for commit status.,10317,2021-12-03T14:03:11Z,0
180,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for cb009e09abfa4f8033ec9ceb1768cbbcbfc4b19e,10317,2021-12-03T14:45:16Z,0
181,bkchr,CC @tomusdrw ,10424,2021-12-06T08:34:57Z,0
182,tomusdrw,"Yes. Operational extrinsics should be used carefully, and indeed they may introduce an extra `weight` (or extra base fee) that is refunded in case they are successful.

The `OperationalFeeMultiplier` controls how much priority they are given compared to `Normal` transactions. `Normal` transactions can place a significant `tip` value to get in front of the `Operational` ones and also other `Operational` ones may simply include a `tip` to prevent being ""blocked"".

Indeed the `ChargeTransactionFeePayment` could have a `base_fee` mechanism calculated automatically instead of configuring every `Operational` extrinsic manually (i.e. we require `base_fee` more before execution, but we charge without `base_fee` in case dispatch succeeds).",10424,2021-12-06T10:19:14Z,0
183,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8686,2021-07-07T18:13:20Z,0
184,tomaka,Issue still relevant and important.,8686,2021-07-08T07:20:40Z,0
185,bkchr,"I just briefly discussed this with @tomaka. Sync is rather tightly integrated with the networking currently. This manifests mainly in the sync peer-set being explicitly used by grandpa to keep both in sync. For now this should stay this way, this means we keep a hard coded sync peer-set inside the networking crate. For now, we would only move out the sync related code into its own crate.",8686,2021-11-15T11:52:21Z,0
186,bkchr,Code can mainly be found here: https://github.com/paritytech/substrate/tree/master/client/network/src/protocol/sync,8686,2021-11-15T11:53:10Z,0
187,wigy-opensource-developer,"Okay, I will try to extract anything related to `client/network/src/schema/api.v1.proto` into a new crate `sc-network-sync` under `client/network-sync`",8686,2021-12-06T10:17:38Z,0
188,bkchr,"FYI, it is mainly this https://github.com/paritytech/substrate/blob/master/client/network/src/protocol/sync.rs and this https://github.com/paritytech/substrate/tree/master/client/network/src/protocol/sync.

And while I see that network-gossip is on the client folder level, sync should go to `client/network/sync`. ",8686,2021-12-06T11:34:57Z,0
189,tomaka,"What is complicated is that the code in `protocol.rs` works as follow:

- The low-level code reports that a substream has been opened.
- We synchronously check whether this peer's handshake is ok.
- If no, we ask the low-level code to close the substream and pretend that this never happened.
- If yes, we generate a `SyncConnected` event in the public high-level API.

If you want to plug the sync code through the public high-level API, you need to refactor this, but I don't really know how.
",8686,2021-12-06T12:26:36Z,0
190,emostov,/benchmark runtime pallet frame_benchmarking,10414,2021-12-02T20:05:30Z,0
191,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""zeke-bench-sig-verification"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=frame_benchmarking --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/benchmarking/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""frame_benchmarking"", Extrinsic: ""addition"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    0.283
    + i        0
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    0     0.281     0.007    2.4%
20000     0.274     0.006    2.1%
40000     0.291     0.011    3.7%
60000     0.285     0.009    3.1%
80000      0.27     0.008    2.9%
100000     0.281     0.008    2.8%
120000     0.279     0.006    2.1%
140000     0.281     0.006    2.1%
160000     0.273     0.006    2.1%
180000     0.285     0.006    2.1%
200000      0.28     0.009    3.2%
220000     0.303     0.005    1.6%
240000     0.285     0.006    2.1%
260000     0.289     0.005    1.7%
280000     0.282     0.004    1.4%
300000      0.29     0.003    1.0%
320000     0.292     0.007    2.3%
340000     0.285     0.006    2.1%
360000     0.287     0.009    3.1%
380000     0.287     0.009    3.1%
400000      0.29     0.009    3.1%
420000     0.291     0.011    3.7%
440000      0.29     0.006    2.0%
460000     0.281     0.004    1.4%
480000     0.287     0.006    2.0%
500000     0.275     0.009    3.2%
520000     0.294     0.012    4.0%
540000     0.289     0.006    2.0%
560000      0.27     0.007    2.5%
580000     0.277     0.005    1.8%
600000     0.272     0.006    2.2%
620000     0.267     0.004    1.4%
640000     0.273     0.007    2.5%
660000     0.283     0.007    2.4%
680000     0.283     0.007    2.4%
700000     0.273     0.009    3.2%
720000     0.271     0.004    1.4%
740000     0.274     0.006    2.1%
760000     0.285     0.006    2.1%
780000     0.272     0.009    3.3%
800000     0.283     0.007    2.4%
820000     0.288     0.009    3.1%
840000      0.29     0.008    2.7%
860000     0.295     0.004    1.3%
880000     0.278     0.006    2.1%
900000      0.28     0.009    3.2%
920000      0.28     0.008    2.8%
940000     0.285     0.005    1.7%
960000     0.284      0.01    3.5%
980000     0.277     0.009    3.2%
1000000     0.283     0.006    2.1%

Quality and confidence:
param     error
i             0

Model:
Time ~=    0.284
    + i        0
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Pallet: ""frame_benchmarking"", Extrinsic: ""subtraction"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     0.28
    + i        0
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    0     0.283     0.006    2.1%
20000     0.269     0.003    1.1%
40000     0.282     0.005    1.7%
60000     0.267     0.005    1.8%
80000     0.278     0.006    2.1%
100000     0.278     0.005    1.7%
120000      0.29     0.003    1.0%
140000     0.288     0.004    1.3%
160000     0.293     0.005    1.7%
180000     0.282     0.004    1.4%
200000     0.275      0.01    3.6%
220000     0.293     0.006    2.0%
240000     0.277     0.007    2.5%
260000     0.281     0.009    3.2%
280000      0.27     0.007    2.5%
300000     0.276     0.005    1.8%
320000     0.274     0.007    2.5%
340000     0.281     0.009    3.2%
360000     0.295     0.008    2.7%
380000     0.283     0.006    2.1%
400000     0.273     0.007    2.5%
420000     0.282     0.005    1.7%
440000     0.272     0.005    1.8%
460000     0.271     0.006    2.2%
480000     0.279     0.007    2.5%
500000     0.271     0.005    1.8%
520000     0.282     0.006    2.1%
540000     0.276     0.012    4.3%
560000     0.284     0.011    3.8%
580000     0.265     0.006    2.2%
600000     0.281     0.007    2.4%
620000      0.27     0.004    1.4%
640000     0.277     0.009    3.2%
660000     0.281     0.008    2.8%
680000     0.281     0.005    1.7%
700000     0.286     0.005    1.7%
720000     0.267     0.004    1.4%
740000     0.288     0.015    5.2%
760000     0.279      0.01    3.5%
780000     0.285     0.008    2.8%
800000     0.271     0.007    2.5%
820000     0.294     0.007    2.3%
840000      0.26     0.003    1.1%
860000     0.274     0.007    2.5%
880000     0.286     0.007    2.4%
900000     0.286     0.005    1.7%
920000     0.281     0.004    1.4%
940000     0.309     0.008    2.5%
960000     0.286     0.004    1.3%
980000      0.28     0.008    2.8%
1000000     0.275     0.005    1.8%

Quality and confidence:
param     error
i             0

Model:
Time ~=    0.279
    + i        0
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Pallet: ""frame_benchmarking"", Extrinsic: ""multiplication"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    0.277
    + i        0
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    0     0.265     0.004    1.5%
20000     0.273     0.005    1.8%
40000     0.267     0.005    1.8%
60000      0.26     0.004    1.5%
80000     0.276     0.006    2.1%
100000      0.29     0.004    1.3%
120000     0.302     0.008    2.6%
140000     0.278     0.007    2.5%
160000     0.291     0.008    2.7%
180000     0.266     0.004    1.5%
200000     0.274     0.008    2.9%
220000      0.27     0.009    3.3%
240000     0.281     0.003    1.0%
260000     0.286     0.004    1.3%
280000      0.28     0.005    1.7%
300000     0.273     0.003    1.0%
320000     0.274     0.004    1.4%
340000     0.273     0.005    1.8%
360000     0.267     0.005    1.8%
380000     0.283     0.007    2.4%
400000     0.284     0.011    3.8%
420000     0.275     0.008    2.9%
440000     0.277     0.008    2.8%
460000      0.27     0.005    1.8%
480000     0.274     0.006    2.1%
500000     0.268     0.003    1.1%
520000     0.278      0.01    3.5%
540000     0.272     0.012    4.4%
560000     0.289     0.008    2.7%
580000     0.292     0.005    1.7%
600000      0.28     0.008    2.8%
620000     0.293     0.009    3.0%
640000     0.286     0.007    2.4%
660000      0.28     0.007    2.5%
680000     0.282     0.006    2.1%
700000     0.286     0.006    2.0%
720000     0.288     0.009    3.1%
740000     0.274     0.005    1.8%
760000     0.272     0.005    1.8%
780000     0.271     0.004    1.4%
800000     0.275     0.008    2.9%
820000     0.272     0.005    1.8%
840000     0.262     0.004    1.5%
860000     0.261     0.005    1.9%
880000      0.28     0.012    4.2%
900000     0.271     0.007    2.5%
920000     0.272     0.005    1.8%
940000     0.272     0.008    2.9%
960000     0.289     0.004    1.3%
980000     0.262     0.007    2.6%
1000000     0.275     0.004    1.4%

Quality and confidence:
param     error
i             0

Model:
Time ~=    0.278
    + i        0
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Pallet: ""frame_benchmarking"", Extrinsic: ""division"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    0.273
    + i        0
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    0     0.271     0.011    4.0%
20000     0.288     0.009    3.1%
40000     0.277     0.009    3.2%
60000     0.257     0.005    1.9%
80000     0.275     0.008    2.9%
100000     0.267     0.005    1.8%
120000      0.28     0.006    2.1%
140000     0.279     0.007    2.5%
160000     0.263     0.003    1.1%
180000      0.28     0.009    3.2%
200000     0.272     0.005    1.8%
220000      0.27     0.007    2.5%
240000     0.275     0.006    2.1%
260000     0.273     0.006    2.1%
280000      0.28     0.019    6.7%
300000     0.259     0.007    2.7%
320000     0.265     0.007    2.6%
340000      0.28      0.01    3.5%
360000     0.276     0.009    3.2%
380000     0.281     0.004    1.4%
400000     0.271     0.005    1.8%
420000     0.271     0.005    1.8%
440000     0.289     0.011    3.8%
460000      0.28     0.005    1.7%
480000     0.273     0.007    2.5%
500000      0.28     0.004    1.4%
520000     0.275     0.006    2.1%
540000     0.267     0.006    2.2%
560000     0.281     0.006    2.1%
580000     0.293      0.01    3.4%
600000     0.278     0.006    2.1%
620000     0.271     0.005    1.8%
640000     0.278     0.005    1.7%
660000     0.277     0.004    1.4%
680000     0.278     0.005    1.7%
700000     0.275     0.006    2.1%
720000     0.268     0.008    2.9%
740000      0.28     0.005    1.7%
760000     0.286     0.009    3.1%
780000     0.269     0.004    1.4%
800000     0.288     0.008    2.7%
820000     0.279     0.013    4.6%
840000     0.285     0.009    3.1%
860000      0.27     0.005    1.8%
880000     0.263     0.006    2.2%
900000     0.286     0.007    2.4%
920000     0.268     0.007    2.6%
940000     0.264     0.004    1.5%
960000     0.274     0.005    1.8%
980000     0.275     0.007    2.5%
1000000     0.288     0.012    4.1%

Quality and confidence:
param     error
i             0

Model:
Time ~=    0.274
    + i        0
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Pallet: ""frame_benchmarking"", Extrinsic: ""hashing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33290
    + i    0.074
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    0     33350     254.8    0.7%
    2     33400     195.7    0.5%
    4     33180     38.81    0.1%
    6     33960     64.02    0.1%
    8     33170     37.87    0.1%
   10     33970      31.5    0.0%
   12     33220     71.69    0.2%
   14     33990     111.5    0.3%
   16     33890     45.97    0.1%
   18     33170     47.69    0.1%
   20     33130     53.67    0.1%
   22     33260     80.36    0.2%
   24     33330     274.4    0.8%
   26     33930     36.32    0.1%
   28     33110     33.35    0.1%
   30     33220     131.3    0.3%
   32     33120     51.35    0.1%
   34     33310     214.4    0.6%
   36     33920     64.95    0.1%
   38     33110     34.72    0.1%
   40     33110     18.45    0.0%
   42     33630     242.1    0.7%
   44     33870      79.8    0.2%
   46     33150     53.64    0.1%
   48     33160      49.7    0.1%
   50     33200     40.16    0.1%
   52     33930      34.3    0.1%
   54     33180     42.42    0.1%
   56     33820     61.51    0.1%
   58     33160     43.33    0.1%
   60     33550     304.3    0.9%
   62     33250     25.09    0.0%
   64     33140     26.94    0.0%
   66     33850     47.91    0.1%
   68     33110      40.3    0.1%
   70     33880     39.95    0.1%
   72     33880     35.96    0.1%
   74     33900     36.91    0.1%
   76     33150     37.73    0.1%
   78     33780     161.4    0.4%
   80     33150     48.16    0.1%
   82     33660     294.7    0.8%
   84     33300     108.5    0.3%
   86     33950     133.7    0.3%
   88     33150     31.19    0.0%
   90     33870     32.07    0.0%
   92     33120     21.23    0.0%
   94     33340     226.5    0.6%
   96     33130     74.43    0.2%
   98     33210     76.72    0.2%
  100     33890     69.94    0.2%

Quality and confidence:
param     error
i         0.535

Model:
Time ~=    33440
    + i    0.363
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Pallet: ""frame_benchmarking"", Extrinsic: ""sr25519_verification"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.384
    + i    47.94
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    1     50.19      0.14    0.2%
    2     98.49     0.316    0.3%
    3     146.1      0.25    0.1%
    4     194.2     0.256    0.1%
    5     241.9     0.209    0.0%
    6     289.7     0.331    0.1%
    7     337.5     0.485    0.1%
    8     385.2     0.413    0.1%
    9     433.3     0.565    0.1%
   10     480.7      0.58    0.1%
   11     529.5     0.565    0.1%
   12       577     1.176    0.2%
   13     623.9       0.4    0.0%
   14     673.1     1.018    0.1%
   15     722.6     5.422    0.7%
   16     767.3     0.828    0.1%
   17     815.3     1.159    0.1%
   18     870.9      11.2    1.2%
   19     916.1     9.703    1.0%
   20     960.1     1.211    0.1%
   21      1008     1.894    0.1%
   22      1064     12.71    1.1%
   23      1110     10.99    0.9%
   24      1150     0.923    0.0%
   25      1205     11.08    0.9%
   26      1247     3.841    0.3%
   27      1300     10.16    0.7%
   28      1341     1.402    0.1%
   29      1392     5.747    0.4%
   30      1451     16.32    1.1%
   31      1489     8.643    0.5%
   32      1559     13.88    0.8%
   33      1581     2.087    0.1%
   34      1633     9.782    0.5%
   35      1684      12.9    0.7%
   36      1732     11.68    0.6%
   37      1790     12.64    0.7%
   38      1822     7.263    0.3%
   39      1877     14.27    0.7%
   40      1928     13.19    0.6%
   41      1978     12.04    0.6%
   42      2012     2.564    0.1%
   43      2065     12.13    0.5%
   44      2118     11.93    0.5%
   45      2158      6.17    0.2%
   46      2223      14.3    0.6%
   47      2265     13.93    0.6%
   48      2316     13.95    0.6%
   49      2358     12.62    0.5%
   50      2401     10.19    0.4%
   51      2452     14.52    0.5%
   52      2512     13.53    0.5%
   53      2549     12.44    0.4%
   54      2594     12.84    0.4%
   55      2646     13.52    0.5%
   56      2692     13.14    0.4%
   57      2743     14.45    0.5%
   58      2791     13.18    0.4%
   59      2836      11.4    0.4%
   60      2885      12.1    0.4%
   61      2949      13.1    0.4%
   62      2997     8.216    0.2%
   63      3032     10.43    0.3%
   64      3081      11.2    0.3%
   65      3128     18.95    0.6%
   66      3190     20.03    0.6%
   67      3235     20.46    0.6%
   68      3285     11.57    0.3%
   69      3316     14.86    0.4%
   70      3363      11.4    0.3%
   71      3427     10.17    0.2%
   72      3449     9.523    0.2%
   73      3508     13.08    0.3%
   74      3558     11.79    0.3%
   75      3603     13.97    0.3%
   76      3658     13.21    0.3%
   77      3721     15.22    0.4%
   78      3758     12.22    0.3%
   79      3802     14.24    0.3%
   80      3843     12.64    0.3%
   81      3899     11.95    0.3%
   82      3958     11.86    0.2%
   83      3995     14.57    0.3%
   84      4047     2.899    0.0%
   85      4094     3.461    0.0%
   86      4143     17.83    0.4%
   87      4183     8.947    0.2%
   88      4233     12.06    0.2%
   89      4289     23.88    0.5%
   90      4331     9.986    0.2%
   91      4380     14.75    0.3%
   92      4435     17.29    0.3%
   93      4475     13.37    0.2%
   94      4551     30.25    0.6%
   95      4571     11.74    0.2%
   96      4614     13.09    0.2%
   97      4656      17.1    0.3%
   98      4721     19.97    0.4%
   99      4770     20.01    0.4%
  100      4809     12.64    0.2%

Quality and confidence:
param     error
i         0.014

Model:
Time ~=    0.026
    + i    48.15
              µs

Reads = 0 + (0 * i)
Writes = 0 + (0 * i)

Pallet: ""frame_benchmarking"", Extrinsic: ""storage_read"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + i    2.678
              µs

Reads = 0 + (1 * i)
Writes = 0 + (0 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    0     0.279      0.01    3.5%
   20     45.54     0.064    0.1%
   40     91.45     0.222    0.2%
   60     137.6     0.259    0.1%
   80     183.9     0.904    0.4%
  100     229.2     0.906    0.3%
  120     278.1     1.441    0.5%
  140     330.6     1.272    0.3%
  160     373.8     0.955    0.2%
  180     423.8     1.971    0.4%
  200     477.2     1.518    0.3%
  220     529.1     5.325    1.0%
  240       596     11.08    1.8%
  260     649.4     1.853    0.2%
  280     700.8     1.617    0.2%
  300     746.1      6.48    0.8%
  320     799.2     8.408    1.0%
  340     841.3      7.71    0.9%
  360     895.2     8.519    0.9%
  380     949.5     7.855    0.8%
  400     987.2     6.052    0.6%
  420      1045     15.39    1.4%
  440      1098     11.54    1.0%
  460      1196     13.69    1.1%
  480      1219     9.352    0.7%
  500      1272     7.975    0.6%
  520      1305     9.974    0.7%
  540      1385     17.74    1.2%
  560      1430     8.886    0.6%
  580      1498     6.026    0.4%
  600      1540     10.03    0.6%
  620      1605     14.45    0.9%
  640      1645     12.02    0.7%
  660      1727     13.26    0.7%
  680      1743     13.77    0.7%
  700      1834     10.57    0.5%
  720      1868         7    0.3%
  740      1919     15.66    0.8%
  760      1976     8.574    0.4%
  780      2035     16.29    0.8%
  800      2085     12.02    0.5%
  820      2175      11.6    0.5%
  840      2194     22.72    1.0%
  860      2272     12.28    0.5%
  880      2330      10.5    0.4%
  900      2415     18.29    0.7%
  920      2464        16    0.6%
  940      2501     18.22    0.7%
  960      2566     14.12    0.5%
  980      2625     14.68    0.5%
 1000      2681     16.77    0.6%

Quality and confidence:
param     error
i         0.004

Model:
Time ~=        0
    + i    2.694
              µs

Reads = 0 + (1 * i)
Writes = 0 + (0 * i)

Pallet: ""frame_benchmarking"", Extrinsic: ""storage_write"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + i    0.602
              µs

Reads = 0 + (0 * i)
Writes = 0 + (1 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    0     0.299     0.006    2.0%
   20     11.66     0.202    1.7%
   40     23.44     0.093    0.3%
   60     35.04     0.451    1.2%
   80     45.37     0.099    0.2%
  100      57.2     0.161    0.2%
  120      70.1       1.4    1.9%
  140     80.84     0.173    0.2%
  160     92.83     0.207    0.2%
  180     104.2     0.298    0.2%
  200     116.3     0.264    0.2%
  220     129.5     2.228    1.7%
  240     141.6     1.777    1.2%
  260     153.9     1.175    0.7%
  280     163.8     0.116    0.0%
  300     175.7     0.305    0.1%
  320     189.1     1.737    0.9%
  340     201.2     1.195    0.5%
  360     211.4     0.567    0.2%
  380     222.6     0.332    0.1%
  400     236.6      2.43    1.0%
  420     245.9     0.428    0.1%
  440     257.2      0.81    0.3%
  460     270.5     0.586    0.2%
  480     283.9     0.699    0.2%
  500     294.3      0.48    0.1%
  520     305.7     0.963    0.3%
  540     319.6     0.864    0.2%
  560     333.4     3.907    1.1%
  580     342.6     0.728    0.2%
  600     360.4     7.673    2.1%
  620     372.2     7.922    2.1%
  640     380.3     1.646    0.4%
  660     392.9     2.447    0.6%
  680     405.6     6.072    1.4%
  700       416     0.624    0.1%
  720     428.8     4.376    1.0%
  740     445.3     4.915    1.1%
  760     452.5     1.015    0.2%
  780     465.4      1.55    0.3%
  800     477.7     0.516    0.1%
  820     489.9     0.523    0.1%
  840     507.7     8.324    1.6%
  860     516.6     1.158    0.2%
  880       531     1.016    0.1%
  900     547.4     5.547    1.0%
  920     559.2     7.931    1.4%
  940     567.5     1.405    0.2%
  960     582.5     3.417    0.5%
  980     589.7      0.77    0.1%
 1000     607.3     4.503    0.7%

Quality and confidence:
param     error
i             0

Model:
Time ~=        0
    + i    0.606
              µs

Reads = 0 + (0 * i)
Writes = 0 + (1 * i)


```

</details>",10414,2021-12-02T20:21:09Z,0
192,emostov,bot merge,10414,2021-12-06T19:11:34Z,0
193,paritytech-processbot[bot], Error: Checks failed for 4271764f50bd9bf97b0643c3ba6f0dc84e2748c6,10414,2021-12-06T19:11:42Z,0
194,drahnr,bot merge,10414,2021-12-06T21:28:57Z,0
195,paritytech-processbot[bot], Error: Checks failed for 4271764f50bd9bf97b0643c3ba6f0dc84e2748c6,10414,2021-12-06T21:29:09Z,0
196,bkchr,bot merge,10428,2021-12-06T22:35:32Z,0
197,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10428,2021-12-06T22:35:43Z,0
198,bkchr,"> aura: [Parachain] ⌛️ Discarding proposal for slot 136537288; block production took too long

This is the problem. Your block production taking too long.",10407,2021-12-02T15:25:57Z,0
199,MrPai,"Thanks for your reply, if the chain will skip some blocks to get more time, as you mentioned here:
https://github.com/paritytech/substrate/issues/10064#issuecomment-947133536

we need to do data migration in `on_runtime_upgrade`, maybe this leads to the long block production time, do you have any suggestions? @bkchr ",10407,2021-12-03T01:17:22Z,0
200,bkchr,Can you maybe do it over multiple blocks?,10407,2021-12-03T11:03:57Z,0
201,MrPai,"> Can you maybe do it over multiple blocks?

`multiple blocks` seems like to be a scheme under discussion, as mentioned here: https://github.com/paritytech/substrate/issues/7911
May I ask if we have any solution in the current Substrate codebase? 

",10407,2021-12-03T12:17:37Z,0
202,bkchr,"I assume the migration is your own? 

If yes, then you need to either find a way to speed it up or how you can execute it over multiple blocks.",10407,2021-12-06T08:56:03Z,0
203,MrPai,"Now we upgrade it between two blocks, that succeed locally, migrate data by two times' runtime upgrade.

However failed on production, what should we do next, because it stop producing blocks, the Heiko parachain, @bkchr ",10407,2021-12-06T09:18:14Z,0
204,MrPai,"https://medium.com/altair-network/altair-runtime-upgrade-2-a-post-mortem-618d8c3b12d8
works for us, thanks, will close this issue.",10407,2021-12-07T02:12:29Z,0
205,thiolliere,"the job gitlab-check-dependent-polkadot fails with:
```
$ git clone --depth=1 ""--branch=$PIPELINE_SCRIPTS_TAG"" https://github.com/paritytech/pipeline-scripts
Cloning into 'pipeline-scripts'...
warning: Could not find remote branch vi-fix-check-dependent-3 to clone.
fatal: Remote branch vi-fix-check-dependent-3 not found in upstream origin
Cleaning up file based variables
```
So variable is override somewhere I don't know.",10433,2021-12-07T07:53:16Z,0
206,shawntabrizi,"Looking good otherwise, thank you.

Check the CI for some compiler issues and things you still need to fix.",10233,2021-11-11T14:04:08Z,0
207,shawntabrizi,/tip medium,10233,2021-11-11T14:04:26Z,0
208,substrate-tip-bot[bot],"Please fix the following problems before calling the tip bot again:
 * Contributor did not properly post their Polkadot or Kusama address. Make sure the pull request has: ""{network} address: {address}"".",10233,2021-11-11T14:04:27Z,0
209,ayevbeosa,"> 
> 
> /tip medium

Thanks for the tip 😀
I have added my wallet address now",10233,2021-11-11T14:33:02Z,0
210,shawntabrizi,/tip medium,10233,2021-11-11T15:39:08Z,0
211,substrate-tip-bot[bot],"A medium tip was successfully submitted for ayevbeosa (12dVgRw6ntsMQiETAoCBzu6MA7LPWagvU4Y1rH9jGPDHQvPX on polkadot). 

 https://polkadot.js.org/apps/#/treasury/tips",10233,2021-11-11T15:39:20Z,0
212,thiolliere,"* [x] Will depend on merging first this other PR https://github.com/paritytech/substrate/pull/10231 (which should be ready, just need to update master)",10233,2021-12-02T15:35:12Z,0
213,thiolliere,bot merge,10233,2021-12-07T02:08:31Z,0
214,paritytech-processbot[bot],Waiting for commit status.,10233,2021-12-07T02:08:40Z,0
215,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for da0f59fd40a8b387abd6e23c15a292e71341302c,10233,2021-12-07T02:41:08Z,0
216,thiolliere,bot merge,10233,2021-12-07T09:15:09Z,0
217,paritytech-processbot[bot],Waiting for commit status.,10233,2021-12-07T09:15:18Z,0
218,athei,/benchmark runtime pallet pallet_contracts,10082,2021-10-22T11:36:32Z,0
219,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-storage-deposit"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.015
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.015
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.191
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     69.36      0.57    0.8%
   20     58.69     0.333    0.5%
   40     95.28     0.396    0.4%
   60     129.2      0.52    0.4%
   80     163.8     2.459    1.5%
  100     204.4      2.63    1.2%
  120       242     1.749    0.7%
  140     280.5     1.323    0.4%
  160     321.6     3.557    1.1%
  180     363.2     2.527    0.6%
  200     408.6     2.663    0.6%
  220     452.9     2.916    0.6%
  240     495.6      2.48    0.5%
  260     528.6     4.902    0.9%
  280     576.3     4.542    0.7%
  300     648.1     8.399    1.2%
  320     665.6     7.539    1.1%
  340     717.9     2.574    0.3%
  360       766      10.2    1.3%
  380     817.5     11.37    1.3%
  400     863.7     11.96    1.3%
  420       894     3.974    0.4%
  440     947.5     9.468    0.9%
  460     994.9      13.9    1.3%
  480      1028     4.043    0.3%
  500      1074     6.079    0.5%
  520      1098     4.296    0.3%
  540      1178     17.09    1.4%
  560      1218     15.45    1.2%
  580      1255     14.03    1.1%
  600      1386     62.03    4.4%
  620      1340     10.87    0.8%
  640      1395     10.35    0.7%
  660      1452     22.26    1.5%
  680      1476     19.77    1.3%
  700      1509     19.85    1.3%
  720      1571     14.05    0.8%
  740      1607     12.63    0.7%
  760      1648     14.26    0.8%
  780      1691     14.29    0.8%
  800      1746     11.29    0.6%
  820      1800     13.74    0.7%
  840      1827     19.71    1.0%
  860      1886     13.27    0.7%
  880      1933     19.18    0.9%
  900      1956     11.08    0.5%
  920      2016     10.92    0.5%
  940      2042     18.53    0.9%
  960      2100     28.59    1.3%
  980      2159     19.29    0.8%
 1000      2193     23.53    1.0%
 1020      2212     13.83    0.6%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.198
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    101.2
    + q    0.322
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     3.083     0.009    0.2%
   20     84.43     1.033    1.2%
   40     97.22     0.762    0.7%
   60     108.2     0.722    0.6%
   80     119.2     0.985    0.8%
  100     128.7     0.934    0.7%
  120     139.1     1.036    0.7%
  140     146.6     0.812    0.5%
  160     158.6     2.798    1.7%
  180     170.1     2.709    1.5%
  200     179.4     2.658    1.4%
  220     187.2     2.196    1.1%
  240       196     1.769    0.9%
  260     201.7     2.014    0.9%
  280     212.9     1.574    0.7%
  300     212.8     1.906    0.8%
  320     221.9     1.819    0.8%
  340     232.1     2.231    0.9%
  360     212.4     1.455    0.6%
  380     222.9     2.741    1.2%
  400     229.2     1.643    0.7%
  420     238.2     7.622    3.1%
  440     240.3      1.56    0.6%
  460       246     0.889    0.3%
  480     251.8      1.98    0.7%
  500       261     1.606    0.6%
  520     264.3     1.911    0.7%
  540     272.9     0.838    0.3%
  560     284.5      5.03    1.7%
  580     288.1     1.826    0.6%
  600     295.6      1.45    0.4%
  620     302.5     1.804    0.5%
  640     309.7     1.712    0.5%
  660     313.7     1.068    0.3%
  680     321.8     0.795    0.2%
  700     327.5     1.046    0.3%
  720     336.4     1.592    0.4%
  740     340.9     1.157    0.3%
  760     348.8     1.099    0.3%
  780     356.1     1.695    0.4%
  800     360.5      1.81    0.5%
  820     366.2     0.926    0.2%
  840       373     1.161    0.3%
  860     377.3     1.192    0.3%
  880     381.4     1.105    0.2%
  900     388.1     1.167    0.3%
  920     393.7     1.299    0.3%
  940       402     1.422    0.3%
  960     404.4     1.585    0.3%
  980       412     1.214    0.2%
 1000     419.7     2.273    0.5%
 1020     422.1     1.112    0.2%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    96.94
    + q    0.329
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""instrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    51.02
    + c    70.37
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     54.69     0.085    0.1%
    2     198.3     0.319    0.1%
    4     335.5     0.219    0.0%
    6     459.3     0.245    0.0%
    8     609.9     7.755    1.2%
   10       746     13.56    1.8%
   12     872.9     12.72    1.4%
   14      1053     14.56    1.3%
   16      1160     9.494    0.8%
   18      1306     1.289    0.0%
   20      1442      15.6    1.0%
   22      1563      16.7    1.0%
   24      1684     12.75    0.7%
   26      1914     13.07    0.6%
   28      2031     13.07    0.6%
   30      2172     14.07    0.6%
   32      2287     18.09    0.7%
   34      2479     15.41    0.6%
   36      2587     13.36    0.5%
   38      2723     12.22    0.4%
   40      2832      10.5    0.3%
   42      2961      13.5    0.4%
   44      3090     11.62    0.3%
   46      3218     9.679    0.3%
   48      3327     16.64    0.5%
   50      3660     10.59    0.2%
   52      3778     10.03    0.2%
   54      3895     12.15    0.3%
   56      4018     10.89    0.2%
   58      4132     17.31    0.4%
   60      4275      15.6    0.3%
   62      4389     15.12    0.3%
   64      4511     12.83    0.2%
   66      4733     13.51    0.2%
   68      4857     13.43    0.2%
   70      4982     16.06    0.3%
   72      5100     12.19    0.2%
   74      5223     13.04    0.2%
   76      5347     10.44    0.1%
   78      5475     16.03    0.2%
   80      5617     20.14    0.3%
   82      5735     15.08    0.2%
   84      5841     14.66    0.2%
   86      5969     18.28    0.3%
   88      6092      11.4    0.1%
   90      6222     19.13    0.3%
   92      6341     16.65    0.2%
   94      6460     23.77    0.3%
   96      6571     16.39    0.2%
   98      7193     40.47    0.5%
  100      7259     24.28    0.3%
  102      7401     29.92    0.4%
  104      7516     21.22    0.2%
  106      7663     20.01    0.2%
  108      7748     15.32    0.1%
  110      7871     19.61    0.2%
  112      8003     19.79    0.2%
  114      8143     16.19    0.1%
  116      8256     30.55    0.3%
  118      8375     16.48    0.1%
  120      8516     17.78    0.2%
  122      8630     19.77    0.2%
  124      8752     27.11    0.3%
  126      8882     14.92    0.1%
  128      9006     14.38    0.1%

Quality and confidence:
param     error
c         0.091

Model:
Time ~=    32.25
    + c    70.54
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_load"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     8.21
    + c    1.452
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     7.386     0.064    0.8%
    2     11.12      0.07    0.6%
    4     14.19     0.113    0.7%
    6      16.9     0.076    0.4%
    8     19.84     0.099    0.4%
   10     22.34     0.061    0.2%
   12     25.58      0.09    0.3%
   14      28.7     0.056    0.1%
   16     31.36     0.273    0.8%
   18     35.34     0.155    0.4%
   20     37.94     0.078    0.2%
   22     41.16     0.103    0.2%
   24     43.71     0.105    0.2%
   26     46.65     0.064    0.1%
   28     49.13     0.402    0.8%
   30     51.82     0.098    0.1%
   32     54.63     0.087    0.1%
   34     57.86      0.12    0.2%
   36     60.99     0.099    0.1%
   38     63.58     0.227    0.3%
   40     66.29     0.121    0.1%
   42     69.28     0.157    0.2%
   44     71.72     0.052    0.0%
   46     74.69     0.183    0.2%
   48     77.79     0.169    0.2%
   50     80.75     0.192    0.2%
   52     83.42     0.125    0.1%
   54     86.87     0.485    0.5%
   56     89.21      0.17    0.1%
   58     91.96     0.158    0.1%
   60     94.78     0.211    0.2%
   62     97.73      0.11    0.1%
   64     100.4     0.235    0.2%
   66     103.4     0.148    0.1%
   68     106.3     0.162    0.1%
   70     109.4     0.393    0.3%
   72     112.5     0.136    0.1%
   74     115.6     0.157    0.1%
   76     118.3     0.224    0.1%
   78     121.4     0.182    0.1%
   80     124.3     0.051    0.0%
   82     127.1     0.129    0.1%
   84     130.1     0.127    0.0%
   86     138.6      8.15    5.8%
   88     135.8     0.103    0.0%
   90     138.8     0.221    0.1%
   92     141.5     0.119    0.0%
   94     144.7     0.102    0.0%
   96       148     0.133    0.0%
   98     150.2     0.134    0.0%
  100     153.4     0.146    0.0%
  102     156.2     0.114    0.0%
  104     159.3     0.237    0.1%
  106     161.9     0.138    0.0%
  108     164.8      0.18    0.1%
  110     167.7     0.117    0.0%
  112     170.6     0.127    0.0%
  114       174     0.089    0.0%
  116     176.6      0.09    0.0%
  118     179.5     0.133    0.0%
  120     182.3      0.18    0.0%
  122     185.4     0.075    0.0%
  124     189.1     0.639    0.3%
  126     191.4     0.193    0.1%
  128     194.4      0.14    0.0%

Quality and confidence:
param     error
c         0.001

Model:
Time ~=    8.252
    + c    1.453
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    633.3
    + c    179.2
    + s    1.998
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 5 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2658     12.87    0.4%
    1  1024      2858     9.858    0.3%
    2  1024      3038     10.71    0.3%
    3  1024      3200     12.05    0.3%
    4  1024      3390     18.95    0.5%
    5  1024      3553     12.42    0.3%
    6  1024      3724     10.38    0.2%
    7  1024      3919     11.16    0.2%
    8  1024      4067     13.47    0.3%
    9  1024      4299     15.12    0.3%
   10  1024      4449     19.25    0.4%
   11  1024      4607     12.11    0.2%
   12  1024      4762      12.9    0.2%
   13  1024      4999      17.5    0.3%
   14  1024      5162     14.77    0.2%
   15  1024      5331     20.64    0.3%
   16  1024      5467     8.469    0.1%
   17  1024      5797     25.03    0.4%
   18  1024      5963     42.33    0.7%
   19  1024      6103     12.26    0.2%
   20  1024      6271     19.75    0.3%
   21  1024      6448     18.25    0.2%
   22  1024      6610      14.2    0.2%
   23  1024      6759     13.29    0.1%
   24  1024      6895     7.008    0.1%
   25  1024      7280     14.01    0.1%
   26  1024      7421     15.35    0.2%
   27  1024      7560     21.32    0.2%
   28  1024      7708      12.8    0.1%
   29  1024      7864     17.23    0.2%
   30  1024      8030     17.66    0.2%
   31  1024      8188     26.67    0.3%
   32  1024      8346     17.25    0.2%
   33  1024      8735     15.35    0.1%
   34  1024      8905     27.05    0.3%
   35  1024      9207     19.47    0.2%
   36  1024      9217     16.74    0.1%
   37  1024      9366     17.99    0.1%
   38  1024      9552     11.04    0.1%
   39  1024      9697     21.11    0.2%
   40  1024      9940     49.63    0.4%
   41  1024     10020     23.44    0.2%
   42  1024     10170     27.57    0.2%
   43  1024     10330     35.32    0.3%
   44  1024     10460     27.03    0.2%
   45  1024     10700     43.72    0.4%
   46  1024     10780     20.18    0.1%
   47  1024     11000     33.89    0.3%
   48  1024     11520      25.8    0.2%
   49  1024     11600     24.76    0.2%
   50  1024     11800     36.01    0.3%
   51  1024     11930     30.99    0.2%
   52  1024     12060     19.24    0.1%
   53  1024     12270      24.6    0.2%
   54  1024     12380     26.57    0.2%
   55  1024     12570     29.67    0.2%
   56  1024     12710     17.72    0.1%
   57  1024     12850     27.35    0.2%
   58  1024     13040     50.19    0.3%
   59  1024     13190     53.72    0.4%
   60  1024     13310     31.06    0.2%
   61  1024     13490     43.11    0.3%
   62  1024     13700     40.65    0.2%
   63  1024     13820     32.43    0.2%
   64     0     11850     38.17    0.3%
   64    20     11980     16.56    0.1%
   64    40     12130     43.98    0.3%
   64    60     11980     44.69    0.3%
   64    80     12020     22.14    0.1%
   64   100     12070     24.75    0.2%
   64   120     12110     33.43    0.2%
   64   140     12180     53.85    0.4%
   64   160     12370     19.88    0.1%
   64   180     12230     31.39    0.2%
   64   200     12270     24.67    0.2%
   64   220     12300     20.02    0.1%
   64   240     12340     44.55    0.3%
   64   260     12380     44.35    0.3%
   64   280     12430     29.37    0.2%
   64   300     12460     33.81    0.2%
   64   320     12490     22.78    0.1%
   64   340     12550     27.79    0.2%
   64   360     12630     19.55    0.1%
   64   380     12620     28.79    0.2%
   64   400     12710     25.36    0.1%
   64   420     12720     28.06    0.2%
   64   440     12760     39.68    0.3%
   64   460     12770      46.6    0.3%
   64   480     12830     25.11    0.1%
   64   500     12850     37.05    0.2%
   64   520     12940     55.23    0.4%
   64   540     12930     28.83    0.2%
   64   560     13310     85.13    0.6%
   64   580     13020      41.3    0.3%
   64   600     13070     27.96    0.2%
   64   620     13110     29.51    0.2%
   64   640     13320     37.76    0.2%
   64   660     13190        28    0.2%
   64   680     13200     28.22    0.2%
   64   700     13310     41.44    0.3%
   64   720     13310     41.11    0.3%
   64   740     13370     46.41    0.3%
   64   760     13380     18.94    0.1%
   64   780     13420        40    0.2%
   64   800     14020     27.32    0.1%
   64   820     13520     23.57    0.1%
   64   840     13550        52    0.3%
   64   860     13600        52    0.3%
   64   880     13600     24.72    0.1%
   64   900     13720     24.92    0.1%
   64   920     13700     43.05    0.3%
   64   940     13730     33.44    0.2%
   64   960     13840     48.25    0.3%
   64   980     13850     29.21    0.2%
   64  1000     13870     20.28    0.1%
   64  1020     13920     28.39    0.2%
   64  1024     13960     21.34    0.1%

Quality and confidence:
param     error
c         0.181
s         0.011

Model:
Time ~=      508
    + c    177.1
    + s    2.167
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 5 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    262.8
    + s    1.978
              µs

Reads = 6 + (0 * s)
Writes = 4 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     245.9     0.444    0.1%
   20     306.2     8.937    2.9%
   40     339.6     0.622    0.1%
   60     379.9     0.642    0.1%
   80     420.1     0.319    0.0%
  100     462.9     7.764    1.6%
  120     506.6      6.46    1.2%
  140     545.3     14.27    2.6%
  160       584     11.24    1.9%
  180     617.6      0.53    0.0%
  200     663.1     8.593    1.2%
  220     698.4     2.388    0.3%
  240     736.5     1.138    0.1%
  260     784.6      9.82    1.2%
  280     819.7     10.94    1.3%
  300     864.8     12.91    1.4%
  320     900.5      9.58    1.0%
  340     950.3     15.06    1.5%
  360     988.2     16.29    1.6%
  380      1018     8.315    0.8%
  400      1069     14.45    1.3%
  420      1103     13.21    1.1%
  440      1147     14.86    1.2%
  460      1186     16.02    1.3%
  480      1215     8.916    0.7%
  500      1271      15.4    1.2%
  520      1285     12.22    0.9%
  540      1334     15.31    1.1%
  560      1372      14.2    1.0%
  580      1409        12    0.8%
  600      1451     14.99    1.0%
  620      1495     17.08    1.1%
  640      1521      11.4    0.7%
  660      1576     16.09    1.0%
  680      1611     13.11    0.8%
  700      1648     14.93    0.9%
  720      1695      14.3    0.8%
  740      1724      11.8    0.6%
  760      1771     15.68    0.8%
  780      1808     13.91    0.7%
  800      1872     8.362    0.4%
  820      1896      15.2    0.8%
  840      1937     12.68    0.6%
  860      1974     15.88    0.8%
  880      1994     7.864    0.3%
  900      2059      12.6    0.6%
  920      2089     17.64    0.8%
  940      2125     13.37    0.6%
  960      2168      15.8    0.7%
  980      2215     15.96    0.7%
 1000      2246     14.28    0.6%
 1020      2295     15.52    0.6%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    264.2
    + s    1.986
              µs

Reads = 6 + (0 * s)
Writes = 4 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    209.1
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    209.1
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    94.68
    + c     70.8
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     92.29     0.186    0.2%
    1     169.6     0.393    0.2%
    2     244.9     3.449    1.4%
    3     306.6     9.101    2.9%
    4     377.3     0.267    0.0%
    5     442.4     0.181    0.0%
    6       514     13.97    2.7%
    7     595.9     9.391    1.5%
    8     666.8      15.1    2.2%
    9     718.5     0.289    0.0%
   10     789.6     14.07    1.7%
   11     857.3     16.44    1.9%
   12     910.7     14.02    1.5%
   13      1038     17.86    1.7%
   14      1090     15.13    1.3%
   15      1166     19.34    1.6%
   16      1215     15.24    1.2%
   17      1304     12.49    0.9%
   18      1367     15.74    1.1%
   19      1438     16.25    1.1%
   20      1498     14.01    0.9%
   21      1560     18.01    1.1%
   22      1630     14.39    0.8%
   23      1681     12.47    0.7%
   24      1731     13.18    0.7%
   25      1903     15.17    0.7%
   26      1981     21.27    1.0%
   27      2034     16.16    0.7%
   28      2100     16.72    0.7%
   29      2162     12.38    0.5%
   30      2212     13.28    0.6%
   31      2282     11.94    0.5%
   32      2344     15.53    0.6%
   33      2451     8.396    0.3%
   34      2528      12.5    0.4%
   35      2580     19.77    0.7%
   36      2633     2.973    0.1%
   37      2691     15.55    0.5%
   38      2761     9.946    0.3%
   39      2816     15.64    0.5%
   40      2876     17.61    0.6%
   41      2947     8.652    0.2%
   42      2986     12.07    0.4%
   43      3064     11.74    0.3%
   44      3124     11.17    0.3%
   45      3195     15.03    0.4%
   46      3255     10.69    0.3%
   47      3318     18.12    0.5%
   48      3369      12.8    0.3%
   49      3666     11.81    0.3%
   50      3724     11.64    0.3%
   51      3791     11.72    0.3%
   52      3860     12.25    0.3%
   53      3913     8.404    0.2%
   54      3976     11.84    0.2%
   55      4036     14.26    0.3%
   56      4090     10.49    0.2%
   57      4154     6.587    0.1%
   58      4217     11.33    0.2%
   59      4277     9.836    0.2%
   60      4349     10.76    0.2%
   61      4511     19.22    0.4%
   62      4481     18.47    0.4%
   63      4519     10.44    0.2%
   64      4606     21.44    0.4%

Quality and confidence:
param     error
c         0.101

Model:
Time ~=    84.38
    + c    71.02
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.23
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.23
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    472.5
    + r    115.3
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       464     4.451    0.9%
    1     596.2      16.3    2.7%
    2     698.7     3.023    0.4%
    3     812.5     5.501    0.6%
    4     942.7     12.85    1.3%
    5      1074     14.73    1.3%
    6      1167     12.72    1.0%
    7      1278     12.95    1.0%
    8      1387     10.38    0.7%
    9      1510     11.61    0.7%
   10      1612     12.96    0.8%
   11      1739     13.72    0.7%
   12      1847     12.86    0.6%
   13      1952     11.74    0.6%
   14      2103     13.43    0.6%
   15      2213     12.95    0.5%
   16      2321     12.48    0.5%
   17      2458      5.37    0.2%
   18      2565     10.18    0.3%
   19      2675     15.93    0.5%
   20      2776     16.46    0.5%

Quality and confidence:
param     error
r         0.191

Model:
Time ~=    470.4
    + r    115.8
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      473
    + r    115.8
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     463.6      1.76    0.3%
    1     582.1     0.368    0.0%
    2     700.1      2.69    0.3%
    3     816.8     8.591    1.0%
    4     944.8     8.009    0.8%
    5      1067     13.17    1.2%
    6      1178     16.09    1.3%
    7      1293     14.56    1.1%
    8      1404     13.95    0.9%
    9      1516     15.58    1.0%
   10      1621     7.851    0.4%
   11      1740     12.21    0.7%
   12      1860     16.35    0.8%
   13      1962     11.99    0.6%
   14      2126     10.02    0.4%
   15      2218     12.83    0.5%
   16      2348     8.197    0.3%
   17      2436     11.43    0.4%
   18      2578     12.02    0.4%
   19      2669     12.25    0.4%
   20      2788     13.69    0.4%

Quality and confidence:
param     error
r         0.188

Model:
Time ~=    471.9
    + r    116.2
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    467.7
    + r    115.4
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     462.3     0.242    0.0%
    1     583.3     4.633    0.7%
    2     697.3     3.181    0.4%
    3     808.7     2.329    0.2%
    4     941.6      10.6    1.1%
    5      1044      1.39    0.1%
    6      1175     12.81    1.0%
    7      1271     11.39    0.8%
    8      1380     8.575    0.6%
    9      1492       9.6    0.6%
   10      1611     12.19    0.7%
   11      1746     11.26    0.6%
   12      1847     10.41    0.5%
   13      1958      12.9    0.6%
   14      2104     15.76    0.7%
   15      2223     13.74    0.6%
   16      2325     13.73    0.5%
   17      2426     9.831    0.4%
   18      2542     10.52    0.4%
   19      2677      11.8    0.4%
   20      2788     17.58    0.6%

Quality and confidence:
param     error
r          0.17

Model:
Time ~=    463.9
    + r      116
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    469.8
    + r    333.2
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     464.7     1.723    0.3%
    1     809.3     11.24    1.3%
    2      1132     2.749    0.2%
    3      1484     13.67    0.9%
    4      1812     15.76    0.8%
    5      2143     14.11    0.6%
    6      2471     12.64    0.5%
    7      2800     17.62    0.6%
    8      3137     8.046    0.2%
    9      3462     8.569    0.2%
   10      3785     7.014    0.1%
   11      4111     6.748    0.1%
   12      4441     9.898    0.2%
   13      4776      11.1    0.2%
   14      5162     12.43    0.2%
   15      5494     14.78    0.2%
   16      5814     26.07    0.4%
   17      6149     14.46    0.2%
   18      6470     12.42    0.1%
   19      6831     25.65    0.3%
   20      7149     22.52    0.3%

Quality and confidence:
param     error
r         0.242

Model:
Time ~=    465.7
    + r    333.9
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    462.8
    + r    116.2
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     449.8     0.267    0.0%
    1     574.1     11.34    1.9%
    2     685.4     1.193    0.1%
    3       798     3.172    0.3%
    4     935.9     12.41    1.3%
    5      1040     0.886    0.0%
    6      1169     14.14    1.2%
    7      1285     12.54    0.9%
    8      1410     14.72    1.0%
    9      1527     15.23    0.9%
   10      1633     18.33    1.1%
   11      1775     8.018    0.4%
   12      1857     14.09    0.7%
   13      1960     10.97    0.5%
   14      2106     12.32    0.5%
   15      2212     13.17    0.5%
   16      2322     15.73    0.6%
   17      2451     13.04    0.5%
   18      2550      11.5    0.4%
   19      2667     10.04    0.3%
   20      2774     15.76    0.5%

Quality and confidence:
param     error
r         0.198

Model:
Time ~=    463.4
    + r    116.4
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    461.6
    + r    116.7
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     450.3     0.312    0.0%
    1     577.9     13.49    2.3%
    2     686.5      4.18    0.6%
    3     798.5     4.922    0.6%
    4       930      2.18    0.2%
    5      1064     15.61    1.4%
    6      1159     6.829    0.5%
    7      1292     15.13    1.1%
    8      1400     11.78    0.8%
    9      1514      13.8    0.9%
   10      1643      13.5    0.8%
   11      1738     11.84    0.6%
   12      1852     11.02    0.5%
   13      1987     17.76    0.8%
   14      2107        15    0.7%
   15      2217     14.25    0.6%
   16      2340     7.802    0.3%
   17      2458     5.453    0.2%
   18      2571     12.67    0.4%
   19      2668     11.34    0.4%
   20      2791     12.79    0.4%

Quality and confidence:
param     error
r          0.17

Model:
Time ~=    460.2
    + r      117
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    463.2
    + r    116.1
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     461.9     13.01    2.8%
    1     568.2     0.245    0.0%
    2     688.8     4.809    0.6%
    3     804.4     10.26    1.2%
    4     944.3     7.962    0.8%
    5      1048     12.37    1.1%
    6      1166     14.78    1.2%
    7      1284     10.89    0.8%
    8      1416     9.607    0.6%
    9      1523     15.42    1.0%
   10      1636     16.72    1.0%
   11      1729     10.08    0.5%
   12      1858     15.57    0.8%
   13      1978     10.86    0.5%
   14      2120     16.03    0.7%
   15      2215     14.79    0.6%
   16      2334     17.87    0.7%
   17      2438     11.01    0.4%
   18      2550     15.86    0.6%
   19      2659      10.2    0.3%
   20      2776     9.088    0.3%

Quality and confidence:
param     error
r         0.195

Model:
Time ~=    466.9
    + r    116.1
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      467
    + r    116.3
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     450.4     0.561    0.1%
    1       593     15.06    2.5%
    2     698.7     2.865    0.4%
    3     810.7     0.979    0.1%
    4     936.5     7.233    0.7%
    5      1049        10    0.9%
    6      1181     13.38    1.1%
    7      1295     14.42    1.1%
    8      1417     11.81    0.8%
    9      1509     9.768    0.6%
   10      1619     11.03    0.6%
   11      1741     13.54    0.7%
   12      1867     13.92    0.7%
   13      1975     11.98    0.6%
   14      2109     15.86    0.7%
   15      2220     9.662    0.4%
   16      2324      9.65    0.4%
   17      2462     14.61    0.5%
   18      2566     12.18    0.4%
   19      2696     6.343    0.2%
   20      2776     11.34    0.4%

Quality and confidence:
param     error
r         0.178

Model:
Time ~=    467.7
    + r    116.5
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    468.6
    + r    276.3
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     450.3     0.408    0.0%
    1     747.2     7.774    1.0%
    2      1025     11.77    1.1%
    3      1307     11.79    0.9%
    4      1583     10.99    0.6%
    5      1855     14.84    0.7%
    6      2130     7.786    0.3%
    7      2402     7.087    0.2%
    8      2675     8.306    0.3%
    9      2959     9.463    0.3%
   10      3229      10.9    0.3%
   11      3508      9.97    0.2%
   12      3791     14.39    0.3%
   13      4050     13.59    0.3%
   14      4326     11.97    0.2%
   15      4608     16.25    0.3%
   16      4866     14.21    0.2%
   17      5200     18.86    0.3%
   18      5455     13.18    0.2%
   19      5723     15.87    0.2%
   20      6007     12.95    0.2%

Quality and confidence:
param     error
r         0.193

Model:
Time ~=    467.2
    + r    276.6
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    195.9
    + r    52.31
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.2      1.21    0.6%
    1     247.1     0.273    0.1%
    2     299.8     0.472    0.1%
    3     358.6     0.336    0.0%
    4     409.7     0.547    0.1%
    5     449.9     1.567    0.3%
    6     505.3     1.137    0.2%
    7     561.2     7.393    1.3%
    8     610.2     5.467    0.8%
    9     669.2     13.81    2.0%
   10     723.1     10.59    1.4%
   11     782.3      11.3    1.4%
   12     827.7     5.598    0.6%
   13     887.3     12.51    1.4%
   14     936.5     10.37    1.1%
   15     986.8     9.992    1.0%
   16      1033      4.23    0.4%
   17      1087     2.792    0.2%
   18      1137     9.226    0.8%
   19      1191     9.264    0.7%
   20      1238     6.467    0.5%

Quality and confidence:
param     error
r         0.101

Model:
Time ~=    195.3
    + r    52.54
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    469.8
    + r    99.16
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     466.1       8.3    1.7%
    1     567.8     4.531    0.7%
    2     666.2      2.87    0.4%
    3       766     8.772    1.1%
    4     878.2     12.49    1.4%
    5     971.5     11.53    1.1%
    6      1072      15.3    1.4%
    7      1157     12.21    1.0%
    8      1260      14.2    1.1%
    9      1364     13.47    0.9%
   10      1451      12.1    0.8%
   11      1544     9.762    0.6%
   12      1641     10.73    0.6%
   13      1744     14.94    0.8%
   14      1878     13.37    0.7%
   15      1970     14.98    0.7%
   16      2071     7.537    0.3%
   17      2160     16.08    0.7%
   18      2248     13.74    0.6%
   19      2367     13.08    0.5%
   20      2467      12.3    0.4%

Quality and confidence:
param     error
r         0.182

Model:
Time ~=    466.5
    + r    99.62
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    601.3
    + n    38.05
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     579.5     14.54    2.5%
   20      1341      14.9    1.1%
   40      2122     8.997    0.4%
   60      2884     3.679    0.1%
   80      3654     10.98    0.3%
  100      4403     11.43    0.2%
  120      5172     11.43    0.2%
  140      5946     17.51    0.2%
  160      6691     18.12    0.2%
  180      7455      17.5    0.2%
  200      8213     14.42    0.1%
  220      8977     13.16    0.1%
  240      9745     25.55    0.2%
  260     10480     40.42    0.3%
  280     11230     14.15    0.1%
  300     12000     25.95    0.2%
  320     12780     37.34    0.2%
  340     13540     58.09    0.4%
  360     14280     28.43    0.1%
  380     15050     30.83    0.2%
  400     15810     26.31    0.1%
  420     16580     32.66    0.1%
  440     17340     28.43    0.1%
  460     18120     30.48    0.1%
  480     18850     22.64    0.1%
  500     19630     29.54    0.1%
  520     20370     31.65    0.1%
  540     21140     40.34    0.1%
  560     21920     20.73    0.0%
  580     22690     46.83    0.2%
  600     23450     33.41    0.1%
  620     24190     12.03    0.0%
  640     24960     31.86    0.1%
  660     25700     36.34    0.1%
  680     26500     26.86    0.1%
  700     27260     38.47    0.1%
  720     28010     28.22    0.1%
  740     28750     40.56    0.1%
  760     29580     42.45    0.1%
  780     30280     39.32    0.1%
  800     31170     118.7    0.3%
  820     31770     44.36    0.1%
  840     32580     45.73    0.1%
  860     33300     28.17    0.0%
  880     34060     36.88    0.1%
  900     34860     56.07    0.1%
  920     35600      39.2    0.1%
  940     36390     37.46    0.1%
  960     37130     41.17    0.1%
  980     37870     23.56    0.0%
 1000     38630     32.34    0.0%
 1020     39400     36.15    0.0%

Quality and confidence:
param     error
n         0.006

Model:
Time ~=    598.8
    + n    38.06
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    440.9
    + r    14.97
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       444     8.234    1.8%
    1     455.8      0.15    0.0%

Quality and confidence:
param     error
r         2.745

Model:
Time ~=      444
    + r    11.81
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    456.3
    + n    0.625
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     455.6     0.375    0.0%
   20     470.2     4.253    0.9%
   40     481.1     0.177    0.0%
   60     493.6     0.251    0.0%
   80     508.6     6.574    1.2%
  100     518.5     0.396    0.0%
  120     532.2     4.229    0.7%
  140     544.8     3.764    0.6%
  160     556.4     0.221    0.0%
  180     572.4     6.053    1.0%
  200     583.8     7.426    1.2%
  220     594.1     0.239    0.0%
  240     612.6      12.2    1.9%
  260     618.7     0.324    0.0%
  280     633.2     6.325    0.9%
  300     643.6     0.134    0.0%
  320     672.2     16.45    2.4%
  340     685.2     16.79    2.4%
  360     689.4     13.26    1.9%
  380     702.7     13.19    1.8%
  400       709     9.074    1.2%
  420     720.3     5.474    0.7%
  440     734.1     8.047    1.0%
  460     745.3      3.89    0.5%
  480       767     15.26    1.9%
  500     777.9     8.752    1.1%
  520     794.1     12.81    1.6%
  540     794.1     0.708    0.0%
  560     813.3     11.29    1.3%
  580       821      3.78    0.4%
  600     837.3     9.587    1.1%
  620     843.4     0.444    0.0%
  640     866.6     12.55    1.4%
  660       872     7.416    0.8%
  680     884.6     7.364    0.8%
  700     898.9     10.57    1.1%
  720     909.9     7.559    0.8%
  740     924.1     8.644    0.9%
  760     935.1     8.471    0.9%
  780     947.4      6.37    0.6%
  800     973.5     14.58    1.4%
  820     976.8     9.642    0.9%
  840     984.6     7.296    0.7%
  860      1001     10.99    1.0%
  880      1020     14.85    1.4%
  900      1028     12.56    1.2%
  920      1042     14.02    1.3%
  940      1042     3.829    0.3%
  960      1062     9.976    0.9%
  980      1083     11.81    1.0%
 1000      1090     9.544    0.8%
 1020      1096     6.149    0.5%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    457.8
    + n    0.632
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    462.5
    + r    87.53
              µs

Reads = 4 + (4 * r)
Writes = 2 + (4 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     462.7     0.365    0.0%
    1     550.8     2.151    0.3%

Quality and confidence:
param     error
r         0.727

Model:
Time ~=    462.7
    + r    88.13
              µs

Reads = 4 + (4 * r)
Writes = 2 + (4 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    460.1
    + r    375.7
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     463.6     0.264    0.0%
    1     842.7     6.314    0.7%
    2      1208     12.17    1.0%
    3      1603     15.18    0.9%
    4      1953     12.63    0.6%
    5      2335     11.88    0.5%
    6      2708     12.18    0.4%
    7      3057     9.632    0.3%
    8      3434     10.78    0.3%
    9      3844     8.419    0.2%
   10      4207     19.61    0.4%
   11      4603     16.29    0.3%
   12      4983     19.13    0.3%
   13      5331     21.61    0.4%
   14      5687     24.14    0.4%
   15      6065     12.53    0.2%
   16      6411     13.72    0.2%
   17      6918      13.4    0.1%
   18      7270     22.72    0.3%
   19      7612      11.8    0.1%
   20      7989     17.05    0.2%

Quality and confidence:
param     error
r          0.36

Model:
Time ~=    451.2
    + r    376.4
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    458.8
    + r    637.1
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     454.4     0.274    0.0%
    1      1111     17.03    1.5%
    2      1743     15.46    0.8%
    3      2383     7.626    0.3%
    4      3013     9.366    0.3%
    5      3656     7.019    0.1%
    6      4287     20.49    0.4%
    7      4921     17.75    0.3%
    8      5575     12.82    0.2%
    9      6175     14.45    0.2%
   10      6821     12.37    0.1%
   11      7450     19.58    0.2%
   12      8094     12.58    0.1%
   13      8683     21.36    0.2%
   14      9423     45.69    0.4%
   15      9937     12.84    0.1%
   16     10600     25.85    0.2%
   17     11310     30.78    0.2%
   18     11970     29.66    0.2%
   19     12620     25.46    0.2%
   20     13270     34.95    0.2%

Quality and confidence:
param     error
r         0.474

Model:
Time ~=    454.6
    + r    637.9
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1193
    + t    463.8
    + n    163.6
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 2 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3751      8.56    0.2%
    1    16      4308     9.527    0.2%
    2    16      4796     12.97    0.2%
    3    16      5237     25.51    0.4%
    4     0      3025     12.62    0.4%
    4     1      3236     27.76    0.8%
    4     2      3365     11.27    0.3%
    4     3      3504      15.8    0.4%
    4     4      3690     18.62    0.5%
    4     5      3852     15.15    0.3%
    4     6      4025     15.85    0.3%
    4     7      4170     16.76    0.4%
    4     8      4305     5.712    0.1%
    4     9      4478     11.52    0.2%
    4    10      4747     51.34    1.0%
    4    11      4806      12.3    0.2%
    4    12      5019     16.99    0.3%
    4    13      5169     14.95    0.2%
    4    14      5350     9.681    0.1%
    4    15      5504      9.95    0.1%
    4    16      5641     17.72    0.3%

Quality and confidence:
param     error
t         2.659
n         0.524

Model:
Time ~=     1175
    + t    463.7
    + n    164.8
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 2 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    203.7
    + r    69.54
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     210.8     0.235    0.1%
    1     272.4      0.16    0.0%
    2       342     0.256    0.0%
    3     413.5     0.809    0.1%
    4     479.4     0.796    0.1%
    5     543.6     0.617    0.1%
    6     626.2     6.874    1.0%
    7     689.2     1.655    0.2%
    8     754.6     1.212    0.1%
    9     821.3     3.598    0.4%
   10       889     2.478    0.2%
   11     983.6      10.2    1.0%
   12      1052     7.763    0.7%
   13      1117     11.93    1.0%
   14      1190     11.26    0.9%
   15      1241      2.13    0.1%
   16      1313     11.41    0.8%
   17      1401     13.42    0.9%
   18      1460     8.845    0.6%
   19      1527     13.37    0.8%
   20      1606     14.39    0.8%

Quality and confidence:
param     error
r         0.123

Model:
Time ~=    201.6
    + r       70
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    493.5
    + r      383
              µs

Reads = 4 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       450     0.166    0.0%
    1     941.9     14.93    1.5%
    2      1282     10.98    0.8%
    3      1654     13.47    0.8%
    4      2015     11.32    0.5%
    5      2392     12.06    0.5%
    6      2791     8.549    0.3%
    7      3143     12.77    0.4%
    8      3522     7.682    0.2%
    9      3968     15.32    0.3%
   10      4311     11.45    0.2%
   11      4723     16.23    0.3%
   12      5098        19    0.3%
   13      5469     16.42    0.3%
   14      5829     12.75    0.2%
   15      6184     9.077    0.1%
   16      6569     34.11    0.5%
   17      6912     30.41    0.4%
   18      7470        42    0.5%
   19      7813     20.85    0.2%
   20      8212     19.72    0.2%

Quality and confidence:
param     error
r         0.528

Model:
Time ~=    489.4
    + r    383.2
              µs

Reads = 4 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    829.2
    + n    73.01
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     766.8     3.034    0.3%
    1     908.8     14.87    1.6%
    2     979.4      8.31    0.8%
    3      1052     8.445    0.8%
    4      1130     8.222    0.7%
    5      1188     3.736    0.3%
    6      1292     12.29    0.9%
    7      1342     9.938    0.7%
    8      1426     19.44    1.3%
    9      1482     14.97    1.0%
   10      1556     9.296    0.5%
   11      1638     20.61    1.2%
   12      1697     11.16    0.6%
   13      1792     13.99    0.7%
   14      1857     9.735    0.5%
   15      1915     14.43    0.7%
   16      1995     10.76    0.5%

Quality and confidence:
param     error
n         0.332

Model:
Time ~=    822.3
    + n    73.86
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    208.7
    + r    858.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     462.7      0.26    0.0%
    1      1242     3.797    0.3%
    2      2021     13.42    0.6%
    3      2819     18.09    0.6%
    4      3605     17.28    0.4%
    5      4482     12.41    0.2%
    6      5265     14.63    0.2%
    7      6090     30.23    0.4%
    8      6940      25.8    0.3%
    9      7802     28.62    0.3%
   10      8668     23.12    0.2%
   11      9507     41.03    0.4%
   12     10550     155.9    1.4%
   13     11450     39.97    0.3%
   14     12580     35.79    0.2%
   15     12960     63.77    0.4%
   16     13890     65.95    0.4%
   17     14750     42.99    0.2%
   18     15910     36.05    0.2%
   19     16740     65.64    0.3%
   20     17620     44.96    0.2%

Quality and confidence:
param     error
r          1.85

Model:
Time ~=    201.9
    + r    862.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      335
    + r    505.5
              µs

Reads = 4 + (100 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     465.9     2.144    0.4%
    1     949.3     5.295    0.5%
    2      1369     6.648    0.4%
    3      1874      11.7    0.6%
    4      2327     10.47    0.4%
    5      2832     9.625    0.3%
    6      3355     13.05    0.3%
    7      3805     20.35    0.5%
    8      4272     21.02    0.4%
    9      4846     18.09    0.3%
   10      5339     23.44    0.4%
   11      5902     19.53    0.3%
   12      6403     31.08    0.4%
   13      6862     27.96    0.4%
   14      7350     18.37    0.2%
   15      7887     9.097    0.1%
   16      8431     38.35    0.4%
   17      8935      27.4    0.3%
   18      9545     26.64    0.2%
   19     10100     36.73    0.3%
   20     10540     23.11    0.2%

Quality and confidence:
param     error
r         0.846

Model:
Time ~=    330.4
    + r    506.9
              µs

Reads = 4 + (100 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    756.8
    + n    110.9
              µs

Reads = 5 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     739.9     13.21    1.7%
    1     864.1     3.238    0.3%
    2     977.4     3.134    0.3%
    3      1092     4.237    0.3%
    4      1226     15.36    1.2%
    5      1309     0.609    0.0%
    6      1424     6.578    0.4%
    7      1541     15.92    1.0%
    8      1646      11.6    0.7%
    9      1762     20.03    1.1%
   10      1862     15.11    0.8%
   11      1970     8.933    0.4%
   12      2090     9.695    0.4%
   13      2193     12.34    0.5%
   14      2328     7.423    0.3%
   15      2426     14.83    0.6%
   16      2532      15.6    0.6%

Quality and confidence:
param     error
n         0.235

Model:
Time ~=    755.8
    + n    111.3
              µs

Reads = 5 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      406
    + r     4034
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       456     1.457    0.3%
    1      4447     10.05    0.2%
    2      8462     14.89    0.1%
    3     12480     31.96    0.2%
    4     16540     17.06    0.1%
    5     20610     19.21    0.0%
    6     24520     50.14    0.2%
    7     28890     50.73    0.1%
    8     32380     53.42    0.1%
    9     36550     40.12    0.1%
   10     40650     60.96    0.1%
   11     45040     71.64    0.1%
   12     49180     40.75    0.0%
   13     52780     61.58    0.1%
   14     56690     65.43    0.1%
   15     60600     84.59    0.1%
   16     64630     75.51    0.1%
   17     68590     73.36    0.1%
   18     73390     97.56    0.1%
   19     78280     48.82    0.0%
   20     81260      63.7    0.0%

Quality and confidence:
param     error
r         3.878

Model:
Time ~=    321.2
    + r     4046
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    101.5
    + r    39740
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     473.4     8.636    1.8%
    1     40120     40.94    0.1%
    2     79540     39.49    0.0%
    3    119300     64.09    0.0%
    4    159100     77.76    0.0%
    5    198400     87.98    0.0%
    6    238200     126.9    0.0%
    7    278200     135.2    0.0%
    8    317100     183.6    0.0%
    9    357000     140.3    0.0%
   10    396700     249.3    0.0%
   11    436500     252.8    0.0%
   12    478000     345.3    0.0%
   13    518400     178.3    0.0%
   14    558000     159.5    0.0%
   15    596200       115    0.0%
   16    636100     183.7    0.0%
   17    675300     127.9    0.0%
   18    716100     509.3    0.0%
   19    756100     703.2    0.0%
   20    794400     192.6    0.0%

Quality and confidence:
param     error
r         8.475

Model:
Time ~=        0
    + r    39760
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=   136700
    + t        0
    + i    63.01
    + o        0
              µs

Reads = 105 + (1 * t) + (0 * i) + (0 * o)
Writes = 102 + (0 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    201200     122.3    0.0%
    1     0   960      2256     8.648    0.3%
    1    20   960      3612     11.47    0.3%
    1    40   960      4903     9.356    0.1%
    1    60   960      6146     12.11    0.1%
    1    80   960      7435     16.14    0.2%
    1   100   960      8701     9.162    0.1%
    1   120   960      9958     11.83    0.1%
    1   140   960     11250     43.16    0.3%
    1   160   960     12510     18.99    0.1%
    1   180   960     13760     18.96    0.1%
    1   200   960     15030     19.27    0.1%
    1   220   960     16280     35.18    0.2%
    1   240   960     17560     38.64    0.2%
    1   260   960     18770     33.42    0.1%
    1   280   960     20040     31.09    0.1%
    1   300   960     21300     32.01    0.1%
    1   320   960     22570     29.77    0.1%
    1   340   960     23790     44.26    0.1%
    1   360   960     25070     45.88    0.1%
    1   380   960     26370     45.18    0.1%
    1   400   960     27570     29.13    0.1%
    1   420   960     28830     42.31    0.1%
    1   440   960     30100     29.76    0.0%
    1   460   960     31350     58.64    0.1%
    1   480   960     32590     49.24    0.1%
    1   500   960     33860     25.46    0.0%
    1   520   960     35160      38.6    0.1%
    1   540   960     36370     30.13    0.0%
    1   560   960     37640     35.98    0.0%
    1   580   960     38950     59.52    0.1%
    1   600   960     40150     37.73    0.0%
    1   620   960     41440     31.97    0.0%
    1   640   960     42630     17.02    0.0%
    1   660   960     43980     21.98    0.0%
    1   680   960     45160      42.3    0.0%
    1   700   960     46500     47.48    0.1%
    1   720   960     47720     55.16    0.1%
    1   740   960     49010     65.76    0.1%
    1   760   960     50210     41.38    0.0%
    1   780   960     51580     53.59    0.1%
    1   800   960     53640     74.49    0.1%
    1   820   960     53990     44.66    0.0%
    1   840   960     55300     60.61    0.1%
    1   860   960     56600     59.35    0.1%
    1   880   960     57800     42.66    0.0%
    1   900   960     59530     139.7    0.2%
    1   920   960     60360      61.4    0.1%
    1   940   960     61620     59.26    0.0%
    1   960   960     63830       133    0.2%
    1   980   960     64120     40.68    0.0%
    1  1000   960     65360     49.62    0.0%
    1  1020   960     66620     43.99    0.0%
    1  1024     0     66800     70.06    0.1%
    1  1024    19     66850     32.96    0.0%
    1  1024    38     66980     97.38    0.1%
    1  1024    57     66850     61.68    0.0%
    1  1024    76     66840     30.83    0.0%
    1  1024    95     66870     96.47    0.1%
    1  1024   114     66820     59.89    0.0%
    1  1024   133     66890     48.83    0.0%
    1  1024   152     66850     37.43    0.0%
    1  1024   171     66840     57.69    0.0%
    1  1024   190     66950     55.89    0.0%
    1  1024   209     66870     43.33    <truncated>...
```

</details>

ERROR: Unable to push ./frame/contracts/src/weights.rs",10082,2021-10-22T11:36:33Z,0
220,athei,/benchmark runtime pallet pallet_contracts,10082,2021-10-22T15:54:59Z,0
221,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-storage-deposit"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.969
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.969
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.177
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0      69.3     0.405    0.5%
   20     62.21     0.355    0.5%
   40     98.91     0.688    0.6%
   60     135.5     1.212    0.8%
   80     173.2     1.206    0.6%
  100     211.5     2.964    1.4%
  120       252     1.334    0.5%
  140       295     1.869    0.6%
  160     336.7     2.985    0.8%
  180     375.8     2.237    0.5%
  200       417     1.507    0.3%
  220     459.7     2.314    0.5%
  240     507.8     7.047    1.3%
  260     548.1     2.808    0.5%
  280     595.4     6.838    1.1%
  300     632.5     7.286    1.1%
  320       675     5.492    0.8%
  340     731.5     4.482    0.6%
  360     778.9     9.758    1.2%
  380     819.3     7.509    0.9%
  400     868.3     9.562    1.1%
  420     905.1     8.527    0.9%
  440       951     8.292    0.8%
  460     979.5     6.036    0.6%
  480      1051     12.43    1.1%
  500      1086      13.3    1.2%
  520      1146     12.17    1.0%
  540      1161     14.46    1.2%
  560      1203     10.83    0.9%
  580      1255      9.16    0.7%
  600      1283     12.48    0.9%
  620      1341     10.34    0.7%
  640      1388     14.03    1.0%
  660      1430     11.21    0.7%
  680      1482      16.9    1.1%
  700      1532     15.97    1.0%
  720      1582     16.82    1.0%
  740      1618     16.47    1.0%
  760      1664     11.32    0.6%
  780      1689     6.643    0.3%
  800      1736     16.28    0.9%
  820      1772     11.03    0.6%
  840      1810     21.03    1.1%
  860      1867      11.1    0.5%
  880      1915        10    0.5%
  900      1967     13.74    0.6%
  920      2014     13.79    0.6%
  940      2061        18    0.8%
  960      2082     17.25    0.8%
  980      2163     20.33    0.9%
 1000      2207      22.9    1.0%
 1020      2221     17.46    0.7%

Quality and confidence:
param     error
k         0.002

Model:
Time ~=        0
    + k    2.184
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    100.5
    + q    0.312
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     3.037     0.027    0.8%
   20     83.69     0.766    0.9%
   40     95.88     1.112    1.1%
   60     116.3     3.917    3.3%
   80     117.1     0.516    0.4%
  100     126.4     0.782    0.6%
  120       136     1.795    1.3%
  140     147.1     1.563    1.0%
  160     154.3     0.817    0.5%
  180     165.1     0.919    0.5%
  200     172.9     0.672    0.3%
  220     182.1     0.933    0.5%
  240     191.1     1.529    0.7%
  260       200     0.599    0.2%
  280     210.2     1.168    0.5%
  300     190.4     4.825    2.5%
  320     196.7     3.463    1.7%
  340     203.4      1.23    0.6%
  360     237.5     1.359    0.5%
  380     247.1     1.238    0.5%
  400     254.9      1.57    0.6%
  420     229.2     1.956    0.8%
  440     271.1     1.015    0.3%
  460     242.5     2.369    0.9%
  480     249.8     1.985    0.7%
  500     255.7     0.759    0.2%
  520     261.7     2.223    0.8%
  540       267     1.316    0.4%
  560       276     0.947    0.3%
  580     282.9     1.227    0.4%
  600     289.3     1.351    0.4%
  620     293.3     1.285    0.4%
  640       300     1.854    0.6%
  660     307.2     1.632    0.5%
  680     313.2     0.886    0.2%
  700     320.3     0.757    0.2%
  720       326     1.197    0.3%
  740     330.3      0.84    0.2%
  760     339.4     0.702    0.2%
  780     344.7     0.426    0.1%
  800     353.5     1.895    0.5%
  820     357.7      2.17    0.6%
  840       363     1.083    0.2%
  860     368.5     0.983    0.2%
  880     373.3     0.916    0.2%
  900     379.3     0.749    0.1%
  920     384.8     1.194    0.3%
  940       392     1.008    0.2%
  960     397.2     1.316    0.3%
  980     403.4     1.898    0.4%
 1000     409.2     1.281    0.3%
 1020       414     1.076    0.2%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    97.47
    + q    0.319
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""instrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     48.9
    + c    74.37
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     55.35     0.171    0.3%
    2     206.9     0.204    0.0%
    4     350.9      0.29    0.0%
    6       484     0.572    0.1%
    8     641.6     5.354    0.8%
   10     782.8     6.698    0.8%
   12     919.4     13.96    1.5%
   14      1098     12.41    1.1%
   16      1232     14.22    1.1%
   18      1393     15.02    1.0%
   20      1512     11.75    0.7%
   22      1651     12.04    0.7%
   24      1789     11.34    0.6%
   26      2028     3.084    0.1%
   28      2146     13.78    0.6%
   30      2284     2.409    0.1%
   32      2410     14.03    0.5%
   34      2600     13.09    0.5%
   36      2727     14.32    0.5%
   38      2868     15.83    0.5%
   40      2995     9.092    0.3%
   42      3125     2.593    0.0%
   44      3268     19.13    0.5%
   46      3390     19.01    0.5%
   48      3517     18.84    0.5%
   50      3858     18.23    0.4%
   52      3987     14.25    0.3%
   54      4113     12.49    0.3%
   56      4230     14.76    0.3%
   58      4385     14.78    0.3%
   60      4499     9.488    0.2%
   62      4634     13.76    0.2%
   64      4762     19.78    0.4%
   66      4999     9.552    0.1%
   68      5126     15.35    0.2%
   70      5275     19.93    0.3%
   72      5381        19    0.3%
   74      5528     15.69    0.2%
   76      5720     20.33    0.3%
   78      5787     14.19    0.2%
   80      5913     13.08    0.2%
   82      6091     22.75    0.3%
   84      6174     14.86    0.2%
   86      6315     24.03    0.3%
   88      6438     15.82    0.2%
   90      6567     12.62    0.1%
   92      6730     20.66    0.3%
   94      6840     17.81    0.2%
   96      6948      10.2    0.1%
   98      7518     16.78    0.2%
  100      7655     6.498    0.0%
  102      7796     15.42    0.1%
  104      7990     16.73    0.2%
  106      8078     28.83    0.3%
  108      8195     17.77    0.2%
  110      8330     11.02    0.1%
  112      8461     13.27    0.1%
  114      8716     46.29    0.5%
  116      8708      24.4    0.2%
  118      8852     33.03    0.3%
  120      8988     29.47    0.3%
  122      9098     15.17    0.1%
  124      9266     34.85    0.3%
  126      9358     10.56    0.1%
  128      9503     9.007    0.0%

Quality and confidence:
param     error
c         0.093

Model:
Time ~=    30.22
    + c     74.6
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_load"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    8.166
    + c    1.453
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     7.403     0.093    1.2%
    2     11.03      0.08    0.7%
    4      14.1     0.059    0.4%
    6     16.56     0.071    0.4%
    8     19.79     0.117    0.5%
   10     22.71     0.032    0.1%
   12     25.75     0.196    0.7%
   14     28.16     0.083    0.2%
   16     31.16     0.163    0.5%
   18     34.58     0.096    0.2%
   20      37.6     0.264    0.7%
   22     40.66     0.078    0.1%
   24     43.25     0.032    0.0%
   26     46.17     0.146    0.3%
   28     48.92     0.109    0.2%
   30     52.88     0.421    0.7%
   32     55.19     0.077    0.1%
   34     57.93     0.103    0.1%
   36     60.69     0.119    0.1%
   38     63.62     0.087    0.1%
   40     66.57      0.09    0.1%
   42        69     0.072    0.1%
   44     71.93      0.12    0.1%
   46     74.73     0.071    0.0%
   48      77.6     0.154    0.1%
   50     80.79     0.092    0.1%
   52     83.37     0.161    0.1%
   54     86.55     0.172    0.1%
   56     89.39     0.096    0.1%
   58     92.43     0.081    0.0%
   60     95.17     0.134    0.1%
   62     98.08     0.144    0.1%
   64     100.7     0.165    0.1%
   66     103.8     0.122    0.1%
   68     106.6      0.31    0.2%
   70     109.7     0.152    0.1%
   72     112.3     0.117    0.1%
   74     115.4     0.119    0.1%
   76     118.3     0.107    0.0%
   78     121.5     0.132    0.1%
   80     124.3      0.18    0.1%
   82     126.9      0.13    0.1%
   84     130.3      0.33    0.2%
   86     132.7     0.338    0.2%
   88     136.1      0.34    0.2%
   90     138.6     0.299    0.2%
   92     141.5     0.235    0.1%
   94     144.3     0.209    0.1%
   96     147.4     0.082    0.0%
   98     150.4     0.193    0.1%
  100     152.9     0.083    0.0%
  102     155.7     0.159    0.1%
  104     158.9     0.092    0.0%
  106     161.9     0.395    0.2%
  108     165.6     0.539    0.3%
  110     168.4     0.342    0.2%
  112     171.2     0.336    0.1%
  114     174.2     0.218    0.1%
  116     176.9     0.351    0.1%
  118     179.9      0.51    0.2%
  120     182.9     0.283    0.1%
  122       186     0.124    0.0%
  124     189.9     0.809    0.4%
  126     192.2     0.542    0.2%
  128     194.8     0.406    0.2%

Quality and confidence:
param     error
c             0

Model:
Time ~=    8.062
    + c    1.455
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    606.4
    + c    176.1
    + s    2.026
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 5 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2664     16.31    0.6%
    1  1024      2846     14.19    0.4%
    2  1024      3035     10.38    0.3%
    3  1024      3194     8.932    0.2%
    4  1024      3383     22.47    0.6%
    5  1024      3550     10.02    0.2%
    6  1024      3720     26.77    0.7%
    7  1024      3903     17.44    0.4%
    8  1024      4047     20.47    0.5%
    9  1024      4277     18.81    0.4%
   10  1024      4437      11.2    0.2%
   11  1024      4591     14.25    0.3%
   12  1024      4748     22.55    0.4%
   13  1024      4971     19.41    0.3%
   14  1024      5121     12.72    0.2%
   15  1024      5290     18.69    0.3%
   16  1024      5455     16.21    0.2%
   17  1024      5750      18.9    0.3%
   18  1024      5926     26.07    0.4%
   19  1024      6055     19.02    0.3%
   20  1024      6211     21.43    0.3%
   21  1024      6359        15    0.2%
   22  1024      6539     16.37    0.2%
   23  1024      6666     19.34    0.2%
   24  1024      6819     16.36    0.2%
   25  1024      7161     19.74    0.2%
   26  1024      7297     16.48    0.2%
   27  1024      7429     23.44    0.3%
   28  1024      7623     13.64    0.1%
   29  1024      7785     7.333    0.0%
   30  1024      7924     13.27    0.1%
   31  1024      8068     27.05    0.3%
   32  1024      8247     22.15    0.2%
   33  1024      8660     22.79    0.2%
   34  1024      8817     24.51    0.2%
   35  1024      8978     21.11    0.2%
   36  1024      9136     31.84    0.3%
   37  1024      9302     27.33    0.2%
   38  1024      9451     29.38    0.3%
   39  1024      9585     25.98    0.2%
   40  1024      9754     28.89    0.2%
   41  1024      9921     27.46    0.2%
   42  1024     10040     17.34    0.1%
   43  1024     10200     37.36    0.3%
   44  1024     10360     27.07    0.2%
   45  1024     10520     27.09    0.2%
   46  1024     10690     22.34    0.2%
   47  1024     10810     23.59    0.2%
   48  1024     10980     24.54    0.2%
   49  1024     11510      36.2    0.3%
   50  1024     11660     67.39    0.5%
   51  1024     11790     17.25    0.1%
   52  1024     11990     36.22    0.3%
   53  1024     12110     32.84    0.2%
   54  1024     12270     40.93    0.3%
   55  1024     12410     16.02    0.1%
   56  1024     12560     30.66    0.2%
   57  1024     12710     29.34    0.2%
   58  1024     12870     29.09    0.2%
   59  1024     13050      36.7    0.2%
   60  1024     13180     21.65    0.1%
   61  1024     13330     15.41    0.1%
   62  1024     13500     27.87    0.2%
   63  1024     13680     27.64    0.2%
   64     0     11700     45.22    0.3%
   64    20     11690     25.82    0.2%
   64    40     11820     28.05    0.2%
   64    60     11810     21.22    0.1%
   64    80     11850     37.36    0.3%
   64   100     11930     43.65    0.3%
   64   120     11940     32.12    0.2%
   64   140     11970     38.65    0.3%
   64   160     12010     35.86    0.2%
   64   180     12100     42.21    0.3%
   64   200     12150     34.47    0.2%
   64   220     12130     24.43    0.2%
   64   240     12180     29.49    0.2%
   64   260     12230     27.15    0.2%
   64   280     12250     26.44    0.2%
   64   300     12300      32.1    0.2%
   64   320     12340     25.18    0.2%
   64   340     12420     35.27    0.2%
   64   360     12410     25.53    0.2%
   64   380     12450     18.04    0.1%
   64   400     12510     24.29    0.1%
   64   420     12570     31.66    0.2%
   64   440     12590     19.92    0.1%
   64   460     12620     28.09    0.2%
   64   480     12660     32.99    0.2%
   64   500     12720     31.97    0.2%
   64   520     12750     31.91    0.2%
   64   540     12780     30.38    0.2%
   64   560     12830     19.59    0.1%
   64   580     12890     32.05    0.2%
   64   600     12910     38.77    0.3%
   64   620     12940     36.06    0.2%
   64   640     12980      28.6    0.2%
   64   660     13050     29.92    0.2%
   64   680     13080     19.62    0.1%
   64   700     13300     12.72    0.0%
   64   720     13150     33.12    0.2%
   64   740     13180      33.3    0.2%
   64   760     13220      21.3    0.1%
   64   780     13250     36.33    0.2%
   64   800     13300     15.79    0.1%
   64   820     13340     21.14    0.1%
   64   840     13380      47.3    0.3%
   64   860     13430     29.86    0.2%
   64   880     13510     25.76    0.1%
   64   900     13510     17.66    0.1%
   64   920     13570     24.98    0.1%
   64   940     13610     22.65    0.1%
   64   960     13650     24.14    0.1%
   64   980     13670     24.07    0.1%
   64  1000     13720     20.44    0.1%
   64  1020     13770     29.27    0.2%
   64  1024     13800     37.69    0.2%

Quality and confidence:
param     error
c         0.139
s         0.009

Model:
Time ~=    501.3
    + c    174.2
    + s    2.169
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 5 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    263.1
    + s    1.981
              µs

Reads = 6 + (0 * s)
Writes = 4 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     265.7     0.457    0.1%
   20     301.2     2.229    0.7%
   40     341.1      0.44    0.1%
   60     380.9     0.978    0.2%
   80     420.1     0.404    0.0%
  100     460.1     0.416    0.0%
  120     499.1     0.462    0.0%
  140     547.1     12.07    2.2%
  160     582.8     9.329    1.6%
  180       619     0.848    0.1%
  200     662.2     8.652    1.3%
  220     699.1      0.75    0.1%
  240     751.5      13.2    1.7%
  260     780.2     2.114    0.2%
  280     819.6     4.859    0.5%
  300     861.2     8.976    1.0%
  320     909.6     12.56    1.3%
  340     943.8     11.96    1.2%
  360     993.6     16.35    1.6%
  380      1015      0.61    0.0%
  400      1054     0.746    0.0%
  420      1110     14.89    1.3%
  440      1144      13.5    1.1%
  460      1184     12.88    1.0%
  480      1227      14.1    1.1%
  500      1262     11.32    0.8%
  520      1293        14    1.0%
  540      1324     11.19    0.8%
  560      1373     16.35    1.1%
  580      1408     14.82    1.0%
  600      1459     14.36    0.9%
  620      1489     15.69    1.0%
  640      1529     14.99    0.9%
  660      1566     14.11    0.9%
  680      1600     9.207    0.5%
  700      1650     14.07    0.8%
  720      1688     13.53    0.8%
  740      1728     14.95    0.8%
  760      1775     13.93    0.7%
  780      1810     13.55    0.7%
  800      1847     13.93    0.7%
  820      1899     12.57    0.6%
  840      1931     15.49    0.8%
  860      2005     2.333    0.1%
  880      2019      16.1    0.7%
  900      2052      14.3    0.6%
  920      2114      10.3    0.4%
  940      2133     15.96    0.7%
  960      2177     15.68    0.7%
  980      2219     20.83    0.9%
 1000      2253     15.88    0.7%
 1020      2297      12.2    0.5%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=      263
    + s    1.991
              µs

Reads = 6 + (0 * s)
Writes = 4 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    210.4
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    210.4
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    94.81
    + c    72.83
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     94.15     0.182    0.1%
    1     172.5     0.432    0.2%
    2     244.4     0.344    0.1%
    3       309     0.426    0.1%
    4     386.4     0.414    0.1%
    5     453.9      0.45    0.0%
    6     515.9     0.623    0.1%
    7     608.7     5.225    0.8%
    8     678.1     13.26    1.9%
    9     742.1     11.25    1.5%
   10     800.4     0.981    0.1%
   11     871.5     9.947    1.1%
   12     931.9      9.95    1.0%
   13      1051     10.37    0.9%
   14      1120     14.11    1.2%
   15      1193     10.48    0.8%
   16      1255     14.78    1.1%
   17      1339     13.08    0.9%
   18      1403     13.15    0.9%
   19      1456     3.521    0.2%
   20      1540     15.88    1.0%
   21      1603     17.11    1.0%
   22      1678      6.24    0.3%
   23      1727     13.85    0.8%
   24      1799     13.46    0.7%
   25      1956     14.52    0.7%
   26      2022     15.25    0.7%
   27      2088     15.13    0.7%
   28      2165     4.821    0.2%
   29      2212     14.63    0.6%
   30      2282     12.71    0.5%
   31      2359      6.83    0.2%
   32      2423     10.28    0.4%
   33      2513     10.96    0.4%
   34      2583     4.723    0.1%
   35      2643     7.176    0.2%
   36      2711     13.45    0.4%
   37      2775     14.38    0.5%
   38      2838     15.89    0.5%
   39      2924     6.789    0.2%
   40      2961       9.5    0.3%
   41      3015     13.01    0.4%
   42      3100     19.12    0.6%
   43      3168     15.87    0.5%
   44      3218     6.461    0.2%
   45      3267     14.25    0.4%
   46      3361     10.67    0.3%
   47      3398     10.87    0.3%
   48      3477     14.15    0.4%
   49      3782     15.13    0.4%
   50      3832     12.72    0.3%
   51      3879       9.7    0.2%
   52      3954     12.38    0.3%
   53      4014     6.465    0.1%
   54      4105     13.54    0.3%
   55      4144     14.33    0.3%
   56      4208     14.17    0.3%
   57      4281     13.17    0.3%
   58      4335     14.07    0.3%
   59      4398     9.942    0.2%
   60      4470     20.27    0.4%
   61      4528     9.187    0.2%
   62      4592     10.99    0.2%
   63      4669     22.78    0.4%
   64      4737     13.22    0.2%

Quality and confidence:
param     error
c         0.095

Model:
Time ~=    84.74
    + c    73.01
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.64
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.64
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    465.6
    + r    114.3
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     462.9     0.268    0.0%
    1     582.6     3.032    0.5%
    2       687      8.62    1.2%
    3       798     9.211    1.1%
    4     915.6      11.6    1.2%
    5      1045     17.93    1.7%
    6      1146     14.17    1.2%
    7      1255     2.581    0.2%
    8      1379     15.56    1.1%
    9      1493     16.63    1.1%
   10      1599     16.77    1.0%
   11      1724     13.29    0.7%
   12      1822     13.33    0.7%
   13      1948      3.03    0.1%
   14      2094     16.77    0.8%
   15      2191     13.42    0.6%
   16      2289      12.3    0.5%
   17      2422     8.401    0.3%
   18      2521     14.65    0.5%
   19      2639     6.099    0.2%
   20      2756     11.32    0.4%

Quality and confidence:
param     error
r         0.172

Model:
Time ~=    459.5
    + r    114.8
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    462.6
    + r    116.3
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     463.6     1.707    0.3%
    1     583.1     0.136    0.0%
    2     684.8     0.323    0.0%
    3     800.3     0.607    0.0%
    4     918.5     9.875    1.0%
    5      1047     14.01    1.3%
    6      1150     13.71    1.1%
    7      1270     6.855    0.5%
    8      1401     14.82    1.0%
    9      1516     9.377    0.6%
   10      1619     21.08    1.3%
   11      1740     13.95    0.8%
   12      1879     15.65    0.8%
   13      1965     10.95    0.5%
   14      2094     13.04    0.6%
   15      2214     14.54    0.6%
   16      2330     13.49    0.5%
   17      2449     10.26    0.4%
   18      2550     15.79    0.6%
   19      2667      14.9    0.5%
   20      2801     21.88    0.7%

Quality and confidence:
param     error
r         0.174

Model:
Time ~=      458
    + r    116.8
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    465.2
    + r    113.8
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     463.8     1.753    0.3%
    1     582.8     2.685    0.4%
    2     686.7     9.582    1.3%
    3     795.7     8.855    1.1%
    4     913.4      3.12    0.3%
    5      1040     15.43    1.4%
    6      1141     12.33    1.0%
    7      1262      13.6    1.0%
    8      1373     13.72    0.9%
    9      1480     12.15    0.8%
   10      1603      11.9    0.7%
   11      1707     14.92    0.8%
   12      1819     12.17    0.6%
   13      1936     12.18    0.6%
   14      2066     12.67    0.6%
   15      2193     8.519    0.3%
   16      2302     9.175    0.3%
   17      2411     11.32    0.4%
   18      2511     17.29    0.6%
   19      2627     10.52    0.4%
   20      2745     17.85    0.6%

Quality and confidence:
param     error
r         0.164

Model:
Time ~=    459.5
    + r    114.3
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    463.8
    + r    343.3
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     463.3     0.263    0.0%
    1     817.9      5.35    0.6%
    2      1144     9.383    0.8%
    3      1490     12.76    0.8%
    4      1832     8.505    0.4%
    5      2176      12.4    0.5%
    6      2513     9.751    0.3%
    7      2877     8.931    0.3%
    8      3204     11.23    0.3%
    9      3544     13.75    0.3%
   10      3868     14.76    0.3%
   11      4218     21.48    0.5%
   12      4560     20.75    0.4%
   13      4917     10.99    0.2%
   14      5279     18.17    0.3%
   15      5645     16.41    0.2%
   16      5968     15.19    0.2%
   17      6316     12.59    0.1%
   18      6632     19.21    0.2%
   19      6980     9.878    0.1%
   20      7346     16.23    0.2%

Quality and confidence:
param     error
r         0.225

Model:
Time ~=    457.4
    + r    343.7
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    470.8
    + r    113.5
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     455.5     4.973    1.0%
    1     591.2     15.76    2.6%
    2     697.5     4.441    0.6%
    3     818.2     13.71    1.6%
    4     929.6     10.97    1.1%
    5      1032     0.981    0.0%
    6      1153     11.29    0.9%
    7      1279     13.64    1.0%
    8      1389     16.28    1.1%
    9      1511     15.43    1.0%
   10      1606     14.01    0.8%
   11      1723     12.27    0.7%
   12      1834     14.59    0.7%
   13      1941     11.41    0.5%
   14      2073     14.76    0.7%
   15      2181     12.56    0.5%
   16      2293     12.83    0.5%
   17      2413     11.45    0.4%
   18      2534     3.577    0.1%
   19      2621     14.75    0.5%
   20      2753     16.23    0.5%

Quality and confidence:
param     error
r         0.169

Model:
Time ~=    470.7
    + r      114
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    471.1
    + r    113.6
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     450.2     0.329    0.0%
    1     594.8     17.17    2.8%
    2     708.6     10.71    1.5%
    3     806.7     3.389    0.4%
    4     926.3     9.093    0.9%
    5      1033     4.417    0.4%
    6      1146      8.79    0.7%
    7      1270     11.92    0.9%
    8      1402     10.95    0.7%
    9      1491     12.49    0.8%
   10      1614     15.76    0.9%
   11      1727      16.3    0.9%
   12      1839     18.13    0.9%
   13      1957     3.196    0.1%
   14      2077     15.51    0.7%
   15      2195     14.18    0.6%
   16      2298     16.06    0.6%
   17      2407     11.25    0.4%
   18      2511     15.43    0.6%
   19      2639     13.02    0.4%
   20      2736     12.71    0.4%

Quality and confidence:
param     error
r          0.18

Model:
Time ~=    470.6
    + r      114
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    462.8
    + r    116.5
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     450.4     0.242    0.0%
    1     580.3     0.311    0.0%
    2     699.5     6.312    0.9%
    3     815.1      13.4    1.6%
    4     930.7     12.18    1.3%
    5      1050     13.96    1.3%
    6      1148     9.503    0.8%
    7      1282     14.61    1.1%
    8      1384     11.59    0.8%
    9      1508     15.12    1.0%
   10      1611     11.29    0.7%
   11      1726     15.32    0.8%
   12      1849     13.67    0.7%
   13      1944     14.86    0.7%
   14      2120     2.597    0.1%
   15      2278     4.048    0.1%
   16      2334     2.998    0.1%
   17      2501     2.658    0.1%
   18      2615     5.695    0.2%
   19      2628     12.28    0.4%
   20      2729     14.49    0.5%

Quality and confidence:
param     error
r         0.377

Model:
Time ~=    460.1
    + r    116.8
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    475.9
    + r    111.9
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     464.2     0.233    0.0%
    1     593.5     14.59    2.4%
    2       708      10.4    1.4%
    3     814.5     10.98    1.3%
    4     930.7     13.28    1.4%
    5      1055     13.69    1.2%
    6      1150     10.03    0.8%
    7      1264      8.93    0.7%
    8      1372     11.57    0.8%
    9      1485     13.53    0.9%
   10      1594     15.29    0.9%
   11      1716     11.46    0.6%
   12      1824      13.1    0.7%
   13      1932     14.46    0.7%
   14      2042     8.978    0.4%
   15      2169     15.27    0.7%
   16      2275     10.86    0.4%
   17      2378     13.24    0.5%
   18      2511     10.76    0.4%
   19      2610     13.44    0.5%
   20      2722     11.02    0.4%

Quality and confidence:
param     error
r         0.158

Model:
Time ~=    478.1
    + r    112.2
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    473.4
    + r    283.5
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     450.4     0.374    0.0%
    1     753.3      1.53    0.2%
    2      1042     12.79    1.2%
    3      1330      14.7    1.1%
    4      1615     10.89    0.6%
    5      1894     14.83    0.7%
    6      2177      9.29    0.4%
    7      2457     10.87    0.4%
    8      2748     6.859    0.2%
    9      3014     10.24    0.3%
   10      3296     14.84    0.4%
   11      3613     13.48    0.3%
   12      3901      13.5    0.3%
   13      4168     11.33    0.2%
   14      4509     12.38    0.2%
   15      4721      14.7    0.3%
   16      5008     12.41    0.2%
   17      5286     20.45    0.3%
   18      5567     17.95    0.3%
   19      5850     10.48    0.1%
   20      6136     13.96    0.2%

Quality and confidence:
param     error
r         0.249

Model:
Time ~=      474
    + r    283.7
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    184.4
    + r    52.71
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     182.3     0.427    0.2%
    1       249     0.281    0.1%
    2     285.6      0.29    0.1%
    3     340.8     0.283    0.0%
    4     391.7     0.359    0.0%
    5     455.4     0.578    0.1%
    6     497.8     0.867    0.1%
    7     552.9     5.236    0.9%
    8     598.5     2.897    0.4%
    9     658.2     14.92    2.2%
   10     701.2     8.806    1.2%
   11     777.8     8.088    1.0%
   12     826.6     2.927    0.3%
   13     880.5     6.622    0.7%
   14     928.7     10.31    1.1%
   15     979.9      8.49    0.8%
   16      1040     15.69    1.5%
   17      1079      2.86    0.2%
   18      1134     14.33    1.2%
   19      1184     13.18    1.1%
   20      1236     11.36    0.9%

Quality and confidence:
param     error
r          0.12

Model:
Time ~=    184.6
    + r    52.88
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    461.6
    + r    98.87
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     463.1     0.262    0.0%
    1     579.2     15.65    2.7%
    2     654.6      6.88    1.0%
    3     749.5     2.896    0.3%
    4     851.5     9.466    1.1%
    5     947.2     9.614    1.0%
    6      1034     0.841    0.0%
    7      1157     14.25    1.2%
    8      1250     16.71    1.3%
    9      1351     13.47    0.9%
   10      1449     14.52    1.0%
   11      1531     10.91    0.7%
   12      1626     9.846    0.6%
   13      1735     15.12    0.8%
   14      1868     14.55    0.7%
   15      1960     15.54    0.7%
   16      2051     14.88    0.7%
   17      2171     13.63    0.6%
   18      2251     8.551    0.3%
   19      2337     14.29    0.6%
   20      2446     8.931    0.3%

Quality and confidence:
param     error
r         0.199

Model:
Time ~=    455.5
    + r    99.54
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    587.8
    + n    38.06
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     561.8     11.12    1.9%
   20      1328      14.8    1.1%
   40      2101      16.2    0.7%
   60      2862     11.57    0.4%
   80      3622     11.41    0.3%
  100      4390     19.53    0.4%
  120      5163     12.06    0.2%
  140      5933     23.47    0.3%
  160      6678     28.39    0.4%
  180      7438     10.86    0.1%
  200      8190     22.62    0.2%
  220      9062     55.16    0.6%
  240      9718     19.01    0.1%
  260     10480     30.15    0.2%
  280     11290     31.55    0.2%
  300     12000     16.24    0.1%
  320     12770     24.65    0.1%
  340     13540     18.58    0.1%
  360     14300     46.72    0.3%
  380     15060     25.69    0.1%
  400     15800     25.36    0.1%
  420     16580     40.71    0.2%
  440     17360     49.47    0.2%
  460     18090     39.93    0.2%
  480     18840     21.32    0.1%
  500     19590     49.27    0.2%
  520     20380     49.09    0.2%
  540     21160     40.45    0.1%
  560     21940      35.3    0.1%
  580     22670     32.29    0.1%
  600     23430     28.26    0.1%
  620     24200     51.02    0.2%
  640     24960     55.43    0.2%
  660     25750     24.37    0.0%
  680     26480      31.1    0.1%
  700     27230     28.94    0.1%
  720     28010     43.74    0.1%
  740     28790     53.36    0.1%
  760     29510     34.83    0.1%
  780     30250     36.16    0.1%
  800     31030     41.01    0.1%
  820     31760     46.28    0.1%
  840     32560     22.78    0.0%
  860     33360     63.05    0.1%
  880     34090     34.99    0.1%
  900     34830     55.05    0.1%
  920     35600      23.2    0.0%
  940     36360     51.81    0.1%
  960     37150     24.84    0.0%
  980     37890     35.83    0.0%
 1000     38660     36.63    0.0%
 1020     39400     46.07    0.1%

Quality and confidence:
param     error
n         0.006

Model:
Time ~=    592.1
    + n    38.07
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    440.8
    + r    15.58
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     440.9     0.478    0.1%
    1     456.4     0.234    0.0%

Quality and confidence:
param     error
r         0.177

Model:
Time ~=    440.9
    + r    15.49
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    444.7
    + n    0.639
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     443.9     0.316    0.0%
   20     456.6     0.299    0.0%
   40     469.2     0.288    0.0%
   60     483.7     5.598    1.1%
   80     494.3     0.522    0.1%
  100       508     4.036    0.7%
  120     520.6      4.12    0.7%
  140     531.9     0.288    0.0%
  160       544      0.34    0.0%
  180     556.7      0.31    0.0%
  200     569.3     0.248    0.0%
  220     581.4     0.242    0.0%
  240       598     8.867    1.4%
  260     608.2     4.359    0.7%
  280     619.2     0.401    0.0%
  300     639.9     7.718    1.2%
  320     643.7     0.201    0.0%
  340     656.4     0.151    0.0%
  360     682.5     16.81    2.4%
  380     689.1     14.35    2.0%
  400     695.7     4.548    0.6%
  420     710.8     10.15    1.4%
  440     723.8     10.95    1.5%
  460     739.5     12.39    1.6%
  480     751.4     13.87    1.8%
  500     758.4     4.214    0.5%
  520     787.5     8.889    1.1%
  540       795     1.086    0.1%
  560     812.3     12.63    1.5%
  580     827.2      9.95    1.2%
  600       839      9.91    1.1%
  620     850.5     8.198    0.9%
  640     863.8     9.784    1.1%
  660     874.6     8.753    1.0%
  680     891.5     11.08    1.2%
  700       903     11.63    1.2%
  720     908.9      4.49    0.4%
  740     927.6     10.81    1.1%
  760     943.7     12.35    1.3%
  780       954     13.55    1.4%
  800     966.9      10.9    1.1%
  820     982.3     14.67    1.4%
  840     994.3     15.04    1.5%
  860      1007      14.2    1.4%
  880      1024     16.26    1.5%
  900      1023     6.764    0.6%
  920      1042     12.41    1.1%
  940      1058     12.65    1.1%
  960      1058     0.859    0.0%
  980      1073     5.545    0.5%
 1000      1086     7.863    0.7%
 1020      1106     12.68    1.1%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=      441
    + n    0.654
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    451.1
    + r    100.3
              µs

Reads = 4 + (4 * r)
Writes = 2 + (4 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     455.3      7.82    1.7%
    1     555.9     8.707    1.5%

Quality and confidence:
param     error
r         3.901

Model:
Time ~=    455.3
    + r    100.5
              µs

Reads = 4 + (4 * r)
Writes = 2 + (4 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    464.2
    + r    382.8
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     467.5     5.688    1.2%
    1       846     10.75    1.2%
    2      1229     14.17    1.1%
    3      1623     14.55    0.8%
    4      1998     13.49    0.6%
    5      2374     7.942    0.3%
    6      2760     17.23    0.6%
    7      3131     11.84    0.3%
    8      3502      10.1    0.2%
    9      3940     14.76    0.3%
   10      4307     14.63    0.3%
   11      4682     15.28    0.3%
   12      5049     9.841    0.1%
   13      5433     17.82    0.3%
   14      5791     9.865    0.1%
   15      6173     18.58    0.3%
   16      6547     23.77    0.3%
   17      7005     17.49    0.2%
   18      7380     16.37    0.2%
   19      7774      15.5    0.1%
   20      8135     27.64    0.3%

Quality and confidence:
param     error
r         0.298

Model:
Time ~=      461
    + r    383.2
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    453.4
    + r    640.2
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     453.8     0.122    0.0%
    1      1090     9.493    0.8%
    2      1730     16.42    0.9%
    3      2381     11.88    0.4%
    4      3014     12.54    0.4%
    5      3650     11.28    0.3%
    6      4310     10.08    0.2%
    7      4939     16.15    0.3%
    8      5555     14.59    0.2%
    9      6233     26.45    0.4%
   10      6855     21.26    0.3%
   11      7482     19.23    0.2%
   12      8126     22.79    0.2%
   13      8744     19.63    0.2%
   14      9388     25.43    0.2%
   15     10010     22.85    0.2%
   16     10670     31.79    0.2%
   17     11360     24.85    0.2%
   18     12020     26.56    0.2%
   19     12650     32.43    0.2%
   20     13280     35.92    0.2%

Quality and confidence:
param     error
r          0.35

Model:
Time ~=    446.6
    + r    640.9
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1203
    + t    478.6
    + n      164
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 2 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3766     12.66    0.3%
    1    16      4343     22.66    0.5%
    2    16      4823     17.38    0.3%
    3    16      5282     13.75    0.2%
    4     0      3092     5.997    0.1%
    4     1      3279     18.86    0.5%
    4     2      3391     12.14    0.3%
    4     3      3589     19.14    0.5%
    4     4      3740      10.8    0.2%
    4     5      3899     15.44    0.3%
    4     6      4074     17.13    0.4%
    4     7      4228     21.76    0.5%
    4     8      4362     14.45    0.3%
    4     9      4520     12.58    0.2%
    4    10      4697     17.92    0.3%
    4    11      4882     7.166    0.1%
    4    12      5082     28.38    0.5%
    4    13      5228      14.2    0.2%
    4    14      5359     18.94    0.3%
    4    15      5540     13.11    0.2%
    4    16      5719     20.14    0.3%

Quality and confidence:
param     error
t         2.357
n         0.464

Model:
Time ~=     1194
    + t    471.1
    + n    164.7
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 2 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    209.4
    + r    69.17
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     198.3     0.175    0.0%
    1     270.3     0.208    0.0%
    2     351.9     0.606    0.1%
    3     409.7     2.185    0.5%
    4     485.9     0.289    0.0%
    5     537.5     0.352    0.0%
    6     628.3     0.965    0.1%
    7     701.6     11.54    1.6%
    8     758.3     2.279    0.3%
    9     830.2     12.19    1.4%
   10     900.2     13.98    1.5%
   11     978.7     4.316    0.4%
   12      1046     5.875    0.5%
   13      1114      10.8    0.9%
   14      1181     11.69    0.9%
   15      1239     9.029    0.7%
   16      1308     12.13    0.9%
   17      1386     13.65    0.9%
   18      1452     12.74    0.8%
   19      1514     13.64    0.9%
   20      1589     16.32    1.0%

Quality and confidence:
param     error
r         0.132

Model:
Time ~=    206.1
    + r    69.31
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    500.9
    + r    378.4
              µs

Reads = 4 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     466.1     5.279    1.1%
    1     930.7     11.78    1.2%
    2      1279     11.88    0.9%
    3      1642     11.94    0.7%
    4      2004     13.51    0.6%
    5      2371     12.29    0.5%
    6      2765     13.44    0.4%
    7      3117     8.757    0.2%
    8      3497     11.65    0.3%
    9      3951     19.76    0.5%
   10      4289      11.7    0.2%
   11      4687     12.79    0.2%
   12      5039     12.58    0.2%
   13      5410     14.63    0.2%
   14      5767     14.21    0.2%
   15      6125     14.76    0.2%
   16      6504     24.32    0.3%
   17      6860     25.56    0.3%
   18      7387     27.93    0.3%
   19      7767     25.21    0.3%
   20      8135     26.56    0.3%

Quality and confidence:
param     error
r         0.515

Model:
Time ~=    492.5
    + r    379.3
              µs

Reads = 4 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    829.6
    + n    74.27
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     782.5     12.83    1.6%
    1     913.5     14.32    1.5%
    2     985.6     1.613    0.1%
    3      1058     10.74    1.0%
    4      1124       2.4    0.2%
    5      1197     2.398    0.2%
    6      1292      10.2    0.7%
    7      1339      3.43    0.2%
    8      1413     12.77    0.9%
    9      1493     9.276    0.6%
   10      1581     15.46    0.9%
   11      1640     12.63    0.7%
   12      1715     9.647    0.5%
   13      1806     13.65    0.7%
   14      1898     9.138    0.4%
   15      1921      13.9    0.7%
   16      2010     13.65    0.6%

Quality and confidence:
param     error
n         0.307

Model:
Time ~=    823.6
    + n     74.8
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    236.8
    + r    862.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     450.1     0.342    0.0%
    1      1272      15.2    1.1%
    2      2036     12.33    0.6%
    3      2853     14.67    0.5%
    4      3687      17.7    0.4%
    5      4518     16.07    0.3%
    6      5398      24.5    0.4%
    7      6186     23.12    0.3%
    8      7053     25.18    0.3%
    9      7917     19.73    0.2%
   10      8772     17.69    0.2%
   11      9697     7.345    0.0%
   12     10540     31.13    0.2%
   13     11390     28.07    0.2%
   14     12280     26.79    0.2%
   15     13150     52.33    0.3%
   16     14000     48.73    0.3%
   17     14900     34.85    0.2%
   18     16020     41.25    0.2%
   19     16930     53.31    0.3%
   20     17810     53.94    0.3%

Quality and confidence:
param     error
r         1.501

Model:
Time ~=    226.6
    + r    867.3
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    358.6
    + r    508.8
              µs

Reads = 4 + (100 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     465.9     4.134    0.8%
    1     940.6     12.01    1.2%
    2      1395     8.601    0.6%
    3      1892     12.46    0.6%
    4      2366     8.799    0.3%
    5      2900     7.615    0.2%
    6      3397     10.42    0.3%
    7      3871      24.8    0.6%
    8      4353     21.03    0.4%
    9      4926     15.69    0.3%
   10      5409     25.32    0.4%
   11      5953     21.77    0.3%
   12      6476     29.77    0.4%
   13      6913     13.73    0.1%
   14      7450     34.93    0.4%
   15      7947     22.11    0.2%
   16      8455     18.11    0.2%
   17      9036     41.95    0.4%
   18      9645     38.23    0.3%
   19     10200     41.34    0.4%
   20     10700     47.15    0.4%

Quality and confidence:
param     error
r         0.848

Model:
Time ~=    343.4
    + r    511.8
              µs

Reads = 4 + (100 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    764.2
    + n    111.8
              µs

Reads = 5 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     737.5     5.343    0.7%
    1       861     2.989    0.3%
    2     993.9     2.325    0.2%
    3      1106      12.8    1.1%
    4      1199     1.238    0.1%
    5      1331     13.99    1.0%
    6      1447     15.39    1.0%
    7      1551     13.61    0.8%
    8      1674     13.39    0.8%
    9      1767      15.1    0.8%
   10      1892     15.45    0.8%
   11      2000     12.64    0.6%
   12      2100     17.31    0.8%
   13      2208     15.83    0.7%
   14      2328     15.16    0.6%
   15      2437     7.933    0.3%
   16      2548     10.85    0.4%

Quality and confidence:
param     error
n         0.255

Model:
Time ~=    760.9
    + n    112.1
              µs

Reads = 5 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    402.2
    + r     4089
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     456.9     1.958    0.4%
    1      4501     15.47    0.3%
    2      8595     34.99    0.4%
    3     12720     69.12    0.5%
    4     16710     18.98    0.1%
    5     20880     30.36    0.1%
    6     24960     42.07    0.1%
    7     28920     36.34    0.1%
    8     32970     65.69    0.1%
    9     37140     58.49    0.1%
   10     41380     50.08    0.1%
   11     45370     66.97    0.1%
   12     49310     55.99    0.1%
   13     53540     45.79    0.0%
   14     57590     81.34    0.1%
   15     61640     90.08    0.1%
   16     65700     50.76    0.0%
   17     69750     95.11    0.1%
   18     74310     114.8    0.1%
   19     79090     102.7    0.1%
   20     82210     54.96    0.0%

Quality and confidence:
param     error
r         2.723

Model:
Time ~=    326.7
    + r     4099
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1133
    + r    38300
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     472.4     6.141    1.2%
    1     40040     36.49    0.0%
    2     79630     66.22    0.0%
    3    119100      46.9    0.0%
    4    159300     64.66    0.0%
    5    199200     59.58    0.0%
    6    230200     31.73    0.0%
    7    268500     53.28    0.0%
    8    306700     124.7    0.0%
    9    345700     210.1    0.0%
   10    383700     187.8    0.0%
   11    421800     117.7    0.0%
   12    460800     108.9    0.0%
   13    498700     144.9    0.0%
   14    537400     96.08    0.0%
   15    575100     152.7    0.0%
   16    613900     143.7    0.0%
   17    652500     221.9    0.0%
   18    691200     159.3    0.0%
   19    728800     194.1    0.0%
   20    768100     215.5    0.0%

Quality and confidence:
param     error
r         20.75

Model:
Time ~=     2843
    + r    38200
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=   137200
    + t        0
    + i       63
    + o    0.016
              µs

Reads = 105 + (1 * t) + (0 * i) + (0 * o)
Writes = 102 + (0 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    201700     69.91    0.0%
    1     0   960      2275     8.977    0.3%
    1    20   960      3613     8.027    0.2%
    1    40   960      4907     10.97    0.2%
    1    60   960      6160     19.93    0.3%
    1    80   960      7473     9.568    0.1%
    1   100   960      8717     9.513    0.1%
    1   120   960     10030     19.02    0.1%
    1   140   960     11280      37.4    0.3%
    1   160   960     12540     21.98    0.1%
    1   180   960     13780     27.33    0.1%
    1   200   960     15050     39.81    0.2%
    1   220   960     16310     22.09    0.1%
    1   240   960     17560     29.32    0.1%
    1   260   960     18810     27.42    0.1%
    1   280   960     20090     28.76    0.1%
    1   300   960     21350     19.68    0.0%
    1   320   960     22600      28.3    0.1%
    1   340   960     23860     33.52    0.1%
    1   360   960     25080     11.67    0.0%
    1   380   960     26410     26.35    0.0%
    1   400   960     27630     23.94    0.0%
    1   420   960     28900     48.23    0.1%
    1   440   960     30140     43.39    0.1%
    1   460   960     31420     24.71    0.0%
    1   480   960     32660     52.31    0.1%
    1   500   960     33930     61.32    0.1%
    1   520   960     35190     73.86    0.2%
    1   540   960     36440     34.85    0.0%
    1   560   960     37680     44.31    0.1%
    1   580   960     38950     35.57    0.0%
    1   600   960     40230     53.24    0.1%
    1   620   960     41420     54.62    0.1%
    1   640   960     42820        43    0.1%
    1   660   960     44000     38.19    0.0%
    1   680   960     45390     44.01    0.0%
    1   700   960     46690     58.45    0.1%
    1   720   960     47800     55.76    0.1%
    1   740   960     49080      57.1    0.1%
    1   760   960     50340     67.12    0.1%
    1   780   960     51580     74.14    0.1%
    1   800   960     52790     85.36    0.1%
    1   820   960     54040      62.4    0.1%
    1   840   960     55330     34.25    0.0%
    1   860   960     56590     67.73    0.1%
    1   880   960     57780     27.28    0.0%
    1   900   960     59090     41.84    0.0%
    1   920   960     60310     58.37    0.0%
    1   940   960     61610     46.72    0.0%
    1   960   960     62910     36.45    0.0%
    1   980   960     64170     55.42    0.0%
    1  1000   960     65440     64.39    0.0%
    1  1020   960     66720     56.33    0.0%
    1  1024     0     66960     59.76    0.0%
    1  1024    19     66900      65.9    0.0%
    1  1024    38     66890     44.16    0.0%
    1  1024    57     66960     52.24    0.0%
    1  1024    76     66890     52.87    0.0%
    1  1024    95     66930     33.56    0.0%
    1  1024   114     66910     40.26    0.0%
    1  1024   133     66890     62.32    0.0%
    1  1024   152     66930     54.69    0.0%
    1  1024   171     66830     32.73    0.0%
    1  1024   190     66920     53.39    0.0%
    1  1024   209     66910     46.69    0.0%
    1  1024   228     66960     37.65    0.0%
   <truncated>...
```

</details>",10082,2021-10-22T15:55:01Z,0
222,athei,/benchmark runtime pallet pallet_contracts,10082,2021-11-07T09:56:43Z,0
223,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-storage-deposit"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error: failed to parse manifest at `/home/benchbot/bench-bot/git/substrate/bin/node/cli/Cargo.toml`

Caused by:
  feature `edition2021` is required

  this Cargo does not support nightly features, but if you
  switch to nightly channel you can add
  `cargo-features = [""edition2021""]` to enable this feature

```

</details>

ERROR: Unable to commit file ./frame/contracts/src/weights.rs",10082,2021-11-07T09:56:45Z,0
224,athei,/benchmark runtime pallet pallet_contracts,10082,2021-11-19T10:41:11Z,0
225,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-storage-deposit"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.832
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.832
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.187
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     64.17     0.602    0.9%
   20      57.3      0.34    0.5%
   40     92.93     0.861    0.9%
   60     128.9     0.465    0.3%
   80       165      1.34    0.8%
  100     204.1     2.417    1.1%
  120       241     2.212    0.9%
  140     289.2     2.508    0.8%
  160     324.2     1.894    0.5%
  180     370.3     2.808    0.7%
  200     412.1      4.31    1.0%
  220     455.4     4.396    0.9%
  240       500     2.253    0.4%
  260     535.4     3.227    0.6%
  280     582.1     2.364    0.4%
  300     631.4     6.374    1.0%
  320     673.9     2.809    0.4%
  340     726.5     3.729    0.5%
  360     748.1     7.278    0.9%
  380     806.4     7.604    0.9%
  400     855.9      10.3    1.2%
  420     886.3     10.61    1.1%
  440     924.4     7.661    0.8%
  460     952.8     2.416    0.2%
  480      1011     8.806    0.8%
  500      1057     9.634    0.9%
  520      1096     11.34    1.0%
  540      1145     13.89    1.2%
  560      1182     12.55    1.0%
  580      1232     11.97    0.9%
  600      1298     9.515    0.7%
  620      1345     10.88    0.8%
  640      1379      6.22    0.4%
  660      1420     9.632    0.6%
  680      1497     13.93    0.9%
  700      1509     12.95    0.8%
  720      1574        19    1.2%
  740      1626     20.22    1.2%
  760      1647     7.565    0.4%
  780      1702     24.16    1.4%
  800      1745     9.981    0.5%
  820      1796     15.55    0.8%
  840      1837     8.983    0.4%
  860      1868     13.65    0.7%
  880      1935     20.21    1.0%
  900      1943     21.16    1.0%
  920      2027     20.14    0.9%
  940      2057     18.92    0.9%
  960      2086     11.76    0.5%
  980      2149     16.63    0.7%
 1000      2181     19.87    0.9%
 1020      2242     5.753    0.2%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.197
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    95.56
    + q    0.322
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.889     0.037    1.2%
   20     83.34     0.831    0.9%
   40     95.76     0.698    0.7%
   60     106.2     0.831    0.7%
   80     114.7     0.833    0.7%
  100       125     1.905    1.5%
  120     133.8     1.057    0.7%
  140     141.4      1.07    0.7%
  160     151.8      1.22    0.8%
  180     161.4     1.286    0.7%
  200     174.8     2.961    1.6%
  220     179.8     1.526    0.8%
  240     186.9     1.311    0.7%
  260     197.4     1.295    0.6%
  280     208.4     1.449    0.6%
  300       192     9.376    4.8%
  320     217.1     1.913    0.8%
  340     199.3     1.677    0.8%
  360     226.7      11.3    4.9%
  380     214.5     1.205    0.5%
  400     222.9     1.962    0.8%
  420     226.9     1.227    0.5%
  440     267.4     1.018    0.3%
  460       242     2.048    0.8%
  480     247.2     1.632    0.6%
  500       253     2.154    0.8%
  520     261.1     2.164    0.8%
  540     269.3     3.325    1.2%
  560     275.8     2.154    0.7%
  580     282.4     1.817    0.6%
  600     286.9     2.026    0.7%
  620     295.9     1.768    0.5%
  640     303.1     1.303    0.4%
  660     313.5     1.445    0.4%
  680     313.8     1.229    0.3%
  700     322.8     2.192    0.6%
  720     330.5     1.425    0.4%
  740     339.1     2.897    0.8%
  760     343.7     1.458    0.4%
  780     351.7     2.702    0.7%
  800     355.1     0.852    0.2%
  820     360.5     1.313    0.3%
  840     367.7     1.407    0.3%
  860     373.2     1.466    0.3%
  880     377.2     1.096    0.2%
  900     381.9      0.99    0.2%
  920     387.6     1.644    0.4%
  940     394.6     1.731    0.4%
  960     397.5     0.883    0.2%
  980     404.6     2.204    0.5%
 1000     408.9     1.104    0.2%
 1020     418.4     0.874    0.2%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    92.37
    + q    0.328
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""instrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     46.2
    + c    90.07
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     53.62     0.163    0.3%
    2     235.9     0.299    0.1%
    4     413.9     0.787    0.1%
    6     576.9     4.054    0.7%
    8     763.7     1.125    0.1%
   10     935.5     8.956    0.9%
   12      1103     12.99    1.1%
   14      1323     13.43    1.0%
   16      1485      13.6    0.9%
   18      1671     16.73    1.0%
   20      1840     13.64    0.7%
   22      1981     12.98    0.6%
   24      2163     12.14    0.5%
   26      2418      13.7    0.5%
   28      2594      3.03    0.1%
   30      2756     9.661    0.3%
   32      2904     13.85    0.4%
   34      3121     15.05    0.4%
   36      3281     11.86    0.3%
   38      3454     12.86    0.3%
   40      3604     17.64    0.4%
   42      3767     16.79    0.4%
   44      3928     14.79    0.3%
   46      4101     16.29    0.3%
   48      4272     18.36    0.4%
   50      4624     7.911    0.1%
   52      4804     26.09    0.5%
   54      4977     15.88    0.3%
   56      5126      20.1    0.3%
   58      5273     16.26    0.3%
   60      5455     20.68    0.3%
   62      5597     19.81    0.3%
   64      5802     10.71    0.1%
   66      6028     8.566    0.1%
   68      6190      17.6    0.2%
   70      6371     23.72    0.3%
   72      6521     22.76    0.3%
   74      6689     23.04    0.3%
   76      6857      30.1    0.4%
   78      6999     16.33    0.2%
   80      7180     13.67    0.1%
   82      7355      27.6    0.3%
   84      7489     15.78    0.2%
   86      7629     16.33    0.2%
   88      7806     22.17    0.2%
   90      7972     24.19    0.3%
   92      8134     13.91    0.1%
   94      8294     16.16    0.1%
   96      8456     21.67    0.2%
   98      9065     35.01    0.3%
  100      9213     10.51    0.1%
  102      9381     20.01    0.2%
  104      9549     16.23    0.1%
  106      9714     27.09    0.2%
  108      9876     19.75    0.2%
  110     10040     26.66    0.2%
  112     10180     13.17    0.1%
  114     10360     29.39    0.2%
  116     10530     35.78    0.3%
  118     10710     34.66    0.3%
  120     10850      8.03    0.0%
  122     11000     32.94    0.2%
  124     11340     68.42    0.6%
  126     11340     17.91    0.1%
  128     11500     11.56    0.1%

Quality and confidence:
param     error
c         0.092

Model:
Time ~=    27.38
    + c    90.22
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_load"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    7.747
    + c    1.455
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     7.014     0.065    0.9%
    2        11     0.113    1.0%
    4     13.62     0.086    0.6%
    6     16.46      0.05    0.3%
    8     19.43     0.051    0.2%
   10     22.13     0.081    0.3%
   12     24.96     0.117    0.4%
   14     28.31     0.117    0.4%
   16     31.03     0.113    0.3%
   18     34.53     0.077    0.2%
   20     37.29     0.492    1.3%
   22     40.78     0.163    0.3%
   24     42.65     0.098    0.2%
   26     45.48     0.045    0.0%
   28     48.41     0.144    0.2%
   30     51.42      0.08    0.1%
   32     54.57     0.386    0.7%
   34     57.18     0.101    0.1%
   36     60.81     0.383    0.6%
   38     63.77     0.388    0.6%
   40     66.61     0.507    0.7%
   42     69.51     0.154    0.2%
   44     72.37     0.421    0.5%
   46     75.03     0.125    0.1%
   48     77.47     0.115    0.1%
   50     80.18     0.079    0.0%
   52     83.07     0.059    0.0%
   54     86.31     0.083    0.0%
   56     89.04     0.169    0.1%
   58     91.82     0.109    0.1%
   60     94.86     0.153    0.1%
   62     97.59     0.093    0.0%
   64       101     0.083    0.0%
   66       103     0.114    0.1%
   68     106.1     0.155    0.1%
   70       109     0.127    0.1%
   72       112     0.149    0.1%
   74     114.8      0.11    0.0%
   76     117.7     0.136    0.1%
   78     120.5     0.096    0.0%
   80     123.4     0.104    0.0%
   82     126.5     0.112    0.0%
   84     129.5     0.206    0.1%
   86     133.2     0.258    0.1%
   88     136.1     0.106    0.0%
   90     138.7     0.074    0.0%
   92     141.4     0.138    0.0%
   94     144.5     0.344    0.2%
   96     147.5     0.257    0.1%
   98     150.2     0.413    0.2%
  100     153.2     0.499    0.3%
  102     156.4      0.33    0.2%
  104     159.4     0.241    0.1%
  106       162     0.399    0.2%
  108     165.2     0.517    0.3%
  110     168.3     0.444    0.2%
  112     170.8     0.587    0.3%
  114     173.6     0.647    0.3%
  116     177.5     0.506    0.2%
  118     179.8     0.382    0.2%
  120     182.5     0.396    0.2%
  122     185.6     0.213    0.1%
  124       189     0.103    0.0%
  126     191.7     0.189    0.0%
  128       195      0.14    0.0%

Quality and confidence:
param     error
c             0

Model:
Time ~=     7.71
    + c    1.457
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    632.5
    + c    208.1
    + s    1.995
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2657     16.03    0.6%
    1  1024      2895      14.8    0.5%
    2  1024      3098     16.66    0.5%
    3  1024      3287     15.75    0.4%
    4  1024      3489     12.14    0.3%
    5  1024      3704     14.23    0.3%
    6  1024      3901     16.99    0.4%
    7  1024      4111     20.43    0.4%
    8  1024      4296     22.64    0.5%
    9  1024      4551     16.72    0.3%
   10  1024      4747     23.97    0.5%
   11  1024      4917     15.07    0.3%
   12  1024      5107     19.23    0.3%
   13  1024      5383     12.03    0.2%
   14  1024      5553     20.25    0.3%
   15  1024      5754     20.96    0.3%
   16  1024      5930     14.84    0.2%
   17  1024      6262     12.92    0.2%
   18  1024      6503     29.82    0.4%
   19  1024      6654     28.06    0.4%
   20  1024      6852      23.1    0.3%
   21  1024      7044     21.42    0.3%
   22  1024      7213      25.4    0.3%
   23  1024      7370     22.51    0.3%
   24  1024      7588     30.18    0.3%
   25  1024      7938     33.15    0.4%
   26  1024      8150     24.54    0.3%
   27  1024      8306     25.02    0.3%
   28  1024      8504     26.56    0.3%
   29  1024      8701     40.68    0.4%
   30  1024      8861     29.53    0.3%
   31  1024      9057     25.17    0.2%
   32  1024      9254     31.05    0.3%
   33  1024      9718     23.76    0.2%
   34  1024      9917     22.84    0.2%
   35  1024     10070     20.29    0.2%
   36  1024     10270     26.71    0.2%
   37  1024     10470     25.09    0.2%
   38  1024     10640     36.55    0.3%
   39  1024     10840     40.39    0.3%
   40  1024     11030     34.77    0.3%
   41  1024     11210     30.83    0.2%
   42  1024     11430     27.08    0.2%
   43  1024     11600     30.85    0.2%
   44  1024     11780     36.74    0.3%
   45  1024     12010      31.2    0.2%
   46  1024     12200     40.06    0.3%
   47  1024     12330     37.33    0.3%
   48  1024     12520      28.9    0.2%
   49  1024     13040     19.95    0.1%
   50  1024     13200     33.75    0.2%
   51  1024     13420     30.23    0.2%
   52  1024     13590     34.18    0.2%
   53  1024     13770     33.04    0.2%
   54  1024     13990     54.16    0.3%
   55  1024     14140     49.49    0.3%
   56  1024     14330     34.32    0.2%
   57  1024     14530     32.81    0.2%
   58  1024     14740     39.52    0.2%
   59  1024     14900     27.98    0.1%
   60  1024     15080     28.06    0.1%
   61  1024     15260     30.06    0.1%
   62  1024     15460     30.48    0.1%
   63  1024     15700     52.27    0.3%
   64     0     13970     30.66    0.2%
   64    20     13760     27.96    0.2%
   64    40     13860     47.96    0.3%
   64    60     13870     20.09    0.1%
   64    80     13900     33.11    0.2%
   64   100     13960     35.75    0.2%
   64   120     14040     35.56    0.2%
   64   140     14080     41.78    0.2%
   64   160     14060     44.48    0.3%
   64   180     14110     32.13    0.2%
   64   200     14150     37.42    0.2%
   64   220     14190     24.53    0.1%
   64   240     14240     21.84    0.1%
   64   260     14300     39.44    0.2%
   64   280     14500       118    0.8%
   64   300     14940      17.8    0.1%
   64   320     14370     36.94    0.2%
   64   340     14430     24.63    0.1%
   64   360     14470     26.13    0.1%
   64   380     14510     21.53    0.1%
   64   400     14560     29.03    0.1%
   64   420     14610     19.47    0.1%
   64   440     14620     35.62    0.2%
   64   460     14680     24.47    0.1%
   64   480     14710     37.56    0.2%
   64   500     14780     37.51    0.2%
   64   520     14760     25.19    0.1%
   64   540     14820     35.58    0.2%
   64   560     14860     19.13    0.1%
   64   580     14900     37.57    0.2%
   64   600     14960     22.05    0.1%
   64   620     15000     27.56    0.1%
   64   640     15010     37.32    0.2%
   64   660     15070     26.17    0.1%
   64   680     15110     25.53    0.1%
   64   700     15150     20.74    0.1%
   64   720     15180     29.02    0.1%
   64   740     15320     24.57    0.1%
   64   760     15280     26.86    0.1%
   64   780     15300     17.34    0.1%
   64   800     15390     24.27    0.1%
   64   820     15430     40.34    0.2%
   64   840     15510        36    0.2%
   64   860     15460      21.4    0.1%
   64   880     15500     40.68    0.2%
   64   900     15540     49.04    0.3%
   64   920     15590     32.25    0.2%
   64   940     15690     22.97    0.1%
   64   960     15720     27.21    0.1%
   64   980     15710     41.11    0.2%
   64  1000     15740     16.81    0.1%
   64  1020     15790     40.54    0.2%
   64  1024     15810     24.31    0.1%

Quality and confidence:
param     error
c         0.171
s         0.011

Model:
Time ~=    559.2
    + c    206.1
    + s    2.107
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    236.8
    + s    2.006
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     249.5      0.38    0.1%
   20     275.3     0.392    0.1%
   40     316.6      0.39    0.1%
   60     355.9     0.509    0.1%
   80     396.3     0.432    0.1%
  100     437.2     1.709    0.3%
  120     475.2      0.37    0.0%
  140     517.6     4.345    0.8%
  160     560.7     11.12    1.9%
  180     595.5     0.709    0.1%
  200     641.9     9.718    1.5%
  220     683.4     15.15    2.2%
  240     717.2     9.031    1.2%
  260     756.1     8.138    1.0%
  280     806.5        14    1.7%
  300     841.2     14.02    1.6%
  320     873.1     4.577    0.5%
  340     931.9     15.93    1.7%
  360     966.2      13.1    1.3%
  380     994.3     8.333    0.8%
  400      1046     15.44    1.4%
  420      1079     13.47    1.2%
  440      1127     17.33    1.5%
  460      1158     13.82    1.1%
  480      1199     13.06    1.0%
  500      1240     15.19    1.2%
  520      1290     12.22    0.9%
  540      1347     11.63    0.8%
  560      1371     13.17    0.9%
  580      1414     16.51    1.1%
  600      1456     16.43    1.1%
  620      1507     9.425    0.6%
  640      1522      10.4    0.6%
  660      1577     14.43    0.9%
  680      1616     14.02    0.8%
  700      1646      10.9    0.6%
  720      1698     12.73    0.7%
  740      1721     9.253    0.5%
  760      1775     15.73    0.8%
  780      1815     14.83    0.8%
  800      1849     15.87    0.8%
  820      1899     15.93    0.8%
  840      1933     13.87    0.7%
  860      1985     13.42    0.6%
  880      2031     9.857    0.4%
  900      2038     8.862    0.4%
  920      2096     12.82    0.6%
  940      2140     12.79    0.5%
  960      2169     14.26    0.6%
  980      2217     14.43    0.6%
 1000      2242      12.1    0.5%
 1020      2304     3.029    0.1%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    236.1
    + s    2.022
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    189.1
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    189.1
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    90.72
    + c    90.63
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     92.05     0.162    0.1%
    1     187.9     1.789    0.9%
    2     276.3     1.151    0.4%
    3     360.6     4.699    1.3%
    4     452.8     0.304    0.0%
    5       553     12.76    2.3%
    6     617.1     0.583    0.0%
    7     734.8     14.26    1.9%
    8     806.4     0.602    0.0%
    9     900.1     11.28    1.2%
   10     995.2     16.16    1.6%
   11      1064     15.62    1.4%
   12      1149     16.26    1.4%
   13      1285     16.05    1.2%
   14      1366     14.64    1.0%
   15      1441      10.1    0.7%
   16      1524     12.42    0.8%
   17      1643     13.26    0.8%
   18      1719     15.01    0.8%
   19      1802     14.44    0.8%
   20      1883     14.79    0.7%
   21      1961     16.27    0.8%
   22      2058     11.16    0.5%
   23      2138     5.368    0.2%
   24      2210     15.26    0.6%
   25      2404     13.06    0.5%
   26      2481     12.24    0.4%
   27      2568     16.89    0.6%
   28      2641     12.17    0.4%
   29      2725     8.964    0.3%
   30      2818     19.46    0.6%
   31      2901     8.964    0.3%
   32      2968     14.01    0.4%
   33      3095     19.64    0.6%
   34      3200     13.51    0.4%
   35      3266     4.032    0.1%
   36      3342     8.371    0.2%
   37      3439     15.17    0.4%
   38      3515     15.64    0.4%
   39      3582     12.09    0.3%
   40      3679     13.82    0.3%
   41      3755     8.573    0.2%
   42      3848     17.52    0.4%
   43      3941     14.52    0.3%
   44      4008     12.32    0.3%
   45      4094     16.02    0.3%
   46      4169     10.37    0.2%
   47      4248     11.84    0.2%
   48      4327     16.43    0.3%
   49      4637     14.74    0.3%
   50      4718     12.65    0.2%
   51      4788     10.46    0.2%
   52      4881     13.69    0.2%
   53      4961     13.31    0.2%
   54      5129     24.53    0.4%
   55      5129     19.43    0.3%
   56      5207     15.06    0.2%
   57      5288     26.77    0.5%
   58      5374     12.35    0.2%
   59      5444     16.44    0.3%
   60      5520     11.96    0.2%
   61      5627     22.11    0.3%
   62      5708     29.36    0.5%
   63      5776     12.48    0.2%
   64      5864     18.09    0.3%

Quality and confidence:
param     error
c         0.098

Model:
Time ~=    79.75
    + c    90.92
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     40.2
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     40.2
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    467.9
    + r    111.8
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     444.3     0.457    0.1%
    1     585.7      14.1    2.4%
    2     685.1     1.815    0.2%
    3     794.8       3.4    0.4%
    4     915.4     11.62    1.2%
    5      1037      8.77    0.8%
    6      1131     12.12    1.0%
    7      1264     9.625    0.7%
    8      1373     9.348    0.6%
    9      1475     10.16    0.6%
   10      1575     13.45    0.8%
   11      1703     3.534    0.2%
   12      1796     14.31    0.7%
   13      1922     9.035    0.4%
   14      2035     13.66    0.6%
   15      2164     12.35    0.5%
   16      2279     10.23    0.4%
   17      2387     9.649    0.4%
   18      2467     13.05    0.5%
   19      2586     13.88    0.5%
   20      2691     11.28    0.4%

Quality and confidence:
param     error
r         0.182

Model:
Time ~=    464.9
    + r    112.1
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    467.9
    + r    111.9
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     447.3     8.657    1.9%
    1       574      0.82    0.1%
    2       691     2.659    0.3%
    3     809.1     12.99    1.6%
    4     915.9     8.937    0.9%
    5      1030     10.43    1.0%
    6      1141     13.52    1.1%
    7      1254      11.3    0.9%
    8      1361     12.85    0.9%
    9      1474      13.4    0.9%
   10      1587     12.97    0.8%
   11      1704     11.27    0.6%
   12      1796     12.09    0.6%
   13      1925     7.083    0.3%
   14      2055     12.61    0.6%
   15      2153      11.6    0.5%
   16      2246     6.653    0.2%
   17      2378     9.375    0.3%
   18      2490     6.463    0.2%
   19      2599     9.344    0.3%
   20      2697     16.16    0.5%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    464.3
    + r    112.3
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    465.5
    + r    111.1
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       444     0.131    0.0%
    1     574.9     4.802    0.8%
    2     698.9     0.984    0.1%
    3     804.6     8.097    1.0%
    4     913.8     12.25    1.3%
    5      1010     3.684    0.3%
    6      1128     11.71    1.0%
    7      1249      12.4    0.9%
    8      1357     13.27    0.9%
    9      1473     8.371    0.5%
   10      1571     14.21    0.9%
   11      1667     7.319    0.4%
   12      1793     13.01    0.7%
   13      1883      13.4    0.7%
   14      2043     5.061    0.2%
   15      2150       2.2    0.1%
   16      2247     12.46    0.5%
   17      2354     16.07    0.6%
   18      2461     14.62    0.5%
   19      2569     18.36    0.7%
   20      2698     11.13    0.4%

Quality and confidence:
param     error
r         0.185

Model:
Time ~=      462
    + r    111.4
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      470
    + r    317.3
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     444.5     1.611    0.3%
    1     784.5     3.315    0.4%
    2      1106     1.435    0.1%
    3      1420     6.082    0.4%
    4      1741     7.105    0.4%
    5      2055     7.603    0.3%
    6      2381     8.098    0.3%
    7      2704     16.28    0.6%
    8      3020     8.523    0.2%
    9      3329     8.981    0.2%
   10      3641     8.631    0.2%
   11      3962     6.866    0.1%
   12      4271     21.48    0.5%
   13      4581     11.26    0.2%
   14      4932     21.88    0.4%
   15      5234     7.218    0.1%
   16      5572     8.934    0.1%
   17      5863     10.53    0.1%
   18      6192     13.47    0.2%
   19      6483     13.68    0.2%
   20      6808      28.9    0.4%

Quality and confidence:
param     error
r         0.192

Model:
Time ~=    468.1
    + r    317.6
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      456
    + r    112.2
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     456.9     0.882    0.1%
    1     579.8     12.61    2.1%
    2     675.3     4.017    0.5%
    3       780     1.594    0.2%
    4     895.8     9.939    1.1%
    5      1021     12.95    1.2%
    6      1123     9.539    0.8%
    7      1229     3.808    0.3%
    8      1349     15.58    1.1%
    9      1454     14.75    1.0%
   10      1558     12.67    0.8%
   11      1676     13.11    0.7%
   12      1794     12.99    0.7%
   13      1884     14.55    0.7%
   14      2037     12.37    0.6%
   15      2152     13.72    0.6%
   16      2285     7.271    0.3%
   17      2372     14.26    0.6%
   18      2483     8.846    0.3%
   19      2601     8.956    0.3%
   20      2698      4.46    0.1%

Quality and confidence:
param     error
r         0.196

Model:
Time ~=    447.6
    + r    112.9
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    454.6
    + r    111.9
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     460.8     8.719    1.8%
    1     572.9     0.669    0.1%
    2     669.9     0.904    0.1%
    3     783.1     4.891    0.6%
    4     894.5      3.12    0.3%
    5     999.6     0.948    0.0%
    6      1120     10.24    0.9%
    7      1240     13.64    1.0%
    8      1361     15.15    1.1%
    9      1463     15.84    1.0%
   10      1562     10.49    0.6%
   11      1683     12.27    0.7%
   12      1790     10.61    0.5%
   13      1885     12.35    0.6%
   14      2032     14.15    0.6%
   15      2150     11.98    0.5%
   16      2244     10.45    0.4%
   17      2359     18.16    0.7%
   18      2479     4.595    0.1%
   19      2588     15.79    0.6%
   20      2693     14.04    0.5%

Quality and confidence:
param     error
r         0.167

Model:
Time ~=      450
    + r    112.3
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    457.7
    + r    111.4
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     456.7     0.384    0.0%
    1     573.4     4.733    0.8%
    2     682.4     13.63    1.9%
    3     784.5     2.621    0.3%
    4     898.6     9.111    1.0%
    5      1013     15.01    1.4%
    6      1114     13.05    1.1%
    7      1253      14.8    1.1%
    8      1347     10.79    0.8%
    9      1443     12.32    0.8%
   10      1559     13.24    0.8%
   11      1670     11.44    0.6%
   12      1795     6.969    0.3%
   13      1901     15.42    0.8%
   14      2047     11.57    0.5%
   15      2144      16.2    0.7%
   16      2248     16.24    0.7%
   17      2359      10.9    0.4%
   18      2474     9.305    0.3%
   19      2583     13.05    0.5%
   20      2672      11.5    0.4%

Quality and confidence:
param     error
r         0.185

Model:
Time ~=    453.6
    + r    111.9
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    454.9
    + r    112.2
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     444.5     0.347    0.0%
    1       566     12.46    2.2%
    2     674.1     3.317    0.4%
    3     781.5     2.776    0.3%
    4     910.5     4.618    0.5%
    5      1014     4.578    0.4%
    6      1134     14.41    1.2%
    7      1248     11.19    0.8%
    8      1365     12.45    0.9%
    9      1467      11.4    0.7%
   10      1582     10.52    0.6%
   11      1673     12.45    0.7%
   12      1793     10.75    0.5%
   13      1916     6.691    0.3%
   14      2052     3.268    0.1%
   15      2147      14.9    0.6%
   16      2251     14.49    0.6%
   17      2370     11.58    0.4%
   18      2485     14.19    0.5%
   19      2586     8.907    0.3%
   20      2685     14.99    0.5%

Quality and confidence:
param     error
r         0.162

Model:
Time ~=    453.2
    + r    112.5
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      457
    + r    266.9
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     458.5     4.497    0.9%
    1     720.6     7.284    1.0%
    2     982.6     1.605    0.1%
    3      1254     8.418    0.6%
    4      1544     12.64    0.8%
    5      1786     14.13    0.7%
    6      2058     8.099    0.3%
    7      2336     11.05    0.4%
    8      2575      6.24    0.2%
    9      2843     5.834    0.2%
   10      3115     11.34    0.3%
   11      3400     10.02    0.2%
   12      3690      8.92    0.2%
   13      3942     13.97    0.3%
   14      4188     10.47    0.2%
   15      4488     8.852    0.1%
   16      4722     11.31    0.2%
   17      4989     9.476    0.1%
   18      5251     14.35    0.2%
   19      5558     25.17    0.4%
   20      5801     15.76    0.2%

Quality and confidence:
param     error
r         0.205

Model:
Time ~=    454.1
    + r    267.4
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    191.8
    + r    50.67
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     186.8     1.374    0.7%
    1     241.6     0.417    0.1%
    2     291.6     0.657    0.2%
    3     345.6     0.551    0.1%
    4     395.5     0.674    0.1%
    5       442     0.945    0.2%
    6     496.4     0.754    0.1%
    7     545.9     2.726    0.4%
    8     595.5     4.871    0.8%
    9     646.6     9.876    1.5%
   10     692.6     6.187    0.8%
   11     764.2      10.6    1.3%
   12     810.2     6.622    0.8%
   13       857      10.2    1.1%
   14     907.1     8.489    0.9%
   15     952.5     2.015    0.2%
   16      1019     17.16    1.6%
   17      1054     14.51    1.3%
   18      1108     14.49    1.3%
   19      1160     12.76    1.0%
   20      1197     9.303    0.7%

Quality and confidence:
param     error
r         0.116

Model:
Time ~=    190.2
    + r    51.03
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      462
    + r    99.62
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     446.5     7.507    1.6%
    1     561.4     0.581    0.1%
    2     661.2     1.363    0.2%
    3     757.7      2.51    0.3%
    4     865.2     7.061    0.8%
    5     961.8     10.65    1.1%
    6      1062     14.06    1.3%
    7      1164     11.05    0.9%
    8      1274     12.12    0.9%
    9      1361     14.13    1.0%
   10      1452     12.78    0.8%
   11      1547     16.28    1.0%
   12      1662     15.78    0.9%
   13      1747      14.9    0.8%
   14      1883     10.69    0.5%
   15      1955     11.13    0.5%
   16      2060     16.84    0.8%
   17      2156     11.06    0.5%
   18      2262     11.78    0.5%
   19      2340     16.91    0.7%
   20      2463      10.8    0.4%

Quality and confidence:
param     error
r         0.173

Model:
Time ~=    460.5
    + r    99.88
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    610.7
    + n    38.01
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     567.7     14.64    2.5%
   20      1340     16.29    1.2%
   40      2114     2.817    0.1%
   60      2869     16.25    0.5%
   80      3644     13.39    0.3%
  100      4414     17.41    0.3%
  120      5169     12.26    0.2%
  140      5946     19.65    0.3%
  160      6706     22.53    0.3%
  180      7440     14.58    0.1%
  200      8213     22.95    0.2%
  220      8997     27.86    0.3%
  240      9744     19.36    0.1%
  260     10510     29.16    0.2%
  280     11480     11.48    0.0%
  300     12020        27    0.2%
  320     12770     32.71    0.2%
  340     13550     26.14    0.1%
  360     14300     26.97    0.1%
  380     15060      22.1    0.1%
  400     15830     39.82    0.2%
  420     16600     24.09    0.1%
  440     17330      27.6    0.1%
  460     18110     23.48    0.1%
  480     18850     29.45    0.1%
  500     19620     36.66    0.1%
  520     20390     46.26    0.2%
  540     21110     29.42    0.1%
  560     21880     31.33    0.1%
  580     22680      43.7    0.1%
  600     23410     29.22    0.1%
  620     24180     62.64    0.2%
  640     24910     32.96    0.1%
  660     25690      42.7    0.1%
  680     26430     37.08    0.1%
  700     27230     42.29    0.1%
  720     28000     40.07    0.1%
  740     28740     19.53    0.0%
  760     29560      74.6    0.2%
  780     30190     36.02    0.1%
  800     31010      32.6    0.1%
  820     31750     33.77    0.1%
  840     32490     30.31    0.0%
  860     33290     48.14    0.1%
  880     34230     224.2    0.6%
  900     34810      35.9    0.1%
  920     35560     31.51    0.0%
  940     36330     35.44    0.0%
  960     37090      52.6    0.1%
  980     37860     45.43    0.1%
 1000     38650     60.59    0.1%
 1020     39400      38.9    0.0%

Quality and confidence:
param     error
n         0.009

Model:
Time ~=    616.3
    + n    38.01
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    446.9
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     447.3     1.268    0.2%
    1       437      0.49    0.1%

Quality and confidence:
param     error
r         0.453

Model:
Time ~=    447.3
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    450.5
    + n    0.625
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     451.8     4.776    1.0%
   20     462.3     0.354    0.0%
   40     479.9     5.599    1.1%
   60       491     8.353    1.7%
   80     500.3     0.305    0.0%
  100     512.8     0.396    0.0%
  120     525.3     0.209    0.0%
  140       541     9.817    1.8%
  160     554.6     8.065    1.4%
  180     564.3     4.535    0.8%
  200     578.1     8.046    1.3%
  220     589.2      3.94    0.6%
  240       604     8.786    1.4%
  260     612.1     0.252    0.0%
  280     627.9     7.607    1.2%
  300     647.1     15.32    2.3%
  320     667.7     15.37    2.3%
  340     671.7     13.03    1.9%
  360     675.4     0.844    0.1%
  380     695.1     10.89    1.5%
  400     711.1     12.84    1.8%
  420     712.1     0.261    0.0%
  440     732.8     11.67    1.5%
  460     743.6     11.17    1.5%
  480     753.5     6.232    0.8%
  500     764.3     0.241    0.0%
  520     780.3     8.284    1.0%
  540     795.4     11.45    1.4%
  560     805.2     8.181    1.0%
  580       822     13.48    1.6%
  600     830.6     10.66    1.2%
  620     846.3     12.49    1.4%
  640     852.9     5.235    0.6%
  660     876.7     13.95    1.5%
  680     877.1     5.449    0.6%
  700     894.2     9.523    1.0%
  720     909.5     11.15    1.2%
  740     919.2     10.28    1.1%
  760     927.7     5.073    0.5%
  780     940.5     7.468    0.7%
  800     961.2     11.55    1.2%
  820     969.5     11.83    1.2%
  840       979     6.587    0.6%
  860     988.1     0.696    0.0%
  880      1003     8.478    0.8%
  900      1034     15.14    1.4%
  920      1037      15.5    1.4%
  940      1047     12.28    1.1%
  960      1059     12.11    1.1%
  980      1075     12.75    1.1%
 1000      1085     13.17    1.2%
 1020      1095     15.39    1.4%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    452.1
    + n    0.633
              µs

Reads = 4 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    456.7
    + r    68.84
              µs

Reads = 4 + (4 * r)
Writes = 2 + (4 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     456.6     0.344    0.0%
    1     527.9     7.645    1.4%

Quality and confidence:
param     error
r          2.55

Model:
Time ~=    456.6
    + r    71.29
              µs

Reads = 4 + (4 * r)
Writes = 2 + (4 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    461.1
    + r      351
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     443.6      0.23    0.0%
    1     824.1     13.99    1.6%
    2      1169     11.79    1.0%
    3      1515     13.37    0.8%
    4      1861     9.218    0.4%
    5      2224     10.58    0.4%
    6      2563     12.69    0.4%
    7      2916     10.34    0.3%
    8      3266     8.587    0.2%
    9      3646     16.73    0.4%
   10      3977     7.855    0.1%
   11      4310     11.41    0.2%
   12      4672     14.76    0.3%
   13      5027     19.87    0.3%
   14      5355     15.52    0.2%
   15      5705     14.45    0.2%
   16      6072     19.15    0.3%
   17      6466     6.471    0.1%
   18      6769     16.57    0.2%
   19      7135     22.89    0.3%
   20      7496     13.72    0.1%

Quality and confidence:
param     error
r         0.223

Model:
Time ~=    460.3
    + r    351.2
              µs

Reads = 5 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    454.4
    + r    574.1
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     435.2     1.405    0.3%
    1      1022     2.568    0.2%
    2      1610     9.261    0.5%
    3      2186      5.52    0.2%
    4      2746     10.79    0.3%
    5      3342     11.83    0.3%
    6      3895     13.62    0.3%
    7      4524     36.43    0.8%
    8      5037     17.65    0.3%
    9      5693      22.5    0.3%
   10      6175     15.59    0.2%
   11      6756     23.53    0.3%
   12      7357     20.27    0.2%
   13      7885     31.11    0.3%
   14      8497     19.18    0.2%
   15      9013        34    0.3%
   16      9596     18.93    0.1%
   17     10240     26.54    0.2%
   18     10790      25.8    0.2%
   19     11400     14.86    0.1%
   20     11940     24.73    0.2%

Quality and confidence:
param     error
r         0.413

Model:
Time ~=    456.8
    + r    574.1
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1129
    + t    465.7
    + n    163.6
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 2 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3669     10.31    0.2%
    1    16      4252     13.22    0.3%
    2    16      4681     15.91    0.3%
    3    16      5180     13.04    0.2%
    4     0      2951     16.08    0.5%
    4     1      3118     15.78    0.5%
    4     2      3269     20.18    0.6%
    4     3      3481     22.58    0.6%
    4     4      3606     11.21    0.3%
    4     5      3755     19.01    0.5%
    4     6      3925     8.469    0.2%
    4     7      4102     18.17    0.4%
    4     8      4249     9.357    0.2%
    4     9      4422     14.62    0.3%
    4    10      4577     9.536    0.2%
    4    11      4744     10.92    0.2%
    4    12      4916     18.46    0.3%
    4    13      5067     11.03    0.2%
    4    14      5248     9.973    0.1%
    4    15      5400     10.11    0.1%
    4    16      5583     19.14    0.3%

Quality and confidence:
param     error
t          2.17
n         0.427

Model:
Time ~=     1099
    + t    461.5
    + n    164.7
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 2 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    209.8
    + r    70.59
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     205.2     0.194    0.0%
    1       280     0.384    0.1%
    2     351.3     0.717    0.2%
    3     423.7     0.713    0.1%
    4     478.4     1.512    0.3%
    5     558.3      1.12    0.2%
    6     642.3     1.701    0.2%
    7     711.1     2.712    0.3%
    8     783.2     12.09    1.5%
    9     864.6      14.5    1.6%
   10     908.6     1.804    0.1%
   11     988.3     6.866    0.6%
   12      1058     10.12    0.9%
   13      1124     10.84    0.9%
   14      1198      11.4    0.9%
   15      1261     10.57    0.8%
   16      1329     11.46    0.8%
   17      1414      10.4    0.7%
   18      1481     8.419    0.5%
   19      1559      11.2    0.7%
   20      1636     13.54    0.8%

Quality and confidence:
param     error
r         0.131

Model:
Time ~=    208.5
    + r    70.86
              µs

Reads = 4 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    502.3
    + r    372.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     454.1     12.51    2.7%
    1     902.9     1.523    0.1%
    2      1261     13.85    1.0%
    3      1641      14.7    0.8%
    4      1975     15.14    0.7%
    5      2360     14.99    0.6%
    6      2747     21.23    0.7%
    7      3073     15.61    0.5%
    8      3438      15.4    0.4%
    9      3872     14.55    0.3%
   10      4228       7.5    0.1%
   11      4624     22.27    0.4%
   12      4997     22.01    0.4%
   13      5348     14.27    0.2%
   14      5691     20.43    0.3%
   15      6035     26.49    0.4%
   16      6382     21.45    0.3%
   17      6764       7.8    0.1%
   18      7269     14.58    0.2%
   19      7656     32.67    0.4%
   20      7989     18.53    0.2%

Quality and confidence:
param     error
r         0.506

Model:
Time ~=    492.9
    + r    373.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      795
    + n    73.63
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     774.1     8.846    1.1%
    1     873.8      9.55    1.0%
    2     948.8     4.577    0.4%
    3      1020     8.743    0.8%
    4      1086     7.635    0.7%
    5      1160     7.321    0.6%
    6      1262      1.66    0.1%
    7      1300     2.063    0.1%
    8      1396     14.76    1.0%
    9      1457     12.13    0.8%
   10      1539     13.34    0.8%
   11      1596     16.74    1.0%
   12      1671     18.73    1.1%
   13      1765     15.05    0.8%
   14      1836     15.53    0.8%
   15      1909      15.4    0.8%
   16      1970     13.51    0.6%

Quality and confidence:
param     error
n          0.25

Model:
Time ~=    793.8
    + n    74.08
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.4
    + r    839.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     456.5     0.177    0.0%
    1      1216      8.97    0.7%
    2      2000     26.86    1.3%
    3      2816     15.17    0.5%
    4      3560     21.17    0.5%
    5      4398     23.05    0.5%
    6      5216     16.39    0.3%
    7      6002     11.39    0.1%
    8      6845     26.97    0.3%
    9      7739     17.21    0.2%
   10      8563     22.73    0.2%
   11      9417     23.29    0.2%
   12     10240     36.98    0.3%
   13     11100     39.98    0.3%
   14     11930     34.37    0.2%
   15     12800     46.38    0.3%
   16     13630     43.88    0.3%
   17     14490      36.5    0.2%
   18     15620     54.28    0.3%
   19     16440     59.99    0.3%
   20     17420     63.17    0.3%

Quality and confidence:
param     error
r         1.604

Model:
Time ~=    214.5
    + r    844.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      344
    + r    491.9
              µs

Reads = 4 + (100 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     445.5      1.13    0.2%
    1       887     2.291    0.2%
    2      1349     5.406    0.4%
    3      1828     13.19    0.7%
    4      2291     16.76    0.7%
    5      2778     10.25    0.3%
    6      3256     24.35    0.7%
    7      3731     12.43    0.3%
    8      4204      21.7    0.5%
    9      4753     19.79    0.4%
   10      5217     24.22    0.4%
   11      5731     30.34    0.5%
   12      6224     36.76    0.5%
   13      6734     22.04    0.3%
   14      7187     23.44    0.3%
   15      7647      26.3    0.3%
   16      8166     19.25    0.2%
   17      8749     32.68    0.3%
   18      9327     35.13    0.3%
   19      9827     34.32    0.3%
   20     10260     33.02    0.3%

Quality and confidence:
param     error
r         0.753

Model:
Time ~=      328
    + r    493.8
              µs

Reads = 4 + (100 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    735.5
    + n    110.4
              µs

Reads = 5 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     716.5     8.941    1.2%
    1     841.8     7.792    0.9%
    2     972.6     15.57    1.6%
    3      1074      10.8    1.0%
    4      1176     3.443    0.2%
    5      1303     18.96    1.4%
    6      1408     13.07    0.9%
    7      1506     9.188    0.6%
    8      1622     12.12    0.7%
    9      1738     11.93    0.6%
   10      1850     13.41    0.7%
   11      1955     14.88    0.7%
   12      2067     11.61    0.5%
   13      2173     11.11    0.5%
   14      2272     7.162    0.3%
   15      2407     12.88    0.5%
   16      2510     10.22    0.4%

Quality and confidence:
param     error
n         0.232

Model:
Time ~=    736.3
    + n    110.8
              µs

Reads = 5 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    380.6
    + r     3727
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     464.7     6.461    1.3%
    1      4153      12.3    0.2%
    2      7833     17.19    0.2%
    3     11580     28.12    0.2%
    4     15190     24.05    0.1%
    5     18900     33.64    0.1%
    6     22740     119.8    0.5%
    7     26330     25.93    0.0%
    8     29980     31.64    0.1%
    9     33960     74.27    0.2%
   10     37890     51.17    0.1%
   11     41340     43.43    0.1%
   12     45220     76.86    0.1%
   13     48840     58.35    0.1%
   14     52420     67.25    0.1%
   15     56100     104.4    0.1%
   16     59840     50.76    0.0%
   17     63460     98.81    0.1%
   18     67520     118.3    0.1%
   19     71410     96.52    0.1%
   20     75250     81.35    0.1%

Quality and confidence:
param     error
r         1.888

Model:
Time ~=    346.2
    + r     3729
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    39370
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     450.2     1.578    0.3%
    1     38320     57.34    0.1%
    2     76280     48.33    0.0%
    3    114100     81.18    0.0%
    4    157200     53.26    0.0%
    5    197000     98.68    0.0%
    6    236200     164.8    0.0%
    7    275500     87.75    0.0%
    8    314800     79.45    0.0%
    9    353900     119.2    0.0%
   10    393900     86.48    0.0%
   11    433200     103.8    0.0%
   12    472200     186.8    0.0%
   13    511400     152.8    0.0%
   14    550900       128    0.0%
   15    590200     170.2    0.0%
   16    630100     228.6    0.0%
   17    669400     150.5    0.0%
   18    708400     266.4    0.0%
   19    747100     269.6    0.0%
   20    785800     187.4    0.0%

Quality and confidence:
param     error
r         11.45

Model:
Time ~=        0
    + r    39400
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=   136100
    + t        0
    + i    62.93
    + o     0.02
              µs

Reads = 105 + (1 * t) + (0 * i) + (0 * o)
Writes = 102 + (0 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    200500     74.27    0.0%
    1     0   960      2184     12.45    0.5%
    1    20   960      3504     15.81    0.4%
    1    40   960      4771     10.92    0.2%
    1    60   960      6049     16.93    0.2%
    1    80   960      7347     15.74    0.2%
    1   100   960      8604     20.78    0.2%
    1   120   960      9877     24.43    0.2%
    1   140   960     11140     27.52    0.2%
    1   160   960     12390     23.28    0.1%
    1   180   960     13690     28.67    0.2%
    1   200   960     14900     26.57    0.1%
    1   220   960     16170     37.43    0.2%
    1   240   960     17400     27.76    0.1%
    1   260   960     18670     30.27    0.1%
    1   280   960     19920     34.86    0.1%
    1   300   960     21170     57.58    0.2%
    1   320   960     22490     38.54    0.1%
    1   340   960     23720     30.55    0.1%
    1   360   960     24950     29.93    0.1%
    1   380   960     26190      16.5    0.0%
    1   400   960     27450     16.04    0.0%
    1   420   960     28750     42.32    0.1%
    1   440   960     30000     40.07    0.1%
    1   460   960     31220     62.45    0.2%
    1   480   960     32490     41.24    0.1%
    1   500   960     33760     35.89    0.1%
    1   520   960     35030     25.71    0.0%
    1   540   960     36280     43.15    0.1%
    1   560   960     37530     21.97    0.0%
    1   580   960     38840     64.29    0.1%
    1   600   960     40080     42.03    0.1%
    1   620   960     41360     27.72    0.0%
    1   640   960     42560     13.28    0.0%
    1   660   960     43860     36.21    0.0%
    1   680   960     45060     43.08    0.0%
    1   700   960     46290     29.93    0.0%
    1   720   960     47640     30.09    0.0%
    1   740   960     48900     47.04    0.0%
    1   760   960     50140      29.6    0.0%
    1   780   960     51380     54.68    0.1%
    1   800   960     52680      72.5    0.1%
    1   820   960     53950     51.48    0.0%
    1   840   960     55190     74.03    0.1%
    1   860   960     56420     45.93    0.0%
    1   880   960     57660     59.16    0.1%
    1   900   960     58920     67.08    0.1%
    1   920   960     60310     57.38    0.0%
    1   940   960     61420     53.71    0.0%
    1   960   960     62740     43.47    0.0%
    1   980   960     63920      32.2    0.0%
    1  1000   960     65140     38.49    0.0%
    1  1020   960     66410     43.57    0.0%
    1  1024     0     66790     57.43    0.0%
    1  1024    19     66770     61.14    0.0%
    1  1024    38     66810     68.45    0.1%
    1  1024    57     66750      60.5    0.0%
    1  1024    76     66760     39.36    0.0%
    1  1024    95     66810     57.28    0.0%
    1  1024   114     66750     39.32    0.0%
    1  1024   133     66730     54.44    0.0%
    1  1024   152     66760     37.53    0.0%
    1  1024   171     66790     82.89    0.1%
    1  1024   190     66690     35.38    0.0%
    1  1024   209     66780     60.12    0.0%
    1  1024   228     66760     65.96    0.0%
   <truncated>...
```

</details>",10082,2021-11-19T10:41:13Z,0
226,athei,bot merge,10082,2021-12-07T12:19:21Z,0
227,xlc,"The new bid should starts before a name expires so it is possible to have no-downtime experience. With the current design, there are not cap on bidding period so for hot names, it can take some time to reach to goal, and the name will be unavailable during this period.

Also I think the current owner should have better chance to keep the name. For any ownership change, there should be a significant notice period. Otherwise there will be phishing attempts or name hijacking. Imaging when your store rent contract ends and someone come pays 5x the rent and ask you get out immediately. It doesn't sounds fair and secure.",7197,2020-09-24T10:19:29Z,0
228,shawntabrizi,"@xlc I have solved your main issue around downtime by splitting ownership and assignment.

Much like a traditional domain, you can own the domain name, and later assign it to an IP Address or change it to a different IP at some later time.

I have it so that there is one more step after you have won the name that you can then assign the name to an account. This also allows an owner to change the target easily, without introducing a `transfer_ownership` functionality, which I would like to avoid for secondary markets and name hoarding.

What this also means is that when a name expires, you will keep your assignment until a new owner is found, however long that takes. This gives the previous owner plenty of time and ability to win the next auction. Without affecting their current ownership.

That being said, I am not a fan of any special treatment of a previous owner to be able to keep the domain. This should be a free market, and treating previous owners special would basically give an advantage to people who are first in the system. If someone really wants to pay some absurd fee to screw you out of your name, then that is fair game.",7197,2020-09-25T09:12:32Z,0
229,xlc,"Let's say a parachain operates a decentralized staking pool that can manages nominations for people. People can send DOT to the parachain's named address and will receive redeemable token on the parachain. The profit margin for this parachain can be slim so the parachain operator won't be able to offer much to renew the name.

A malicious person can easily out bid parachain operator, take the name, and take all the incoming funds. All the parachain operator can do is put warnings ""DO NOT SEND"" but likely some will failed to see the message, or forget to update some automation or saved contact.

Incentive wise this is unfair to honest people. I wouldn't use this because it doesn't offer much long term confidence to name owners and their users.",7197,2020-09-25T10:28:26Z,0
230,shawntabrizi,"@xlc It is easy enough to add a function `extend_expiration` which allows a user to pay some fee to extend the expiration, but I don't immediately see this as the right solution.

To start, it is completely obvious to me that no one who is sane should use the friendly name as something hardcoded in a contract or automation. Anyone who would do this, could simply look up the underlying address at the time of creating some automation, and use that value instead. It is not justified to me at all that people should take dependencies on the fact that a name points to a certain place.

Allowing people to renew their domain forever is in strong support of name squatters. One of the solutions to squatting is exactly allowing new auctions to occur for a given name and allow the market to decide who should get it. If someone is willing to pay 5x more for `bryan` than you are, why should they not be entitled to it? I feel a name service would be useless if a few whales controlled all the good names, with no chance of losing ownership of those names.

As for any sensitive situations which I am missing, I have already introduced a manager origin and a permanence origin which can solve these issues. Let's assume a manager origin is council and permanence origin is the set of identity registrars or some democracy vote or something... Then you, as an important part of the ecosystem, still have the ability to reach out to these parties and make a case for them to give you permanent ownership of a name.

So really, I can not currently agree with your assessment here.",7197,2020-09-25T11:48:02Z,0
231,shawntabrizi,"In any case though, although I think we disagree on philosophy, we def don't disagree on customization. I will add such a function behind some configuration.",7197,2020-09-25T11:56:09Z,0
232,gnunicorn,@shawntabrizi are you still working on this?,7197,2020-11-25T08:33:33Z,0
233,gnunicorn,what's the progress here?,7197,2021-01-07T11:46:56Z,0
234,antonkhvorov,That would be cool to have I think,7197,2021-01-25T18:41:06Z,0
235,gnunicorn,closing for a lack of progress.,7197,2021-03-04T08:51:00Z,0
236,Diiaablo95,"Has nobody picked this PR anymore? We might be interested in developing a name service pallet, so I was wondering whether there's already something we could build on top of.",7197,2021-12-07T14:07:36Z,0
237,bkchr,CC @apopiak ,10400,2021-12-01T21:14:33Z,0
238,joepetrowski,"It's possible today to do what you describe. There are lots of ways to create a provably inaccessible account (e.g. create/kill an anon proxy). Issuers who wanted to remove the ability for any admin can just set the privileged roles (including `owner`, as it can change the team) to inaccessible accounts.",10400,2021-12-07T12:27:27Z,0
239,apopiak,"Agreed, Joe, closing.",10400,2021-12-07T14:21:31Z,0
240,athei,bot merge,10438,2021-12-07T16:48:18Z,0
241,bkchr,"As I already explained yesterday, `AuxStore` is not fork aware or anything. It is just a ""dumb"" store.",10441,2021-12-07T18:18:36Z,0
242,nazar-pc,"Right, and that is the reason why it needs to be cleared up ""manually"" or it is stuck in storage forever.",10441,2021-12-07T18:19:36Z,0
243,bkchr,"Ahh sorry, I was confused by your title.

Then this is a duplicate of: https://github.com/paritytech/substrate/issues/8692",10441,2021-12-07T18:28:43Z,0
244,NikVolf,"Making transaction validation to compete for cpu resources with block import might be an attack vector on node, so we might want reconsider.",5621,2020-04-15T15:00:48Z,0
245,tomaka,"I thought that tokio was automatically moving blocking tasks to a separate threads pool, but I might be mistaken here because the documentation doesn't mention this.

However the main point of the issue is that we should IMO spawn things through the service. Having them use the ""main"" tokio scheduler is not necessarily important. It might indeed be a good idea to explicitly split between ""potentially blocking"" and ""not supposed to be blocking"".

In other words, we could probably:

- Add another field `block_task_executor` [here](https://github.com/paritytech/substrate/blob/88248c040fd0a0ff004f448fc8c47fdf000b653e/client/service/src/config.rs#L41).
- Duplicate this code [here](https://github.com/paritytech/substrate/blob/469bb4b6fa852fb660009605a4dd22c06279607a/client/cli/src/runner.rs#L121) for the ""blocking executor"" but call `tokio::spawn_blocking` instead of just `spawn`.
- Then pass it as parameter [here](https://github.com/paritytech/substrate/blob/5fcd53350d246d005950173accba6ba832ad7463/client/service/src/task_manager.rs#L93).
- Turn [this `Sender<Future>`](https://github.com/paritytech/substrate/blob/5fcd53350d246d005950173accba6ba832ad7463/client/service/src/task_manager.rs#L43) into a `Sender<(Future, bool)>` indicating whether the task is blocking.
- Add a `SpawnTaskHandle::spawn_blocking` method.
- Use `SpawnTaskHandler::spawn_blocking` for the import queue.
",5621,2020-04-15T15:24:32Z,0
246,NikVolf,"It is not necessary refers to the notion of ""blocking"". It can just so happen, that there are so many transactions that we can't even validate them all, and we shouldn't starve block import in this case. Now in this scenario we just load 2 cores. Using service for spawning validation tasks for transactions will load all cores?",5621,2020-04-15T15:29:53Z,0
247,tomaka,"Oh right, this might be it:

> it is the case for the transaction pool because the change wasn't super straight-forward for a reason I forgot.",5621,2020-04-15T16:05:09Z,0
248,tomaka,"It could still be doable in theory, by having futures wait for each other so that there are never more than 2 doing actual work at the same time (essentially reproducing what happens right now).
But that's a more involved change, and it's debatable whether it's worth it.",5621,2020-04-15T16:08:10Z,0
249,tomaka,"So, we've got a design issue related to the CLI and the Service's ""tasks manager"":

When we start a block import with the CLI (`./polkadot import-blocks ...`), the CLI code builds a prototype for a full client, a `ServiceBuilder`.

This `ServiceBuilder` initializes the ""tasks manager"", which includes a channel of tasks pending to be spawned. These tasks are then normally transmitted to the executor in `TasksManager::process_receiver`.

But when doing the CLI block import, we actually never finish the `Service`, and the `TasksManager` is simply silently dropped with all its pending tasks still in it. We never call `process_receiver`. Any task further spawned with any `SpawnTaskHandle` will also be silently dropped.

Solution: remove the channel from `TasksManager`. That's legacy code from the time when we weren't passing an executor in the configuration.
",5621,2020-04-21T08:50:51Z,0
250,arkpar,Import queue must be prioritized above all other tasks. That's the main reason it uses dedicated threads currently.,5621,2020-05-06T09:46:54Z,0
251,shawntabrizi,"We need to bump version of block builder
Then bump runtime version
Then everything should okay",10128,2021-12-02T15:53:13Z,0
252,thiolliere,"yeah for me the solution is:

* bump the version of BlockBuilder
* in the client we check the version of BlockBuilder and call into on_post_inherent only if version is superior or equal to the new version

When release a version we need to say that client must upgrade before runtime. or at least before runtime implement `on_post_inherent` with something not no-op.",10128,2021-12-02T15:54:26Z,0
253,JoshOrndorff,"For anyone awaiting this feature, our current work-around is to create a dummy empty-payload inherent just to kick off the computation you want to run.

https://github.com/PureStake/nimbus/blob/ffb03c0614af1d3649fe52423ba99d98035baf74/pallets/author-inherent/src/lib.rs#L110-L127",10128,2021-12-07T20:21:05Z,0
254,andresilva,@bkchr Cumulus will get fixed by updating polkadot. What do we do here?,10444,2021-12-07T20:27:28Z,0
255,bkchr,"> @bkchr Cumulus will get fixed by updating polkadot. What do we do here?

Ignore.",10444,2021-12-07T21:31:39Z,0
256,shawntabrizi,Awesome that you put this change into its own pallet 👍 ,10309,2021-11-23T09:39:55Z,0
257,gautamdhameja,bot merge,10309,2021-12-01T15:27:35Z,0
258,paritytech-processbot[bot]," Error: 
Error: When trying to meet the ""Project Owners"" approval requirements: this pull request does not belong to a project defined in Process.json.

Approval by ""Project Owners"" is only attempted if other means defined in the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge) are not satisfied first.

The following errors **might** have affected the outcome of this attempt:
- 'Batch: Availability and Validity' does not match any projects in polkadot's Process.json
- 'Batch: Codebase Restructure' does not match any projects in polkadot's Process.json

Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are members of substrateteamleads or core-devs.
",10309,2021-12-01T15:27:44Z,0
259,shawntabrizi,So just waiting on the audit?,10309,2021-12-02T17:12:50Z,0
260,gautamdhameja,"Yes, the audit is in progress now and there are some issues identified. I'm on it and will push a few commits to address them.",10309,2021-12-02T22:50:58Z,0
261,gautamdhameja,bot merge,10309,2021-12-07T12:29:24Z,0
262,paritytech-processbot[bot]," Error: 
Error: When trying to meet the ""Project Owners"" approval requirements: this pull request does not belong to a project defined in Process.json.

Approval by ""Project Owners"" is only attempted if other means defined in the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge) are not satisfied first.

The following errors **might** have affected the outcome of this attempt:
- 'Batch: Availability and Validity' does not match any projects in polkadot's Process.json
- 'Batch: Codebase Restructure' does not match any projects in polkadot's Process.json

Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are members of substrateteamleads or core-devs.
",10309,2021-12-07T12:29:33Z,0
263,gautamdhameja,bot merge,10309,2021-12-07T18:05:39Z,0
264,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4341,10309,2021-12-07T18:05:49Z,0
265,shawntabrizi,bot merge,10309,2021-12-07T22:39:36Z,0
266,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4341 is not mergeable,10309,2021-12-07T22:39:43Z,0
267,shawntabrizi,bot merge,10309,2021-12-07T22:40:33Z,0
268,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4341,10309,2021-12-07T22:40:42Z,0
269,emostov,/benchmark runtime pallet pallet_bags_list,9829,2021-09-21T03:27:14Z,0
270,emostov,"> Might have some unconsidered edge cases here. https://github.com/paritytech/substrate/pull/9829/files#r714053661

yup, definitely missed some. To try and be thorough I created this table for edge cases and filled it with the names of relevant unit tests

|                                 |                       heavier head                      |                       heavier tail                      | heavier non-terminal (in front)                     | heavier non-terminal (behind)                           |
|:-------------------------------:|:-------------------------------------------------------:|:-------------------------------------------------------:|-----------------------------------------------------|---------------------------------------------------------|
|           lighter head          | NA                                                      |     put_in_front_of_heavier_is_tail_lighter_is_head     | NA                                                  | put_in_front_of_lighter_is_head_heavier_is_non_terminal |
| lighter tail                    |     put_in_front_of_lighter_is_tail_heavier_is_head     | NA                                                      | NA                             | put_in_front_of_lighter_is_tail_heavier_is_not_terminal |
| lighter non-terminal (in front) | NA                                                      | put_in_front_of_heavier_is_tail_lighter_is_non_terminal | NA                                                  | put_in_front_of_non_terminal_nodes_heavier_behind       |
| lighter non-terminal (behind)   | put_in_front_of_heavier_is_head_lighter_is_not_terminal | NA                                                      | put_in_front_of_non_terminal_nodes_heavier_in_front | NA                                                      |",9829,2021-09-23T04:04:25Z,0
271,emostov,"@kianenigma Here is the commit making it permissioned afff2a9c5c4fc71793015102f4a5f797783f9798

I chose to only allow heavy to call it. If we allowed lighter to call it, lighter could still grief other nodes in front of them by moving them backwards in the list to right in front of themself.",9829,2021-09-23T18:17:41Z,0
272,emostov,"@kianenigma here are test cases for `insert_at_unchecked`  b75457f6844d096281f5cbd4e711adac17254fd2

lmk if it looks like I am missing anything. The 2  main aspects I was thinking of 
1) enumerating possible positions of `at` (head, middle, tail)
2) making sure the prev/next of `node` does not impact the outcome. This is in line with the normal insert behavior where we expect the node to be coming from potentially anywhere. I don't make the same assumptions for `at` though because we expect it to already be in the correct place in the list",9829,2021-09-23T19:42:55Z,0
273,kianenigma,"> @kianenigma here are test cases for `insert_at_unchecked` b75457f6844d096281f5cbd4e711adac17254fd2
> 
> lmk if it looks like I am missing anything. The 2 main aspects I was thinking of
> 
> 1. enumerating possible positions of `at` (head, middle, tail)
> 2. making sure the prev/next of `node` does not impact the outcome. This is in line with the normal insert behavior where we expect the node to be coming from potentially anywhere. I don't make the same assumptions for `at` though because we expect it to already be in the correct place in the list

I havn't re-reviewed the code yet, but this will be my (initial, very pedantic, potentially an overkill) mental model of checking this.

variable one: `at` being `{head, middle, tail}`
variable two: `node` being {`before_not_adjecent`, `before_adjecent`, `after_not_adjecent`, `after_adjecent`}

multiply the above sets to get all permutations.
 
(excluding null cases, like when `at` is head, `node` cannot be before it). 

but looking at the code there might be better ways to test it. 

Now that you have the fuzzer we can add this to it as well. One of the operations of the fuzzer will be to try and move a node around. Then we can assure that everything is correct.  ",9829,2021-09-24T19:08:10Z,0
274,emostov,"> I havn't re-reviewed the code yet, but this will be my (initial, very pedantic, potentially an overkill) mental model of checking this.

> variable one: at being {head, middle, tail}
variable two: node being {before_not_adjecent, before_adjecent, after_not_adjecent, after_adjecent}

For variable two, do you mean the its position before it was inserted? Like set its prev/next to the nodes it would have been pointing to?",9829,2021-09-25T02:44:08Z,0
275,emostov,@kianenigma lmk what you think when you get a chance,9829,2021-10-31T10:10:43Z,0
276,emostov,/benchmark runtime pallet pallet_bags_list,9829,2021-11-10T11:01:40Z,0
277,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""zeke-change-bag-position"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_bags_list --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/bags-list/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error: failed to parse manifest at `/home/benchbot/bench-bot/git/substrate/bin/node/cli/Cargo.toml`

Caused by:
  feature `edition2021` is required

  this Cargo does not support nightly features, but if you
  switch to nightly channel you can add
  `cargo-features = [""edition2021""]` to enable this feature

```

</details>

ERROR: Unable to commit file ./frame/bags-list/src/weights.rs",9829,2021-11-10T11:01:41Z,0
278,emostov,/benchmark runtime pallet pallet_bags_list,9829,2021-11-17T12:17:18Z,0
279,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""zeke-change-bag-position"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_bags_list --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/bags-list/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error: failed to run custom build command for `node-runtime v3.0.0-dev (/home/benchbot/bench-bot/git/substrate/bin/node/runtime)`

Caused by:
  process didn't exit successfully: `/home/benchbot/bench-bot/git/substrate/target/release/build/node-runtime-947357eea249ff23/build-script-build` (exit status: 1)
  --- stdout
  [1;33mInformation that should be included in a bug report.[0m
  [1;33mExecuting build command:[0m ""rustup"" ""run"" ""nightly"" ""cargo"" ""rustc"" ""--target=wasm32-unknown-unknown"" ""--manifest-path=/home/benchbot/bench-bot/git/substrate/target/release/wbuild/node-runtime/Cargo.toml"" ""--color=always"" ""--release""
  [1;33mUsing rustc version:[0m rustc 1.58.0-nightly (82af160c2 2021-11-10)


  --- stderr
  [0m[1m[33mwarning[0m[0m[1m: unused import: `alloc::string::ToString`[0m
  [0m  [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/contracts/proc-macro/src/lib.rs:24:5[0m
  [0m   [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m24[0m[0m [0m[0m[1m[38;5;12m| [0m[0muse alloc::string::ToString;[0m
  [0m   [0m[0m[1m[38;5;12m| [0m[0m    [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^[0m
  [0m   [0m[0m[1m[38;5;12m|[0m
  [0m   [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_imports)]` on by default[0m

  [0m[1m[33mwarning[0m[0m[1m: unused imports: `DataStruct`, `Fields`[0m
  [0m  [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/contracts/proc-macro/src/lib.rs:27:54[0m
  [0m   [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m27[0m[0m [0m[0m[1m[38;5;12m| [0m[0muse syn::{parse_macro_input, spanned::Spanned, Data, DataStruct, DeriveInput, Fields, Ident};[0m
  [0m   [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^[0m[0m               [0m[0m[1m[33m^^^^^^[0m

  [0m[1m[33mwarning[0m[0m[1m: unused import: `spanned::Spanned`[0m
  [0m  [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/contracts/proc-macro/src/lib.rs:27:30[0m
  [0m   [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m27[0m[0m [0m[0m[1m[38;5;12m| [0m[0muse syn::{parse_macro_input, spanned::Spanned, Data, DataStruct, DeriveInput, Fields, Ident};[0m
  [0m   [0m[0m[1m[38;5;12m| [0m[0m                             [0m[0m[1m[33m^^^^^^^^^^^^^^^^[0m

  [0m[0m[1m[33mwarning[0m[1m:[0m `pallet-contracts-proc-macro` (lib) generated 3 warnings
  [0m[0m[1m[32m   Compiling[0m sp-runtime v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/runtime)
  [0m[0m[1m[32m   Compiling[0m sp-version v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/version)
  [0m[0m[1m[32m   Compiling[0m sp-staking v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/staking)
  [0m[0m[1m[32m   Compiling[0m sp-authorship v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/authorship)
  [0m[0m[1m[32m   Compiling[0m sp-npos-elections v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/npos-elections)
  [0m[0m[1m[32m   Compiling[0m sp-consensus-vrf v0.10.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/consensus/vrf)
  [0m[0m[1m[32m   Compiling[0m sp-consensus-slots v0.10.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/consensus/slots)
  [0m[0m[1m[32m   Compiling[0m pallet-contracts-primitives v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/contracts/common)
  [0m[0m[1m[32m   Compiling[0m sp-transaction-storage-proof v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/transaction-storage-proof)
  [0m[0m[1m[32m   Compiling[0m sp-api v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/api)
  [0m[0m[1m[32m   Compiling[0m frame-support v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/support)
  [0m[0m[1m[32m   Compiling[0m sp-timestamp v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/timestamp)
  [0m[0m[1m[32m   Compiling[0m sp-session v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/session)
  [0m[0m[1m[32m   Compiling[0m sp-consensus-babe v0.10.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/consensus/babe)
  [0m[0m[1m[32m   Compiling[0m sp-finality-grandpa v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/finality-grandpa)
  [0m[0m[1m[32m   Compiling[0m sp-authority-discovery v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/authority-discovery)
  [0m[0m[1m[32m   Compiling[0m sp-transaction-pool v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/transaction-pool)
  [0m[0m[1m[32m   Compiling[0m frame-system-rpc-runtime-api v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/system/rpc/runtime-api)
  [0m[0m[1m[32m   Compiling[0m sp-block-builder v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/block-builder)
  [0m[0m[1m[32m   Compiling[0m pallet-contracts-rpc-runtime-api v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/contracts/rpc/runtime-api)
  [0m[0m[1m[32m   Compiling[0m sp-offchain v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/offchain)
  [0m[0m[1m[32m   Compiling[0m frame-system v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/system)
  [0m[0m[1m[32m   Compiling[0m frame-benchmarking v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/benchmarking)
  [0m[0m[1m[32m   Compiling[0m pallet-authorship v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/authorship)
  [0m[0m[1m[32m   Compiling[0m frame-election-provider-support v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/election-provider-support)
  [0m[0m[1m[32m   Compiling[0m pallet-transaction-payment v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/transaction-payment)
  [0m[0m[1m[32m   Compiling[0m pallet-mmr-primitives v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/merkle-mountain-range/primitives)
  [0m[0m[1m[32m   Compiling[0m frame-executive v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/executive)
  [0m[0m[1m[32m   Compiling[0m pallet-randomness-collective-flip v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/randomness-collective-flip)
  [0m[0m[1m[32m   Compiling[0m node-primitives v2.0.0 (/home/benchbot/bench-bot/git/substrate/bin/node/primitives)
  [0m[0m[1m[32m   Compiling[0m pallet-sudo v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/sudo)
  [0m[0m[1m[32m   Compiling[0m pallet-recovery v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/recovery)
  [0m[0m[1m[32m   Compiling[0m pallet-society v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/society)
  [0m[0m[1m[32m   Compiling[0m pallet-balances v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/balances)
  [0m[0m[1m[32m   Compiling[0m pallet-timestamp v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/timestamp)
  [0m[0m[1m[32m   Compiling[0m pallet-membership v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/membership)
  [0m[0m[1m[32m   Compiling[0m pallet-gilt v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/gilt)
  [0m[0m[1m[32m   Compiling[0m pallet-lottery v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/lottery)
  [0m[0m[1m[32m   Compiling[0m pallet-utility v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/utility)
  [0m[0m[1m[32m   Compiling[0m pallet-proxy v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/proxy)
  [0m[0m[1m[32m   Compiling[0m frame-system-benchmarking v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/system/benchmarking)
  [0m[0m[1m[32m   Compiling[0m pallet-multisig v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/multisig)
  [0m[0m[1m[32m   Compiling[0m pallet-elections-phragmen v5.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/elections-phragmen)
  [0m[0m[1m[32m   Compiling[0m pallet-contracts v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/contracts)
  [0m[0m[1m[32m   Compiling[0m pallet-vesting v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/vesting)
  [0m[0m[1m[32m   Compiling[0m pallet-assets v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/assets)
  [0m[0m[1m[32m   Compiling[0m pallet-indices v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/indices)
  [0m[0m[1m[32m   Compiling[0m pallet-collective v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/collective)
  [0m[0m[1m[32m   Compiling[0m pallet-identity v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/identity)
  [0m[0m[1m[32m   Compiling[0m pallet-scheduler v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/scheduler)
  [0m[0m[1m[32m   Compiling[0m pallet-democracy v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/democracy)
  [0m[0m[1m[32m   Compiling[0m pallet-uniques v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/uniques)
  [0m[0m[1m[32m   Compiling[0m pallet-im-online v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/im-online)
  [0m[0m[1m[32m   Compiling[0m pallet-election-provider-multi-phase v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/election-provider-multi-phase)
  [0m[0m[1m[32m   Compiling[0m pallet-transaction-payment-rpc-runtime-api v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/transaction-payment/rpc/runtime-api)
  [0m[0m[1m[32m   Compiling[0m pallet-mmr v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/merkle-mountain-range)
  [0m[0m[1m[32m   Compiling[0m pallet-treasury v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/treasury)
  [0m[0m[1m[32m   Compiling[0m pallet-offences v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/offences)
  [0m[0m[1m[32m   Compiling[0m pallet-bags-list v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/bags-list)
  [0m[0m[1m[32m   Compiling[0m pallet-transaction-storage v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/transaction-storage)
  [0m[1m[38;5;9merror[E0433][0m[0m[1m: failed to resolve: could not find `CounterForListNodes` in the crate root[0m
  [0m   [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/bags-list/src/list/mod.rs:457:10[0m
  [0m    [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m457[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        crate::CounterForListNodes::<T>::mutate(|prev_count| {[0m
  [0m    [0m[0m[1m[38;5;12m| [0m[0m               [0m[0m[1m[38;5;9m^^^^^^^^^^^^^^^^^^^[0m[0m [0m[0m[1m[38;5;9mcould not find `CounterForListNodes` in the crate root[0m

  [0m[1mFor more information about this error, try `rustc --explain E0433`.[0m
  [0m[0m[1m[31merror[0m[1m:[0m could not compile `pallet-bags-list` due to previous error
  [0m[0m[1m[33mwarning[0m[1m:[0m build failed, waiting for other jobs to finish...
  [0m[0m[1m[31merror[0m[1m:[0m build failed
error: build failed

```

</details>

ERROR: Unable to commit file ./frame/bags-list/src/weights.rs",9829,2021-11-17T12:17:20Z,0
280,emostov,/benchmark runtime pallet pallet_bags_list,9829,2021-11-17T13:21:04Z,0
281,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""zeke-change-bag-position"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_bags_list --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/bags-list/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_bags_list"", Extrinsic: ""rebag_non_terminal"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:0)
Storage: BagsList ListNodes (r:4 w:4)
Storage: BagsList ListBags (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    71.53
              µs

Reads = 7
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    71.53
              µs

Reads = 7
Writes = 5

Pallet: ""pallet_bags_list"", Extrinsic: ""rebag_terminal"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:0)
Storage: BagsList ListNodes (r:3 w:3)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.82
              µs

Reads = 7
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.82
              µs

Reads = 7
Writes = 5

Pallet: ""pallet_bags_list"", Extrinsic: ""put_in_front_of"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: BagsList ListNodes (r:4 w:4)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:2 w:0)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: BagsList ListBags (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    82.77
              µs

Reads = 10
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    82.77
              µs

Reads = 10
Writes = 6


```

</details>",9829,2021-11-17T14:09:33Z,0
282,emostov,/benchmark runtime pallet pallet_bags_list,9829,2021-11-17T17:39:07Z,0
283,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""zeke-change-bag-position"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_bags_list --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/bags-list/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error[E0405]: cannot find trait `WeightInfo` in this scope
  --> frame/bags-list/src/weights.rs:47:31
   |
47 | impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
   |                               ^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
42 | use crate::WeightInfo;
   |
42 | use frame_system::WeightInfo;
   |
42 | use pallet_balances::WeightInfo;
   |

error[E0405]: cannot find trait `WeightInfo` in this scope
  --> frame/bags-list/src/weights.rs:60:6
   |
60 | impl WeightInfo for () {
   |      ^^^^^^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
42 | use crate::WeightInfo;
   |
42 | use frame_system::WeightInfo;
   |
42 | use pallet_balances::WeightInfo;
   |

error[E0412]: cannot find type `Weight` in this scope
  --> frame/bags-list/src/lib.rs:73:29
   |
73 |     fn rebag_non_terminal() -> Weight;
   |                                ^^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
54 | use crate::pallet::Weight;
   |
54 | use frame_support::pallet_prelude::Weight;
   |

error[E0412]: cannot find type `Weight` in this scope
  --> frame/bags-list/src/lib.rs:74:25
   |
74 |     fn rebag_terminal() -> Weight;
   |                            ^^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
54 | use crate::pallet::Weight;
   |
54 | use frame_support::pallet_prelude::Weight;
   |

error[E0412]: cannot find type `Weight` in this scope
  --> frame/bags-list/src/lib.rs:75:26
   |
75 |     fn put_in_front_of() -> Weight;
   |                             ^^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
54 | use crate::pallet::Weight;
   |
54 | use frame_support::pallet_prelude::Weight;
   |

error[E0405]: cannot find trait `WeightInfo` in module `weights`
   --> frame/bags-list/src/lib.rs:108:29
    |
108 |         type WeightInfo: weights::WeightInfo;
    |                                   ^^^^^^^^^^ not found in `weights`
    |
help: consider importing one of these items
    |
93  |     use crate::WeightInfo;
    |
93  |     use frame_system::WeightInfo;
    |
93  |     use pallet_balances::WeightInfo;
    |

Some errors have detailed explanations: E0405, E0412.
For more information about an error, try `rustc --explain E0405`.
error: could not compile `pallet-bags-list` due to 6 previous errors
error: build failed

```

</details>

ERROR: Unable to commit file ./frame/bags-list/src/weights.rs",9829,2021-11-17T17:39:09Z,0
284,emostov,/benchmark runtime pallet pallet_bags_list,9829,2021-11-18T10:00:40Z,0
285,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""zeke-change-bag-position"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_bags_list --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/bags-list/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_bags_list"", Extrinsic: ""rebag_non_terminal"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:0)
Storage: BagsList ListNodes (r:4 w:4)
Storage: BagsList ListBags (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    70.48
              µs

Reads = 7
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    70.48
              µs

Reads = 7
Writes = 5

Pallet: ""pallet_bags_list"", Extrinsic: ""rebag_terminal"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:0)
Storage: BagsList ListNodes (r:3 w:3)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.64
              µs

Reads = 7
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.64
              µs

Reads = 7
Writes = 5

Pallet: ""pallet_bags_list"", Extrinsic: ""put_in_front_of"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: BagsList ListNodes (r:4 w:4)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:2 w:0)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: BagsList ListBags (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    82.34
              µs

Reads = 10
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    82.34
              µs

Reads = 10
Writes = 6


```

</details>",9829,2021-11-18T10:26:51Z,0
286,kianenigma,"@shawntabrizi @thiolliere either of you can do a quick second review here? I've looked at it in detail and already audited, should be all good. ",9829,2021-12-02T10:46:01Z,0
287,emostov,bot merge,9829,2021-12-07T18:16:56Z,0
288,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/3899,9829,2021-12-07T18:17:05Z,0
289,emostov,bot merge,9829,2021-12-08T04:14:31Z,0
290,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/3899,9829,2021-12-08T04:14:40Z,0
291,emostov,"> Error: It's not possible to meet the minimal approval count of 1 in [paritytech/polkadot#3899](https://github.com/paritytech/polkadot/pull/3899)

Not sure whats up here, @thiolliere already approved the companion",9829,2021-12-08T04:20:33Z,0
292,shawntabrizi,bot merge,9829,2021-12-08T04:35:32Z,0
293,bkchr,"> Refactor DispatchQueue into its own pallet.

@coriolinus maybe you could work on this? We could reuse this in Cumulus.",5322,2020-03-20T07:43:03Z,0
294,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",5322,2021-07-07T19:13:13Z,0
295,bkchr,"Transactions are not unique, aka a transaction hash can occur multiple times. This means, you can not easily query this.",10446,2021-12-08T18:52:52Z,0
296,ayevbeosa,"Good day, I am interested in picking this up but I have been unable to find the counters in pallet-staking. Could you please help?",10180,2021-11-08T13:01:34Z,0
297,ayevbeosa,Nvm found them.,10180,2021-11-11T08:00:31Z,0
298,KiChjang,Fixed in #10233.,10180,2021-12-08T20:35:42Z,0
299,zh-beep,"@thiolliere  - I'm currently learning Rust and would like to contribute, would I be able to help with this issue? ",9962,2021-10-22T04:24:49Z,0
300,thiolliere,"in the example in the top message instead of `frame-system::Config::BaseCallFilter` we should have a doc link so something like
```
[`frame_system::Config::BaseCallFilter`]
```
But because `frame_system` crate can be renamed in the Cargo.toml we should get the correct name. So at the end the doc generated might look like:
```
///  Create with system none origin and `[
#[doc = #frame_system]
/// ::Config::BaseCallFilter`]
```
I'm not sure it works or maybe otherwise:
```
///  Create with system none origin and 
#[doc = #doc_item]
/// .
```
I mean I don't really know the implementation but at the end it should have the correct link when we generate the doc with `cargo doc`.",9962,2021-10-22T08:50:48Z,0
301,dharjeezy,Is this issue done? @thiolliere can I pick the issue up? ,9962,2021-11-14T20:51:56Z,0
302,thiolliere,"anybody can submit a PR which solve this issue, they can also ping my name on the PR top message.

On master I still see those which could have a intra doc link:
```
frame/support/procedural/src/construct_runtime/expand/origin.rs:185:			/// Create with system none origin and `frame-system::Config::BaseCallFilter`.
frame/support/procedural/src/construct_runtime/expand/origin.rs:189:			/// Create with system root origin and `frame-system::Config::BaseCallFilter`.
frame/support/procedural/src/construct_runtime/expand/origin.rs:193:			/// Create with system signed origin and `frame-system::Config::BaseCallFilter`.
frame/support/procedural/src/construct_runtime/expand/origin.rs:219:			/// Convert to runtime origin, using as filter: `frame-system::Config::BaseCallFilter`.
frame/support/procedural/src/construct_runtime/expand/origin.rs:251:			/// `frame-system::Config::BaseCallFilter`.
frame/support/procedural/src/construct_runtime/expand/origin.rs:314:			/// Convert to runtime origin using `frame-system::Config::BaseCallFilter`.
frame/support/procedural/src/construct_runtime/expand/origin.rs:78:		/// Origin is always created with the base filter configured in `frame_system::Config::BaseCallFilter`.
```",9962,2021-11-15T06:03:53Z,0
303,dharjeezy,can you check the PR i created @thiolliere ,9962,2021-11-15T19:19:07Z,0
304,dharjeezy,@thiolliere i have updated the PR i opened. could you take a look now.,9962,2021-11-19T13:54:22Z,0
305,KiChjang,Fixed by #10271.,9962,2021-12-08T20:37:46Z,0
306,bkchr,bot merge,10330,2021-12-08T20:26:45Z,0
307,paritytech-processbot[bot],Waiting for commit status.,10330,2021-12-08T20:26:54Z,0
308,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10330,2021-12-08T21:03:34Z,0
309,remzrn,"Just created pull request #10337 that implements the changes proposed, if any useful.
",10336,2021-11-22T14:08:16Z,0
310,cla-bot-2021[bot],"User @remzrn, please sign the CLA [here](https://cla.parity.io/sign_cla/64918417/3).",10337,2021-11-22T14:06:47Z,0
311,remzrn,"Not sure whether it is relevant to mention here, but I signed the CLA, and yet, it does not seem to update that status. I cannot sign a second time, since the link does not work anymore.
If there is indeed still an issue with CLA please provide me with another link and I will attempt to sign again.",10337,2021-11-24T14:27:03Z,0
312,bkchr,"> Not sure whether it is relevant to mention here, but I signed the CLA, and yet, it does not seem to update that status. I cannot sign a second time, since the link does not work anymore. If there is indeed still an issue with CLA please provide me with another link and I will attempt to sign again.

I think the problem is that you created the commit with an email that isn't linked to your github account. So, the tool can not connect you as a user to the commit. Could you please force push with a different email for the commit?",10337,2021-11-25T12:28:45Z,0
313,remzrn,"Thanks for pointing this out! I think it totally makes sense to require that the migration logic can get controlled fully at runtime level.

I was unaware of those discussions and It just took me a bit of time to grok all this also because I am unfamiliar with substrate. I tried to stick to the example, so I hope I am not misusing anything. 

I have tentatively implemented the changes you asked for, but unfortunately, I am unsure about the logic, and I have not been able to find out how to write tests for those. I would need help or pointers about how to do this. For Edgeware, we can try to see if that works during the testnet phase, but I guess there is a cleaner and more reliable way that just iterating version accross all testnet nodes to test and debug this.

One issue I have is that there is now a storage variable that flags whether the migration to triple reference counting has been performed, but [it seems to be a renaming](https://github.com/paritytech/substrate/commit/e2d74ac74f3511d10b963cddc8bccc1d5af0bf38#diff-68096a50d12854e07693a4828590517bb81fea37a9253640278ecdc5b93b6992L600) of a previous variable that flagged whether the status was upgraded to dual reference counting. Does it mean that it theory I could still fetch out the previous storage flag using `generate_storage_alias`? In which case I would know which migration to apply with reasonable certainty. 
At the moment, I am relying on the fact that the translate() function from storage maps skips the elements it cannot decode, and assuming that if anything has been translated, the migration was the right one, otherwise, trying another one. 
This is not ideal but runtime engineers can still choose to apply specific functions related to their exact state if they know where they are.",10337,2021-11-28T12:59:36Z,0
314,thiolliere,"> One issue I have is that there is now a storage variable that flags whether the migration to triple reference counting has been performed, but [it seems to be a renaming](https://github.com/paritytech/substrate/commit/e2d74ac74f3511d10b963cddc8bccc1d5af0bf38#diff-68096a50d12854e07693a4828590517bb81fea37a9253640278ecdc5b93b6992L600) of a previous variable that flagged whether the status was upgraded to dual reference counting. Does it mean that it theory I could still fetch out the previous storage flag using `generate_storage_alias`? In which case I would know which migration to apply with reasonable certainty. At the moment, I am relying on the fact that the translate() function from storage maps skips the elements it cannot decode, and assuming that if anything has been translated, the migration was the right one, otherwise, trying another one. This is not ideal but runtime engineers can still choose to apply specific functions related to their exact state if they know where they are.

I think it is better to just let the user call the correct function from the on_runtime_upgrade implementation when declaring the runtime.",10337,2021-11-29T08:53:45Z,0
315,remzrn,"> I think it is better to just let the user call the correct function from the on_runtime_upgrade implementation when declaring the runtime.

Would you then suggest to remove apply overall and then maybe add weights in each of them?",10337,2021-11-29T12:22:08Z,0
316,thiolliere,"> > I think it is better to just let the user call the correct function from the on_runtime_upgrade implementation when declaring the runtime.
> 
> Would you then suggest to remove apply overall and then maybe add weights in each of them?

Yes, I personally think we can remove `apply`. About weight we can add some weight or let user benchmark the runtime migration on their own. I'm ok with both.",10337,2021-11-30T03:27:08Z,0
317,shawntabrizi,/tip small,10337,2021-12-09T04:51:09Z,0
318,substrate-tip-bot[bot],"Please fix the following problems before calling the tip bot again:
 * Contributor did not properly post their Polkadot or Kusama address. Make sure the pull request has: ""{network} address: {address}"".",10337,2021-12-09T04:51:10Z,0
319,shawntabrizi,bot merge,10337,2021-12-09T05:05:40Z,0
320,shawntabrizi,"@remzrn you can still get a tip, just update your first post in this PR",10337,2021-12-09T05:06:10Z,0
321,gavofyork,"That's right - it should really say ""the balance may not be reduced to become less than `minimum_balance + frozen_balance`"".",10391,2021-12-03T15:47:08Z,0
322,emostov,bot merge,10431,2021-12-09T06:31:22Z,0
323,athei,/benchmark runtime pallet pallet_contracts,10452,2021-12-08T23:16:10Z,0
324,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-run-contract-benchmarks"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.854
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.854
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k     2.18
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     67.05      0.95    1.4%
   20     58.93     0.816    1.3%
   40     95.58     0.755    0.7%
   60     130.2     0.845    0.6%
   80     168.2     0.809    0.4%
  100     206.8     1.434    0.6%
  120     247.4     2.111    0.8%
  140     289.1     1.404    0.4%
  160     328.4     2.587    0.7%
  180     369.9     4.127    1.1%
  200     413.1     2.407    0.5%
  220     457.5     3.639    0.7%
  240     502.4     7.614    1.5%
  260     533.5     2.409    0.4%
  280       588     3.164    0.5%
  300     619.8     3.119    0.5%
  320     663.5     2.061    0.3%
  340     710.6     4.424    0.6%
  360     773.6     9.391    1.2%
  380       802     8.831    1.1%
  400     843.8     5.042    0.5%
  420     887.2      10.7    1.2%
  440     934.6     15.41    1.6%
  460     989.7     6.069    0.6%
  480      1016     10.19    1.0%
  500      1075     9.966    0.9%
  520      1114      9.33    0.8%
  540      1154     9.806    0.8%
  560      1203     11.38    0.9%
  580      1243     10.18    0.8%
  600      1301     5.262    0.4%
  620      1326     13.41    1.0%
  640      1391     10.66    0.7%
  660      1418     19.92    1.4%
  680      1462     10.92    0.7%
  700      1527     8.294    0.5%
  720      1560     13.95    0.8%
  740      1624     25.38    1.5%
  760      1664     9.298    0.5%
  780      1708      10.7    0.6%
  800      1745     12.05    0.6%
  820      1790     15.39    0.8%
  840      1829     12.15    0.6%
  860      1862     13.06    0.7%
  880      1925     12.36    0.6%
  900      1952     17.89    0.9%
  920      2022     11.08    0.5%
  940      2043     27.92    1.3%
  960      2104      16.5    0.7%
  980      2132     20.71    0.9%
 1000      2188     31.27    1.4%
 1020      2213     10.24    0.4%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k     2.19
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    106.1
    + q    0.284
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.763     0.031    1.1%
   20     87.75     0.835    0.9%
   40     100.5     1.208    1.2%
   60     112.1     1.043    0.9%
   80     121.3     1.147    0.9%
  100     131.4     2.154    1.6%
  120     140.3     1.812    1.2%
  140     148.1     1.275    0.8%
  160       157     1.089    0.6%
  180     166.3     0.796    0.4%
  200     175.6      1.05    0.5%
  220     182.9     1.211    0.6%
  240     191.4     1.002    0.5%
  260     200.7     1.341    0.6%
  280       177     0.965    0.5%
  300     208.6      2.32    1.1%
  320     217.3     0.993    0.4%
  340     224.2     1.838    0.8%
  360     202.6     1.023    0.5%
  380     210.6     1.644    0.7%
  400     216.4     0.913    0.4%
  420     221.5     1.096    0.4%
  440       266     1.726    0.6%
  460     233.8     0.961    0.4%
  480     240.5     0.702    0.2%
  500     262.1     9.674    3.6%
  520     253.3     1.195    0.4%
  540     258.4     1.329    0.5%
  560     264.6     1.894    0.7%
  580     269.4      0.93    0.3%
  600       276     1.239    0.4%
  620     284.4       3.5    1.2%
  640     289.9     1.541    0.5%
  660     296.4      1.54    0.5%
  680     300.2     0.647    0.2%
  700     308.1      1.67    0.5%
  720     311.5     1.971    0.6%
  740     317.2     1.199    0.3%
  760     328.5     9.757    2.9%
  780     328.7     1.377    0.4%
  800     333.1     1.112    0.3%
  820       352      11.9    3.3%
  840     343.9     1.215    0.3%
  860     348.8      0.88    0.2%
  880     353.4     0.795    0.2%
  900     358.5     0.937    0.2%
  920     364.4     0.785    0.2%
  940     368.2     0.918    0.2%
  960     372.5     1.449    0.3%
  980     380.1     1.555    0.4%
 1000     384.3     1.013    0.2%
 1020     390.1     1.305    0.3%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    101.5
    + q    0.292
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""instrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.35
    + c    90.97
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     53.95     0.114    0.2%
    2     236.9     0.871    0.3%
    4     417.7     4.226    1.0%
    6     579.2     0.461    0.0%
    8     777.7     13.71    1.7%
   10     945.4     8.429    0.8%
   12      1121     15.69    1.3%
   14      1336     15.74    1.1%
   16      1494      13.5    0.9%
   18      1676     12.23    0.7%
   20      1852     12.19    0.6%
   22      2035     12.71    0.6%
   24      2156     8.332    0.3%
   26      2450     14.66    0.5%
   28      2603     12.69    0.4%
   30      2785     19.56    0.7%
   32      2954     6.035    0.2%
   34      3150     11.87    0.3%
   36      3314     17.78    0.5%
   38      3477     15.77    0.4%
   40      3642     18.02    0.4%
   42      3823     16.61    0.4%
   44      3966     11.53    0.2%
   46      4142     16.85    0.4%
   48      4294      20.4    0.4%
   50      4685     21.89    0.4%
   52      4854     17.73    0.3%
   54      4995     14.56    0.2%
   56      5169     13.97    0.2%
   58      5320     3.031    0.0%
   60      5497      22.2    0.4%
   62      5676     18.84    0.3%
   64      5809     17.85    0.3%
   66      6102     24.69    0.4%
   68      6251     23.06    0.3%
   70      6417     15.24    0.2%
   72      7010      11.5    0.1%
   74      6751     15.82    0.2%
   76      6907     13.49    0.1%
   78      7104     31.03    0.4%
   80      7213     3.448    0.0%
   82      7424     25.13    0.3%
   84      7561      21.3    0.2%
   86      7723     21.08    0.2%
   88      7900     25.03    0.3%
   90      8066     21.87    0.2%
   92      8235     26.26    0.3%
   94      8386     19.31    0.2%
   96      8544     12.39    0.1%
   98      9178     35.94    0.3%
  100      9298     16.29    0.1%
  102      9465     8.684    0.0%
  104      9642      16.5    0.1%
  106      9807     15.56    0.1%
  108      9999     7.091    0.0%
  110     10130     12.59    0.1%
  112     10300     15.15    0.1%
  114     10480     26.26    0.2%
  116     10640      24.1    0.2%
  118     10780     11.76    0.1%
  120     10980     23.57    0.2%
  122     11110     17.79    0.1%
  124     11290     16.01    0.1%
  126     11460     23.55    0.2%
  128     11620     30.69    0.2%

Quality and confidence:
param     error
c         0.106

Model:
Time ~=    33.35
    + c    91.09
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_load"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    8.057
    + c    1.454
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     7.102     0.089    1.2%
    2     11.08     0.067    0.6%
    4      13.9     0.095    0.6%
    6     16.76      0.11    0.6%
    8     19.48     0.073    0.3%
   10     22.48     0.101    0.4%
   12     24.94     0.127    0.5%
   14     28.61      0.07    0.2%
   16     30.89     0.087    0.2%
   18     35.03     0.083    0.2%
   20     38.18     0.078    0.2%
   22     40.35     0.089    0.2%
   24     43.97     0.052    0.1%
   26     45.54      0.09    0.1%
   28     49.49     0.469    0.9%
   30      51.7     0.108    0.2%
   32     54.73     0.103    0.1%
   34     57.46     0.119    0.2%
   36      60.6     0.133    0.2%
   38     63.43     0.128    0.2%
   40      65.9     0.047    0.0%
   42     69.13     0.098    0.1%
   44     71.84     0.124    0.1%
   46     74.83     0.206    0.2%
   48     77.62     0.178    0.2%
   50     80.54     0.122    0.1%
   52     83.61     0.064    0.0%
   54     86.42     0.241    0.2%
   56     89.37     0.097    0.1%
   58     92.64      0.06    0.0%
   60     95.17     0.096    0.1%
   62     98.06     0.214    0.2%
   64     101.2     0.092    0.0%
   66     103.8     0.162    0.1%
   68     106.6     0.146    0.1%
   70     109.7     0.114    0.1%
   72     113.5     1.142    1.0%
   74     115.6     0.157    0.1%
   76     119.2     0.739    0.6%
   78     121.4     0.112    0.0%
   80     124.3     0.216    0.1%
   82     127.4     0.091    0.0%
   84     130.5     0.064    0.0%
   86       133     0.072    0.0%
   88     136.2     0.229    0.1%
   90     138.8     0.218    0.1%
   92     142.6     0.088    0.0%
   94     145.2     0.171    0.1%
   96     147.9     0.127    0.0%
   98     151.1     1.078    0.7%
  100     153.6     0.165    0.1%
  102     156.5     0.156    0.0%
  104     159.2     0.167    0.1%
  106     162.9     0.455    0.2%
  108     165.9     0.127    0.0%
  110     168.5     0.191    0.1%
  112     171.5      0.12    0.0%
  114     173.1     0.106    0.0%
  116     176.5     0.153    0.0%
  118     179.1     0.133    0.0%
  120     181.8     0.154    0.0%
  122     186.6     1.732    0.9%
  124     187.9     0.171    0.0%
  126     191.2     0.149    0.0%
  128     193.6     0.238    0.1%

Quality and confidence:
param     error
c             0

Model:
Time ~=     8.08
    + c    1.455
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    557.3
    + c      213
    + s    2.062
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2644     10.22    0.3%
    1  1024      2836     11.35    0.4%
    2  1024      3078     10.77    0.3%
    3  1024      3287     23.27    0.7%
    4  1024      3490      15.1    0.4%
    5  1024      3715      20.3    0.5%
    6  1024      3912     11.56    0.2%
    7  1024      4133     9.874    0.2%
    8  1024      4337     16.29    0.3%
    9  1024      4584     13.64    0.2%
   10  1024      4789     27.52    0.5%
   11  1024      4979     13.08    0.2%
   12  1024      5166     21.23    0.4%
   13  1024      5454     26.75    0.4%
   14  1024      5627     11.42    0.2%
   15  1024      5810     19.38    0.3%
   16  1024      6009     14.38    0.2%
   17  1024      6360     17.66    0.2%
   18  1024      6564     28.79    0.4%
   19  1024      6765     20.27    0.2%
   20  1024      6950     18.73    0.2%
   21  1024      7146     20.86    0.2%
   22  1024      7493     11.62    0.1%
   23  1024      7538     26.91    0.3%
   24  1024      7700     22.63    0.2%
   25  1024      8081     14.06    0.1%
   26  1024      8283      22.3    0.2%
   27  1024      8456     18.15    0.2%
   28  1024      8669     39.86    0.4%
   29  1024      8850     31.77    0.3%
   30  1024      9062     28.51    0.3%
   31  1024      9226     15.73    0.1%
   32  1024      9403     9.536    0.1%
   33  1024      9856     18.15    0.1%
   34  1024     10050     28.86    0.2%
   35  1024     10260     29.86    0.2%
   36  1024     10410     22.79    0.2%
   37  1024     10640     27.95    0.2%
   38  1024     10810     20.48    0.1%
   39  1024     11030     45.93    0.4%
   40  1024     11250     20.75    0.1%
   41  1024     11400     38.35    0.3%
   42  1024     11570     31.22    0.2%
   43  1024     11770     18.56    0.1%
   44  1024     11960     29.02    0.2%
   45  1024     12190     43.25    0.3%
   46  1024     12340        28    0.2%
   47  1024     12550        46    0.3%
   48  1024     12740     52.42    0.4%
   49  1024     13250     26.44    0.1%
   50  1024     13460        28    0.2%
   51  1024     13660      30.7    0.2%
   52  1024     13880      55.7    0.4%
   53  1024     14020     27.67    0.1%
   54  1024     14220     40.44    0.2%
   55  1024     14420     22.67    0.1%
   56  1024     14620     45.63    0.3%
   57  1024     14830     42.15    0.2%
   58  1024     14990     33.58    0.2%
   59  1024     15190      39.5    0.2%
   60  1024     15370     38.27    0.2%
   61  1024     15600     32.55    0.2%
   62  1024     15720     30.43    0.1%
   63  1024     15950     43.35    0.2%
   64     0     14020     29.41    0.2%
   64    20     14120      23.3    0.1%
   64    40     14090     17.83    0.1%
   64    60     14160     29.93    0.2%
   64    80     14180     29.84    0.2%
   64   100     14190     26.64    0.1%
   64   120     14280     30.69    0.2%
   64   140     14280     22.77    0.1%
   64   160     14320     29.66    0.2%
   64   180     14380     36.31    0.2%
   64   200     14430     42.13    0.2%
   64   220     14460     26.19    0.1%
   64   240     14500     30.56    0.2%
   64   260     14570     29.44    0.2%
   64   280     14610     59.39    0.4%
   64   300     14630     33.58    0.2%
   64   320     14710     36.12    0.2%
   64   340     14740     30.58    0.2%
   64   360     14770     31.41    0.2%
   64   380     14820     41.97    0.2%
   64   400     14870     52.42    0.3%
   64   420     14880     43.23    0.2%
   64   440     14920     30.39    0.2%
   64   460     15010      36.8    0.2%
   64   480     15020     31.07    0.2%
   64   500     15110     37.87    0.2%
   64   520     15120     31.64    0.2%
   64   540     15180     43.95    0.2%
   64   560     15190     29.81    0.1%
   64   580     15230     28.28    0.1%
   64   600     15270      26.3    0.1%
   64   620     15350     48.42    0.3%
   64   640     15350     29.29    0.1%
   64   660     15420     38.41    0.2%
   64   680     15450     32.07    0.2%
   64   700     15520     46.41    0.2%
   64   720     15510     31.39    0.2%
   64   740     15550     21.54    0.1%
   64   760     15600     44.32    0.2%
   64   780     15640     31.27    0.1%
   64   800     15690     27.82    0.1%
   64   820     15720     31.57    0.2%
   64   840     15770     33.54    0.2%
   64   860     15800     54.22    0.3%
   64   880     15970     84.23    0.5%
   64   900     15870     38.84    0.2%
   64   920     15910     52.48    0.3%
   64   940     15920     32.84    0.2%
   64   960     15970      31.6    0.1%
   64   980     16060     53.79    0.3%
   64  1000     16070     59.68    0.3%
   64  1020     16120     43.97    0.2%
   64  1024     16100      21.7    0.1%

Quality and confidence:
param     error
c         0.136
s         0.008

Model:
Time ~=    464.9
    + c    211.3
    + s     2.19
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    236.8
    + s     1.99
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0       235     0.384    0.1%
   20     275.2     0.676    0.2%
   40     316.2     0.346    0.1%
   60     355.5     1.019    0.2%
   80     396.3     0.835    0.2%
  100     435.7     0.882    0.2%
  120       481     11.28    2.3%
  140     518.8     12.69    2.4%
  160     557.1     6.868    1.2%
  180       596      1.23    0.2%
  200     634.5     1.419    0.2%
  220     686.1     16.02    2.3%
  240     717.4     10.17    1.4%
  260     761.4     13.41    1.7%
  280     804.3      15.1    1.8%
  300     842.1     10.77    1.2%
  320     881.9     15.41    1.7%
  340     912.7     1.887    0.2%
  360     952.5     3.699    0.3%
  380     995.4     12.27    1.2%
  400      1035     10.88    1.0%
  420      1087     14.71    1.3%
  440      1127     11.86    1.0%
  460      1155     13.08    1.1%
  480      1205     15.91    1.3%
  500      1243     16.17    1.3%
  520      1279      15.3    1.1%
  540      1325      14.5    1.0%
  560      1359     14.17    1.0%
  580      1392     9.499    0.6%
  600      1439     15.62    1.0%
  620      1486     13.89    0.9%
  640      1523     14.68    0.9%
  660      1577     9.273    0.5%
  680      1601     12.24    0.7%
  700      1646     13.53    0.8%
  720      1694     3.923    0.2%
  740      1715     14.39    0.8%
  760      1756     13.48    0.7%
  780      1806     13.68    0.7%
  800      1846     14.97    0.8%
  820      1870      10.4    0.5%
  840      1920      15.2    0.7%
  860      1959      17.7    0.9%
  880      1989     13.67    0.6%
  900      2052     9.959    0.4%
  920      2074     14.59    0.7%
  940      2112     11.13    0.5%
  960      2175     19.24    0.8%
  980      2218     5.045    0.2%
 1000      2237     13.44    0.6%
 1020      2309     12.46    0.5%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    236.1
    + s     2.01
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    172.7
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    172.7
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    91.93
    + c    93.16
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     92.72     0.442    0.4%
    1     189.4     0.435    0.2%
    2     279.4     0.306    0.1%
    3       365     0.759    0.2%
    4     462.6     0.967    0.2%
    5     561.1     2.028    0.3%
    6     631.3      0.69    0.1%
    7     757.4     14.23    1.8%
    8     828.2     5.993    0.7%
    9     918.8      8.93    0.9%
   10      1008      13.1    1.2%
   11      1085     8.755    0.8%
   12      1177     16.31    1.3%
   13      1327     11.89    0.8%
   14      1405     14.36    1.0%
   15      1498      13.1    0.8%
   16      1578     16.41    1.0%
   17      1681      15.1    0.8%
   18      1768     12.12    0.6%
   19      1861     10.38    0.5%
   20      1951     9.128    0.4%
   21      2027      10.9    0.5%
   22      2098      15.1    0.7%
   23      2189        14    0.6%
   24      2278      18.6    0.8%
   25      2481     12.89    0.5%
   26      2549     12.44    0.4%
   27      2635     11.32    0.4%
   28      2707      11.6    0.4%
   29      2808     10.62    0.3%
   30      2877     13.81    0.4%
   31      2965     13.16    0.4%
   32      3073     13.46    0.4%
   33      3198     10.75    0.3%
   34      3276     14.32    0.4%
   35      3350     10.13    0.3%
   36      3439      8.39    0.2%
   37      3527     11.26    0.3%
   38      3600      9.31    0.2%
   39      3694     19.56    0.5%
   40      3778     18.42    0.4%
   41      3864     10.27    0.2%
   42      3944     8.005    0.2%
   43      4030     10.27    0.2%
   44      4109     9.855    0.2%
   45      4200     18.39    0.4%
   46      4307     19.21    0.4%
   47      4387     14.29    0.3%
   48      4448     20.09    0.4%
   49      4758     13.77    0.2%
   50      4860     26.99    0.5%
   51      4917     7.491    0.1%
   52      5005     11.77    0.2%
   53      5098      24.9    0.4%
   54      5186     14.78    0.2%
   55      5259     12.56    0.2%
   56      5334     24.39    0.4%
   57      5448        25    0.4%
   58      5524     18.21    0.3%
   59      5593     17.64    0.3%
   60      5787      30.6    0.5%
   61      5775     26.79    0.4%
   62      5842     16.47    0.2%
   63      5933     17.48    0.2%
   64      6023     18.39    0.3%

Quality and confidence:
param     error
c         0.098

Model:
Time ~=    80.41
    + c    93.46
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40.04
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40.04
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    420.3
    + r    114.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.1     0.304    0.0%
    1     524.6     0.333    0.0%
    2     640.7     3.703    0.5%
    3     755.1     9.661    1.2%
    4       867     7.563    0.8%
    5     986.9      14.1    1.4%
    6      1100     12.41    1.1%
    7      1228     10.51    0.8%
    8      1346     15.49    1.1%
    9      1456     14.17    0.9%
   10      1560     12.35    0.7%
   11      1677     13.55    0.8%
   12      1785     17.26    0.9%
   13      1897     12.96    0.6%
   14      2034     16.45    0.8%
   15      2155     18.96    0.8%
   16      2253     16.34    0.7%
   17      2364     14.38    0.6%
   18      2466     10.17    0.4%
   19      2585     14.32    0.5%
   20      2699     9.972    0.3%

Quality and confidence:
param     error
r         0.175

Model:
Time ~=    416.7
    + r    114.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    420.4
    + r    114.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.7     1.446    0.3%
    1     524.4     0.429    0.0%
    2     640.2     0.402    0.0%
    3     751.2     1.774    0.2%
    4     866.4     1.862    0.2%
    5     999.2     15.11    1.5%
    6      1099     13.52    1.2%
    7      1237     14.01    1.1%
    8      1342     14.29    1.0%
    9      1463     16.01    1.0%
   10      1558     12.07    0.7%
   11      1684     16.29    0.9%
   12      1795     14.07    0.7%
   13      1903     16.48    0.8%
   14      2044     13.18    0.6%
   15      2152     15.29    0.7%
   16      2273      9.15    0.4%
   17      2367     11.94    0.5%
   18      2493      8.61    0.3%
   19      2591     12.08    0.4%
   20      2704     11.59    0.4%

Quality and confidence:
param     error
r         0.176

Model:
Time ~=    415.7
    + r    115.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    418.3
    + r      113
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     423.3     1.594    0.3%
    1     525.8     7.439    1.4%
    2       639     5.208    0.8%
    3       745     1.675    0.2%
    4     861.9     9.313    1.0%
    5     965.2     1.038    0.1%
    6      1090     14.44    1.3%
    7      1223      14.5    1.1%
    8      1334     15.54    1.1%
    9      1432     10.35    0.7%
   10      1534     1.444    0.0%
   11      1661      14.5    0.8%
   12      1770     11.08    0.6%
   13      1873     11.97    0.6%
   14      2019     11.02    0.5%
   15      2129     8.981    0.4%
   16      2274     2.788    0.1%
   17      2334     14.89    0.6%
   18      2451     15.84    0.6%
   19      2568     10.23    0.3%
   20      2673     14.64    0.5%

Quality and confidence:
param     error
r           0.2

Model:
Time ~=    411.8
    + r    113.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    423.8
    + r    313.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     424.8     4.364    1.0%
    1     729.7     8.515    1.1%
    2      1049     14.23    1.3%
    3      1359     14.15    1.0%
    4      1670      14.4    0.8%
    5      1972     7.637    0.3%
    6      2299     8.749    0.3%
    7      2630     14.15    0.5%
    8      2947     5.676    0.1%
    9      3249     5.318    0.1%
   10      3561     8.805    0.2%
   11      3862     9.945    0.2%
   12      4202     17.32    0.4%
   13      4494     12.14    0.2%
   14      4813     10.55    0.2%
   15      5137     17.23    0.3%
   16      5448     18.11    0.3%
   17      5749     14.67    0.2%
   18      6060     22.24    0.3%
   19      6376     24.33    0.3%
   20      6680     14.87    0.2%

Quality and confidence:
param     error
r         0.189

Model:
Time ~=    422.3
    + r    313.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    436.9
    + r    111.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.5      0.29    0.0%
    1     536.3     0.364    0.0%
    2     656.8     11.57    1.7%
    3     761.5     1.215    0.1%
    4     892.9     12.09    1.3%
    5      1001     17.78    1.7%
    6      1111     13.78    1.2%
    7      1226     11.94    0.9%
    8      1341     16.06    1.1%
    9      1448      10.5    0.7%
   10      1559     13.89    0.8%
   11      1666     15.33    0.9%
   12      1783     15.05    0.8%
   13      1881     10.88    0.5%
   14      2014     17.37    0.8%
   15      2114     11.29    0.5%
   16      2245     10.38    0.4%
   17      2305     4.047    0.1%
   18      2447     5.247    0.2%
   19      2545     11.62    0.4%
   20      2655     10.58    0.3%

Quality and confidence:
param     error
r         0.191

Model:
Time ~=    437.4
    + r    111.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    430.5
    + r    110.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.7     0.366    0.0%
    1     537.5      1.48    0.2%
    2     649.4     0.669    0.1%
    3     765.3     11.91    1.5%
    4     872.4     2.889    0.3%
    5     980.8      2.54    0.2%
    6      1098     11.26    1.0%
    7      1222     10.19    0.8%
    8      1333     13.84    1.0%
    9      1442     16.56    1.1%
   10      1548     10.19    0.6%
   11      1671     20.25    1.2%
   12      1768      13.4    0.7%
   13      1885     15.51    0.8%
   14      1996     12.91    0.6%
   15      2089      8.98    0.4%
   16      2211     14.06    0.6%
   17      2334      10.4    0.4%
   18      2422      15.6    0.6%
   19      2541     18.51    0.7%
   20      2645     14.51    0.5%

Quality and confidence:
param     error
r          0.17

Model:
Time ~=    431.8
    + r    111.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    430.9
    + r    110.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     422.1     0.425    0.1%
    1     536.5     1.379    0.2%
    2     655.2     11.64    1.7%
    3       763     10.97    1.4%
    4     873.4     8.999    1.0%
    5     987.7     11.67    1.1%
    6      1086     3.862    0.3%
    7      1217      7.62    0.6%
    8      1325     9.445    0.7%
    9      1439     10.09    0.7%
   10      1545     13.44    0.8%
   11      1659     13.18    0.7%
   12      1770     14.95    0.8%
   13      1876     9.117    0.4%
   14      1986     12.63    0.6%
   15      2114      7.02    0.3%
   16      2203     10.86    0.4%
   17      2307     13.74    0.5%
   18      2434     17.83    0.7%
   19      2546     11.48    0.4%
   20      2641     13.88    0.5%

Quality and confidence:
param     error
r         0.152

Model:
Time ~=    430.4
    + r    111.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    424.1
    + r    111.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     420.5     0.225    0.0%
    1     535.7     0.487    0.0%
    2     655.6     10.57    1.6%
    3     761.6     5.923    0.7%
    4     862.4     8.234    0.9%
    5       982     14.54    1.4%
    6      1074     2.001    0.1%
    7      1209     14.04    1.1%
    8      1314     11.39    0.8%
    9      1422     12.34    0.8%
   10      1542     14.19    0.9%
   11      1642     13.58    0.8%
   12      1753     14.84    0.8%
   13      1856     13.47    0.7%
   14      1997     11.35    0.5%
   15      2114     11.46    0.5%
   16      2221      14.1    0.6%
   17      2325     14.04    0.6%
   18      2435     13.56    0.5%
   19      2550     15.85    0.6%
   20      2665     23.48    0.8%

Quality and confidence:
param     error
r         0.175

Model:
Time ~=    419.3
    + r      112
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    430.4
    + r    261.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.7     0.329    0.0%
    1     692.2     8.211    1.1%
    2     963.2      11.2    1.1%
    3      1222     13.36    1.0%
    4      1479     9.444    0.6%
    5      1733     15.54    0.8%
    6      2015     12.78    0.6%
    7      2268     14.16    0.6%
    8      2528     8.478    0.3%
    9      2784     7.826    0.2%
   10      3037      10.6    0.3%
   11      3303     14.99    0.4%
   12      3563     4.696    0.1%
   13      3813      13.6    0.3%
   14      4080     12.99    0.3%
   15      4334     16.23    0.3%
   16      4588     10.61    0.2%
   17      4913     15.35    0.3%
   18      5163     20.33    0.3%
   19      5409     21.51    0.3%
   20      5699     32.46    0.5%

Quality and confidence:
param     error
r         0.247

Model:
Time ~=    427.5
    + r    262.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    146.1
    + r    52.06
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     136.6     0.142    0.1%
    1     191.3     0.407    0.2%
    2       243     1.355    0.5%
    3     297.9     0.964    0.3%
    4     349.1     1.171    0.3%
    5     410.9     4.169    1.0%
    6     472.1     10.88    2.3%
    7       515     1.301    0.2%
    8     570.7     9.175    1.6%
    9     613.8     1.687    0.2%
   10     664.6     3.126    0.4%
   11     723.4     0.993    0.1%
   12     780.5     8.222    1.0%
   13     832.1     11.87    1.4%
   14     874.5     5.852    0.6%
   15     926.6     7.683    0.8%
   16     968.5     0.786    0.0%
   17      1018     1.706    0.1%
   18      1085     12.32    1.1%
   19      1131     15.05    1.3%
   20      1183     14.24    1.2%

Quality and confidence:
param     error
r         0.115

Model:
Time ~=    145.4
    + r    52.08
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    421.8
    + r    100.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     422.4     0.286    0.0%
    1       513     4.546    0.8%
    2     618.5        10    1.6%
    3     711.3     5.303    0.7%
    4       813     5.405    0.6%
    5     914.1     10.09    1.1%
    6      1009     11.88    1.1%
    7      1138     13.04    1.1%
    8      1230     10.46    0.8%
    9      1340     13.12    0.9%
   10      1434     19.15    1.3%
   11      1527     15.51    1.0%
   12      1625     14.17    0.8%
   13      1717     15.66    0.9%
   14      1852     12.47    0.6%
   15      1953     7.956    0.4%
   16      2041     17.02    0.8%
   17      2143     13.56    0.6%
   18      2244     6.143    0.2%
   19      2321     12.01    0.5%
   20      2424     11.13    0.4%

Quality and confidence:
param     error
r         0.184

Model:
Time ~=    415.7
    + r    101.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      538
    + n    38.07
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     513.9     4.427    0.8%
   20      1277     8.707    0.6%
   40      2050     14.46    0.7%
   60      2815     12.16    0.4%
   80      3582     6.677    0.1%
  100      4350     12.38    0.2%
  120      5131     16.07    0.3%
  140      5867     16.93    0.2%
  160      6624     18.29    0.2%
  180      7410     16.05    0.2%
  200      8151     18.64    0.2%
  220      8921     19.14    0.2%
  240      9695     20.41    0.2%
  260     10460     20.77    0.1%
  280     11210     28.23    0.2%
  300     11960     21.88    0.1%
  320     12730     26.39    0.2%
  340     13460     21.68    0.1%
  360     14260     27.92    0.1%
  380     14990     35.96    0.2%
  400     15760     25.01    0.1%
  420     16520     28.98    0.1%
  440     17290     38.16    0.2%
  460     18040      36.2    0.2%
  480     18820     35.77    0.1%
  500     19520     52.35    0.2%
  520     20340     49.82    0.2%
  540     21100     39.55    0.1%
  560     21840     19.65    0.0%
  580     22610     38.04    0.1%
  600     23380     24.27    0.1%
  620     24120     55.35    0.2%
  640     24870     41.76    0.1%
  660     25640      35.2    0.1%
  680     26460     28.16    0.1%
  700     27200     35.69    0.1%
  720     27940     41.42    0.1%
  740     28710     38.24    0.1%
  760     29450     31.22    0.1%
  780     30240     52.37    0.1%
  800     31030     61.69    0.1%
  820     31770     47.29    0.1%
  840     32560     65.46    0.2%
  860     33260     28.21    0.0%
  880     34030     42.53    0.1%
  900     34760     20.21    0.0%
  920     35580     51.92    0.1%
  940     36320     66.21    0.1%
  960     37070     59.82    0.1%
  980     37820        43    0.1%
 1000     38620     31.98    0.0%
 1020     39410     47.66    0.1%

Quality and confidence:
param     error
n         0.006

Model:
Time ~=    536.6
    + n    38.07
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.7
    + r     1.46
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.7     0.164    0.0%
    1     414.2     0.222    0.0%

Quality and confidence:
param     error
r         0.092

Model:
Time ~=    412.7
    + r    1.476
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    401.6
    + n    0.625
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       401     0.331    0.0%
   20     413.9     0.188    0.0%
   40     426.6      0.33    0.0%
   60     438.9     0.298    0.0%
   80     451.5     0.201    0.0%
  100     464.3      0.57    0.1%
  120     476.6     0.296    0.0%
  140     494.5     6.039    1.2%
  160     501.7     0.238    0.0%
  180     517.9     5.174    0.9%
  200     535.2     11.25    2.1%
  220     544.5     9.227    1.6%
  240     552.8     4.169    0.7%
  260     563.8     0.331    0.0%
  280     576.2     0.207    0.0%
  300     588.8     0.259    0.0%
  320     603.1     4.883    0.8%
  340     620.9     11.19    1.8%
  360     627.9     4.277    0.6%
  380     643.6      11.5    1.7%
  400     654.5     10.03    1.5%
  420     671.3     12.12    1.8%
  440     685.1     13.86    2.0%
  460     699.8     16.09    2.3%
  480     701.2     0.373    0.0%
  500     718.1     8.866    1.2%
  520     738.6     17.63    2.3%
  540     754.7     9.529    1.2%
  560     762.9     10.05    1.3%
  580     774.5     7.791    1.0%
  600     779.9     6.142    0.7%
  620     808.2     13.03    1.6%
  640     813.7     9.323    1.1%
  660       824     12.48    1.5%
  680     837.4     10.15    1.2%
  700       847     5.939    0.7%
  720     864.9     16.11    1.8%
  740     877.3     11.46    1.3%
  760     889.8     13.18    1.4%
  780     902.9     13.03    1.4%
  800     910.5      9.12    1.0%
  820     932.4     10.84    1.1%
  840       948     15.29    1.6%
  860     965.2     13.82    1.4%
  880     961.5     10.84    1.1%
  900       981     15.19    1.5%
  920     991.6     10.45    1.0%
  940      1005     14.52    1.4%
  960      1022     14.32    1.4%
  980      1026     9.311    0.9%
 1000      1038     10.39    1.0%
 1020      1055     11.29    1.0%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    400.2
    + n    0.644
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.8
    + r    103.1
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     409.3     3.961    0.9%
    1       511     0.355    0.0%

Quality and confidence:
param     error
r         1.325

Model:
Time ~=    409.3
    + r    101.6
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    421.3
    + r    343.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       422     1.595    0.3%
    1     754.7     3.874    0.5%
    2      1130     11.46    1.0%
    3      1441      12.4    0.8%
    4      1802     14.41    0.7%
    5      2152     12.19    0.5%
    6      2491     5.034    0.2%
    7      2815     13.28    0.4%
    8      3166     13.52    0.4%
    9      3499     10.13    0.2%
   10      3853     6.412    0.1%
   11      4183     11.76    0.2%
   12      4542     20.53    0.4%
   13      4862     15.94    0.3%
   14      5202     16.88    0.3%
   15      5530     17.57    0.3%
   16      5881     21.43    0.3%
   17      6299     24.05    0.3%
   18      6638      21.9    0.3%
   19      6976     15.52    0.2%
   20      7305     18.39    0.2%

Quality and confidence:
param     error
r         0.299

Model:
Time ~=    417.3
    + r    343.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    413.3
    + r    567.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.5     0.287    0.0%
    1     991.9     11.72    1.1%
    2      1553     12.24    0.7%
    3      2121     11.98    0.5%
    4      2695      13.8    0.5%
    5      3266     12.25    0.3%
    6      3803     10.75    0.2%
    7      4391     17.31    0.3%
    8      4923     15.17    0.3%
    9      5521     19.66    0.3%
   10      6106     22.26    0.3%
   11      6671     21.94    0.3%
   12      7217     9.839    0.1%
   13      7769     18.77    0.2%
   14      8319     28.27    0.3%
   15      9004      39.8    0.4%
   16      9438     14.62    0.1%
   17     10110     23.49    0.2%
   18     10650     26.53    0.2%
   19     11230     24.23    0.2%
   20     11750     25.45    0.2%

Quality and confidence:
param     error
r         0.403

Model:
Time ~=      412
    + r    568.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1105
    + t    460.3
    + n    162.7
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3655     18.36    0.5%
    1    16      4220     17.71    0.4%
    2    16      4637     20.06    0.4%
    3    16      5122     24.13    0.4%
    4     0      2913     20.64    0.7%
    4     1      3103     16.69    0.5%
    4     2      3245     7.478    0.2%
    4     3      3402     11.35    0.3%
    4     4      3579     11.26    0.3%
    4     5      3748     20.23    0.5%
    4     6      3906     18.18    0.4%
    4     7      4050     20.04    0.4%
    4     8      4219     7.319    0.1%
    4     9      4405     17.34    0.3%
    4    10      4530     16.35    0.3%
    4    11      4676      21.5    0.4%
    4    12      4885     14.18    0.2%
    4    13      5020      15.6    0.3%
    4    14      5201     12.08    0.2%
    4    15      5398     18.04    0.3%
    4    16      5524     20.83    0.3%

Quality and confidence:
param     error
t         2.151
n         0.424

Model:
Time ~=     1095
    + t    455.6
    + n    163.5
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    172.1
    + r    72.55
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     156.5     0.208    0.1%
    1     249.6     2.593    1.0%
    2     317.2     0.431    0.1%
    3     393.7     0.651    0.1%
    4     461.7     1.355    0.2%
    5       541     15.81    2.9%
    6     607.3     2.959    0.4%
    7     676.7     4.174    0.6%
    8       743     7.451    1.0%
    9     820.4     14.88    1.8%
   10     884.7     10.42    1.1%
   11     985.2     15.55    1.5%
   12      1061       5.4    0.5%
   13      1108     8.757    0.7%
   14      1182     12.02    1.0%
   15      1253     15.05    1.2%
   16      1329     12.42    0.9%
   17      1410     8.043    0.5%
   18      1483        11    0.7%
   19      1562     10.14    0.6%
   20      1625     12.74    0.7%

Quality and confidence:
param     error
r         0.146

Model:
Time ~=    169.1
    + r    72.87
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    486.3
    + r    369.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.8     0.331    0.0%
    1     923.2     14.59    1.5%
    2      1252      5.43    0.4%
    3      1604     12.67    0.7%
    4      1955     15.99    0.8%
    5      2325     11.67    0.5%
    6      2690      9.21    0.3%
    7      3059     17.42    0.5%
    8      3418     14.43    0.4%
    9      3822     14.65    0.3%
   10      4184     26.85    0.6%
   11      4611     17.36    0.3%
   12      4931     18.18    0.3%
   13      5309     17.95    0.3%
   14      5624     20.36    0.3%
   15      6010     18.65    0.3%
   16      6348     27.32    0.4%
   17      6696     23.31    0.3%
   18      7197     20.95    0.2%
   19      7557      18.3    0.2%
   20      7901     12.64    0.1%

Quality and confidence:
param     error
r         0.479

Model:
Time ~=    484.6
    + r    369.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    792.8
    + n    72.71
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     770.5     6.091    0.7%
    1     861.9     1.707    0.1%
    2       941     2.812    0.2%
    3      1013     9.613    0.9%
    4      1118     16.24    1.4%
    5      1152     1.466    0.1%
    6      1234     10.71    0.8%
    7      1310     12.69    0.9%
    8      1378     16.06    1.1%
    9      1454     15.96    1.0%
   10      1530     11.82    0.7%
   11      1605     10.86    0.6%
   12      1676     13.69    0.8%
   13      1749     16.75    0.9%
   14      1827     13.24    0.7%
   15      1875     16.44    0.8%
   16      1954     15.08    0.7%

Quality and confidence:
param     error
n         0.264

Model:
Time ~=    793.7
    + n    73.25
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    189.4
    + r    831.3
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       412     8.524    2.0%
    1      1198     11.19    0.9%
    2      1955     16.06    0.8%
    3      2709     10.15    0.3%
    4      3482     10.79    0.3%
    5      4327     10.53    0.2%
    6      5119     26.91    0.5%
    7      5889     26.38    0.4%
    8      6724     19.31    0.2%
    9      7606     20.14    0.2%
   10      8432     24.61    0.2%
   11      9254     35.88    0.3%
   12     10090     38.03    0.3%
   13     10910     17.06    0.1%
   14     11810     47.47    0.4%
   15     12610     46.67    0.3%
   16     13490     27.45    0.2%
   17     14340     51.74    0.3%
   18     15390     51.05    0.3%
   19     16210     31.19    0.1%
   20     17110     43.43    0.2%

Quality and confidence:
param     error
r          1.47

Model:
Time ~=    180.3
    + r    834.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    293.2
    + r    490.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       422     0.293    0.0%
    1     857.1     2.167    0.2%
    2      1295     4.348    0.3%
    3      1762     13.35    0.7%
    4      2233     18.75    0.8%
    5      2735     11.54    0.4%
    6      3197     11.58    0.3%
    7      3679     12.86    0.3%
    8      4119     12.64    0.3%
    9      4675     10.24    0.2%
   10      5150     24.29    0.4%
   11      5679     14.65    0.2%
   12      6159     29.17    0.4%
   13      6651     26.51    0.3%
   14      7078     13.85    0.1%
   15      7591     31.04    0.4%
   16      8129     34.37    0.4%
   17      8661     36.84    0.4%
   18      9245     29.21    0.3%
   19      9704     29.12    0.3%
   20     10240     36.49    0.3%

Quality and confidence:
param     error
r         0.802

Model:
Time ~=    282.4
    + r    492.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    689.9
    + n    110.8
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     667.6      1.73    0.2%
    1     792.9     5.979    0.7%
    2     915.3     6.784    0.7%
    3      1025      3.38    0.3%
    4      1136     4.791    0.4%
    5      1250     10.54    0.8%
    6      1368     14.15    1.0%
    7      1467     12.07    0.8%
    8      1572     8.318    0.5%
    9      1687     11.04    0.6%
   10      1797     16.33    0.9%
   11      1922     15.05    0.7%
   12      2014     12.96    0.6%
   13      2131     14.55    0.6%
   14      2250     13.54    0.6%
   15      2340     12.99    0.5%
   16      2468     18.68    0.7%

Quality and confidence:
param     error
n         0.226

Model:
Time ~=      687
    + n    111.2
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      313
    + r     3504
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     425.9     0.149    0.0%
    1      3895      12.2    0.3%
    2      7331     24.21    0.3%
    3     10820     13.98    0.1%
    4     14350      21.7    0.1%
    5     17740     30.67    0.1%
    6     21260     36.56    0.1%
    7     24740     34.55    0.1%
    8     28350     63.58    0.2%
    9     31730     42.22    0.1%
   10     35370     40.37    0.1%
   11     38800     24.62    0.0%
   12     42360     49.87    0.1%
   13     45760     68.79    0.1%
   14     49320     78.39    0.1%
   15     52860     54.45    0.1%
   16     56520     53.02    0.0%
   17     59690     83.18    0.1%
   18     63440     58.03    0.0%
   19     67040     104.1    0.1%
   20     70800     81.74    0.1%

Quality and confidence:
param     error
r         1.498

Model:
Time ~=    273.1
    + r     3509
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    839.1
    + r    37830
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     427.9     0.831    0.1%
    1     39500     45.89    0.1%
    2     78610     48.75    0.0%
    3    117600     75.62    0.0%
    4    157300     68.14    0.0%
    5    196800       122    0.0%
    6    227100     159.2    0.0%
    7    264900     106.1    0.0%
    8    302700     96.69    0.0%
    9    341000     202.7    0.0%
   10    378700     99.88    0.0%
   11    416500     81.89    0.0%
   12    454300     206.9    0.0%
   13    492100     96.22    0.0%
   14    530500     194.5    0.0%
   15    568400     215.6    0.0%
   16    606100     178.4    0.0%
   17    644100     307.5    0.0%
   18    682300     269.4    0.0%
   19    720200     261.7    0.0%
   20    758200     309.7    0.0%

Quality and confidence:
param     error
r         21.31

Model:
Time ~=     2702
    + r    37720
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40020
    + t     3287
    + i    63.36
    + o    100.7
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    201600     104.7    0.0%
    1     0   960    139800     98.51    0.0%
    1    20   960    140900     70.18    0.0%
    1    40   960    142200     87.86    0.0%
    1    60   960    143500     81.27    0.0%
    1    80   960    144800     146.5    0.1%
    1   100   960    146000     78.19    0.0%
    1   120   960    147200     90.06    0.0%
    1   140   960    148600     101.3    0.0%
    1   160   960    149800     89.67    0.0%
    1   180   960    150900     92.24    0.0%
    1   200   960    152200     127.7    0.0%
    1   220   960    153600     108.5    0.0%
    1   240   960    154800     81.69    0.0%
    1   260   960    155900     101.1    0.0%
    1   280   960    157300     86.78    0.0%
    1   300   960    158500      47.3    0.0%
    1   320   960    159700       113    0.0%
    1   340   960    161100     57.25    0.0%
    1   360   960    162500     126.4    0.0%
    1   380   960    163800     98.39    0.0%
    1   400   960    165100     192.5    0.1%
    1   420   960    166400     184.6    0.1%
    1   440   960    167500     74.35    0.0%
    1   460   960    168800      93.4    0.0%
    1   480   960    170200     58.14    0.0%
    1   500   960    171500     102.5    0.0%
    1   520   960    172700     129.8    0.0%
    1   540   960    173900     80.86    0.0%
    1   560   960    175300     131.7    0.0%
    1   580   960    176500      82.7    0.0%
    1   600   960    177800     170.3    0.0%
    1   620   960    179000     145.6    0.0%
    1   640   960    180300     52.28    0.0%
    1   660   960    181700     158.8    0.0%
    1   680   960    182800     112.8    0.0%
    1   700   960    184100     108.6    0.0%
    1   720   960    185300     84.68    0.0%
    1   740   960    186600     102.9    0.0%
    1   760   960    187600      57.3    0.0%
    1   780   960    189100     70.36    0.0%
    1   800   960    190400     133.8    0.0%
    1   820   960    191500     74.41    0.0%
    1   840   960    192800       105    0.0%
    1   860   960    194100     89.03    0.0%
    1   880   960    195200     106.1    0.0%
    1   900   960    196800     193.5    0.0%
    1   920   960    197800     75.99    0.0%
    1   940   960    199200     65.94    0.0%
    1   960   960    200800     119.3    0.0%
    1   980   960    201800     84.11    0.0%
    1  1000   960    202900     102.1    0.0%
    1  1020   960    204200     94.69    0.0%
    1  1024     0    107600     53.82    0.0%
    1  1024    19    110300      1356    1.2%
    1  1024    38    111500      44.7    0.0%
    1  1024    57    113500     87.94    0.0%
    1  1024    76    115500     96.94    0.0%
    1  1024    95    117500     108.1    0.0%
    1  1024   114    119400     93.04    0.0%
    1  1024   133    121300     232.1    0.1%
    1  1024   152    123000     99.34    0.0%
    1  1024   171    125100     92.61    0.0%
    1  1024   190    127000      38.7    0.0%
    1  1024   209    129000     146.1    0.1%
    1  1024   228    130800     129.6<truncated>...
```

</details>",10452,2021-12-08T23:16:12Z,0
325,athei,bot merge,10452,2021-12-09T09:28:50Z,0
326,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9543,2021-09-11T10:34:52Z,0
327,gabreal,would this be ready for merging and rolling out?,9543,2021-10-19T14:31:40Z,0
328,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9543,2021-11-18T15:13:10Z,0
329,tomaka,Beep,9543,2021-11-18T16:53:28Z,0
330,bkchr,"@tomaka this doesn't compile, otherwise we should be good to merge this.",9543,2021-11-19T13:17:33Z,0
331,bkchr,@tomaka does not compile :grimacing: ,9543,2021-11-25T10:27:07Z,0
332,bkchr,(cargo fmt :see_no_evil: ),9543,2021-11-25T11:17:36Z,0
333,bkchr,bot merge,9543,2021-12-09T10:21:06Z,0
334,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/3623,9543,2021-12-09T10:21:15Z,0
335,thiolliere,"I guess iter function name is already used to iterate on all values, but introducing iter_first_keys seems good indeed.

implementation could look like:
* first get first key by calling `next_key(module_prefix++storage_prefix)`
* then get next key by calling `next_key(previous_key+0xFFFFFFFF..size_of_hasher+1)`
  (note that it might return the key previous_key+0xFFFFF.., in this case we call again with this corresponding key.)",5319,2020-03-19T19:26:56Z,0
336,shawntabrizi,If you name it `iter_first_keys()` we should maybe name `iter_prefix()` -> `iter_second_keys()`,5319,2020-03-19T20:52:49Z,0
337,thiolliere,"I unassign for now as I have other priority, I can mentor though",5319,2020-04-20T13:49:17Z,0
338,thiolliere,this can be generalized for storage-n-map also,5319,2021-08-18T09:02:49Z,0
339,Boiethios,"@thiolliere Hello, I'd like to develop this. I work at Totem Accounting, and we need to use this feature. We have this [huge multimap](https://gitlab.com/totem-tech/totem/-/blob/1c16c7b6b95dd6917e0e181d6c579cae8d7fc88b/pallets/accounting/src/lib.rs#L140), and we'd like to iterate over a set of subkeys, as in [this function signature](https://gitlab.com/totem-tech/totem/-/blob/1c16c7b6b95dd6917e0e181d6c579cae8d7fc88b/pallets/accounting/src/lib.rs#L281).

If you can provide me some mentoring, that'd be cool ;) I'm availble on the matrix chat as well if it's easier for you.",5319,2021-12-09T09:38:29Z,0
340,thiolliere,"> @thiolliere Hello, I'd like to develop this. I work at Totem Accounting, and we need to use this feature. We have this [huge multimap](https://gitlab.com/totem-tech/totem/-/blob/1c16c7b6b95dd6917e0e181d6c579cae8d7fc88b/pallets/accounting/src/lib.rs#L140), and we'd like to iterate over a set of subkeys, as in [this function signature](https://gitlab.com/totem-tech/totem/-/blob/1c16c7b6b95dd6917e0e181d6c579cae8d7fc88b/pallets/accounting/src/lib.rs#L281).
> 
> If you can provide me some mentoring, that'd be cool ;) I'm availble on the matrix chat as well if it's easier for you.

In your case you want to iterate on all the second keys associated to a first key, in the storage n map.

So to get the first second keys you will need to call `sp_io::storage::next_key` with the key being: `storage_prefix` concatenated with the first key hashed.
So `twox128(Pallet name)++twox128(storage name) ++ blake2_128_concat(account_id.encode())` (`++` mean concatenation).

So calling `next_key(twox128(Pallet name)++twox128(storage name) ++ blake2_128_concat(account_id.encode()))` will give you the first key in the map with this account id. Let's call it K1.
From K1 you can extract the ledger, let's call it L1
To get the next ledger. you want to skip all PostingIndex associated to the ledger.
So you would call `next_key(twox128(Pallet name)++twox128(storage name) ++ blake2_128_concat(account_id.encode())++blake2_128(L1.encode())++0xFFFF_FFFF_FF)`

I used a key of size 10 bytes: 0xFFFF_FFFF_FF but to be more efficient in the general case we should probably make it more than 32 bytes.

Because PostingIndex is before 0xFFFF_FFFF_FF. the next key will be for the next ledger. This way you can retrieve to get L2, the next ledger and so on, until the next key no longer start with `next_key(twox128(Pallet name)++twox128(storage name) ++ blake2_128_concat(account_id.encode())`.
In case a hashed PostingIndex starts with 0xFFFF_FFFF_FF then we need to iterate until we get the next ledger by calling next_key again and again.

So this was the example for your usecase, now what we can implement in the general case in storage n map is:
```
/// Iter the keys after the partial prefix.
/// But iter for the keys in only one level
/// Like for the map (k1, k2, k3), the call iter_prefix_values(k1)
/// will return all the k2 keys associated to k1.
fn iter_prefix_values<KP>(partial_key: KP) -> PrefixIterator<V>
where
	K: HasKeyPrefix<KP>,
{
```

And the implementation should be a generalisation of the example above.

About the file you will touch. you can implement this function in the generator trait: frame/support/src/storage/generator/nmap.rs
And then implement the method directly on the type StorageNMap at: frame/support/src/storage/types/nmap.rs by calling the generator implementation.",5319,2021-12-09T10:42:00Z,0
341,andresilva,This was addressed and can be closed now.,10435,2021-12-09T12:28:59Z,0
342,apopiak,@thiolliere The idea I mentioned Jesse had.,10099,2021-10-25T12:55:16Z,0
343,pepoviola,"@bkchr as I mention in https://github.com/paritytech/polkadot/pull/3623#discussion_r765929211, this break `zombienet`. I will update in my side to support and ping you back when is ready.
Thanks!",10457,2021-12-09T16:02:21Z,0
344,bkchr,bot merge,10456,2021-12-09T19:43:22Z,0
345,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 2 in https://github.com/paritytech/substrate/pull/10456,10456,2021-12-09T19:43:33Z,0
346,xlc,Let me know if this makes sense and then I can do the polkadot companion.,9934,2021-10-05T21:52:27Z,0
347,athei,"> Let me know if this makes sense and then I can do the polkadot companion.

To me it looks fine. But I don't feel comfortable signing off on this. I requested reviews from the FRAME experts.",9934,2021-10-06T09:36:35Z,0
348,emostov,On the surface this seems reasonable but I think it makes more sense to have this in its own minimal pallet.,9934,2021-10-13T21:24:03Z,0
349,xlc,/benchmark runtime pallet pallet_utility,9934,2021-10-30T04:26:41Z,0
350,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""dispatch-as"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_utility --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/utility/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_utility"", Extrinsic: ""batch"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17.98
    + c    5.525
              µs

Reads = 0 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     13.08      0.12    0.9%
   20     128.8     0.554    0.4%
   40     240.7     1.572    0.6%
   60       345     2.352    0.6%
   80     455.7     1.523    0.3%
  100     568.4     9.892    1.7%
  120     670.8     3.679    0.5%
  140       787     10.59    1.3%
  160     914.5     12.84    1.4%
  180      1003     9.558    0.9%
  200      1136     8.234    0.7%
  220      1245     13.13    1.0%
  240      1336     10.54    0.7%
  260      1465     15.89    1.0%
  280      1565     13.05    0.8%
  300      1673     12.14    0.7%
  320      1776     6.616    0.3%
  340      1909     7.749    0.4%
  360      2012     3.416    0.1%
  380      2120     11.47    0.5%
  400      2232     7.756    0.3%
  420      2323     10.12    0.4%
  440      2451     18.16    0.7%
  460      2549     14.27    0.5%
  480      2653     16.85    0.6%
  500      2780     23.15    0.8%
  520      2880     14.59    0.5%
  540      3033     11.88    0.3%
  560      3120     12.84    0.4%
  580      3244     7.704    0.2%
  600      3360     10.26    0.3%
  620      3473      5.49    0.1%
  640      3568     16.31    0.4%
  660      3740     14.45    0.3%
  680      3758     15.83    0.4%
  700      3858     10.55    0.2%
  720      3972     14.02    0.3%
  740      4110     12.46    0.3%
  760      4218     14.74    0.3%
  780      4316     20.17    0.4%
  800      4466     22.39    0.5%
  820      4568     17.36    0.3%
  840      4653     11.05    0.2%
  860      4758     27.05    0.5%
  880      4871     18.92    0.3%
  900      4999     12.78    0.2%
  920      5054     13.02    0.2%
  940      5222     27.29    0.5%
  960      5315     18.36    0.3%
  980      5451     18.81    0.3%
 1000      5558     11.82    0.2%

Quality and confidence:
param     error
c         0.003

Model:
Time ~=    18.29
    + c     5.53
              µs

Reads = 0 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_utility"", Extrinsic: ""as_derivative"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.387
              µs

Reads = 0
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.387
              µs

Reads = 0
Writes = 0

Pallet: ""pallet_utility"", Extrinsic: ""batch_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    21.14
    + c    5.989
              µs

Reads = 0 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     13.91      0.06    0.4%
   20     139.7     0.435    0.3%
   40     260.9     1.563    0.5%
   60     376.9     3.471    0.9%
   80     498.2     2.046    0.4%
  100     619.9     4.076    0.6%
  120     737.9     3.743    0.5%
  140     859.1     4.176    0.4%
  160     975.9      11.7    1.1%
  180      1098     15.95    1.4%
  200      1237     12.05    0.9%
  220      1358     11.24    0.8%
  240      1469     13.99    0.9%
  260      1607     8.548    0.5%
  280      1694     14.04    0.8%
  300      1823     5.823    0.3%
  320      1939      8.34    0.4%
  340      2069     11.12    0.5%
  360      2179     11.63    0.5%
  380      2295     11.85    0.5%
  400      2415     16.02    0.6%
  420      2549      8.38    0.3%
  440      2658     15.01    0.5%
  460      2770     11.18    0.4%
  480      2905     7.623    0.2%
  500      3003      8.42    0.2%
  520      3145     9.052    0.2%
  540      3259     10.96    0.3%
  560      3371     13.72    0.4%
  580      3502     8.609    0.2%
  600      3608     13.11    0.3%
  620      3747     13.63    0.3%
  640      3837     13.05    0.3%
  660      3943      16.6    0.4%
  680      4097     18.12    0.4%
  700      4202     9.469    0.2%
  720      4332     10.87    0.2%
  740      4436     16.24    0.3%
  760      4560     19.56    0.4%
  780      4700     15.78    0.3%
  800      4795     10.82    0.2%
  820      4919      19.8    0.4%
  840      5020     15.65    0.3%
  860      5151     17.74    0.3%
  880      5260     11.56    0.2%
  900      5377     19.11    0.3%
  920      5510     21.39    0.3%
  940      5709     14.45    0.2%
  960      5848      21.5    0.3%
  980      5982     17.01    0.2%
 1000      6060     22.65    0.3%

Quality and confidence:
param     error
c         0.004

Model:
Time ~=    19.22
    + c    5.998
              µs

Reads = 0 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_utility"", Extrinsic: ""dispatch_as"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    14.34
              µs

Reads = 0
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    14.34
              µs

Reads = 0
Writes = 0


```

</details>",9934,2021-10-30T04:26:43Z,0
351,emostov,Looks like the polkadot companion needs a little tweak with libc versions https://gitlab.parity.io/parity/substrate/-/jobs/1195593,9934,2021-10-31T09:50:02Z,0
352,thiolliere,needs a cumulus companion,9934,2021-10-31T17:14:47Z,0
353,shawntabrizi,/tip small,9934,2021-10-31T20:17:10Z,0
354,substrate-tip-bot[bot],"Please fix the following problems before calling the tip bot again:
 * Contributor did not properly post their Polkadot or Kusama address. Make sure the pull request has: ""{network} address: {address}"".",9934,2021-10-31T20:17:11Z,0
355,shawntabrizi,bot merge,9934,2021-10-31T20:25:39Z,0
356,paritytech-processbot[bot]," Error: Response error (status 404 Not Found): <pre><code>{&quot;documentation_url&quot;:&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;rest&#x2F;reference&#x2F;pulls#get-a-pull-request&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code></pre>",9934,2021-10-31T20:25:45Z,0
357,shawntabrizi,bot merge,9934,2021-10-31T20:26:03Z,0
358,paritytech-processbot[bot]," Error: Response error (status 404 Not Found): <pre><code>{&quot;documentation_url&quot;:&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;rest&#x2F;reference&#x2F;pulls#get-a-pull-request&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code></pre>",9934,2021-10-31T20:26:09Z,0
359,shawntabrizi,/tip small,9934,2021-11-01T00:07:38Z,0
360,substrate-tip-bot[bot],"A small tip was successfully submitted for xlc (14DsLzVyTUTDMm2eP3czwPbH53KgqnQRp3CJJZS9GR7yxGDP on polkadot). 

 https://polkadot.js.org/apps/#/treasury/tips",9934,2021-11-01T00:07:50Z,0
361,thiolliere,bot merge,9934,2021-11-01T10:06:21Z,0
362,paritytech-processbot[bot]," Error: Response error (status 404 Not Found): <pre><code>{&quot;documentation_url&quot;:&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;rest&#x2F;reference&#x2F;pulls#get-a-pull-request&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code></pre>",9934,2021-11-01T10:06:28Z,0
363,azerella,bot merge,9934,2021-11-01T23:07:27Z,0
364,paritytech-processbot[bot]," Error: Response error (status 404 Not Found): <pre><code>{&quot;documentation_url&quot;:&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;rest&#x2F;reference&#x2F;pulls#get-a-pull-request&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code></pre>",9934,2021-11-01T23:07:33Z,0
365,azerella,bot merge,9934,2021-11-02T01:31:36Z,0
366,paritytech-processbot[bot]," Error: Response error (status 404 Not Found): <pre><code>{&quot;documentation_url&quot;:&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;rest&#x2F;reference&#x2F;pulls#get-a-pull-request&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code></pre>",9934,2021-11-02T01:31:42Z,0
367,azerella,bot merge,9934,2021-11-02T03:48:01Z,0
368,paritytech-processbot[bot]," Error: Response error (status 404 Not Found): <pre><code>{&quot;documentation_url&quot;:&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;rest&#x2F;reference&#x2F;pulls#get-a-pull-request&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code></pre>",9934,2021-11-02T03:48:08Z,0
369,xlc,Ummm... Is there some bots end up in an infinite loop or something?,9934,2021-11-02T03:59:09Z,0
370,shawntabrizi,"@xlc we are looking into it. We can merge manually if we need to, but better to let the bot engineers figure out what is going on here.",9934,2021-11-02T17:19:30Z,0
371,xlc,No problems. This isn’t a blocking issue for us so take your time. ,9934,2021-11-02T19:28:04Z,0
372,azerella,bot merge,9934,2021-11-03T00:00:07Z,0
373,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4075 is not mergeable,9934,2021-11-03T00:00:14Z,0
374,TriplEight,bot merge,9934,2021-11-04T07:29:44Z,0
375,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4075 is not mergeable,9934,2021-11-04T07:29:51Z,0
376,xlc,I already implemented it https://github.com/paritytech/substrate/pull/9934,10459,2021-12-09T20:17:50Z,0
377,librelois,"Awesome, thanks @xlc ",10459,2021-12-09T20:22:38Z,0
378,gavofyork,Just needs a few tests and I'd be happy to merge.,10153,2021-11-23T14:16:00Z,0
379,bkchr,Cc @shawntabrizi ,10426,2021-12-06T11:36:17Z,0
380,xlc,I don't think we need to do anything. You can just control the the anon account on relay chain to send Transact XCM to Parachain to access assets there.,10426,2021-12-06T22:29:10Z,0
381,olanod,"@xlc could you elaborate more on the Transact approach and how you imagine it working? Doesn't seem to address one of the mentioned issues of re-using the same public key across chains, something that Acala encourages for example for receiving rewards to the account that participated in the relay-chain.",10426,2021-12-08T10:53:22Z,0
382,xlc,"It does. Say `A` is anon proxy, controlled by `B` on Polkadot and `A'` is `A` on Acala. It is possible to access assets under `A'` by having `B` sending a transaction on behalf of `A` on Polkadot. The transaction will dispatch a XCM message from Polkadot to Acala, and on Acala it will be dispatched with origin of `A'` and able to access assets under `A'`",10426,2021-12-09T02:01:02Z,0
383,shawntabrizi,"Yeah, I also think the story described above isn't fully worked out here.

An anonymous proxy itself can have ownership changes and even multiple users to control that proxy. It would be impossible to transfer all of that logic and ownership data across all chain each time something changes.

As @xlc mentions, the ultimate proof that you have ownership of some address on polkadot is to dispatch a message from that account.",10426,2021-12-09T03:30:42Z,0
384,olanod,"Thanks @xlc the explanation helped, I was assuming `A'` would need to be recreated first with the same initial conditions as `A`, With an example of how the XCM would look like with all the fees part and everything it will be perfect for the future stackexchange site 😉 ",10426,2021-12-10T08:00:55Z,0
385,tomusdrw,CC @acatangiu perhaps you'd like to take over the ownership?,10460,2021-12-10T08:34:04Z,0
386,acatangiu,"yes, will do :+1: ",10460,2021-12-10T09:02:47Z,0
387,dependabot[bot],Superseded by #10462.,10315,2021-12-10T09:28:11Z,0
388,dvdplm,"We're running this + `jsonrpsee` on `kusama-rpc-3` now, grafana [here](https://grafana.parity-mgmt.parity.io/d/V0xpUCIWy/node-exporter-server-metrics-2?orgId=1&var-node=kusama-rpc-3-int.parity-kusama.parity.io%3A9100&var-node=kusama-rpc-4-int.parity-kusama.parity.io%3A9100&var-Datasource=prometheus.parity-mgmt&from=now-3h&to=now) comparing it to `kusama-rpc-4` running `master` (the CPU spike is `rustc` recompiling the binary).

Looks good so far! :)",10454,2021-12-09T11:04:13Z,0
389,koute,bot merge,10454,2021-12-10T11:30:54Z,0
390,athei,/benchmark runtime pallet pallet_contracts,10448,2021-12-08T19:27:03Z,0
391,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-instantiate-weight"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.002
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.002
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.206
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     69.42     0.425    0.6%
   20     60.46     0.569    0.9%
   40     96.87     0.969    1.0%
   60     132.2     0.831    0.6%
   80     167.8     1.213    0.7%
  100     215.4     0.905    0.4%
  120     245.6      2.98    1.2%
  140       284     2.713    0.9%
  160     326.4     1.448    0.4%
  180     368.5     1.955    0.5%
  200     413.2     3.719    0.8%
  220     455.8     3.876    0.8%
  240     508.8     9.839    1.9%
  260     541.3     7.587    1.4%
  280     594.1     10.08    1.6%
  300     626.9     7.438    1.1%
  320     677.4     11.21    1.6%
  340     713.4     6.756    0.9%
  360     764.5     7.987    1.0%
  380     824.1         8    0.9%
  400     848.5     9.192    1.0%
  420     896.2     12.94    1.4%
  440     956.7     12.46    1.3%
  460     993.4      7.92    0.7%
  480      1040     10.01    0.9%
  500      1077     9.909    0.9%
  520      1126     3.193    0.2%
  540      1171     5.153    0.4%
  560      1216     5.168    0.4%
  580      1248     15.96    1.2%
  600      1300     12.06    0.9%
  620      1346     16.01    1.1%
  640      1386     10.56    0.7%
  660      1444     13.01    0.9%
  680      1482     18.35    1.2%
  700      1540     16.47    1.0%
  720      1577     15.44    0.9%
  740      1608     13.74    0.8%
  760      1667     8.259    0.4%
  780      1727     14.58    0.8%
  800      1751      18.8    1.0%
  820      1794     15.44    0.8%
  840      1854     19.94    1.0%
  860      1875     9.395    0.5%
  880      1947     9.684    0.4%
  900      1973     18.05    0.9%
  920      2002     10.38    0.5%
  940      2083     12.26    0.5%
  960      2127     13.61    0.6%
  980      2160     5.337    0.2%
 1000      2214     14.68    0.6%
 1020      2241     23.48    1.0%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k     2.21
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    96.98
    + q     0.31
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     3.013     0.042    1.3%
   20     86.29     0.797    0.9%
   40     98.77     0.825    0.8%
   60       109     0.847    0.7%
   80     118.3     1.085    0.9%
  100       128     0.843    0.6%
  120     137.6     1.353    0.9%
  140       145     1.188    0.8%
  160       156     1.912    1.2%
  180     165.2     1.423    0.8%
  200       174     0.739    0.4%
  220     182.4     1.138    0.6%
  240     166.9     4.445    2.6%
  260     199.5     1.396    0.6%
  280     178.1     2.032    1.1%
  300     209.2     2.552    1.2%
  320       217     0.876    0.4%
  340     198.8     1.474    0.7%
  360     233.8     1.292    0.5%
  380     212.2     1.281    0.6%
  400     216.5     1.045    0.4%
  420       226     2.103    0.9%
  440     234.9      2.58    1.0%
  460     239.8     1.951    0.8%
  480     242.4     1.298    0.5%
  500     251.7     3.738    1.4%
  520     256.7     1.341    0.5%
  540     264.2     1.027    0.3%
  560     267.4     1.285    0.4%
  580     279.1     2.468    0.8%
  600     287.3     3.834    1.3%
  620       289     0.951    0.3%
  640     296.3     1.472    0.4%
  660     301.4     1.936    0.6%
  680     308.3      2.41    0.7%
  700     314.8     1.174    0.3%
  720     322.1     1.577    0.4%
  740     327.8     1.097    0.3%
  760     337.8     1.213    0.3%
  780     342.6     0.696    0.2%
  800     353.3     4.488    1.2%
  820     353.1     2.254    0.6%
  840     359.9     2.639    0.7%
  860     365.8      3.21    0.8%
  880     368.5     1.297    0.3%
  900     374.9     2.305    0.6%
  920     380.5     1.391    0.3%
  940     385.1     1.131    0.2%
  960     398.5     8.859    2.2%
  980     395.6     1.046    0.2%
 1000     399.6     0.928    0.2%
 1020     405.5     1.284    0.3%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    93.84
    + q    0.316
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    48.82
    + c    91.34
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     54.72     0.439    0.8%
    2     239.8     2.055    0.8%
    4     417.5     0.286    0.0%
    6     585.7     5.367    0.9%
    8     783.5     14.85    1.8%
   10     947.7     6.407    0.6%
   12      1114     12.14    1.0%
   14      1339     14.77    1.1%
   16      1508     13.52    0.8%
   18      1692     15.56    0.9%
   20      1851     13.69    0.7%
   22      2025     11.25    0.5%
   24      2174     15.14    0.6%
   26      2461     12.07    0.4%
   28      2660     23.66    0.8%
   30      2802     10.15    0.3%
   32      2965     11.83    0.3%
   34      3181     19.44    0.6%
   36      3340     15.87    0.4%
   38      3500     12.55    0.3%
   40      3678      13.8    0.3%
   42      3838     12.99    0.3%
   44      3999     11.66    0.2%
   46      4158     9.856    0.2%
   48      4326     15.05    0.3%
   50      4712     23.47    0.4%
   52      4865     18.73    0.3%
   54      5045     19.63    0.3%
   56      5194     15.74    0.3%
   58      5356      12.2    0.2%
   60      5526      14.3    0.2%
   62      5685     13.13    0.2%
   64      5838     13.41    0.2%
   66      6108     24.18    0.3%
   68      6269     18.13    0.2%
   70      6454     18.68    0.2%
   72      6607     15.78    0.2%
   74      6797     26.21    0.3%
   76      6921     14.23    0.2%
   78      7130     43.44    0.6%
   80      7269      15.3    0.2%
   82      7444     17.49    0.2%
   84      7589     23.78    0.3%
   86      7764     20.54    0.2%
   88      7938     23.95    0.3%
   90      8107     20.72    0.2%
   92      8266     26.98    0.3%
   94      8438      21.6    0.2%
   96      8601     15.83    0.1%
   98      9221      32.6    0.3%
  100      9359      32.6    0.3%
  102      9526     19.37    0.2%
  104      9686     13.68    0.1%
  106      9873     26.37    0.2%
  108     10020     16.75    0.1%
  110     10190     27.44    0.2%
  112     10350     25.08    0.2%
  114     10530     39.28    0.3%
  116     10680     24.84    0.2%
  118     10850     26.98    0.2%
  120     10990     12.88    0.1%
  122     11210     19.43    0.1%
  124     11370     23.16    0.2%
  126     11510     32.13    0.2%
  128     11660      42.2    0.3%

Quality and confidence:
param     error
c         0.092

Model:
Time ~=    31.25
    + c     91.5
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      601
    + c    209.9
    + s    2.017
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2646     16.12    0.6%
    1  1024      2871     6.898    0.2%
    2  1024      3064     15.87    0.5%
    3  1024      3281     10.42    0.3%
    4  1024      3492     20.43    0.5%
    5  1024      3694     14.32    0.3%
    6  1024      3873     13.42    0.3%
    7  1024      4109     8.938    0.2%
    8  1024      4322     12.74    0.2%
    9  1024      4572     14.93    0.3%
   10  1024      4765     27.63    0.5%
   11  1024      4946      33.4    0.6%
   12  1024      5117     8.392    0.1%
   13  1024      5396     16.27    0.3%
   14  1024      5582     21.18    0.3%
   15  1024      5776     15.91    0.2%
   16  1024      5960     32.17    0.5%
   17  1024      6324     15.66    0.2%
   18  1024      6484     16.18    0.2%
   19  1024      6707     26.68    0.3%
   20  1024      7002     14.74    0.2%
   21  1024      7043     15.87    0.2%
   22  1024      7236     29.79    0.4%
   23  1024      7413     12.71    0.1%
   24  1024      7680     30.78    0.4%
   25  1024      7971     21.89    0.2%
   26  1024      8174     32.89    0.4%
   27  1024      8338     13.54    0.1%
   28  1024      8542        28    0.3%
   29  1024      8862      46.1    0.5%
   30  1024      8927     27.49    0.3%
   31  1024      9118     22.13    0.2%
   32  1024      9288     12.67    0.1%
   33  1024      9805      39.3    0.4%
   34  1024      9999     29.64    0.2%
   35  1024     10130     11.24    0.1%
   36  1024     10380        34    0.3%
   37  1024     10520     26.37    0.2%
   38  1024     10700     19.11    0.1%
   39  1024     10870     27.75    0.2%
   40  1024     11070     28.03    0.2%
   41  1024     11280     34.97    0.3%
   42  1024     11460     39.64    0.3%
   43  1024     11650      28.3    0.2%
   44  1024     11870     39.06    0.3%
   45  1024     12020     52.89    0.4%
   46  1024     12220     23.76    0.1%
   47  1024     12430     31.31    0.2%
   48  1024     12590     30.77    0.2%
   49  1024     13070     27.08    0.2%
   50  1024     13340     28.41    0.2%
   51  1024     13510     41.22    0.3%
   52  1024     13690     36.23    0.2%
   53  1024     13900     32.79    0.2%
   54  1024     14070     22.53    0.1%
   55  1024     14270     46.77    0.3%
   56  1024     14440     28.38    0.1%
   57  1024     14650     38.95    0.2%
   58  1024     14780     46.99    0.3%
   59  1024     15050     59.19    0.3%
   60  1024     15180     32.29    0.2%
   61  1024     15390     22.44    0.1%
   62  1024     15580      39.9    0.2%
   63  1024     15770     32.54    0.2%
   64     0     13840     10.76    0.0%
   64    20     13950     44.03    0.3%
   64    40     13880     26.65    0.1%
   64    60     14150     25.82    0.1%
   64    80     13990     24.51    0.1%
   64   100     14040     22.12    0.1%
   64   120     14070     42.63    0.3%
   64   140     14150     29.92    0.2%
   64   160     14150      40.3    0.2%
   64   180     14250     44.69    0.3%
   64   200     14270     46.08    0.3%
   64   220     14300     39.93    0.2%
   64   240     14340     55.38    0.3%
   64   260     14370     24.26    0.1%
   64   280     14400     27.63    0.1%
   64   300     14430     50.91    0.3%
   64   320     14490     49.11    0.3%
   64   340     14540     46.86    0.3%
   64   360     14540     32.53    0.2%
   64   380     14680     46.89    0.3%
   64   400     14740     76.81    0.5%
   64   420     14750     31.27    0.2%
   64   440     14710     38.35    0.2%
   64   460     14770      40.7    0.2%
   64   480     14830        58    0.3%
   64   500     14830      52.2    0.3%
   64   520     14940     35.01    0.2%
   64   540     14920        23    0.1%
   64   560     15160     38.94    0.2%
   64   580     15020     29.59    0.1%
   64   600     15060      27.8    0.1%
   64   620     15120     52.78    0.3%
   64   640     15190     50.47    0.3%
   64   660     15280     79.62    0.5%
   64   680     15210     22.84    0.1%
   64   700     15280     79.98    0.5%
   64   720     15280     56.32    0.3%
   64   740     15310     34.74    0.2%
   64   760     15380     43.21    0.2%
   64   780     15410     28.77    0.1%
   64   800     15520     27.38    0.1%
   64   820     15510     28.39    0.1%
   64   840     15520      39.6    0.2%
   64   860     15560     25.25    0.1%
   64   880     15650     84.21    0.5%
   64   900     15710     67.46    0.4%
   64   920     15700     34.37    0.2%
   64   940     15760      37.1    0.2%
   64   960     15780     38.84    0.2%
   64   980     15820      31.6    0.1%
   64  1000     15880     56.14    0.3%
   64  1020     15870     40.79    0.2%
   64  1024     15940     16.32    0.1%

Quality and confidence:
param     error
c         0.154
s          0.01

Model:
Time ~=    505.2
    + c      208
    + s    2.154
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    225.9
    + s     2.01
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     239.2     1.009    0.4%
   20     265.5      0.62    0.2%
   40     306.5     0.908    0.2%
   60     346.7     0.994    0.2%
   80       387     0.763    0.1%
  100     426.7     0.834    0.1%
  120     465.9     0.675    0.1%
  140     506.3     0.566    0.1%
  160     545.6     0.837    0.1%
  180     584.6     1.089    0.1%
  200     628.8     7.376    1.1%
  220     665.1     1.203    0.1%
  240     710.8     12.32    1.7%
  260     749.1     10.35    1.3%
  280     793.6     14.31    1.8%
  300     827.2     6.391    0.7%
  320     881.6     16.08    1.8%
  340     912.5     14.44    1.5%
  360     951.9     14.06    1.4%
  380     982.6     1.799    0.1%
  400      1039     16.04    1.5%
  420      1072     15.12    1.4%
  440      1111     14.32    1.2%
  460      1156     16.71    1.4%
  480      1194     17.11    1.4%
  500      1233     18.78    1.5%
  520      1291     15.66    1.2%
  540      1323     14.09    1.0%
  560      1364     13.17    0.9%
  580      1407     14.15    1.0%
  600      1457      9.78    0.6%
  620      1484        13    0.8%
  640      1513      12.7    0.8%
  660      1559     14.94    0.9%
  680      1614     11.59    0.7%
  700      1640     13.08    0.7%
  720      1693     11.94    0.7%
  740      1723     13.55    0.7%
  760      1756     11.39    0.6%
  780      1805     13.22    0.7%
  800      1850     14.85    0.8%
  820      1885     14.41    0.7%
  840      1923      14.5    0.7%
  860      1983      8.99    0.4%
  880      2020     3.829    0.1%
  900      2027     9.167    0.4%
  920      2093     15.04    0.7%
  940      2123     16.91    0.7%
  960      2181     6.059    0.2%
  980      2210     15.74    0.7%
 1000      2254     11.16    0.4%
 1020      2282     16.51    0.7%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    224.7
    + s    2.028
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    418.5
    + c    89.85
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     442.3     0.215    0.0%
    2     633.9     6.967    1.0%
    4     778.9     0.847    0.1%
    6     943.8     9.047    0.9%
    8      1141     10.37    0.9%
   10      1310     14.38    1.0%
   12      1451     5.469    0.3%
   14      1693     10.97    0.6%
   16      1859     11.44    0.6%
   18      2032     11.63    0.5%
   20      2182     8.861    0.4%
   22      2339     18.32    0.7%
   24      2504     11.57    0.4%
   26      2840      14.7    0.5%
   28      2982     10.94    0.3%
   30      3150     16.67    0.5%
   32      3309     18.83    0.5%
   34      3476     15.97    0.4%
   36      3658     19.93    0.5%
   38      3790     16.91    0.4%
   40      3958     23.86    0.6%
   42      4117     12.79    0.3%
   44      4267     22.16    0.5%
   46      4428     24.58    0.5%
   48      4591     15.82    0.3%
   50      5036     23.11    0.4%
   52      5183     32.89    0.6%
   54      5348     20.38    0.3%
   56      5529     36.33    0.6%
   58      5671     19.09    0.3%
   60      5833     23.99    0.4%
   62      6000     3.946    0.0%
   64      6157        42    0.6%
   66      6374      26.1    0.4%
   68      6505     26.18    0.4%
   70      6673     32.06    0.4%
   72      6812      38.5    0.5%
   74      6979     41.73    0.5%
   76      7163     31.08    0.4%
   78      7274     28.82    0.3%
   80      7485     17.45    0.2%
   82      7591     38.57    0.5%
   84      7742     24.49    0.3%
   86      7918     30.21    0.3%
   88      8029     39.45    0.4%
   90      8241     29.98    0.3%
   92      8381     34.95    0.4%
   94      8544     33.35    0.3%
   96      8692     39.23    0.4%
   98      9522     37.12    0.3%
  100      9675     40.82    0.4%
  102      9847     34.68    0.3%
  104      9993     44.15    0.4%
  106     10150     43.09    0.4%
  108     10310     41.64    0.4%
  110     10440     46.64    0.4%
  112     10600     39.05    0.3%
  114     10750     31.02    0.2%
  116     10940     49.82    0.4%
  118     11080     35.89    0.3%
  120     11240     57.31    0.5%
  122     11450     20.75    0.1%
  124     11590      27.6    0.2%
  126     11740     38.97    0.3%
  128     11860     47.64    0.4%

Quality and confidence:
param     error
c         0.146

Model:
Time ~=    388.1
    + c    90.15
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    91.03
    + c    93.21
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     91.55      0.52    0.5%
    1       191      1.68    0.8%
    2       279     0.461    0.1%
    3       364     0.298    0.0%
    4     462.7     4.669    1.0%
    5     552.6     1.873    0.3%
    6     635.5     0.922    0.1%
    7     753.1     13.38    1.7%
    8     837.2     13.57    1.6%
    9     923.6     7.437    0.8%
   10      1013     13.78    1.3%
   11      1094     13.99    1.2%
   12      1183     16.35    1.3%
   13      1339     4.673    0.3%
   14      1403      14.4    1.0%
   15      1499     14.73    0.9%
   16      1577     15.65    0.9%
   17      1672     15.28    0.9%
   18      1763     7.596    0.4%
   19      1845     10.74    0.5%
   20      1924     17.84    0.9%
   21      2009     13.81    0.6%
   22      2091     16.25    0.7%
   23      2172     13.07    0.6%
   24      2259     16.96    0.7%
   25      2500     20.82    0.8%
   26      2540     6.317    0.2%
   27      2626     7.176    0.2%
   28      2711     20.92    0.7%
   29      2789     12.16    0.4%
   30      2868     17.01    0.5%
   31      2957     20.57    0.6%
   32      3053     13.53    0.4%
   33      3203     15.91    0.4%
   34      3283     13.33    0.4%
   35      3364     22.03    0.6%
   36      3436     13.49    0.3%
   37      3532     9.976    0.2%
   38      3840     4.074    0.1%
   39      3696     17.27    0.4%
   40      3797     17.61    0.4%
   41      3875      15.5    0.4%
   42      3959     13.88    0.3%
   43      4036     11.03    0.2%
   44      4113     9.918    0.2%
   45      4211     11.87    0.2%
   46      4301     19.65    0.4%
   47      4373      16.6    0.3%
   48      4453     13.79    0.3%
   49      4774     25.53    0.5%
   50      4851     18.84    0.3%
   51      4914     12.14    0.2%
   52      5005     10.81    0.2%
   53      5098     16.61    0.3%
   54      5173     15.42    0.2%
   55      5264     18.67    0.3%
   56      5352     22.15    0.4%
   57      5450     33.83    0.6%
   58      5518     21.02    0.3%
   59      5579     18.27    0.3%
   60      5681     21.03    0.3%
   61      5767     19.37    0.3%
   62      5844     17.55    0.3%
   63      5941     19.81    0.3%
   64      6031     27.18    0.4%

Quality and confidence:
param     error
c          0.11

Model:
Time ~=    82.03
    + c    93.45
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     41.1
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     41.1
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    428.8
    + r    114.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.7     0.185    0.0%
    1     526.9     1.554    0.2%
    2       664     8.987    1.3%
    3     774.2     5.325    0.6%
    4     890.3     8.536    0.9%
    5      1015     12.06    1.1%
    6      1120     13.01    1.1%
    7      1231     9.961    0.8%
    8      1351     15.29    1.1%
    9      1467     12.26    0.8%
   10      1574     12.43    0.7%
   11      1692      14.6    0.8%
   12      1799     16.84    0.9%
   13      1917     17.44    0.9%
   14      2055     18.86    0.9%
   15      2157     13.05    0.6%
   16      2267     4.658    0.2%
   17      2378     7.212    0.3%
   18      2490      19.7    0.7%
   19      2591     19.34    0.7%
   20      2719     19.97    0.7%

Quality and confidence:
param     error
r         0.185

Model:
Time ~=    427.6
    + r    114.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    430.4
    + r    113.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.8     0.328    0.0%
    1     528.7     4.687    0.8%
    2     662.7     7.659    1.1%
    3     774.5     10.65    1.3%
    4     891.8     11.97    1.3%
    5     995.2     7.433    0.7%
    6      1106     14.34    1.2%
    7      1236     13.04    1.0%
    8      1355     14.72    1.0%
    9      1454     15.75    1.0%
   10      1566     15.44    0.9%
   11      1694     9.544    0.5%
   12      1799     9.699    0.5%
   13      1903     15.08    0.7%
   14      2032     14.99    0.7%
   15      2143     12.79    0.5%
   16      2261     23.14    1.0%
   17      2354     18.56    0.7%
   18      2499     17.03    0.6%
   19      2585     14.57    0.5%
   20      2695     9.007    0.3%

Quality and confidence:
param     error
r         0.191

Model:
Time ~=    427.3
    + r    114.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    429.5
    + r    113.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.9     0.234    0.0%
    1     526.9     1.865    0.3%
    2       660     3.865    0.5%
    3     774.2      9.55    1.2%
    4     886.5     10.45    1.1%
    5      1006     14.35    1.4%
    6      1109     14.56    1.3%
    7      1222     9.097    0.7%
    8      1340     16.41    1.2%
    9      1464     17.27    1.1%
   10      1574     9.514    0.6%
   11      1677     11.55    0.6%
   12      1792      14.5    0.8%
   13      1906     6.898    0.3%
   14      2013     17.08    0.8%
   15      2142     9.103    0.4%
   16      2261     12.91    0.5%
   17      2373     22.34    0.9%
   18      2488     31.39    1.2%
   19      2575     4.415    0.1%
   20      2694     19.29    0.7%

Quality and confidence:
param     error
r         0.192

Model:
Time ~=    425.9
    + r      114
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    437.1
    + r    318.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.8     0.319    0.0%
    1     738.6      1.69    0.2%
    2      1074     10.31    0.9%
    3      1401     12.83    0.9%
    4      1731     9.557    0.5%
    5      2041     10.57    0.5%
    6      2357     15.11    0.6%
    7      2680     10.41    0.3%
    8      2997     15.86    0.5%
    9      3304     12.82    0.3%
   10      3612     12.37    0.3%
   11      3947     12.57    0.3%
   12      4255     32.48    0.7%
   13      4568      24.4    0.5%
   14      4904     40.26    0.8%
   15      5202     20.68    0.3%
   16      5549     31.75    0.5%
   17      5847     18.17    0.3%
   18      6152     37.15    0.6%
   19      6477     24.61    0.3%
   20      6859     55.12    0.8%

Quality and confidence:
param     error
r         0.329

Model:
Time ~=    434.4
    + r    318.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    428.9
    + r    112.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     422.1     0.484    0.1%
    1     540.7     1.467    0.2%
    2       659     6.811    1.0%
    3     769.9     9.037    1.1%
    4       871     7.124    0.8%
    5       978      9.51    0.9%
    6      1094     11.75    1.0%
    7      1230     10.96    0.8%
    8      1338     14.11    1.0%
    9      1444     11.63    0.8%
   10      1554      15.2    0.9%
   11      1681     21.56    1.2%
   12      1775     15.97    0.8%
   13      1900     8.711    0.4%
   14      2023     12.15    0.6%
   15      2130     8.581    0.4%
   16      2239     21.02    0.9%
   17      2336     23.33    0.9%
   18      2453     23.05    0.9%
   19      2570     22.79    0.8%
   20      2706     33.64    1.2%

Quality and confidence:
param     error
r         0.208

Model:
Time ~=    425.1
    + r    113.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    432.7
    + r    111.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     422.6     0.321    0.0%
    1     541.9     2.765    0.5%
    2     657.1     4.517    0.6%
    3     769.3     2.145    0.2%
    4     878.6     12.21    1.3%
    5      1006     11.59    1.1%
    6      1082      10.8    0.9%
    7      1224      13.5    1.1%
    8      1338     13.65    1.0%
    9      1442     10.73    0.7%
   10      1543     11.33    0.7%
   11      1657     16.89    1.0%
   12      1776     9.005    0.5%
   13      1873     15.08    0.8%
   14      2006     22.92    1.1%
   15      2102     12.15    0.5%
   16      2209     16.41    0.7%
   17      2340     13.25    0.5%
   18      2451     21.93    0.8%
   19      2574     21.37    0.8%
   20      2671     19.22    0.7%

Quality and confidence:
param     error
r         0.191

Model:
Time ~=    429.9
    + r    112.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    434.4
    + r    110.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     422.1       0.4    0.0%
    1     541.8     7.357    1.3%
    2     660.8     8.208    1.2%
    3       773      9.36    1.2%
    4     866.7     10.91    1.2%
    5     971.6     8.401    0.8%
    6      1092     13.31    1.2%
    7      1226     5.463    0.4%
    8      1327     12.86    0.9%
    9      1433      15.3    1.0%
   10      1537      14.5    0.9%
   11      1657     18.08    1.0%
   12      1751     16.02    0.9%
   13      1876     13.41    0.7%
   14      1992     16.37    0.8%
   15      2090     13.53    0.6%
   16      2223      12.4    0.5%
   17      2312     18.72    0.8%
   18      2422     12.91    0.5%
   19      2544     19.53    0.7%
   20      2648        21    0.7%

Quality and confidence:
param     error
r         0.184

Model:
Time ~=      431
    + r      111
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    430.6
    + r    112.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     422.7     1.365    0.3%
    1     538.9     1.311    0.2%
    2     648.4     8.521    1.3%
    3     766.7      11.1    1.4%
    4     874.4      7.72    0.8%
    5     987.5      8.58    0.8%
    6      1114     9.977    0.8%
    7      1241     1.638    0.1%
    8      1348     7.762    0.5%
    9      1447     14.16    0.9%
   10      1569     8.726    0.5%
   11      1681      4.96    0.2%
   12      1784     7.026    0.3%
   13      1886     13.66    0.7%
   14      2017      14.4    0.7%
   15      2129     16.11    0.7%
   16      2245      15.4    0.6%
   17      2361      21.3    0.9%
   18      2466     16.71    0.6%
   19      2555     24.28    0.9%
   20      2686     15.83    0.5%

Quality and confidence:
param     error
r          0.18

Model:
Time ~=    429.8
    + r      113
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    422.3
    + r    262.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     422.2     0.228    0.0%
    1     686.9     11.64    1.6%
    2     949.3     11.19    1.1%
    3      1215     10.05    0.8%
    4      1469     12.12    0.8%
    5      1732     15.14    0.8%
    6      2009      12.5    0.6%
    7      2266     7.673    0.3%
    8      2528     5.638    0.2%
    9      2783     10.29    0.3%
   10      3036     14.59    0.4%
   11      3328     18.99    0.5%
   12      3590     15.01    0.4%
   13      3846      16.2    0.4%
   14      4083     17.16    0.4%
   15      4381     22.59    0.5%
   16      4623     13.46    0.2%
   17      4895     22.56    0.4%
   18      5175      11.1    0.2%
   19      5400     23.81    0.4%
   20      5690     23.86    0.4%

Quality and confidence:
param     error
r         0.211

Model:
Time ~=    422.6
    + r      263
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    154.7
    + r    52.92
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     151.5     0.257    0.1%
    1     193.2     0.676    0.3%
    2     260.1     1.088    0.4%
    3     316.6      1.17    0.3%
    4     367.6     1.405    0.3%
    5     416.1     3.496    0.8%
    6     472.9     4.417    0.9%
    7     526.8     4.601    0.8%
    8       589     13.79    2.3%
    9     629.9     2.753    0.4%
   10     683.3     3.057    0.4%
   11     739.7     10.21    1.3%
   12     794.6      8.12    1.0%
   13     844.9     15.51    1.8%
   14     902.3     13.12    1.4%
   15     948.3     2.981    0.3%
   16      1002     1.638    0.1%
   17      1053     3.814    0.3%
   18      1110     12.05    1.0%
   19      1154     3.048    0.2%
   20      1207     9.428    0.7%

Quality and confidence:
param     error
r         0.101

Model:
Time ~=    153.8
    + r    53.02
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    431.1
    + r    100.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.8     0.363    0.0%
    1     518.9     4.643    0.8%
    2     634.4     2.203    0.3%
    3     732.9     4.434    0.6%
    4     842.3     8.772    1.0%
    5     937.7     10.91    1.1%
    6      1035     12.28    1.1%
    7      1141     11.06    0.9%
    8      1236     12.06    0.9%
    9      1343      14.8    1.1%
   10      1451     10.45    0.7%
   11      1536     15.67    1.0%
   12      1642     13.58    0.8%
   13      1748     10.47    0.5%
   14      1850     16.52    0.8%
   15      1941     16.65    0.8%
   16      2055     17.21    0.8%
   17      2148     15.65    0.7%
   18      2239     15.34    0.6%
   19      2328     10.62    0.4%
   20      2435     18.68    0.7%

Quality and confidence:
param     error
r         0.177

Model:
Time ~=    429.7
    + r    100.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    563.8
    + n    38.03
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     527.4     1.663    0.3%
   20      1307     15.49    1.1%
   40      2076     8.947    0.4%
   60      2826     16.49    0.5%
   80      3605     5.849    0.1%
  100      4374     17.47    0.3%
  120      5142     21.55    0.4%
  140      5893     18.53    0.3%
  160      6665     12.11    0.1%
  180      7412     19.29    0.2%
  200      8171      10.6    0.1%
  220      8942     18.85    0.2%
  240      9696     17.99    0.1%
  260     10450     9.533    0.0%
  280     11210     21.51    0.1%
  300     11990     12.43    0.1%
  320     12750     23.14    0.1%
  340     13510     25.15    0.1%
  360     14280     24.48    0.1%
  380     15020     19.36    0.1%
  400     15780     36.75    0.2%
  420     16560     34.16    0.2%
  440     17320     29.08    0.1%
  460     18060     22.63    0.1%
  480     18820     35.45    0.1%
  500     19580     31.12    0.1%
  520     20380     62.47    0.3%
  540     21090     48.87    0.2%
  560     21850     35.04    0.1%
  580     22640      38.9    0.1%
  600     23370     43.74    0.1%
  620     24120      47.6    0.1%
  640     24920     43.55    0.1%
  660     25850     171.3    0.6%
  680     26420     43.63    0.1%
  700     27190     35.98    0.1%
  720     27940     33.43    0.1%
  740     28730     46.59    0.1%
  760     29470     52.84    0.1%
  780     30230     27.89    0.0%
  800     30990     36.15    0.1%
  820     31750     38.94    0.1%
  840     32500     14.76    0.0%
  860     33270     46.36    0.1%
  880     34010      23.3    0.0%
  900     34800     35.04    0.1%
  920     35550     25.42    0.0%
  940     36320     59.36    0.1%
  960     37070     43.82    0.1%
  980     37860     62.83    0.1%
 1000     38580     45.54    0.1%
 1020     39360     36.91    0.0%

Quality and confidence:
param     error
n         0.007

Model:
Time ~=    568.4
    + n    38.04
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    413.5
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.7     1.058    0.2%
    1     406.6     4.198    1.0%

Quality and confidence:
param     error
r         1.443

Model:
Time ~=    413.7
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    416.5
    + n    0.624
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     415.9     0.318    0.0%
   20     430.6     3.123    0.7%
   40     442.2     1.622    0.3%
   60     457.8     7.166    1.5%
   80     466.6     0.342    0.0%
  100     480.9     5.072    1.0%
  120     491.3     0.366    0.0%
  140     507.2     9.669    1.9%
  160     519.1     8.068    1.5%
  180     528.8     0.335    0.0%
  200     547.1     9.456    1.7%
  220     553.8     0.431    0.0%
  240     572.1     11.47    2.0%
  260     584.4     11.57    1.9%
  280     591.1     0.288    0.0%
  300     611.4     12.49    2.0%
  320     620.2     8.478    1.3%
  340     644.5     9.119    1.4%
  360     647.3     12.36    1.9%
  380     658.9     11.55    1.7%
  400     676.7     16.56    2.4%
  420     691.9     16.79    2.4%
  440     697.8     12.03    1.7%
  460     713.6     15.28    2.1%
  480     715.8      0.41    0.0%
  500     732.2     10.17    1.3%
  520     744.2     7.146    0.9%
  540     758.5     10.46    1.3%
  560     778.4     13.12    1.6%
  580     783.9     11.56    1.4%
  600     794.3     9.841    1.2%
  620     803.4       0.4    0.0%
  640       822     12.91    1.5%
  660     837.3     13.16    1.5%
  680     846.6      11.6    1.3%
  700     869.1      11.2    1.2%
  720     877.4     14.33    1.6%
  740     886.5     12.86    1.4%
  760     896.9     12.44    1.3%
  780     907.2     8.968    0.9%
  800     917.3     4.556    0.4%
  820     934.5     13.02    1.3%
  840     949.6     13.87    1.4%
  860     961.4     12.61    1.3%
  880     975.9     14.85    1.5%
  900     983.7     9.754    0.9%
  920      1013     11.31    1.1%
  940      1015     13.92    1.3%
  960      1022     13.32    1.3%
  980      1040      15.2    1.4%
 1000      1055     15.15    1.4%
 1020      1067     14.89    1.3%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    417.9
    + n    0.634
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    422.8
    + r       79
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     423.3     1.561    0.3%
    1     501.8     0.411    0.0%

Quality and confidence:
param     error
r         0.538

Model:
Time ~=    423.3
    + r     78.5
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    431.5
    + r    354.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     409.2     0.402    0.0%
    1     786.9      2.97    0.3%
    2      1141     9.533    0.8%
    3      1492     15.93    1.0%
    4      1865     21.14    1.1%
    5      2210     23.79    1.0%
    6      2557     24.28    0.9%
    7      2953     11.03    0.3%
    8      3255     18.44    0.5%
    9      3627     11.37    0.3%
   10      3964     17.36    0.4%
   11      4315     15.35    0.3%
   12      4679     22.75    0.4%
   13      5043     28.06    0.5%
   14      5358     20.06    0.3%
   15      5707     25.74    0.4%
   16      6054        34    0.5%
   17      6522        17    0.2%
   18      6878     28.73    0.4%
   19      7206     24.21    0.3%
   20      7544     35.24    0.4%

Quality and confidence:
param     error
r         0.411

Model:
Time ~=    423.1
    + r    355.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    427.6
    + r    584.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     399.6     0.292    0.0%
    1      1026     9.887    0.9%
    2      1605     13.26    0.8%
    3      2190     10.82    0.4%
    4      2772     11.66    0.4%
    5      3359      22.3    0.6%
    6      3924     9.057    0.2%
    7      4511      12.9    0.2%
    8      5093     18.62    0.3%
    9      5696      24.3    0.4%
   10      6273     20.76    0.3%
   11      6863     26.69    0.3%
   12      7447     42.71    0.5%
   13      8002     38.99    0.4%
   14      8586     33.16    0.3%
   15      9180     33.79    0.3%
   16      9744     32.51    0.3%
   17     10410     38.73    0.3%
   18     10950     46.17    0.4%
   19     11490     24.87    0.2%
   20     12150     43.62    0.3%

Quality and confidence:
param     error
r         0.396

Model:
Time ~=    426.3
    + r    584.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1111
    + t    468.6
    + n    164.5
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3673     16.39    0.4%
    1    16      4253     10.63    0.2%
    2    16      4699     16.43    0.3%
    3    16      5170     13.98    0.2%
    4     0      2934     5.651    0.1%
    4     1      3151     14.52    0.4%
    4     2      3300     16.43    0.4%
    4     3      3464     9.432    0.2%
    4     4      3596     9.246    0.2%
    4     5      3762     13.22    0.3%
    4     6      3927     13.52    0.3%
    4     7      4071     14.68    0.3%
    4     8      4245     21.54    0.5%
    4     9      4439     12.75    0.2%
    4    10      4560     10.64    0.2%
    4    11      4789     22.25    0.4%
    4    12      4915     17.25    0.3%
    4    13      5099     17.37    0.3%
    4    14      5237     15.35    0.2%
    4    15      5419     23.84    0.4%
    4    16      5595     16.68    0.2%

Quality and confidence:
param     error
t         2.317
n         0.456

Model:
Time ~=     1094
    + t      463
    + n    165.3
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    173.4
    + r    72.99
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       171     0.178    0.1%
    1     247.8     0.608    0.2%
    2     319.4     1.352    0.4%
    3     397.3      1.52    0.3%
    4     464.3     3.552    0.7%
    5       534     0.894    0.1%
    6     616.4     1.122    0.1%
    7     682.1     4.576    0.6%
    8     756.2     4.572    0.6%
    9     824.4     2.224    0.2%
   10     892.6     4.251    0.4%
   11     997.1     12.03    1.2%
   12      1056     6.112    0.5%
   13      1126     3.756    0.3%
   14      1198     7.761    0.6%
   15      1261     4.482    0.3%
   16      1329     4.057    0.3%
   17      1428     12.24    0.8%
   18      1493      6.15    0.4%
   19      1573     14.61    0.9%
   20      1640     14.33    0.8%

Quality and confidence:
param     error
r         0.116

Model:
Time ~=    171.4
    + r    73.39
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    508.7
    + r      380
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.9     0.169    0.0%
    1     912.4     1.621    0.1%
    2      1284     14.72    1.1%
    3      1710     3.943    0.2%
    4      2003     7.359    0.3%
    5      2400     12.65    0.5%
    6      2782     9.351    0.3%
    7      3133     12.55    0.4%
    8      3499     7.791    0.2%
    9      3948     17.21    0.4%
   10      4304     18.37    0.4%
   11      4729     16.52    0.3%
   12      5067     15.87    0.3%
   13      5533     14.27    0.2%
   14      5788     28.14    0.4%
   15      6145     11.42    0.1%
   16      6529     28.49    0.4%
   17      6903     11.86    0.1%
   18      7434     24.02    0.3%
   19      7735      11.7    0.1%
   20      8117        26    0.3%

Quality and confidence:
param     error
r         0.566

Model:
Time ~=    499.6
    + r    380.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    796.8
    + n    73.56
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     791.8     13.53    1.7%
    1     876.1     9.626    1.0%
    2       952     8.528    0.8%
    3      1020     10.56    1.0%
    4      1104     16.07    1.4%
    5      1161     8.511    0.7%
    6      1228     2.969    0.2%
    7      1304     9.634    0.7%
    8      1386     16.38    1.1%
    9      1454     9.645    0.6%
   10      1529     11.61    0.7%
   11      1598      11.4    0.7%
   12      1698     18.35    1.0%
   13      1737     8.738    0.5%
   14      1837      17.4    0.9%
   15      1926     3.389    0.1%
   16      1978     15.22    0.7%

Quality and confidence:
param     error
n         0.251

Model:
Time ~=    795.5
    + n    73.99
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    195.6
    + r    845.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     424.9     3.599    0.8%
    1      1207      8.24    0.6%
    2      1983     15.36    0.7%
    3      2759     16.65    0.6%
    4      3543     15.84    0.4%
    5      4398     17.78    0.4%
    6      5220     22.58    0.4%
    7      6003     21.03    0.3%
    8      6872     23.43    0.3%
    9      7719     25.85    0.3%
   10      8576     20.59    0.2%
   11      9387     33.33    0.3%
   12     10260     25.73    0.2%
   13     11130     33.12    0.2%
   14     11960     30.58    0.2%
   15     12860     61.18    0.4%
   16     13750     61.98    0.4%
   17     14610     72.68    0.4%
   18     15560     52.13    0.3%
   19     16500     54.84    0.3%
   20     17400     55.52    0.3%

Quality and confidence:
param     error
r         1.453

Model:
Time ~=    187.2
    + r    848.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    288.4
    + r    504.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     409.4      1.27    0.3%
    1     867.9     5.172    0.5%
    2      1337      4.68    0.3%
    3      1817     17.31    0.9%
    4      2280     6.422    0.2%
    5      2790     10.72    0.3%
    6      3296     14.91    0.4%
    7      3767     19.21    0.5%
    8      4221     16.72    0.3%
    9      4787     24.49    0.5%
   10      5288     19.38    0.3%
   11      5816     13.92    0.2%
   12      6357     39.27    0.6%
   13      6808     23.38    0.3%
   14      7310     29.77    0.4%
   15      7793     35.31    0.4%
   16      8290     37.33    0.4%
   17      8914      20.6    0.2%
   18      9479     22.75    0.2%
   19     10020     45.86    0.4%
   20     10520     44.48    0.4%

Quality and confidence:
param     error
r         0.872

Model:
Time ~=    277.7
    + r    506.4
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    698.1
    + n      112
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     678.4     3.179    0.4%
    1     807.5     5.637    0.6%
    2     927.1     9.089    0.9%
    3      1047     12.16    1.1%
    4      1163     13.26    1.1%
    5      1255      3.24    0.2%
    6      1376      11.5    0.8%
    7      1490     13.05    0.8%
    8      1591     7.496    0.4%
    9      1704     14.62    0.8%
   10      1825     14.89    0.8%
   11      1938     11.34    0.5%
   12      2044     16.86    0.8%
   13      2155     15.11    0.7%
   14      2277     13.36    0.5%
   15      2373     5.809    0.2%
   16      2495     9.656    0.3%

Quality and confidence:
param     error
n         0.221

Model:
Time ~=    698.6
    + n    112.3
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    356.9
    + r     3625
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       427     0.357    0.0%
    1      4015     8.423    0.2%
    2      7599     38.91    0.5%
    3     11190      45.8    0.4%
    4     14830     64.37    0.4%
    5     18420     39.51    0.2%
    6     21890     69.61    0.3%
    7     25650     88.96    0.3%
    8     29200     106.1    0.3%
    9     32870     73.63    0.2%
   10     36710     170.8    0.4%
   11     40510     160.9    0.3%
   12     43950     150.3    0.3%
   13     47460     160.1    0.3%
   14     50980     165.4    0.3%
   15     54740     151.3    0.2%
   16     58210     170.3    0.2%
   17     61960     219.5    0.3%
   18     65760     158.4    0.2%
   19     69470     154.6    0.2%
   20     72910     229.3    0.3%

Quality and confidence:
param     error
r         2.036

Model:
Time ~=      306
    + r     3630
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    39410
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     414.3     0.317    0.0%
    1     39540      26.1    0.0%
    2     76090     61.69    0.0%
    3    114000     54.31    0.0%
    4    151800     63.45    0.0%
    5    189700     112.6    0.0%
    6    227800     119.3    0.0%
    7    265600       104    0.0%
    8    303700     136.5    0.0%
    9    341600     220.2    0.0%
   10    379600     183.6    0.0%
   11    417700     166.6    0.0%
   12    471600     87.63    0.0%
   13    510500     97.25    0.0%
   14    551000     93.36    0.0%
   15    591100     195.9    0.0%
   16    628800     144.6    0.0%
   17    669400     243.2    0.0%
   18    707800     157.5    0.0%
   19    746800     212.7    0.0%
   20    786100       357    0.0%

Quality and confidence:
param     error
r         57.43

Model:
Time ~=        0
    + r    39570
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    39240
    + t     3295
    + i    63.98
    + o    100.7
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    201500     94.79    0.0%
    1     0   960    139400     71.85    0.0%
    1    20   960    140600     39.09    0.0%
    1    40   960    141900     84.42    0.0%
    1    60   960    143100     70.32    0.0%
    1    80   960    144500     114.1    0.0%
    1   100   960    145600     51.72    0.0%
    1   120   960    147100     109.1    0.0%
    1   140   960    148300     128.4    0.0%
    1   160   960    149400     84.44    0.0%
    1   180   960    150800     79.45    0.0%
    1   200   960    152000     99.22    0.0%
    1   220   960    153200     117.1    0.0%
    1   240   960    154500     98.29    0.0%
    1   260   960    155800     146.5    0.0%
    1   280   960    157000     99.34    0.0%
    1   300   960    158300     165.5    0.1%
    1   320   960    159600     115.9    0.0%
    1   340   960    160900     173.5    0.1%
    1   360   960    162200     92.66    0.0%
    1   380   960    163500     117.2    0.0%
    1   400   960    164800     187.1    0.1%
    1   420   960    166000     112.5    0.0%
    1   440   960    167000     89.94    0.0%
    1   460   960    168700     122.8    0.0%
    1   480   960    169900     133.4    0.0%
    1   500   960    171200     82.49    0.0%
    1   520   960    173000     116.2    0.0%
    1   540   960    174200     80.82    0.0%
    1   560   960    175500     104.2    0.0%
    1   580   960    176700     156.9    0.0%
    1   600   960    178100     130.6    0.0%
    1   620   960    179300     72.79    0.0%
    1   640   960    180500     87.75    0.0%
    1   660   960    181600     64.03    0.0%
    1   680   960    183000     96.67    0.0%
    1   700   960    184100     101.9    0.0%
    1   720   960    185300     79.23    0.0%
    1   740   960    186700     122.4    0.0%
    1   760   960    187800       128    0.0%
    1   780   960    189100     126.6    0.0%
    1   800   960    190400     60.78    0.0%
    1   820   960    191600     98.61    0.0%
    1   840   960    192800     129.7    0.0%
    1   860   960    194300     98.28    0.0%
    1   880   960    195700        68    0.0%
    1   900   960    196800     117.3    0.0%
    1   920   960    198400     199.9    0.1%
    1   940   960    199400     79.28    0.0%
    1   960   960    200700      63.4    0.0%
    1   980   960    201700     75.49    0.0%
    1  1000   960    203100     91.82    0.0%
    1  1020   960    204400     169.7    0.0%
    1  1024     0    107700     91.22    0.0%
    1  1024    19    109600     79.28    0.0%
    1  1024    38    111800     96.84    0.0%
    1  1024    57    113600     56.59    0.0%
    1  1024    76    115700     161.5    0.1%
    1  1024    95    117400     60.94    0.0%
    1  1024   114    119400     78.39    0.0%
    1  1024   133    121300     47.05    0.0%
    1  1024   152    123300     55.01    0.0%
    1  1024   171    125200     109.5    0.0%
    1  1024   190    127000     84.43    0.0%
    1  1024   209    129000     116.3    0.0%
    1  1024   228    130900     109.9    0.0%
    1  1024   247    132700     91.34    0.0%
    1  1024   266    134600     70.03    0.0%
    1  1024   285    136400     73.69    0.0%
    1  1024   304    138500     100.7    0.0%
    1  1024   323    140300      62.1    0.0%
    1  1024   342    142500       164    0.1%
    1  1024   361    144300     83.31    0.0%
    1  1024   380    146300     106.6    0.0%
    1  1024   399    148100     72.88    <truncated>...
```

</details>",10448,2021-12-08T19:27:05Z,0
392,athei,/benchmark runtime pallet pallet_contracts,10448,2021-12-09T09:43:28Z,0
393,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-instantiate-weight"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error[E0599]: no function or associated item named `reinstrument` found for associated type `<T as pallet::Config>::WeightInfo` in the current scope
   --> frame/contracts/src/wasm/code_cache.rs:219:40
    |
219 |             Reinstrument(len) => T::WeightInfo::reinstrument(len / 1024),
    |                                                 ^^^^^^^^^^^^ function or associated item not found in `<T as pallet::Config>::WeightInfo`

error[E0061]: this function takes 0 arguments but 1 argument was supplied
   --> frame/contracts/src/wasm/code_cache.rs:220:17
    |
220 |             Load(len) => T::WeightInfo::call(len / 1024).saturating_sub(T::WeightInfo::call(0)),
    |                          ^^^^^^^^^^^^^^^^^^^ ---------- supplied 1 argument
    |                          |
    |                          expected 0 arguments
    |
note: associated function defined here
   --> frame/contracts/src/weights.rs:54:5
    |
54  |     fn call() -> Weight;
    |        ^^^^

error[E0061]: this function takes 0 arguments but 1 argument was supplied
   --> frame/contracts/src/wasm/code_cache.rs:220:64
    |
220 |             Load(len) => T::WeightInfo::call(len / 1024).saturating_sub(T::WeightInfo::call(0)),
    |                                                                         ^^^^^^^^^^^^^^^^^^^ - supplied 1 argument
    |                                                                         |
    |                                                                         expected 0 arguments
    |
note: associated function defined here
   --> frame/contracts/src/weights.rs:54:5
    |
54  |     fn call() -> Weight;
    |        ^^^^

error[E0061]: this function takes 0 arguments but 1 argument was supplied
   --> frame/contracts/src/lib.rs:301:57
    |
301 |             output.gas_meter.into_dispatch_result(output.result, T::WeightInfo::call(0))
    |                                                                  ^^^^^^^^^^^^^^^^^^^ - supplied 1 argument
    |                                                                  |
    |                                                                  expected 0 arguments
    |
note: associated function defined here
   --> frame/contracts/src/weights.rs:54:5
    |
54  |     fn call() -> Weight;
    |        ^^^^

error[E0061]: this function takes 0 arguments but 1 argument was supplied
   --> frame/contracts/src/lib.rs:281:20
    |
281 |         #[pallet::weight(T::WeightInfo::call(0).saturating_add(*gas_limit))]
    |                          ^^^^^^^^^^^^^^^^^^^ - supplied 1 argument
    |                          |
    |                          expected 0 arguments
    |
note: associated function defined here
   --> frame/contracts/src/weights.rs:54:5
    |
54  |     fn call() -> Weight;
    |        ^^^^

Some errors have detailed explanations: E0061, E0599.
For more information about an error, try `rustc --explain E0061`.
error: could not compile `pallet-contracts` due to 5 previous errors
error: build failed

```

</details>

ERROR: Unable to commit file ./frame/contracts/src/weights.rs",10448,2021-12-09T09:43:30Z,0
394,athei,/benchmark runtime pallet pallet_contracts,10448,2021-12-09T10:42:53Z,0
395,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-instantiate-weight"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.736
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.736
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.188
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     66.95     0.276    0.4%
   20     59.65     0.665    1.1%
   40     95.39     0.788    0.8%
   60     131.7     0.805    0.6%
   80       165     1.604    0.9%
  100     206.8     1.204    0.5%
  120     244.5     1.054    0.4%
  140     290.5     3.727    1.2%
  160     325.1     7.587    2.3%
  180     372.7     1.237    0.3%
  200     413.3     3.189    0.7%
  220     444.2     3.231    0.7%
  240     493.8     3.972    0.8%
  260     528.7     2.775    0.5%
  280     579.5     7.555    1.3%
  300     617.7     6.222    1.0%
  320     663.8     6.417    0.9%
  340     702.5     2.394    0.3%
  360     756.7     6.286    0.8%
  380     806.8      4.58    0.5%
  400     878.4     10.38    1.1%
  420       901     9.717    1.0%
  440     949.9     8.084    0.8%
  460     978.1     8.098    0.8%
  480      1029     4.114    0.3%
  500      1074     12.62    1.1%
  520      1119      20.9    1.8%
  540      1162     12.65    1.0%
  560      1183     11.38    0.9%
  580      1249     11.02    0.8%
  600      1290      17.9    1.3%
  620      1329      13.7    1.0%
  640      1387     3.882    0.2%
  660      1433     13.88    0.9%
  680      1481     5.415    0.3%
  700      1496     15.22    1.0%
  720      1541     13.78    0.8%
  740      1576     11.49    0.7%
  760      1666     15.15    0.9%
  780      1709     23.91    1.3%
  800      1751     16.51    0.9%
  820      1764     7.461    0.4%
  840      1838     12.02    0.6%
  860      1911     13.52    0.7%
  880      1915     20.29    1.0%
  900      1974     16.66    0.8%
  920      2030     6.235    0.3%
  940      2025     15.38    0.7%
  960      2097     17.78    0.8%
  980      2154      16.5    0.7%
 1000      2198     10.93    0.4%
 1020      2229     27.37    1.2%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.196
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      101
    + q    0.318
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.863     0.044    1.5%
   20     87.35     1.162    1.3%
   40     99.82     0.497    0.4%
   60     110.6     1.195    1.0%
   80     119.7     1.185    0.9%
  100     129.3     1.354    1.0%
  120     137.3     0.962    0.7%
  140     148.8     1.077    0.7%
  160     158.3     1.004    0.6%
  180     167.9     1.134    0.6%
  200     177.4     1.599    0.9%
  220     184.7      1.56    0.8%
  240     195.1     2.777    1.4%
  260       202     2.028    1.0%
  280     183.7     5.096    2.7%
  300     215.1     2.739    1.2%
  320       195     1.341    0.6%
  340     229.5     1.436    0.6%
  360     221.2     11.51    5.2%
  380     219.6     2.157    0.9%
  400     237.6      15.1    6.3%
  420     230.2     2.195    0.9%
  440     243.3     5.635    2.3%
  460     244.8     1.694    0.6%
  480       253     4.065    1.6%
  500     259.8     1.895    0.7%
  520     263.7     1.991    0.7%
  540     274.5     1.093    0.3%
  560     279.2     1.308    0.4%
  580       284     1.683    0.5%
  600       294     1.468    0.4%
  620     299.6     1.989    0.6%
  640     306.4     3.206    1.0%
  660     313.6     2.561    0.8%
  680     319.3     2.095    0.6%
  700     325.4     1.668    0.5%
  720     329.5     1.052    0.3%
  740     338.3     5.894    1.7%
  760     345.5      1.29    0.3%
  780     353.2     1.208    0.3%
  800     356.3     1.614    0.4%
  820     365.1     1.409    0.3%
  840     367.9     1.074    0.2%
  860     377.7     4.869    1.2%
  880       380     1.788    0.4%
  900     384.5     1.543    0.4%
  920     389.7     0.927    0.2%
  940     394.4     1.441    0.3%
  960     400.7     1.408    0.3%
  980     405.9     1.627    0.4%
 1000     410.2     0.936    0.2%
 1020     418.3     1.206    0.2%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    96.37
    + q    0.325
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40.16
    + c    90.36
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     53.75     0.219    0.4%
    2     240.3       0.2    0.0%
    4     412.5     3.098    0.7%
    6     575.1     0.465    0.0%
    8     767.8     10.16    1.3%
   10     935.8     9.697    1.0%
   12      1098     11.19    1.0%
   14      1313     12.83    0.9%
   16      1480     14.14    0.9%
   18      1675     14.64    0.8%
   20      1829     15.44    0.8%
   22      2004      10.8    0.5%
   24      2153     17.82    0.8%
   26      2432     12.75    0.5%
   28      2590     16.05    0.6%
   30      2745     15.21    0.5%
   32      2913     16.93    0.5%
   34      3124      14.1    0.4%
   36      3304     22.06    0.6%
   38      3476     26.52    0.7%
   40      3628     16.78    0.4%
   42      3771      18.6    0.4%
   44      3942     12.68    0.3%
   46      4109     9.034    0.2%
   48      4264     9.216    0.2%
   50      4638     14.46    0.3%
   52      4812     15.81    0.3%
   54      4973     20.93    0.4%
   56      5121     14.41    0.2%
   58      5294     14.83    0.2%
   60      5439     15.25    0.2%
   62      5612     28.14    0.5%
   64      5744      13.5    0.2%
   66      6040     12.13    0.2%
   68      6195     28.78    0.4%
   70      6370     14.77    0.2%
   72      6527     18.18    0.2%
   74      6706     18.13    0.2%
   76      6850     16.86    0.2%
   78      7038     25.52    0.3%
   80      7185     16.55    0.2%
   82      7353      24.8    0.3%
   84      7513     17.41    0.2%
   86      7716     34.71    0.4%
   88      7818     11.44    0.1%
   90      7993     20.69    0.2%
   92      8175     16.19    0.1%
   94      8325     16.09    0.1%
   96      8494     27.46    0.3%
   98      9071     10.63    0.1%
  100      9244     13.82    0.1%
  102      9404     24.01    0.2%
  104      9574     20.13    0.2%
  106      9745     12.89    0.1%
  108      9934     16.85    0.1%
  110     10110     34.62    0.3%
  112     10240     27.53    0.2%
  114     10390     28.66    0.2%
  116     10560     19.18    0.1%
  118     10770     53.69    0.4%
  120     10920     38.27    0.3%
  122     11040     18.33    0.1%
  124     11190     10.71    0.0%
  126     11420     46.41    0.4%
  128     11570     27.24    0.2%

Quality and confidence:
param     error
c          0.09

Model:
Time ~=    20.24
    + c    90.55
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    600.5
    + c    207.8
    + s    2.025
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2640     3.068    0.1%
    1  1024      2875     6.505    0.2%
    2  1024      3062     17.29    0.5%
    3  1024      3274     13.63    0.4%
    4  1024      3480     13.79    0.3%
    5  1024      3725     12.96    0.3%
    6  1024      3865     13.93    0.3%
    7  1024      4096     10.42    0.2%
    8  1024      4299     20.06    0.4%
    9  1024      4538     12.07    0.2%
   10  1024      4721     18.39    0.3%
   11  1024      4930      15.4    0.3%
   12  1024      5124     17.41    0.3%
   13  1024      5387     22.82    0.4%
   14  1024      5684     15.65    0.2%
   15  1024      5796     22.85    0.3%
   16  1024      5919      15.7    0.2%
   17  1024      6254     18.15    0.2%
   18  1024      6453     21.11    0.3%
   19  1024      6612      12.9    0.1%
   20  1024      7090     20.39    0.2%
   21  1024      7036     30.62    0.4%
   22  1024      7189     27.11    0.3%
   23  1024      7381      10.9    0.1%
   24  1024      7582     33.06    0.4%
   25  1024      7905     21.98    0.2%
   26  1024      8147        46    0.5%
   27  1024      8299     24.64    0.2%
   28  1024      8483     24.04    0.2%
   29  1024      8720     26.23    0.3%
   30  1024      8862     39.06    0.4%
   31  1024      9064     32.78    0.3%
   32  1024      9209     17.69    0.1%
   33  1024      9708     18.44    0.1%
   34  1024      9875     33.22    0.3%
   35  1024     10090     29.86    0.2%
   36  1024     10250     33.17    0.3%
   37  1024     10500     49.22    0.4%
   38  1024     10610     39.32    0.3%
   39  1024     10840     46.51    0.4%
   40  1024     11010      36.9    0.3%
   41  1024     11260     45.62    0.4%
   42  1024     11370     40.03    0.3%
   43  1024     11570     63.08    0.5%
   44  1024     11740     31.77    0.2%
   45  1024     11930     20.61    0.1%
   46  1024     12150     36.63    0.3%
   47  1024     12290     36.16    0.2%
   48  1024     12560     69.22    0.5%
   49  1024     12990     17.38    0.1%
   50  1024     13200     50.97    0.3%
   51  1024     13400     44.96    0.3%
   52  1024     13550     33.33    0.2%
   53  1024     14270     55.69    0.3%
   54  1024     13950     26.69    0.1%
   55  1024     14120     62.73    0.4%
   56  1024     14340     53.82    0.3%
   57  1024     14480     47.06    0.3%
   58  1024     14690     36.55    0.2%
   59  1024     14890     38.52    0.2%
   60  1024     15070      57.8    0.3%
   61  1024     15220     30.48    0.2%
   62  1024     15460     66.66    0.4%
   63  1024     15640     48.59    0.3%
   64     0     13740     47.13    0.3%
   64    20     13740     41.47    0.3%
   64    40     13760     39.72    0.2%
   64    60     13880     58.77    0.4%
   64    80     13870     34.26    0.2%
   64   100     13950     67.89    0.4%
   64   120     13920     56.02    0.4%
   64   140     14010     56.21    0.4%
   64   160     14000     36.09    0.2%
   64   180     14030     33.72    0.2%
   64   200     14130      42.6    0.3%
   64   220     14110     35.73    0.2%
   64   240     14210     60.06    0.4%
   64   260     14770     50.68    0.3%
   64   280     14250     40.88    0.2%
   64   300     14350      58.4    0.4%
   64   320     14340     45.68    0.3%
   64   340     14350     21.66    0.1%
   64   360     14480     72.51    0.5%
   64   380     14450     37.79    0.2%
   64   400     14470     39.44    0.2%
   64   420     14580     28.93    0.1%
   64   440     14590     27.91    0.1%
   64   460     14590     34.81    0.2%
   64   480     14710     33.91    0.2%
   64   500     14660     29.85    0.2%
   64   520     14740        40    0.2%
   64   540     14810     46.49    0.3%
   64   560     14810     37.43    0.2%
   64   580     15420     44.69    0.2%
   64   600     14890     50.53    0.3%
   64   620     14960     54.52    0.3%
   64   640     15020     41.33    0.2%
   64   660     15010     51.74    0.3%
   64   680     15090     33.67    0.2%
   64   700     15110     49.29    0.3%
   64   720     15150     51.91    0.3%
   64   740     15190     28.95    0.1%
   64   760     15250     47.86    0.3%
   64   780     15270      59.9    0.3%
   64   800     15270     35.69    0.2%
   64   820     15430     49.99    0.3%
   64   840     15390     56.33    0.3%
   64   860     15420     46.75    0.3%
   64   880     15540     127.1    0.8%
   64   900     16030     38.62    0.2%
   64   920     15580     36.83    0.2%
   64   940     15590     40.23    0.2%
   64   960     15610     54.18    0.3%
   64   980     15710     38.84    0.2%
   64  1000     15710     28.36    0.1%
   64  1020     15750     48.79    0.3%
   64  1024     15800      27.1    0.1%

Quality and confidence:
param     error
c         0.227
s         0.014

Model:
Time ~=    486.6
    + c    206.1
    + s    2.177
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    240.3
    + s    1.978
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0       222     0.725    0.3%
   20     275.9     0.623    0.2%
   40     317.3     0.857    0.2%
   60     357.3     0.837    0.2%
   80     397.3     1.918    0.4%
  100     444.9     11.36    2.5%
  120     476.7     0.784    0.1%
  140     518.4      4.47    0.8%
  160     564.3     7.915    1.4%
  180     596.1     1.086    0.1%
  200     640.9     10.97    1.7%
  220     694.2        11    1.5%
  240     716.6     6.461    0.9%
  260     764.3     13.53    1.7%
  280     794.7     1.401    0.1%
  300     841.5     10.93    1.2%
  320     875.9     9.175    1.0%
  340     916.8     6.029    0.6%
  360     958.1     9.731    1.0%
  380      1012     15.77    1.5%
  400      1065     9.555    0.8%
  420      1081     12.63    1.1%
  440      1124     15.06    1.3%
  460      1169     12.68    1.0%
  480      1214     16.34    1.3%
  500      1237     14.35    1.1%
  520      1281     16.99    1.3%
  540      1295     2.168    0.1%
  560      1347     14.51    1.0%
  580      1378     8.913    0.6%
  600      1419     10.11    0.7%
  620      1484     14.65    0.9%
  640      1504     14.45    0.9%
  660      1548     14.73    0.9%
  680      1618     3.815    0.2%
  700      1617      7.68    0.4%
  720      1668      16.4    0.9%
  740      1701     11.84    0.6%
  760      1743     15.86    0.9%
  780      1790     17.69    0.9%
  800      1829      18.1    0.9%
  820      1866     14.13    0.7%
  840      1907      16.7    0.8%
  860      1953     16.37    0.8%
  880      2005     11.17    0.5%
  900      2017     11.76    0.5%
  920      2081     11.83    0.5%
  940      2109     12.49    0.5%
  960      2141     13.59    0.6%
  980      2184     13.76    0.6%
 1000      2234     14.14    0.6%
 1020      2266        14    0.6%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    242.4
    + s    1.986
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    423.3
    + c    89.15
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     429.5     3.139    0.7%
    2     620.4     8.863    1.4%
    4     795.9     4.849    0.6%
    6     954.7     11.21    1.1%
    8      1146     9.358    0.8%
   10      1309     12.87    0.9%
   12      1450     4.426    0.3%
   14      1691     12.07    0.7%
   16      1843     9.647    0.5%
   18      2025     11.43    0.5%
   20      2178     15.49    0.7%
   22      2331     14.43    0.6%
   24      2474     13.21    0.5%
   26      2802      16.1    0.5%
   28      2955        15    0.5%
   30      3108     10.83    0.3%
   32      3269     14.66    0.4%
   34      3462     11.02    0.3%
   36      3604     17.63    0.4%
   38      3743     19.16    0.5%
   40      3915     15.76    0.4%
   42      4067      14.4    0.3%
   44      4226     13.94    0.3%
   46      4371     23.59    0.5%
   48      4532     6.077    0.1%
   50      4993     11.04    0.2%
   52      5163     10.72    0.2%
   54      5304     16.64    0.3%
   56      5473     18.23    0.3%
   58      5616     11.14    0.1%
   60      5789     15.26    0.2%
   62      5942     14.26    0.2%
   64      6133     10.56    0.1%
   66      6308     16.37    0.2%
   68      6454     18.19    0.2%
   70      6615     21.51    0.3%
   72      6767     16.81    0.2%
   74      6922      11.3    0.1%
   76      7083     12.78    0.1%
   78      7216      13.4    0.1%
   80      7436     34.09    0.4%
   82      7575     24.01    0.3%
   84      7711     30.54    0.3%
   86      7884     16.43    0.2%
   88      8012     16.76    0.2%
   90      8184     39.52    0.4%
   92      8340      27.3    0.3%
   94      8486     17.34    0.2%
   96      8656     29.67    0.3%
   98      9441     35.58    0.3%
  100      9595     27.98    0.2%
  102      9727     18.53    0.1%
  104      9921     24.52    0.2%
  106     10060      23.9    0.2%
  108     10200     15.46    0.1%
  110     10370     16.49    0.1%
  112     10570     24.99    0.2%
  114     10710     32.28    0.3%
  116     10840     23.68    0.2%
  118     11000     26.73    0.2%
  120     11150     17.67    0.1%
  122     11330     23.32    0.2%
  124     11500     23.08    0.2%
  126     11610     17.12    0.1%
  128     11770     18.23    0.1%

Quality and confidence:
param     error
c         0.137

Model:
Time ~=    384.4
    + c    89.48
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    90.98
    + c    90.53
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     90.39     0.208    0.2%
    1     187.3     1.934    1.0%
    2       274     0.272    0.0%
    3     359.7     2.937    0.8%
    4     454.2     0.441    0.0%
    5     546.8     13.58    2.4%
    6     621.8     5.538    0.8%
    7     736.1     15.18    2.0%
    8     810.3     5.014    0.6%
    9     901.4     14.91    1.6%
   10     988.3     18.76    1.8%
   11      1063     12.89    1.2%
   12      1156     15.42    1.3%
   13      1278     13.08    1.0%
   14      1358     13.86    1.0%
   15      1447     16.87    1.1%
   16      1519     11.76    0.7%
   17      1637     14.22    0.8%
   18      1717     12.78    0.7%
   19      1790     14.96    0.8%
   20      1885     11.01    0.5%
   21      1969     9.644    0.4%
   22      2054     11.29    0.5%
   23      2123     14.28    0.6%
   24      2212       3.3    0.1%
   25      2398     10.12    0.4%
   26      2477     12.68    0.5%
   27      2577      12.5    0.4%
   28      2644     8.247    0.3%
   29      2746     13.33    0.4%
   30      2809      3.19    0.1%
   31      2897     11.36    0.3%
   32      2969     15.95    0.5%
   33      3095     4.289    0.1%
   34      3171     11.52    0.3%
   35      3292     17.46    0.5%
   36      3345     21.92    0.6%
   37      3427     5.214    0.1%
   38      3501     11.19    0.3%
   39      3586     25.44    0.7%
   40      3678     16.69    0.4%
   41      3749     20.38    0.5%
   42      3840     14.48    0.3%
   43      3922     12.99    0.3%
   44      3992     11.57    0.2%
   45      4081     11.92    0.2%
   46      4154     13.94    0.3%
   47      4239     14.33    0.3%
   48      4319     12.81    0.2%
   49      4621     13.57    0.2%
   50      4700     15.16    0.3%
   51      4770     21.16    0.4%
   52      4869     15.03    0.3%
   53      4945     15.11    0.3%
   54      5027     13.52    0.2%
   55      5099     13.29    0.2%
   56      5194     18.18    0.3%
   57      5271     10.65    0.2%
   58      5356     16.38    0.3%
   59      5435     13.04    0.2%
   60      5528     20.42    0.3%
   61      5604     17.96    0.3%
   62      5679     15.94    0.2%
   63      5768     20.71    0.3%
   64      5953     17.02    0.2%

Quality and confidence:
param     error
c         0.092

Model:
Time ~=    81.27
    + c    90.69
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.56
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.56
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      429
    + r    112.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     435.1     0.612    0.1%
    1     547.3     5.902    1.0%
    2     655.5     7.825    1.1%
    3     762.2     0.946    0.1%
    4     880.1     15.14    1.7%
    5     999.3     13.39    1.3%
    6      1100     11.83    1.0%
    7      1218     13.41    1.1%
    8      1322     13.07    0.9%
    9      1440     15.44    1.0%
   10      1548     12.22    0.7%
   11      1663     13.15    0.7%
   12      1771     14.76    0.8%
   13      1872     9.775    0.5%
   14      2024     14.47    0.7%
   15      2131     13.66    0.6%
   16      2252     14.43    0.6%
   17      2340     10.03    0.4%
   18      2469     11.53    0.4%
   19      2582      14.1    0.5%
   20      2699     10.22    0.3%

Quality and confidence:
param     error
r         0.176

Model:
Time ~=    425.7
    + r    113.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    425.5
    + r      112
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     420.9     0.931    0.2%
    1     537.4     0.254    0.0%
    2     652.1     0.712    0.1%
    3     763.4     7.077    0.9%
    4       870     9.512    1.0%
    5     974.9      1.38    0.1%
    6      1089     7.738    0.7%
    7      1214     14.33    1.1%
    8      1336     7.999    0.5%
    9      1440     13.85    0.9%
   10      1536      12.3    0.8%
   11      1653      13.1    0.7%
   12      1773     12.63    0.7%
   13      1873     10.52    0.5%
   14      2004     16.01    0.7%
   15      2118     13.85    0.6%
   16      2239      8.54    0.3%
   17      2352     4.206    0.1%
   18      2445     13.07    0.5%
   19      2557     16.73    0.6%
   20      2665     13.61    0.5%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    421.9
    + r    112.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    425.3
    + r    110.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.1     0.145    0.0%
    1     538.5     6.419    1.1%
    2     657.4     12.12    1.8%
    3       757     2.295    0.3%
    4     865.4     10.71    1.2%
    5     967.1     0.869    0.0%
    6      1087     15.92    1.4%
    7      1205     15.04    1.2%
    8      1303     12.01    0.9%
    9      1411     11.03    0.7%
   10      1523     12.72    0.8%
   11      1623     9.225    0.5%
   12      1742     14.51    0.8%
   13      1860     9.715    0.5%
   14      1973     8.391    0.4%
   15      2113     10.12    0.4%
   16      2191     9.424    0.4%
   17      2302      13.1    0.5%
   18      2424     12.33    0.5%
   19      2538     3.298    0.1%
   20      2632     12.31    0.4%

Quality and confidence:
param     error
r         0.165

Model:
Time ~=    421.9
    + r    110.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    433.9
    + r    320.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       421     0.384    0.0%
    1     756.6     11.43    1.5%
    2      1088     11.32    1.0%
    3      1404     13.44    0.9%
    4      1722     12.97    0.7%
    5      2042     11.06    0.5%
    6      2364      12.5    0.5%
    7      2683     8.535    0.3%
    8      3010     6.596    0.2%
    9      3323     10.85    0.3%
   10      3623     11.59    0.3%
   11      3950     11.34    0.2%
   12      4265     8.409    0.1%
   13      4587     4.067    0.0%
   14      4955     11.09    0.2%
   15      5259     14.79    0.2%
   16      5568     9.855    0.1%
   17      5906        11    0.1%
   18      6234     15.08    0.2%
   19      6531     11.81    0.1%
   20      6842      13.6    0.1%

Quality and confidence:
param     error
r         0.198

Model:
Time ~=      434
    + r      321
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    427.3
    + r    111.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       408     0.249    0.0%
    1     522.5     0.592    0.1%
    2     651.1     8.911    1.3%
    3     762.2     10.58    1.3%
    4     877.8     8.206    0.9%
    5      1003     12.98    1.2%
    6      1094     11.08    1.0%
    7      1213     12.83    1.0%
    8      1330      10.2    0.7%
    9      1428     13.43    0.9%
   10      1545     14.12    0.9%
   11      1643     13.69    0.8%
   12      1760     15.01    0.8%
   13      1864     14.56    0.7%
   14      1993     11.62    0.5%
   15      2111     12.85    0.6%
   16      2202     9.806    0.4%
   17      2336     3.049    0.1%
   18      2437     14.19    0.5%
   19      2539     15.95    0.6%
   20      2643     16.03    0.6%

Quality and confidence:
param     error
r         0.176

Model:
Time ~=    425.5
    + r    111.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    425.3
    + r    110.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.6     0.192    0.0%
    1     525.5     8.194    1.5%
    2     649.1     5.015    0.7%
    3     756.4     4.395    0.5%
    4     875.9     11.14    1.2%
    5     994.2     13.73    1.3%
    6      1088     5.084    0.4%
    7      1204     8.618    0.7%
    8      1323      14.3    1.0%
    9      1422     14.03    0.9%
   10      1528     12.86    0.8%
   11      1648     13.46    0.8%
   12      1741     10.94    0.6%
   13      1863     15.68    0.8%
   14      1982     10.64    0.5%
   15      2109     17.84    0.8%
   16      2219     10.05    0.4%
   17      2305     13.47    0.5%
   18      2429     12.86    0.5%
   19      2527     13.25    0.5%
   20      2640     13.07    0.4%

Quality and confidence:
param     error
r         0.172

Model:
Time ~=    422.8
    + r    111.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    424.7
    + r    110.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.2     0.281    0.0%
    1     522.8     1.331    0.2%
    2     648.3     2.023    0.3%
    3     754.2     2.467    0.3%
    4     875.5     9.954    1.1%
    5     978.9     1.103    0.1%
    6      1088     3.295    0.3%
    7      1207     12.73    1.0%
    8      1316     11.92    0.9%
    9      1426     13.22    0.9%
   10      1545     11.63    0.7%
   11      1643     14.21    0.8%
   12      1751     11.65    0.6%
   13      1854     12.08    0.6%
   14      1995     11.91    0.5%
   15      2105     11.48    0.5%
   16      2199     10.13    0.4%
   17      2312     8.957    0.3%
   18      2421     10.91    0.4%
   19      2539     9.642    0.3%
   20      2640     13.14    0.4%

Quality and confidence:
param     error
r         0.145

Model:
Time ~=    420.8
    + r    111.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    432.7
    + r      110
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     424.3     6.543    1.5%
    1     536.8     0.878    0.1%
    2       650     8.536    1.3%
    3     760.9      12.3    1.6%
    4     873.6     6.112    0.6%
    5      1000     13.89    1.3%
    6      1095     12.69    1.1%
    7      1212     12.48    1.0%
    8      1322     13.56    1.0%
    9      1433     14.84    1.0%
   10      1528     8.842    0.5%
   11      1636     8.079    0.4%
   12      1778     1.686    0.0%
   13      1874     13.65    0.7%
   14      1981     12.45    0.6%
   15      2100     13.27    0.6%
   16      2194     12.46    0.5%
   17      2322     11.12    0.4%
   18      2404     9.756    0.4%
   19      2541     13.93    0.5%
   20      2624      12.7    0.4%

Quality and confidence:
param     error
r         0.171

Model:
Time ~=      433
    + r    110.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    432.2
    + r    260.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.5     0.172    0.0%
    1     690.3     1.978    0.2%
    2     949.1     2.022    0.2%
    3      1224     10.17    0.8%
    4      1478     6.425    0.4%
    5      1732      5.87    0.3%
    6      2001     10.46    0.5%
    7      2259     6.531    0.2%
    8      2517      6.19    0.2%
    9      2777     10.25    0.3%
   10      3038     7.879    0.2%
   11      3308     9.473    0.2%
   12      3569     21.12    0.5%
   13      3817     13.97    0.3%
   14      4078     7.757    0.1%
   15      4323     11.43    0.2%
   16      4598     9.891    0.2%
   17      4872     8.866    0.1%
   18      5111     5.235    0.1%
   19      5378     19.62    0.3%
   20      5636      6.73    0.1%

Quality and confidence:
param     error
r         0.151

Model:
Time ~=    431.7
    + r    260.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    149.9
    + r    50.26
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     150.1     0.074    0.0%
    1       204     0.102    0.0%
    2       255     1.015    0.3%
    3     295.7     0.683    0.2%
    4     344.4     0.716    0.2%
    5     393.3      2.36    0.5%
    6     445.7     0.278    0.0%
    7     495.1     1.636    0.3%
    8       543     1.939    0.3%
    9     592.1      3.79    0.6%
   10     642.1     4.651    0.7%
   11     705.7     2.015    0.2%
   12       764     11.57    1.5%
   13     818.2     13.76    1.6%
   14     863.6     9.969    1.1%
   15     905.1     2.584    0.2%
   16     954.7     11.26    1.1%
   17     999.7     3.863    0.3%
   18      1051     3.594    0.3%
   19      1106     8.717    0.7%
   20      1161     10.67    0.9%

Quality and confidence:
param     error
r         0.105

Model:
Time ~=      146
    + r    50.59
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    424.6
    + r    98.12
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     424.7      5.64    1.3%
    1     523.9     0.361    0.0%
    2     623.2     0.593    0.0%
    3     728.3      9.21    1.2%
    4     812.2     8.904    1.0%
    5     907.8     8.934    0.9%
    6      1000     1.444    0.1%
    7      1103     1.989    0.1%
    8      1202     10.95    0.9%
    9      1295      3.67    0.2%
   10      1402     13.01    0.9%
   11      1485     7.717    0.5%
   12      1591     13.61    0.8%
   13      1684     14.11    0.8%
   14      1806     11.12    0.6%
   15      1924     15.99    0.8%
   16      2001      11.8    0.5%
   17      2096     11.12    0.5%
   18      2212     3.965    0.1%
   19      2300     20.12    0.8%
   20      2386     13.12    0.5%

Quality and confidence:
param     error
r         0.172

Model:
Time ~=    417.7
    + r    98.76
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    544.2
    + n    38.07
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     510.9     0.254    0.0%
   20      1303     7.296    0.5%
   40      2065     6.825    0.3%
   60      2817     14.41    0.5%
   80      3575     14.15    0.3%
  100      4370      19.1    0.4%
  120      5117     12.77    0.2%
  140      5880     20.58    0.3%
  160      6658     16.24    0.2%
  180      7410     19.21    0.2%
  200      8158        27    0.3%
  220      8924     19.55    0.2%
  240      9687     21.65    0.2%
  260     10430     37.94    0.3%
  280     11190     24.91    0.2%
  300     11950      23.8    0.1%
  320     12730     33.48    0.2%
  340     13500     40.38    0.2%
  360     14260     20.63    0.1%
  380     15000     26.48    0.1%
  400     15780     46.61    0.2%
  420     16520     29.36    0.1%
  440     17300     20.61    0.1%
  460     18040     36.44    0.2%
  480     18850     40.26    0.2%
  500     19580     72.09    0.3%
  520     20320     35.04    0.1%
  540     21070     33.93    0.1%
  560     21850     29.91    0.1%
  580     22630     40.74    0.1%
  600     23400     19.99    0.0%
  620     24140     44.83    0.1%
  640     24920     36.08    0.1%
  660     25640      32.1    0.1%
  680     26630     141.2    0.5%
  700     27220     54.08    0.1%
  720     27930     40.92    0.1%
  740     28680     32.84    0.1%
  760     29520     39.79    0.1%
  780     30240     23.76    0.0%
  800     30990     37.11    0.1%
  820     31770     13.33    0.0%
  840     32560     45.59    0.1%
  860     33290      25.2    0.0%
  880     34040     23.54    0.0%
  900     34810     37.91    0.1%
  920     35580     27.83    0.0%
  940     36340     52.16    0.1%
  960     37080     49.57    0.1%
  980     37870     41.79    0.1%
 1000     38590     33.53    0.0%
 1020     39360     36.73    0.0%

Quality and confidence:
param     error
n         0.007

Model:
Time ~=    543.4
    + n    38.08
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    399.3
    + r    15.15
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     399.7     1.208    0.3%
    1     414.5     0.457    0.1%

Quality and confidence:
param     error
r          0.43

Model:
Time ~=    399.7
    + r     14.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    414.8
    + n    0.625
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     414.2     0.241    0.0%
   20     426.9     0.223    0.0%
   40     441.9     3.976    0.8%
   60     452.2     0.268    0.0%
   80     464.9      0.26    0.0%
  100     477.6     0.542    0.1%
  120     501.1     10.19    2.0%
  140     502.7      0.42    0.0%
  160     515.1     0.318    0.0%
  180     529.5      3.86    0.7%
  200       545     8.204    1.5%
  220     554.9     7.964    1.4%
  240     564.4     0.346    0.0%
  260     583.1     9.811    1.6%
  280     591.2     4.548    0.7%
  300     610.3     7.085    1.1%
  320     616.1     4.299    0.6%
  340     628.4     4.421    0.7%
  360     639.7     0.196    0.0%
  380     655.8     8.971    1.3%
  400     664.3     0.224    0.0%
  420     685.7     11.33    1.6%
  440     689.6     0.333    0.0%
  460     708.8     7.102    1.0%
  480     717.2     8.885    1.2%
  500     732.7     9.623    1.3%
  520     744.8     10.25    1.3%
  540     756.2     7.693    1.0%
  560     765.1     0.886    0.1%
  580     780.9     10.37    1.3%
  600     793.8      9.36    1.1%
  620     805.8     10.96    1.3%
  640     825.3     13.46    1.6%
  660     827.1     0.441    0.0%
  680     852.6     15.95    1.8%
  700     871.6     10.24    1.1%
  720     871.1     13.42    1.5%
  740     890.8     14.74    1.6%
  760     898.4     12.63    1.4%
  780       920      17.8    1.9%
  800       919     9.579    1.0%
  820     936.3     14.64    1.5%
  840     956.7     14.42    1.5%
  860     963.5     14.15    1.4%
  880     973.9     13.84    1.4%
  900     983.8     12.06    1.2%
  920      1005     12.64    1.2%
  940      1011     12.96    1.2%
  960      1027     15.43    1.5%
  980      1036     13.04    1.2%
 1000      1066     14.53    1.3%
 1020      1068     14.67    1.3%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    413.7
    + n    0.639
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.8
    + r    104.4
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.7     0.272    0.0%
    1     513.4     2.557    0.4%

Quality and confidence:
param     error
r         0.857

Model:
Time ~=    407.7
    + r    105.6
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    421.8
    + r    342.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.9     1.691    0.4%
    1     762.1     7.499    0.9%
    2      1117     12.76    1.1%
    3      1456     8.922    0.6%
    4      1786     7.723    0.4%
    5      2142     9.754    0.4%
    6      2479     8.421    0.3%
    7      2818     8.263    0.2%
    8      3157     12.79    0.4%
    9      3510     13.21    0.3%
   10      3864     10.93    0.2%
   11      4205     17.56    0.4%
   12      4526     10.68    0.2%
   13      4873     15.61    0.3%
   14      5203     17.27    0.3%
   15      5539     12.67    0.2%
   16      5876     6.718    0.1%
   17      6275     15.74    0.2%
   18      6615      15.4    0.2%
   19      6945     11.97    0.1%
   20      7318     16.21    0.2%

Quality and confidence:
param     error
r         0.228

Model:
Time ~=      419
    + r    343.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    422.4
    + r    564.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.7     0.169    0.0%
    1     995.2     9.543    0.9%
    2      1552        10    0.6%
    3      2130     13.99    0.6%
    4      2683      6.69    0.2%
    5      3265     13.25    0.4%
    6      3828     13.74    0.3%
    7      4369      11.2    0.2%
    8      4932     12.38    0.2%
    9      5496     14.47    0.2%
   10      6053     18.26    0.3%
   11      6622      13.6    0.2%
   12      7150      18.4    0.2%
   13      7713     20.31    0.2%
   14      8300     22.91    0.2%
   15      8846     18.41    0.2%
   16      9427     14.95    0.1%
   17     10070     27.25    0.2%
   18     10630     21.98    0.2%
   19     11180     30.25    0.2%
   20     11750     25.03    0.2%

Quality and confidence:
param     error
r         0.381

Model:
Time ~=    416.3
    + r    565.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1093
    + t    463.7
    + n    165.1
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3655     13.44    0.3%
    1    16      4242     10.43    0.2%
    2    16      4710     20.12    0.4%
    3    16      5123      16.5    0.3%
    4     0      2926     16.19    0.5%
    4     1      3114     11.71    0.3%
    4     2      3252     10.97    0.3%
    4     3      3430      13.4    0.3%
    4     4      3561     12.64    0.3%
    4     5      3754     10.24    0.2%
    4     6      3890     22.16    0.5%
    4     7      4084     10.51    0.2%
    4     8      4209     7.358    0.1%
    4     9      4379     20.13    0.4%
    4    10      4548     13.57    0.2%
    4    11      4715     21.59    0.4%
    4    12      4918     23.97    0.4%
    4    13      5087     21.19    0.4%
    4    14      5231     13.98    0.2%
    4    15      5402     23.09    0.4%
    4    16      5573     15.05    0.2%

Quality and confidence:
param     error
t         2.379
n         0.469

Model:
Time ~=     1073
    + t    460.5
    + n    165.9
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    164.9
    + r    71.76
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     169.4     0.306    0.1%
    1     232.3      1.71    0.7%
    2     302.1     0.419    0.1%
    3     374.8     0.539    0.1%
    4     456.8       0.9    0.1%
    5     515.5     4.428    0.8%
    6     590.6     1.763    0.2%
    7     660.9     8.113    1.2%
    8     726.2     1.972    0.2%
    9       810     1.157    0.1%
   10     876.3     1.602    0.1%
   11     990.8     1.749    0.1%
   12      1046     9.435    0.9%
   13      1113     10.39    0.9%
   14      1173      10.9    0.9%
   15      1242     13.59    1.0%
   16      1303     10.49    0.8%
   17      1390     11.08    0.7%
   18      1471      8.17    0.5%
   19      1530     10.77    0.7%
   20      1596     14.04    0.8%

Quality and confidence:
param     error
r         0.153

Model:
Time ~=    161.9
    + r    72.25
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    496.6
    + r    380.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.8     0.194    0.0%
    1     914.2     1.599    0.1%
    2      1287     13.71    1.0%
    3      1672     19.74    1.1%
    4      1998     3.047    0.1%
    5      2397     12.17    0.5%
    6      2769     10.67    0.3%
    7      3117      5.59    0.1%
    8      3490     9.233    0.2%
    9      3934     11.92    0.3%
   10      4297     15.59    0.3%
   11      4703     14.48    0.3%
   12      5161     9.163    0.1%
   13      5419     13.33    0.2%
   14      5796     20.69    0.3%
   15      6166     27.57    0.4%
   16      6509     12.67    0.1%
   17      6882     14.65    0.2%
   18      7388     30.64    0.4%
   19      7762     8.981    0.1%
   20      8154     14.77    0.1%

Quality and confidence:
param     error
r         0.554

Model:
Time ~=    488.6
    + r    380.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    807.9
    + n    72.37
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     787.2     12.86    1.6%
    1     881.3     8.497    0.9%
    2     956.5      6.51    0.6%
    3      1039     12.29    1.1%
    4      1097     7.765    0.7%
    5      1153     2.355    0.2%
    6      1270     10.98    0.8%
    7      1322     13.22    0.9%
    8      1387     7.642    0.5%
    9      1458     6.262    0.4%
   10      1538     14.55    0.9%
   11      1604     14.87    0.9%
   12      1668     17.84    1.0%
   13      1752     14.14    0.8%
   14      1839     15.69    0.8%
   15      1901     13.08    0.6%
   16      1954     13.52    0.6%

Quality and confidence:
param     error
n         0.263

Model:
Time ~=    807.7
    + n    72.65
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    195.8
    + r    849.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     423.7     3.039    0.7%
    1      1206     5.682    0.4%
    2      1997      13.3    0.6%
    3      2778     13.67    0.4%
    4      3565     12.74    0.3%
    5      4415     13.17    0.2%
    6      5234     14.88    0.2%
    7      6037     22.57    0.3%
    8      6891     19.82    0.2%
    9      7769     62.35    0.8%
   10      8610     45.25    0.5%
   11      9511     29.83    0.3%
   12     10270     28.67    0.2%
   13     11140      36.8    0.3%
   14     12070     44.37    0.3%
   15     12920     48.81    0.3%
   16     13800     39.86    0.2%
   17     14610     29.01    0.1%
   18     15660     21.24    0.1%
   19     16600     60.79    0.3%
   20     17470     34.23    0.1%

Quality and confidence:
param     error
r         1.461

Model:
Time ~=    189.9
    + r    852.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    311.8
    + r    501.5
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     423.2     2.771    0.6%
    1     880.4     15.86    1.8%
    2      1323      5.04    0.3%
    3      1832     12.78    0.6%
    4      2285     12.87    0.5%
    5      2799     13.12    0.4%
    6      3298     20.04    0.6%
    7      3754     21.78    0.5%
    8      4236     21.33    0.5%
    9      4808     22.41    0.4%
   10      5315     28.45    0.5%
   11      5823      27.9    0.4%
   12      6323     23.23    0.3%
   13      6764     30.91    0.4%
   14      7283     18.43    0.2%
   15      7770     37.64    0.4%
   16      8319     27.69    0.3%
   17      8924     45.66    0.5%
   18      9428     39.59    0.4%
   19      9931     27.16    0.2%
   20     10430     44.88    0.4%

Quality and confidence:
param     error
r         0.742

Model:
Time ~=    301.9
    + r    502.9
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    703.3
    + n    112.5
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     687.2     2.459    0.3%
    1     808.5     3.149    0.3%
    2     931.2     2.646    0.2%
    3      1043     8.534    0.8%
    4      1158     16.72    1.4%
    5      1284     13.69    1.0%
    6      1384     8.594    0.6%
    7      1490     12.48    0.8%
    8      1599     11.64    0.7%
    9      1697     8.116    0.4%
   10      1817     12.48    0.6%
   11      1938     12.79    0.6%
   12      2044      13.9    0.6%
   13      2177     14.97    0.6%
   14      2325     3.773    0.1%
   15      2373     16.74    0.7%
   16      2504     15.96    0.6%

Quality and confidence:
param     error
n         0.297

Model:
Time ~=    699.9
    + n      113
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    299.6
    + r     3536
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.9     0.289    0.0%
    1      3916     16.53    0.4%
    2      7467     34.14    0.4%
    3     10900     16.82    0.1%
    4     14370     50.82    0.3%
    5     17870     30.39    0.1%
    6     21460     46.79    0.2%
    7     24940      35.9    0.1%
    8     28500     69.51    0.2%
    9     32010     46.48    0.1%
   10     35690     43.62    0.1%
   11     39040     71.21    0.1%
   12     42650      78.9    0.1%
   13     46400     64.86    0.1%
   14     49720     61.43    0.1%
   15     53340      65.7    0.1%
   16     56830     56.06    0.0%
   17     60360     47.77    0.0%
   18     64010     60.99    0.0%
   19     67590     79.48    0.1%
   20     71280     71.63    0.1%

Quality and confidence:
param     error
r         1.312

Model:
Time ~=    267.4
    + r     3539
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    39230
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     429.7     4.451    1.0%
    1     39560     28.46    0.0%
    2     78700     83.44    0.1%
    3    117800     143.3    0.1%
    4    156900     81.16    0.0%
    5    196000     92.41    0.0%
    6    234300     93.63    0.0%
    7    273900     194.9    0.0%
    8    312800     147.6    0.0%
    9    352300     192.9    0.0%
   10    391600     126.2    0.0%
   11    430200     137.3    0.0%
   12    472000     196.3    0.0%
   13    511200     246.6    0.0%
   14    548800     205.2    0.0%
   15    588300     177.7    0.0%
   16    627600     454.9    0.0%
   17    666400       292    0.0%
   18    706400       803    0.1%
   19    747700     295.2    0.0%
   20    785200     938.8    0.1%

Quality and confidence:
param     error
r         10.06

Model:
Time ~=        0
    + r    39260
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    39150
    + t     2815
    + i    62.85
    + o    101.4
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    200900     159.1    0.0%
    1     0   960    138600     89.28    0.0%
    1    20   960    139800     95.98    0.0%
    1    40   960    141800     64.51    0.0%
    1    60   960    143100     110.2    0.0%
    1    80   960    144400     78.74    0.0%
    1   100   960    145600     112.2    0.0%
    1   120   960    146800     63.24    0.0%
    1   140   960    148100     62.92    0.0%
    1   160   960    149100     51.45    0.0%
    1   180   960    150500     125.5    0.0%
    1   200   960    151800     108.2    0.0%
    1   220   960    153100     74.86    0.0%
    1   240   960    154300      45.8    0.0%
    1   260   960    155600     98.56    0.0%
    1   280   960    157000     62.27    0.0%
    1   300   960    158100     60.48    0.0%
    1   320   960    159400     78.25    0.0%
    1   340   960    160600     67.15    0.0%
    1   360   960    161900     89.17    0.0%
    1   380   960    163200     115.1    0.0%
    1   400   960    164400     136.3    0.0%
    1   420   960    165700     82.94    0.0%
    1   440   960    167000     101.6    0.0%
    1   460   960    168200     84.71    0.0%
    1   480   960    169700     119.6    0.0%
    1   500   960    170900     48.18    0.0%
    1   520   960    171900     101.3    0.0%
    1   540   960    173100     91.09    0.0%
    1   560   960    174300     89.35    0.0%
    1   580   960    175600     93.25    0.0%
    1   600   960    176900     65.99    0.0%
    1   620   960    178000     77.27    0.0%
    1   640   960    179500     97.12    0.0%
    1   660   960    180700     87.84    0.0%
    1   680   960    181900     80.57    0.0%
    1   700   960    183300     188.5    0.1%
    1   720   960    184500     135.4    0.0%
    1   740   960    185600     114.3    0.0%
    1   760   960    187000     160.9    0.0%
    1   780   960    188200     134.2    0.0%
    1   800   960    189500     60.33    0.0%
    1   820   960    190900     187.3    0.0%
    1   840   960    191800     92.94    0.0%
    1   860   960    193100     63.07    0.0%
    1   880   960    194600     124.6    0.0%
    1   900   960    195800     123.2    0.0%
    1   920   960    196900     56.94    0.0%
    1   940   960    198300     97.65    0.0%
    1   960   960    199500     100.7    0.0%
    1   980   960    200800     72.46    0.0%
    1  1000   960    202300     124.6    0.0%
    1  1020   960    203500     119.6    0.0%
    1  1024     0    106400     77.36    0.0%
    1  1024    19    108400     125.1    0.1%
    1  1024    38    110300     90.38    0.0%
    1  1024    57    112200     83.87    0.0%
    1  1024    76    114300     161.3    0.1%
    1  1024    95    116100     74.06    0.0%
    1  1024   114    118000       108    0.0%
    1  1024   133    120000     122.8    0.1%
    1  1024   152    121900     59.67    0.0%
    1  1024   171    123800     100.2    0.0%
    1  1024   190    126300     998.3    0.7%
    1  1024   209    127500     69.44    0.0%
    1  1024   228    129400     78.75    0.0%
    1  1024   247    131300     74.96    0.0%
    1  1024   266    133300     118.1    0.0%
    1  1024   285    135100     82.58    0.0%
    1  1024   304    137100     95.76    0.0%
    1  1024   323    138900      78.4    0.0%
    1  1024   342    141000     82.81    0.0%
    1  1024   361    142900     115.7    0.0%
    1  1024   380    144700     99.94    0.0%
    1  1024   399    146700     113.8    <truncated>...
```

</details>",10448,2021-12-09T10:42:55Z,0
396,athei,/benchmark runtime pallet pallet_contracts,10448,2021-12-09T18:03:43Z,0
397,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-instantiate-weight"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.72
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.72
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k      2.2
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     64.59         1    1.5%
   20     57.44      0.48    0.8%
   40     94.85     0.434    0.4%
   60     130.8     0.937    0.7%
   80     165.3      1.32    0.7%
  100     202.8     1.688    0.8%
  120     240.5     2.057    0.8%
  140     286.3     1.786    0.6%
  160     322.3     3.031    0.9%
  180       374     1.044    0.2%
  200     410.3     4.579    1.1%
  220     454.1     5.569    1.2%
  240     499.5     2.431    0.4%
  260     536.4     3.386    0.6%
  280     589.2     8.768    1.4%
  300     622.8     5.824    0.9%
  320     676.7     7.773    1.1%
  340     714.8     8.055    1.1%
  360     756.5     3.563    0.4%
  380     797.3     4.009    0.5%
  400     856.5     4.291    0.5%
  420     903.5     2.971    0.3%
  440     944.9     8.637    0.9%
  460     986.8     12.02    1.2%
  480      1031     6.511    0.6%
  500      1071     8.602    0.8%
  520      1123      10.2    0.9%
  540      1165     11.08    0.9%
  560      1210     11.26    0.9%
  580      1268     9.664    0.7%
  600      1302     6.445    0.4%
  620      1340     9.103    0.6%
  640      1386     8.144    0.5%
  660      1428     11.67    0.8%
  680      1501     17.55    1.1%
  700      1537     9.779    0.6%
  720      1573     13.21    0.8%
  740      1623     17.65    1.0%
  760      1670     10.12    0.6%
  780      1695     23.85    1.4%
  800      1738        15    0.8%
  820      1793     17.18    0.9%
  840      1839     13.25    0.7%
  860      1893     16.82    0.8%
  880      1926     13.87    0.7%
  900      1970     20.38    1.0%
  920      2034     14.69    0.7%
  940      2042     19.58    0.9%
  960      2126     30.85    1.4%
  980      2154     18.04    0.8%
 1000      2206      15.6    0.7%
 1020      2232     19.15    0.8%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.208
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      101
    + q    0.307
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.767     0.032    1.1%
   20     84.28     1.203    1.4%
   40     96.61     0.733    0.7%
   60     107.4     1.224    1.1%
   80     118.1     1.451    1.2%
  100     125.6     1.694    1.3%
  120     133.2     1.061    0.7%
  140     145.9      5.35    3.6%
  160     152.8     0.795    0.5%
  180     169.5     4.098    2.4%
  200     171.5     1.889    1.1%
  220     180.3     0.846    0.4%
  240     193.7     3.234    1.6%
  260     180.6      4.09    2.2%
  280     208.1     1.134    0.5%
  300     210.2     1.923    0.9%
  320     221.6     2.746    1.2%
  340     210.5     10.82    5.1%
  360     215.3     8.012    3.7%
  380       224     6.384    2.8%
  400     224.8     2.513    1.1%
  420       234     4.832    2.0%
  440     237.7     3.339    1.4%
  460     240.7     1.678    0.6%
  480     244.3     3.009    1.2%
  500     253.8     3.405    1.3%
  520     261.7     2.007    0.7%
  540     266.9     1.676    0.6%
  560     275.3     2.894    1.0%
  580     278.6     2.818    1.0%
  600     289.6     6.092    2.1%
  620     298.6     3.174    1.0%
  640     299.5     2.651    0.8%
  660       307     5.107    1.6%
  680     313.5     3.904    1.2%
  700     320.1      2.21    0.6%
  720     321.9     1.542    0.4%
  740     327.2     1.324    0.4%
  760     337.2     1.296    0.3%
  780     345.5     2.078    0.6%
  800     350.4     1.668    0.4%
  820     359.4     5.933    1.6%
  840     359.5     1.074    0.2%
  860     364.5     1.033    0.2%
  880     368.2     0.891    0.2%
  900     377.1     1.954    0.5%
  920     381.5     2.354    0.6%
  940     385.3     1.113    0.2%
  960     390.7     1.205    0.3%
  980     395.5     1.482    0.3%
 1000     407.7      9.76    2.3%
 1020     406.4     1.876    0.4%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    95.83
    + q    0.317
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.68
    + c     91.1
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     53.85     0.207    0.3%
    2     237.8     1.716    0.7%
    4     416.2     4.979    1.1%
    6     579.4     0.424    0.0%
    8     772.2      9.11    1.1%
   10     943.8     12.41    1.3%
   12      1110     11.33    1.0%
   14      1322     13.17    0.9%
   16      1488     13.07    0.8%
   18      1684     19.16    1.1%
   20      1844     12.68    0.6%
   22      1995     10.75    0.5%
   24      2158     11.51    0.5%
   26      2436     13.49    0.5%
   28      2596     14.29    0.5%
   30      2782      7.01    0.2%
   32      2930     13.21    0.4%
   34      3148     15.06    0.4%
   36      3300     13.99    0.4%
   38      3482     21.85    0.6%
   40      3638     4.505    0.1%
   42      3791     14.45    0.3%
   44      3969     11.24    0.2%
   46      4129     8.355    0.2%
   48      4290     16.44    0.3%
   50      4683      15.4    0.3%
   52      4833     17.54    0.3%
   54      4999     17.84    0.3%
   56      5188     32.44    0.6%
   58      5335     14.51    0.2%
   60      5510      27.8    0.5%
   62      5641     12.34    0.2%
   64      5818     12.94    0.2%
   66      6070     9.569    0.1%
   68      6247     18.78    0.3%
   70      6427     16.65    0.2%
   72      6563     14.03    0.2%
   74      6750     16.35    0.2%
   76      6914      17.6    0.2%
   78      7054     17.66    0.2%
   80      7219     15.74    0.2%
   82      7388     16.15    0.2%
   84      7663     51.95    0.6%
   86      7744     18.66    0.2%
   88      7923     22.54    0.2%
   90      8061     22.57    0.2%
   92      8238     25.77    0.3%
   94      8619     30.36    0.3%
   96      8604     14.76    0.1%
   98      9132     9.921    0.1%
  100      9322     24.12    0.2%
  102      9486     30.85    0.3%
  104      9653     38.03    0.3%
  106      9869     31.68    0.3%
  108      9987     27.03    0.2%
  110     10140     27.88    0.2%
  112     10290     23.19    0.2%
  114     10490     18.27    0.1%
  116     10630     32.02    0.3%
  118     10810     12.81    0.1%
  120     10960     30.39    0.2%
  122     11150     16.41    0.1%
  124     11320     40.71    0.3%
  126     11450     26.43    0.2%
  128     11610        21    0.1%

Quality and confidence:
param     error
c         0.085

Model:
Time ~=    17.17
    + c     91.3
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      405
    + c    92.12
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     426.3     0.344    0.0%
    2     619.9     1.839    0.2%
    4     798.9     2.702    0.3%
    6     962.6     12.93    1.3%
    8      1165     13.43    1.1%
   10      1331     13.34    1.0%
   12      1498      11.6    0.7%
   14      1718     11.99    0.6%
   16      1859     4.312    0.2%
   18      2040     10.34    0.5%
   20      2208     16.44    0.7%
   22      2371     12.16    0.5%
   24      2528     11.54    0.4%
   26      2854       5.3    0.1%
   28      3017     17.73    0.5%
   30      3221     13.97    0.4%
   32      3319     15.74    0.4%
   34      3589     11.33    0.3%
   36      3680     13.04    0.3%
   38      3850     15.86    0.4%
   40      4004     11.11    0.2%
   42      4153     24.36    0.5%
   44      4313     10.08    0.2%
   46      4476     17.13    0.3%
   48      4656      15.1    0.3%
   50      5115     14.68    0.2%
   52      5286     14.93    0.2%
   54      5431     24.42    0.4%
   56      5599     13.13    0.2%
   58      5762     16.15    0.2%
   60      5916     14.69    0.2%
   62      6100     17.61    0.2%
   64      6254     16.96    0.2%
   66      6605      25.8    0.3%
   68      6758     15.69    0.2%
   70      6783     22.66    0.3%
   72      6942     13.41    0.1%
   74      7099     21.44    0.3%
   76      7253     10.33    0.1%
   78      7423     24.06    0.3%
   80      7583     27.73    0.3%
   82      7737     13.72    0.1%
   84      7913      29.3    0.3%
   86      8105     36.69    0.4%
   88      8220     17.85    0.2%
   90      8393     27.09    0.3%
   92      8946     14.59    0.1%
   94      8890     23.04    0.2%
   96      8875     21.87    0.2%
   98      9663     23.57    0.2%
  100      9844     37.33    0.3%
  102      9992     26.87    0.2%
  104     10150     21.25    0.2%
  106     10320     24.49    0.2%
  108     10500     40.74    0.3%
  110     10640     31.96    0.3%
  112     10800     31.01    0.2%
  114     10960     17.86    0.1%
  116     11120     32.22    0.2%
  118     11280     30.17    0.2%
  120     11450      38.2    0.3%
  122     11900      19.6    0.1%
  124     11800     43.87    0.3%
  126     11970      32.8    0.2%
  128     12080      17.9    0.1%

Quality and confidence:
param     error
c         0.137

Model:
Time ~=    371.8
    + c    92.31
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    526.4
    + c    210.6
    + s    2.068
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2622     19.52    0.7%
    1  1024      2878     16.14    0.5%
    2  1024      3050     16.17    0.5%
    3  1024      3269      11.1    0.3%
    4  1024      3470     14.04    0.4%
    5  1024      3693     12.69    0.3%
    6  1024      3883     11.59    0.2%
    7  1024      4129     24.36    0.5%
    8  1024      4289     13.73    0.3%
    9  1024      4550     17.79    0.3%
   10  1024      4735     16.88    0.3%
   11  1024      4930      16.5    0.3%
   12  1024      5127     24.87    0.4%
   13  1024      5379     13.94    0.2%
   14  1024      5568     14.45    0.2%
   15  1024      5756     13.28    0.2%
   16  1024      5936     13.84    0.2%
   17  1024      6353     49.63    0.7%
   18  1024      6487     26.68    0.4%
   19  1024      6673     22.66    0.3%
   20  1024      6860     32.87    0.4%
   21  1024      7054     24.95    0.3%
   22  1024      7248     18.09    0.2%
   23  1024      7437     28.48    0.3%
   24  1024      7593      32.5    0.4%
   25  1024      8018     28.44    0.3%
   26  1024      8155     23.96    0.2%
   27  1024      8333     24.55    0.2%
   28  1024      8541     30.53    0.3%
   29  1024      8703     17.23    0.1%
   30  1024      8931     20.52    0.2%
   31  1024      9095     8.072    0.0%
   32  1024      9318        39    0.4%
   33  1024      9748     12.42    0.1%
   34  1024      9958     36.91    0.3%
   35  1024     10120     19.59    0.1%
   36  1024     10330     21.68    0.2%
   37  1024     10510     26.79    0.2%
   38  1024     10700     30.46    0.2%
   39  1024     10930      53.5    0.4%
   40  1024     11090     32.88    0.2%
   41  1024     11300     24.67    0.2%
   42  1024     11430     20.41    0.1%
   43  1024     11650     27.33    0.2%
   44  1024     11850     40.54    0.3%
   45  1024     12000     21.44    0.1%
   46  1024     12220      32.9    0.2%
   47  1024     12400     42.75    0.3%
   48  1024     12570     25.28    0.2%
   49  1024     13130     33.74    0.2%
   50  1024     13310     40.01    0.3%
   51  1024     13590     31.99    0.2%
   52  1024     13660     22.35    0.1%
   53  1024     13870     28.61    0.2%
   54  1024     14060      38.1    0.2%
   55  1024     14370     90.92    0.6%
   56  1024     14430     27.95    0.1%
   57  1024     14610     25.77    0.1%
   58  1024     14940     58.26    0.3%
   59  1024     15030      34.1    0.2%
   60  1024     15170     32.02    0.2%
   61  1024     15380     48.56    0.3%
   62  1024     15550        36    0.2%
   63  1024     15760     33.59    0.2%
   64     0     13790     34.81    0.2%
   64    20     13890     56.91    0.4%
   64    40     13910      27.9    0.2%
   64    60     13930     34.74    0.2%
   64    80     14030     51.35    0.3%
   64   100     14000     21.63    0.1%
   64   120     14050      15.2    0.1%
   64   140     14100      45.4    0.3%
   64   160     14110     31.52    0.2%
   64   180     14180     38.43    0.2%
   64   200     14230      36.5    0.2%
   64   220     14290     37.82    0.2%
   64   240     14460     31.61    0.2%
   64   260     14330     32.87    0.2%
   64   280     14430     28.36    0.1%
   64   300     14430     31.72    0.2%
   64   320     14620     49.51    0.3%
   64   340     14520     23.09    0.1%
   64   360     14570     53.76    0.3%
   64   380     14600     41.34    0.2%
   64   400     14630     23.07    0.1%
   64   420     14830     28.41    0.1%
   64   440     14730     24.43    0.1%
   64   460     14770     35.12    0.2%
   64   480     14780     21.74    0.1%
   64   500     14840     46.85    0.3%
   64   520     14880     27.74    0.1%
   64   540     14950      46.7    0.3%
   64   560     14970     29.48    0.1%
   64   580     15040     47.68    0.3%
   64   600     15050     32.23    0.2%
   64   620     15060     29.82    0.1%
   64   640     15120     35.53    0.2%
   64   660     15170     38.42    0.2%
   64   680     15180     25.78    0.1%
   64   700     15270     20.92    0.1%
   64   720     15420     42.36    0.2%
   64   740     15360     67.27    0.4%
   64   760     15380     24.34    0.1%
   64   780     15440     44.18    0.2%
   64   800     15460      34.9    0.2%
   64   820     15670        52    0.3%
   64   840     15610     49.66    0.3%
   64   860     15560     36.33    0.2%
   64   880     15610     34.07    0.2%
   64   900     15660     31.36    0.2%
   64   920     15690     52.97    0.3%
   64   940     15730     32.99    0.2%
   64   960     15890      31.3    0.1%
   64   980     15840     44.02    0.2%
   64  1000     15870      31.1    0.1%
   64  1020     15900     42.82    0.2%
   64  1024     16070     47.12    0.2%

Quality and confidence:
param     error
c         0.154
s          0.01

Model:
Time ~=    429.1
    + c    208.7
    + s    2.203
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    238.9
    + s    1.977
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     228.3     2.852    1.2%
   20     279.8     5.223    1.8%
   40     321.7     11.17    3.4%
   60     356.1     0.696    0.1%
   80     395.8     0.352    0.0%
  100     435.8     0.765    0.1%
  120     474.6     0.555    0.1%
  140     514.9     0.177    0.0%
  160     562.6     11.44    2.0%
  180     595.7     4.182    0.7%
  200     639.1     6.744    1.0%
  220     681.4     14.44    2.1%
  240     717.9     12.03    1.6%
  260     763.3     8.892    1.1%
  280     796.4      9.77    1.2%
  300     839.3     14.03    1.6%
  320     876.7     11.72    1.3%
  340     933.5     15.16    1.6%
  360       963     16.16    1.6%
  380      1013     13.14    1.2%
  400      1052     17.77    1.6%
  420      1074     10.16    0.9%
  440      1117     15.39    1.3%
  460      1158     14.11    1.2%
  480      1204     17.63    1.4%
  500      1236     14.32    1.1%
  520      1266     15.81    1.2%
  540      1309     15.41    1.1%
  560      1358     12.51    0.9%
  580      1386     15.08    1.0%
  600      1421     13.24    0.9%
  620      1462     11.34    0.7%
  640      1498     10.97    0.7%
  660      1545     15.51    1.0%
  680      1592     18.18    1.1%
  700      1622     12.48    0.7%
  720      1665     15.98    0.9%
  740      1709     16.47    0.9%
  760      1754     14.31    0.8%
  780      1795     14.72    0.8%
  800      1828     12.98    0.7%
  820      1863     14.93    0.8%
  840      1908     19.31    1.0%
  860      1931     9.679    0.5%
  880      1995     13.59    0.6%
  900      2041     8.422    0.4%
  920      2059     14.06    0.6%
  940      2119     14.41    0.6%
  960      2154     15.25    0.7%
  980      2181     10.78    0.4%
 1000      2232     13.12    0.5%
 1020      2265     13.85    0.6%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    241.1
    + s    1.986
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    173.6
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    173.6
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    92.84
    + c     91.5
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0      89.7     0.202    0.2%
    1     186.6     0.755    0.4%
    2     276.4      0.65    0.2%
    3     372.2       3.5    0.9%
    4     455.2     0.638    0.1%
    5     541.9     4.712    0.8%
    6     627.6     10.63    1.6%
    7     733.9     3.648    0.4%
    8     822.8     12.16    1.4%
    9     912.9     14.11    1.5%
   10     994.4     16.09    1.6%
   11      1088     12.71    1.1%
   12      1163     15.91    1.3%
   13      1292     11.89    0.9%
   14      1378     15.63    1.1%
   15      1472     12.05    0.8%
   16      1565     6.697    0.4%
   17      1669     6.684    0.4%
   18      1741     16.02    0.9%
   19      1822     17.06    0.9%
   20      1907     12.19    0.6%
   21      1995     15.86    0.7%
   22      2065     16.03    0.7%
   23      2157     19.03    0.8%
   24      2236     16.62    0.7%
   25      2434     4.756    0.1%
   26      2515      15.8    0.6%
   27      2608     19.98    0.7%
   28      2681     8.958    0.3%
   29      2755     8.874    0.3%
   30      2840      11.5    0.4%
   31      2912     15.68    0.5%
   32      3005     17.99    0.5%
   33      3121     14.49    0.4%
   34      3223     12.34    0.3%
   35      3286     17.45    0.5%
   36      3393     9.273    0.2%
   37      3469     23.83    0.6%
   38      3547     8.356    0.2%
   39      3634     13.12    0.3%
   40      3706     12.87    0.3%
   41      3781      14.5    0.3%
   42      3889     13.65    0.3%
   43      3964     13.27    0.3%
   44      4052     13.44    0.3%
   45      4135     8.889    0.2%
   46      4209     15.96    0.3%
   47      4295     10.61    0.2%
   48      4383        19    0.4%
   49      4677      11.5    0.2%
   50      4776     14.51    0.3%
   51      4843      11.7    0.2%
   52      4927     22.07    0.4%
   53      4988     12.82    0.2%
   54      5105     17.99    0.3%
   55      5167     19.15    0.3%
   56      5254     15.35    0.2%
   57      5338     14.09    0.2%
   58      5417     16.48    0.3%
   59      5513     16.87    0.3%
   60      5572     9.468    0.1%
   61      5685     35.56    0.6%
   62      5747     16.23    0.2%
   63      5835     19.34    0.3%
   64      5931      19.9    0.3%

Quality and confidence:
param     error
c         0.093

Model:
Time ~=     84.5
    + c    91.69
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     39.4
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     39.4
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    425.2
    + r    113.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.2      0.35    0.0%
    1     537.7     0.099    0.0%
    2     658.4     0.685    0.1%
    3     767.5     3.943    0.5%
    4     870.6     8.252    0.9%
    5      1001     12.56    1.2%
    6      1094     9.887    0.9%
    7      1224     12.41    1.0%
    8      1333     13.08    0.9%
    9      1446     14.62    1.0%
   10      1567     10.73    0.6%
   11      1664     10.37    0.6%
   12      1783     12.66    0.7%
   13      1921     9.673    0.5%
   14      2017     10.54    0.5%
   15      2138     14.65    0.6%
   16      2239     10.19    0.4%
   17      2352     13.38    0.5%
   18      2477     8.624    0.3%
   19      2622      6.67    0.2%
   20      2689     11.03    0.4%

Quality and confidence:
param     error
r         0.168

Model:
Time ~=    421.8
    + r    114.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    429.2
    + r    112.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     423.1     3.853    0.9%
    1     538.7     1.943    0.3%
    2     654.5     0.441    0.0%
    3     781.8     13.55    1.7%
    4       883     14.75    1.6%
    5     978.8      4.04    0.4%
    6      1091     8.767    0.8%
    7      1232     12.37    1.0%
    8      1338     12.21    0.9%
    9      1455      13.3    0.9%
   10      1546     6.424    0.4%
   11      1688     10.45    0.6%
   12      1783     14.12    0.7%
   13      1889     12.09    0.6%
   14      2021     11.43    0.5%
   15      2133     14.88    0.6%
   16      2247     11.41    0.5%
   17      2349     15.88    0.6%
   18      2470     10.06    0.4%
   19      2571      11.9    0.4%
   20      2683     12.45    0.4%

Quality and confidence:
param     error
r         0.167

Model:
Time ~=    428.1
    + r    113.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    427.4
    + r    111.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.6      0.08    0.0%
    1     538.9     0.538    0.0%
    2       656     6.555    0.9%
    3     765.9     7.745    1.0%
    4     864.4     1.809    0.2%
    5     983.4     12.98    1.3%
    6      1113     10.27    0.9%
    7      1223     16.36    1.3%
    8      1326     15.33    1.1%
    9      1429     9.478    0.6%
   10      1551     15.83    1.0%
   11      1646     10.67    0.6%
   12      1767     14.94    0.8%
   13      1862     10.39    0.5%
   14      2016     16.25    0.8%
   15      2122     14.31    0.6%
   16      2211     8.531    0.3%
   17      2335     13.35    0.5%
   18      2446     11.93    0.4%
   19      2568     16.74    0.6%
   20      2686     17.71    0.6%

Quality and confidence:
param     error
r         0.182

Model:
Time ~=    424.4
    + r    112.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    435.1
    + r    307.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.8     0.487    0.1%
    1     737.1     2.196    0.2%
    2      1058      11.5    1.0%
    3      1368     12.68    0.9%
    4      1669     7.444    0.4%
    5      1959     12.82    0.6%
    6      2275     14.63    0.6%
    7      2588     10.79    0.4%
    8      2889     13.37    0.4%
    9      3203     11.95    0.3%
   10      3511     11.75    0.3%
   11      3803      12.8    0.3%
   12      4105     16.52    0.4%
   13      4413     18.24    0.4%
   14      4743     14.21    0.2%
   15      5073     18.84    0.3%
   16      5373     11.96    0.2%
   17      5645     13.08    0.2%
   18      5952     11.81    0.1%
   19      6274      19.9    0.3%
   20      6572     14.68    0.2%

Quality and confidence:
param     error
r         0.206

Model:
Time ~=    433.9
    + r    307.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    426.8
    + r    113.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.5     0.221    0.0%
    1     525.7     1.742    0.3%
    2     653.1     0.572    0.0%
    3     770.3     11.11    1.4%
    4     880.2     5.829    0.6%
    5      1020     16.87    1.6%
    6      1101      9.32    0.8%
    7      1234     14.85    1.2%
    8      1340     14.14    1.0%
    9      1460     15.82    1.0%
   10      1597     5.519    0.3%
   11      1670     15.94    0.9%
   12      1790     13.94    0.7%
   13      1910     15.71    0.8%
   14      2024     14.65    0.7%
   15      2140     12.18    0.5%
   16      2232     11.61    0.5%
   17      2359     11.06    0.4%
   18      2456     13.41    0.5%
   19      2567     15.34    0.5%
   20      2704     9.199    0.3%

Quality and confidence:
param     error
r         0.203

Model:
Time ~=    428.7
    + r    113.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    424.6
    + r      113
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.7     0.212    0.0%
    1     524.9     0.337    0.0%
    2     651.2     0.372    0.0%
    3     766.1     8.842    1.1%
    4     875.9     1.882    0.2%
    5      1008     13.63    1.3%
    6      1115     13.52    1.2%
    7      1222     11.38    0.9%
    8      1333     11.23    0.8%
    9      1438     9.755    0.6%
   10      1559     14.16    0.9%
   11      1662     13.19    0.7%
   12      1770     12.63    0.7%
   13      1896     7.332    0.3%
   14      2039     15.33    0.7%
   15      2130     15.41    0.7%
   16      2248     10.55    0.4%
   17      2353     10.31    0.4%
   18      2450     10.96    0.4%
   19      2572      8.88    0.3%
   20      2679     10.44    0.3%

Quality and confidence:
param     error
r         0.174

Model:
Time ~=    423.7
    + r    113.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    426.3
    + r    113.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.5      0.22    0.0%
    1     524.3     0.334    0.0%
    2       662     10.68    1.6%
    3     762.9      4.07    0.5%
    4     893.5     12.94    1.4%
    5      1005     15.08    1.4%
    6      1100     12.72    1.1%
    7      1240      14.2    1.1%
    8      1340      12.8    0.9%
    9      1438     11.85    0.8%
   10      1552     12.69    0.8%
   11      1666     13.22    0.7%
   12      1762     6.609    0.3%
   13      1885     11.83    0.6%
   14      2021     12.99    0.6%
   15      2127     17.26    0.8%
   16      2248     8.768    0.3%
   17      2386     8.226    0.3%
   18      2456     16.09    0.6%
   19      2606     17.58    0.6%
   20      2675     10.91    0.4%

Quality and confidence:
param     error
r          0.22

Model:
Time ~=    423.2
    + r    113.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    433.2
    + r    111.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     422.2     1.198    0.2%
    1       538     2.092    0.3%
    2       657     7.488    1.1%
    3     766.5     11.17    1.4%
    4     881.2     9.095    1.0%
    5      1009     10.07    0.9%
    6      1112      12.7    1.1%
    7      1228     12.35    1.0%
    8      1333     12.44    0.9%
    9      1441     14.73    1.0%
   10      1544     13.04    0.8%
   11      1660     13.48    0.8%
   12      1769     11.78    0.6%
   13      1875     12.89    0.6%
   14      1999     12.82    0.6%
   15      2112     14.32    0.6%
   16      2206     7.194    0.3%
   17      2338     10.99    0.4%
   18      2432     12.97    0.5%
   19      2554     9.597    0.3%
   20      2667     13.59    0.5%

Quality and confidence:
param     error
r         0.157

Model:
Time ~=    435.2
    + r    111.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    434.1
    + r    260.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.7     0.315    0.0%
    1     691.6     6.144    0.8%
    2     959.5     14.83    1.5%
    3      1220     17.49    1.4%
    4      1476     8.834    0.5%
    5      1733     13.68    0.7%
    6      2006     10.93    0.5%
    7      2258        14    0.6%
    8      2522     8.942    0.3%
    9      2778     9.897    0.3%
   10      3032     9.489    0.3%
   11      3315     11.03    0.3%
   12      3578     14.48    0.4%
   13      3824     9.779    0.2%
   14      4080     12.22    0.2%
   15      4353     18.29    0.4%
   16      4603     14.38    0.3%
   17      4883     16.64    0.3%
   18      5120      15.8    0.3%
   19      5375     19.68    0.3%
   20      5630      19.8    0.3%

Quality and confidence:
param     error
r         0.193

Model:
Time ~=    432.8
    + r    260.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    152.6
    + r       52
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     151.4     0.181    0.1%
    1     205.1     0.243    0.1%
    2     258.7     0.707    0.2%
    3     306.8     11.97    3.9%
    4     349.2     0.947    0.2%
    5       399     0.385    0.0%
    6     457.6     1.239    0.2%
    7     508.4     2.358    0.4%
    8     562.6     7.431    1.3%
    9       608      1.13    0.1%
   10     666.4     6.752    1.0%
   11     720.5     7.328    1.0%
   12     791.3     2.057    0.2%
   13     841.5     1.585    0.1%
   14     893.7     0.942    0.1%
   15     922.6     6.563    0.7%
   16     980.4     11.44    1.1%
   17      1046      12.4    1.1%
   18      1079     14.79    1.3%
   19      1140     8.892    0.7%
   20      1192     12.35    1.0%

Quality and confidence:
param     error
r         0.124

Model:
Time ~=    147.3
    + r    52.33
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    427.9
    + r    99.72
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.5     0.345    0.0%
    1       527      7.97    1.5%
    2       628     0.713    0.1%
    3     737.9     6.449    0.8%
    4     815.9       4.7    0.5%
    5     911.2     1.985    0.2%
    6      1020     10.83    1.0%
    7      1134      12.6    1.1%
    8      1228     14.12    1.1%
    9      1319     11.48    0.8%
   10      1424     13.81    0.9%
   11      1516     10.71    0.7%
   12      1612     13.57    0.8%
   13      1710     12.72    0.7%
   14      1844     10.42    0.5%
   15      1933     14.71    0.7%
   16      2025     15.26    0.7%
   17      2168      13.1    0.6%
   18      2209     9.737    0.4%
   19      2336     21.65    0.9%
   20      2421     8.961    0.3%

Quality and confidence:
param     error
r         0.199

Model:
Time ~=      422
    + r    100.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    541.7
    + n    38.07
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     518.1        10    1.9%
   20      1295     15.34    1.1%
   40      2064     12.75    0.6%
   60      2823     1.327    0.0%
   80      3593     11.71    0.3%
  100      4349      10.1    0.2%
  120      5103     12.79    0.2%
  140      5881     23.38    0.3%
  160      6644     23.62    0.3%
  180      7438     17.66    0.2%
  200      8163     24.31    0.2%
  220      8923     22.87    0.2%
  240      9677     19.05    0.1%
  260     10450     38.12    0.3%
  280     11200      25.9    0.2%
  300     11960     45.61    0.3%
  320     12840      71.4    0.5%
  340     13490     26.85    0.1%
  360     14230     30.35    0.2%
  380     15010     36.04    0.2%
  400     15760     39.45    0.2%
  420     16500     30.81    0.1%
  440     17310     33.83    0.1%
  460     18070      60.7    0.3%
  480     18800     27.47    0.1%
  500     19590     44.57    0.2%
  520     20380     39.93    0.1%
  540     21110     23.19    0.1%
  560     21840     19.28    0.0%
  580     22830     178.9    0.7%
  600     23370     29.21    0.1%
  620     24130     26.06    0.1%
  640     24890     30.71    0.1%
  660     25640     15.51    0.0%
  680     26420     38.56    0.1%
  700     27170     45.25    0.1%
  720     27970     43.59    0.1%
  740     28710     62.55    0.2%
  760     29490     43.88    0.1%
  780     30400     194.1    0.6%
  800     30990     53.89    0.1%
  820     31780     52.75    0.1%
  840     32540     55.75    0.1%
  860     33300     28.42    0.0%
  880     34040     32.35    0.0%
  900     34850     93.53    0.2%
  920     35590     43.19    0.1%
  940     36330     44.51    0.1%
  960     37070        44    0.1%
  980     37980     67.31    0.1%
 1000     38620     21.98    0.0%
 1020     39360      29.8    0.0%

Quality and confidence:
param     error
n          0.01

Model:
Time ~=    543.9
    + n    38.09
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      399
    + r    15.42
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     398.9     0.156    0.0%
    1     414.7     1.243    0.2%

Quality and confidence:
param     error
r         0.417

Model:
Time ~=    398.9
    + r    15.76
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      416
    + n    0.624
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       416     1.436    0.3%
   20     428.5     0.561    0.1%
   40     440.8     0.327    0.0%
   60     453.5     0.268    0.0%
   80     465.9     0.223    0.0%
  100     478.4     0.144    0.0%
  120     491.1     0.216    0.0%
  140       507     7.263    1.4%
  160     515.7      0.28    0.0%
  180     530.5     4.839    0.9%
  200     550.2     12.43    2.2%
  220     553.4      0.26    0.0%
  240     568.8      6.29    1.1%
  260     583.9     10.37    1.7%
  280     593.6     8.008    1.3%
  300     614.9     12.87    2.0%
  320     621.4     11.77    1.8%
  340     634.9     13.13    2.0%
  360     640.8     0.251    0.0%
  380     669.8     16.44    2.4%
  400     665.8      0.34    0.0%
  420       678     0.187    0.0%
  440     701.9     16.68    2.3%
  460     709.5     12.71    1.7%
  480     727.5     15.39    2.1%
  500     741.8      16.5    2.2%
  520       747     10.64    1.4%
  540     759.7     13.17    1.7%
  560     769.2     11.36    1.4%
  580     784.7     12.86    1.6%
  600     795.8     11.15    1.4%
  620     807.3      8.91    1.1%
  640     819.4     8.017    0.9%
  660     830.9     6.215    0.7%
  680     843.9     10.89    1.2%
  700       877     13.34    1.5%
  720     872.2     11.13    1.2%
  740     887.2     13.12    1.4%
  760     899.2     13.44    1.4%
  780     916.5     15.29    1.6%
  800     918.6     8.941    0.9%
  820     941.4     14.08    1.4%
  840     951.7     14.81    1.5%
  860     963.1     13.27    1.3%
  880     965.2      0.36    0.0%
  900     980.4     8.191    0.8%
  920      1010     13.65    1.3%
  940      1017     15.36    1.5%
  960      1024     15.01    1.4%
  980      1037     14.94    1.4%
 1000      1052     12.81    1.2%
 1020      1068     13.66    1.2%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    416.8
    + n    0.635
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    408.3
    + r    101.8
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.4     0.299    0.0%
    1     510.5     0.681    0.1%

Quality and confidence:
param     error
r         0.248

Model:
Time ~=    408.4
    + r    102.1
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    416.2
    + r    341.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       421     0.335    0.0%
    1     754.9     10.68    1.4%
    2      1113     12.16    1.0%
    3      1444     12.16    0.8%
    4      1778     9.496    0.5%
    5      2119     14.29    0.6%
    6      2461     6.866    0.2%
    7      2789     15.91    0.5%
    8      3134      8.23    0.2%
    9      3508     15.47    0.4%
   10      3845     13.27    0.3%
   11      4152      10.4    0.2%
   12      4500     19.63    0.4%
   13      4820      16.7    0.3%
   14      5151     21.23    0.4%
   15      5511     23.06    0.4%
   16      5886     16.92    0.2%
   17      6244     17.93    0.2%
   18      6592     21.99    0.3%
   19      6930     19.86    0.2%
   20      7259     23.71    0.3%

Quality and confidence:
param     error
r         0.289

Model:
Time ~=    410.8
    + r    341.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    425.6
    + r    571.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.3     0.133    0.0%
    1      1006     10.32    1.0%
    2      1568     14.89    0.9%
    3      2153      10.5    0.4%
    4      2709      9.26    0.3%
    5      3291     16.05    0.4%
    6      3862        22    0.5%
    7      4426     18.15    0.4%
    8      4995     22.32    0.4%
    9      5586     22.51    0.4%
   10      6133     13.28    0.2%
   11      6720      12.7    0.1%
   12      7301     35.66    0.4%
   13      7812     14.32    0.1%
   14      8396     28.13    0.3%
   15      8998     30.12    0.3%
   16      9486      42.2    0.4%
   17     10160     37.36    0.3%
   18     10730     46.08    0.4%
   19     11340     23.15    0.2%
   20     11850     34.75    0.2%

Quality and confidence:
param     error
r         0.424

Model:
Time ~=      425
    + r    571.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1093
    + t      456
    + n    165.5
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3639     18.02    0.4%
    1    16      4256     22.29    0.5%
    2    16      4657     13.76    0.2%
    3    16      5129     9.625    0.1%
    4     0      2884     13.82    0.4%
    4     1      3091     6.303    0.2%
    4     2      3227     16.29    0.5%
    4     3      3374     10.44    0.3%
    4     4      3533     11.67    0.3%
    4     5      3686     8.854    0.2%
    4     6      3849     16.73    0.4%
    4     7      3989     22.49    0.5%
    4     8      4145     25.18    0.6%
    4     9      4412      29.9    0.6%
    4    10      4547     21.38    0.4%
    4    11      4702     15.32    0.3%
    4    12      4816     14.17    0.2%
    4    13      5038     22.24    0.4%
    4    14      5192     11.94    0.2%
    4    15      5368     20.54    0.3%
    4    16      5552     13.37    0.2%

Quality and confidence:
param     error
t         3.004
n         0.592

Model:
Time ~=     1055
    + t    453.9
    + n    166.7
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    166.5
    + r       74
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     169.5     0.089    0.0%
    1     233.5     0.262    0.1%
    2     306.1     0.223    0.0%
    3     382.8     0.852    0.2%
    4     467.4     3.939    0.8%
    5     519.6     0.791    0.1%
    6     601.5     0.432    0.0%
    7     672.7     5.361    0.7%
    8     746.6     12.63    1.6%
    9     848.7     1.347    0.1%
   10       884     11.98    1.3%
   11     997.2     13.19    1.3%
   12      1062     10.92    1.0%
   13      1134     13.47    1.1%
   14      1194     1.468    0.1%
   15      1307     12.54    0.9%
   16      1349      9.07    0.6%
   17      1423     13.68    0.9%
   18      1500      12.4    0.8%
   19      1559     8.488    0.5%
   20      1643     10.91    0.6%

Quality and confidence:
param     error
r         0.169

Model:
Time ~=    161.1
    + r    74.37
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    511.3
    + r    370.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     423.1     1.274    0.3%
    1     917.5     12.26    1.3%
    2      1270      8.18    0.6%
    3      1643     16.23    0.9%
    4      1978     12.31    0.6%
    5      2366     20.54    0.8%
    6      2742     20.89    0.7%
    7      3071     12.94    0.4%
    8      3445     19.27    0.5%
    9      3867     14.94    0.3%
   10      4211     11.89    0.2%
   11      4628     6.751    0.1%
   12      4958     14.56    0.2%
   13      5293     14.27    0.2%
   14      5689     18.86    0.3%
   15      6024     20.03    0.3%
   16      6398     10.91    0.1%
   17      6742     20.71    0.3%
   18      7256     18.43    0.2%
   19      7595     14.85    0.1%
   20      7936     14.34    0.1%

Quality and confidence:
param     error
r         0.473

Model:
Time ~=    500.1
    + r    371.2
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    799.1
    + n    73.65
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     779.7     10.95    1.4%
    1     874.6     8.509    0.9%
    2     951.9      9.16    0.9%
    3      1020     7.077    0.6%
    4      1112     9.743    0.8%
    5      1160     3.163    0.2%
    6      1236     3.353    0.2%
    7      1299     9.311    0.7%
    8      1389     17.73    1.2%
    9      1465     11.49    0.7%
   10      1538     14.81    0.9%
   11      1618     12.98    0.8%
   12      1667     15.41    0.9%
   13      1776      11.1    0.6%
   14      1841     13.88    0.7%
   15      1897     16.02    0.8%
   16      1977      14.5    0.7%

Quality and confidence:
param     error
n         0.249

Model:
Time ~=    796.1
    + n    74.07
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    200.7
    + r    830.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     421.3     1.334    0.3%
    1      1200     16.45    1.3%
    2      1945     8.383    0.4%
    3      2733     10.68    0.3%
    4      3483     19.48    0.5%
    5      4294      24.5    0.5%
    6      5136     25.76    0.5%
    7      5933     30.02    0.5%
    8      6768     19.99    0.2%
    9      7600     27.25    0.3%
   10      8458     33.32    0.3%
   11      9205     17.52    0.1%
   12     10110     40.92    0.4%
   13     10870      16.6    0.1%
   14     11790     45.32    0.3%
   15     12610     58.47    0.4%
   16     13480     61.53    0.4%
   17     14320     39.26    0.2%
   18     15460     46.08    0.2%
   19     16280     48.29    0.2%
   20     17140      65.9    0.3%

Quality and confidence:
param     error
r         1.652

Model:
Time ~=    178.2
    + r    835.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    312.5
    + r      492
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     432.1     0.347    0.0%
    1     887.8     7.121    0.8%
    2      1315     9.006    0.6%
    3      1789     4.289    0.2%
    4      2246     10.58    0.4%
    5      2740     18.56    0.6%
    6      3274      19.4    0.5%
    7      3702     15.29    0.4%
    8      4222     20.96    0.4%
    9      4685      21.6    0.4%
   10      5166     28.94    0.5%
   11      5712     21.55    0.3%
   12      6207     19.62    0.3%
   13      6677     18.18    0.2%
   14      7153     34.26    0.4%
   15      7664     27.46    0.3%
   16      8156        34    0.4%
   17      8720     51.51    0.5%
   18      9277     28.82    0.3%
   19      9747     32.81    0.3%
   20     10290     39.09    0.3%

Quality and confidence:
param     error
r          0.75

Model:
Time ~=    305.7
    + r    493.5
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    699.7
    + n    111.2
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       685     11.98    1.7%
    1     802.6     5.549    0.6%
    2     926.7      2.57    0.2%
    3      1040     9.028    0.8%
    4      1141     1.578    0.1%
    5      1254     2.296    0.1%
    6      1366     2.277    0.1%
    7      1475     11.05    0.7%
    8      1603     10.96    0.6%
    9      1705     15.72    0.9%
   10      1830     17.98    0.9%
   11      1932     15.23    0.7%
   12      2027     13.79    0.6%
   13      2139     11.09    0.5%
   14      2255     13.13    0.5%
   15      2378     7.737    0.3%
   16      2480     16.89    0.6%

Quality and confidence:
param     error
n         0.216

Model:
Time ~=      697
    + n    111.7
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    296.7
    + r     3527
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.2      0.16    0.0%
    1      3919     14.59    0.3%
    2      7398     20.58    0.2%
    3     10910     27.17    0.2%
    4     14320     38.88    0.2%
    5     17780     31.48    0.1%
    6     21270     28.43    0.1%
    7     24770     44.11    0.1%
    8     28490     45.69    0.1%
    9     32030     67.73    0.2%
   10     35640     38.29    0.1%
   11     38770     27.08    0.0%
   12     42480     85.93    0.2%
   13     46160     78.95    0.1%
   14     49570     79.67    0.1%
   15     53280     82.79    0.1%
   16     56940       107    0.1%
   17     60170     55.29    0.0%
   18     63720        98    0.1%
   19     67360     77.09    0.1%
   20     71110     59.11    0.0%

Quality and confidence:
param     error
r         1.718

Model:
Time ~=    243.1
    + r     3530
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    233.8
    + r    39280
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     427.3     0.194    0.0%
    1     39580     27.54    0.0%
    2     78840     112.6    0.1%
    3    117800     78.16    0.0%
    4    157200       152    0.0%
    5    196500     108.4    0.0%
    6    235300     132.5    0.0%
    7    274400     87.18    0.0%
    8    314100     193.4    0.0%
    9    353800     195.7    0.0%
   10    393100     127.1    0.0%
   11    432300     148.4    0.0%
   12    472100     218.7    0.0%
   13    511100     223.3    0.0%
   14    550500     261.3    0.0%
   15    589800     334.3    0.0%
   16    628400     393.6    0.0%
   17    667800     542.2    0.0%
   18    706900     273.3    0.0%
   19    746800     227.1    0.0%
   20    785600     228.5    0.0%

Quality and confidence:
param     error
r         4.504

Model:
Time ~=    140.5
    + r    39280
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    39020
    + t     2858
    + i     62.8
    + o    101.4
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    200700     89.05    0.0%
    1     0   960    138600     119.3    0.0%
    1    20   960    140000     89.28    0.0%
    1    40   960    141700     132.8    0.0%
    1    60   960    143100     93.42    0.0%
    1    80   960    144200     114.6    0.0%
    1   100   960    145500      91.9    0.0%
    1   120   960    146900     141.1    0.0%
    1   140   960    148000       122    0.0%
    1   160   960    149300     167.7    0.1%
    1   180   960    150600     90.85    0.0%
    1   200   960    151800     85.46    0.0%
    1   220   960    153100     74.97    0.0%
    1   240   960    154300     106.4    0.0%
    1   260   960    155700       116    0.0%
    1   280   960    157000     126.1    0.0%
    1   300   960    158300     181.7    0.1%
    1   320   960    159400     94.75    0.0%
    1   340   960    160700      66.4    0.0%
    1   360   960    162000     83.01    0.0%
    1   380   960    163200     116.8    0.0%
    1   400   960    164400     115.4    0.0%
    1   420   960    165600     44.02    0.0%
    1   440   960    166900     109.1    0.0%
    1   460   960    168200       128    0.0%
    1   480   960    169800     140.7    0.0%
    1   500   960    170900     55.41    0.0%
    1   520   960    171800     71.14    0.0%
    1   540   960    173100       109    0.0%
    1   560   960    174400     116.2    0.0%
    1   580   960    175700     124.1    0.0%
    1   600   960    176700     144.4    0.0%
    1   620   960    178100     93.79    0.0%
    1   640   960    179400     104.7    0.0%
    1   660   960    180700     134.2    0.0%
    1   680   960    181900     46.72    0.0%
    1   700   960    183300     90.73    0.0%
    1   720   960    184600     138.9    0.0%
    1   740   960    185800     120.9    0.0%
    1   760   960    187100     103.8    0.0%
    1   780   960    188300      94.6    0.0%
    1   800   960    189500       231    0.1%
    1   820   960    190600     93.64    0.0%
    1   840   960    192000     135.2    0.0%
    1   860   960    193100     104.3    0.0%
    1   880   960    194400     146.8    0.0%
    1   900   960    195600     93.45    0.0%
    1   920   960    197000     186.5    0.0%
    1   940   960    198400     86.02    0.0%
    1   960   960    199500     145.1    0.0%
    1   980   960    200900     145.6    0.0%
    1  1000   960    202000     88.32    0.0%
    1  1020   960    203500     213.6    0.1%
    1  1024     0    106200     97.46    0.0%
    1  1024    19    108200     74.37    0.0%
    1  1024    38    110200     117.6    0.1%
    1  1024    57    112200     55.34    0.0%
    1  1024    76    114000     35.72    0.0%
    1  1024    95    116000     81.78    0.0%
    1  1024   114    118000     113.7    0.0%
    1  1024   133    119800     133.4    0.1%
    1  1024   152    121700     102.9    0.0%
    1  1024   171    123600     147.3    0.1%
    1  1024  <truncated>...
```

</details>",10448,2021-12-09T18:03:45Z,0
398,athei,bot merge force,10448,2021-12-10T12:31:57Z,0
399,paritytech-processbot[bot]," Error: Required status check ""continuous-integration/gitlab-check-dependent-cumulus"" is failing.",10448,2021-12-10T12:32:06Z,0
400,jamesblacklock,/benchmark runtime pallet pallet_contracts,10467,2021-12-10T16:36:05Z,0
401,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""wasmer-2.1-test-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error: failed to select a version for `sp-sandbox`.
    ... required by package `node-runtime v3.0.0-dev (/home/benchbot/bench-bot/git/substrate/bin/node/runtime)`
    ... which satisfies path dependency `node-runtime` of package `node-bench v0.9.0-dev (/home/benchbot/bench-bot/git/substrate/bin/node/bench)`
versions that meet the requirements `=0.10.0-dev` are: 0.10.0-dev

the package `node-runtime` depends on `sp-sandbox`, with features: `wasmer-sandbox` but `sp-sandbox` does not have these features.


failed to select a version for `sp-sandbox` which could resolve this conflict

```

</details>

ERROR: Unable to commit file ./frame/contracts/src/weights.rs",10467,2021-12-10T16:36:07Z,0
402,ggwpez,"I think the issue runs deeper since the implementor of `died` does not know which `mutate` closures are currently on the call-stack.  
Lets say  `pallet-A::do()` calls `pallet-B::do()` in a `mutate`; now any callbacks that `pallet-B::do()` invokes should not modify the storage of `pallet-A` either, right?  
So writing to the storage of _any_ pallet could potentially result in lost updates.  
@thiolliere ",10432,2021-12-08T11:59:58Z,0
403,thiolliere,"> I think the issue runs deeper since the implementor of `died` does not know which `mutate` closures are currently on the call-stack. Lets say `pallet-A::do()` calls `pallet-B::do()` in a `mutate`; now any callbacks that `pallet-B::do()` invokes should not modify the storage of `pallet-A` either, right? So writing to the storage of _any_ pallet could potentially result in lost updates. @thiolliere

the implementor of `died` knows that storage of pallet asset have pending change that will override any other change written to its storage.

> Lets say `pallet-A::do()` calls `pallet-B::do()` in a `mutate`; now any callbacks that `pallet-B::do()` invokes should not modify the storage of `pallet-A` either, right? So writing to the storage of _any_ pallet could potentially result in lost updates.

Yes, but asset function must not be called inside a mutate, otherwise indeed, the died implementation can break original pallets storage.
You should never call another pallet function while having some pending change which will override any other change, except when it is explicitly written that it won't call into your original pallet.

Here the API is error prone, because people can easily miss the constraint in the doc.",10432,2021-12-09T08:35:45Z,0
404,ggwpez,"Thanks for the explanation. Then I would like to pick up this issue if you don't mind.  
@thiolliere ",10432,2021-12-10T16:06:02Z,0
405,shawntabrizi,/tip small,10455,2021-12-11T09:29:18Z,0
406,cla-bot-2021[bot],"User @dt665m, please sign the CLA [here](https://cla.parity.io/sign_cla/11184257/3).",10119,2021-10-29T11:57:13Z,0
407,bkchr,"> lgtm! Note this adds new host functions, so it's a breaking change (requires client to be updated first)

Only for clients that also use this function. Aka, Polkadot/Kusama will not require this.",10119,2021-11-02T21:27:41Z,0
408,pepyakin,"Actually, polkadot and kusama does pull those, https://github.com/paritytech/polkadot/blob/4fe4d3f9e6efd6607f570094c6872516f54b9549/node/core/pvf/src/executor_intf.rs#L122 IIUC.

",10119,2021-11-02T21:40:02Z,0
409,bkchr,"> Actually, polkadot and kusama does pull those, https://github.com/paritytech/polkadot/blob/4fe4d3f9e6efd6607f570094c6872516f54b9549/node/core/pvf/src/executor_intf.rs#L122 IIUC.

I mean that this isn't used by the Polkadot/Kusama runtime itself. And yes, for Parachains that want to use this, they will need to wait until all validators have upgraded.",10119,2021-11-02T22:52:37Z,0
410,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10119,2021-12-02T23:25:14Z,0
411,bkchr,@dt665m sorry that this was overseen. Could you please merge master?,10119,2021-12-05T19:18:29Z,0
412,dt665m,"> 

no worries!  Merged, built, and tested locally.",10119,2021-12-08T00:55:29Z,0
413,tomusdrw,@dt665m could you please reformat the code using `cargo +nightly fmt`?,10119,2021-12-09T21:03:06Z,0
414,dt665m,"> @dt665m could you please reformat the code using `cargo +nightly fmt`?

done",10119,2021-12-10T04:19:19Z,0
415,burdges,How is this meant to be used?,10465,2021-12-13T00:02:42Z,0
416,burdges,We'll do a DLEQ proof version so we can avoid complicating the gossip rules? ,10469,2021-12-13T00:04:12Z,0
417,thiolliere,bot merge,10470,2021-12-13T07:23:14Z,0
418,bkchr,Disable the std feature of `parity-scale-codec`,10477,2021-12-13T08:33:42Z,0
419,DaviRain-Su,"> Disable the std feature of `parity-scale-codec`

```
[package]
name = ""pallet-ibc""
version = ""4.0.0-pre.0""
edition = ""2018""
authors = [""Octopus Network <hi@oct.network>""]
license = ""Apache-2.0""
homepage = ""https://oct.network""
repository = ""https://github.com/octopus-network/octopus-pallets.git""
description = ""FRAME pallet for joining the octopus network as an appchain.""
readme = ""README.md""
build      = 'build.rs'
documentation = ""https://docs.rs/pallet-octopus-appchain""

[package.metadata.docs.rs]
targets = [""x86_64-unknown-linux-gnu""]


[build-dependencies.substrate-wasm-builder]
branch = 'polkadot-v0.9.12'
git    = 'https://github.com/paritytech/substrate.git'

[dependencies]
codec = { package = ""parity-scale-codec"", version = ""2.0.0"", default-features = false, features = [""derive""] }
log = { version = ""0.4.0"", default-features = false }
scale-info = { version = ""1.0"", default-features = false, features = [""derive""] }

frame-benchmarking = { git = ""https://github.com/paritytech/substrate.git"", branch = ""polkadot-v0.9.12"", default-features = false, optional = true }
frame-support = { git = ""https://github.com/paritytech/substrate.git"", branch = ""polkadot-v0.9.12"", default-features = false }
frame-system = { git = ""https://github.com/paritytech/substrate.git"", branch = ""polkadot-v0.9.12"", default-features = false }
sp-core = { git = ""https://github.com/paritytech/substrate.git"", branch = ""polkadot-v0.9.12"", default-features = false }
sp-io = { git = ""https://github.com/paritytech/substrate.git"", branch = ""polkadot-v0.9.12"", default-features = false }
sp-runtime = { git = ""https://github.com/paritytech/substrate.git"", branch = ""polkadot-v0.9.12"", default-features = false }
sp-std = { git = ""https://github.com/paritytech/substrate.git"", branch = ""polkadot-v0.9.12"", default-features = false }


[features]
default = [""std""]
std = [
	# ""codec/std"", ## disable the std features of parity-scale-codec
	""log/std"",
	""scale-info/std"",
	""frame-benchmarking/std"",
	""frame-support/std"",
	""frame-system/std"",
	""sp-core/std"",
	""sp-io/std"",
	""sp-runtime/std"",
	""sp-std/std"",
]

runtime-benchmarks = [""frame-benchmarking""]
try-runtime = [""frame-support/try-runtime""]
```

I rewrite this cargo.toml, BTW, There have the same error.",10477,2021-12-13T09:13:48Z,0
420,bkchr,"Sorry!

I checked it now, use `edition = ""2021""` instead of `edition = ""2018""`",10477,2021-12-13T09:31:17Z,0
421,DaviRain-Su,"Thx, This help solute this problem.",10477,2021-12-13T10:25:00Z,0
422,bkchr,"Was the parachain stalled?

Temporary solution is to revert some blocks. ",10476,2021-12-12T22:19:29Z,0
423,xlc,"The parachain was having block production issue. Restart some nodes got it back working.

I guess it could be indeed too many sibling blocks due to the block production issue, but it shouldn't prevent syncing old blocks.",10476,2021-12-13T00:21:33Z,0
424,bkchr,"> I guess it could be indeed too many sibling blocks due to the block production issue, but it shouldn't prevent syncing old blocks.

If the synced block is on the same height, it could be. However, the underlying problem of not pruning of blocks that are ""dead"" is known and needs to be fixed. ",10476,2021-12-13T06:44:13Z,0
425,xlc,Ok. Is there a tracking issue of the not pruning blocks bug that I can send people to?,10476,2021-12-13T07:31:05Z,0
426,bkchr,https://github.com/paritytech/cumulus/issues/432,10476,2021-12-13T08:41:46Z,0
427,pepyakin,"FWIW, this will require polkadot companion",10394,2021-12-04T13:27:17Z,0
428,koute,bot merge,10394,2021-12-14T08:23:43Z,0
429,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4471 is not mergeable,10394,2021-12-14T08:23:50Z,0
430,koute,bot merge,10394,2021-12-14T08:26:29Z,0
431,TriplEight,"1.57 stable is already on the `:staging` image

```
+ rustup show
Default host: x86_64-unknown-linux-gnu
rustup home:  /usr/local/rustup
installed toolchains
--------------------
stable-x86_64-unknown-linux-gnu (default)
nightly-2021-11-08-x86_64-unknown-linux-gnu
nightly-x86_64-unknown-linux-gnu
installed targets for active toolchain
--------------------------------------
wasm32-unknown-unknown
x86_64-unknown-linux-gnu
active toolchain
----------------
stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)
+ cargo --version
cargo 1.57.0 (b2e52d7ca 2021-10-21)
```",10471,2021-12-13T11:19:18Z,0
432,arkpar,"Looks good, except it loads all of the state into memory. This is fine for now, but might cause problems with bigger chains in the future.
Ideally it should be writing the file while iterating over the state. ",5842,2020-04-30T10:19:16Z,0
433,bkchr,"> Looks good, except it loads all of the state into memory. This is fine for now, but might cause problems with bigger chains in the future.
> Ideally it should be writing the file while iterating over the state.

Yeah, the whole operation isn't that nice, but as this is only some sort of debug command. I thought that we can live with the high memory load. ;) ",5842,2020-04-30T10:25:00Z,0
434,xlc,"Nice. Where can I find this ""extra tool that replaces the corresponding keys and makes the chain spec usable as new a new genesis"" ?

I always wants a feature to fork a live network and do some experiments on them. Super useful when working with ethereum.",5842,2020-04-30T22:40:25Z,0
435,bkchr,"This does not exist yet, I will work on this in the next time.",5842,2020-05-01T07:31:21Z,0
436,xcaptain,"@bkchr I use `export-state` to create a new genesis file and use `--chain state_file.json` to start a new chain, I also got the `ClientImport(expected epoch change)` error, is that because my old keys changed?",5842,2021-12-14T11:02:28Z,0
437,bkchr,"No, you will need to remove the epoch related storage keys from the exported genesis config to make babe work.",5842,2021-12-14T13:15:05Z,0
438,bkchr,"> I’m hazy on what we loose with this but given it’s broken we should remove it.

We will loose the check that the current workspace could be ""released"" to crates.io. However, even if that breaks, fixing it should be doable in 1-2 days. But, we will have a much easier life for now.
",10482,2021-12-14T13:38:20Z,0
439,jamesblacklock,/benchmark runtime pallet pallet_contracts,10468,2021-12-10T17:01:40Z,0
440,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""wasmer-2.1-test-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error[E0283]: type annotations needed
   --> client/finality-grandpa/src/communication/gossip.rs:804:78
    |
804 |                         let diff_authorities = self.authorities.iter().collect::<HashSet<_>>() !=
    |                                                                                                ^^ cannot infer type
    |
    = note: cannot satisfy `HashSet<&sp_finality_grandpa::app::Public>: PartialEq<_>`
help: consider specifying the type argument in the method call
    |
805 |                             authorities.iter().collect::<B>();
    |                                                       +++++

error[E0282]: type annotations needed
   --> client/finality-grandpa/src/justification.rs:188:7
    |
188 |         let ancestry_hashes =
    |             ^^^^^^^^^^^^^^^ consider giving `ancestry_hashes` a type

Some errors have detailed explanations: E0282, E0283.
For more information about an error, try `rustc --explain E0282`.
error: could not compile `sc-finality-grandpa` due to 2 previous errors
error: build failed

```

</details>

ERROR: Unable to commit file ./frame/contracts/src/weights.rs",10468,2021-12-10T17:01:42Z,0
441,jamesblacklock,"/benchmark runtime pallet pallet_contracts

",10468,2021-12-10T17:11:12Z,0
442,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""wasmer-2.1-test-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.82
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.82
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k     2.21
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0      70.7     1.723    2.4%
   20     60.41     0.302    0.4%
   40        99     1.483    1.4%
   60     135.4     0.411    0.3%
   80     172.4      0.79    0.4%
  100     211.7     1.166    0.5%
  120     247.6     1.221    0.4%
  140     302.8     4.551    1.5%
  160     335.3     3.302    0.9%
  180     381.6     3.725    0.9%
  200     420.5      3.01    0.7%
  220       484      1.67    0.3%
  240     510.4      2.79    0.5%
  260     556.4     6.443    1.1%
  280       601     6.151    1.0%
  300     638.6     5.768    0.9%
  320     688.4     6.264    0.9%
  340     719.9     4.937    0.6%
  360     767.4     3.089    0.4%
  380     822.7     14.09    1.7%
  400     861.5     4.286    0.4%
  420     911.1     8.835    0.9%
  440     949.8     8.305    0.8%
  460      1010     9.837    0.9%
  480      1047     6.274    0.5%
  500      1104     14.03    1.2%
  520      1144     10.12    0.8%
  540      1185     10.16    0.8%
  560      1238     14.13    1.1%
  580      1273     9.663    0.7%
  600      1317     13.06    0.9%
  620      1339     14.04    1.0%
  640      1402     15.52    1.1%
  660      1458       7.8    0.5%
  680      1515     14.08    0.9%
  700      1535     6.167    0.4%
  720      1574     14.14    0.8%
  740      1630     11.36    0.6%
  760      1686     6.964    0.4%
  780      1713     16.35    0.9%
  800      1745     13.91    0.7%
  820      1801     17.81    0.9%
  840      1868     13.53    0.7%
  860      1915     14.64    0.7%
  880      1959     10.07    0.5%
  900      1994     15.72    0.7%
  920      2051     24.38    1.1%
  940      2080     13.29    0.6%
  960      2116     12.24    0.5%
  980      2152     12.67    0.5%
 1000      2203     7.097    0.3%
 1020      2268     15.86    0.6%

Quality and confidence:
param     error
k         0.002

Model:
Time ~=        0
    + k    2.215
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    115.3
    + q    0.359
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.879      0.04    1.3%
   20     88.31     0.779    0.8%
   40     103.8     1.676    1.6%
   60     114.8     2.138    1.8%
   80     127.5     1.047    0.8%
  100     138.5     0.949    0.6%
  120     141.7     3.121    2.2%
  140     154.2     3.533    2.2%
  160     166.4     2.921    1.7%
  180     175.9     1.818    1.0%
  200     178.7     3.794    2.1%
  220     195.5     5.269    2.6%
  240     212.4      6.22    2.9%
  260       225     9.488    4.2%
  280     243.5     2.988    1.2%
  300     234.3     2.285    0.9%
  320     246.8     4.251    1.7%
  340     251.2     2.459    0.9%
  360     262.1     1.701    0.6%
  380     270.6     2.071    0.7%
  400     286.1     9.319    3.2%
  420     282.7     2.247    0.7%
  440     299.2     7.139    2.3%
  460     298.8     2.638    0.8%
  480     307.1     3.225    1.0%
  500       312     2.474    0.7%
  520     319.5     1.953    0.6%
  540     327.8      2.66    0.8%
  560     333.3     2.424    0.7%
  580     338.8      2.54    0.7%
  600     344.7     3.313    0.9%
  620     347.6     8.173    2.3%
  640     337.2     3.473    1.0%
  660     344.2     3.508    1.0%
  680     353.4     3.869    1.0%
  700     356.6     4.359    1.2%
  720     375.2     3.849    1.0%
  740     368.8     2.777    0.7%
  760     376.8     3.678    0.9%
  780       397     6.426    1.6%
  800     396.7     10.95    2.7%
  820     405.8      2.97    0.7%
  840       414     3.845    0.9%
  860     404.7     4.077    1.0%
  880     423.7     3.459    0.8%
  900     426.3     3.705    0.8%
  920     427.9     4.122    0.9%
  940     446.2     4.402    0.9%
  960     445.9     5.651    1.2%
  980     463.3     2.191    0.4%
 1000     467.2     2.968    0.6%
 1020     468.5     10.38    2.2%

Quality and confidence:
param     error
q         0.003

Model:
Time ~=    109.4
    + q    0.367
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     51.8
    + c     89.9
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     55.49      0.08    0.1%
    2     235.6     0.238    0.1%
    4     412.6      0.69    0.1%
    6     576.5     3.648    0.6%
    8     773.6     12.59    1.6%
   10     942.8     14.46    1.5%
   12      1102     13.21    1.1%
   14      1316     13.28    1.0%
   16      1479     13.19    0.8%
   18      1664     14.28    0.8%
   20      1825     15.09    0.8%
   22      1994     16.95    0.8%
   24      2147     13.07    0.6%
   26      2431     8.552    0.3%
   28      2593     4.823    0.1%
   30      2749     9.989    0.3%
   32      2913     6.007    0.2%
   34      3137     13.82    0.4%
   36      3292     17.69    0.5%
   38      3458     12.65    0.3%
   40      3607     13.12    0.3%
   42      3786      12.2    0.3%
   44      3934     6.334    0.1%
   46      4090     14.29    0.3%
   48      4264     13.74    0.3%
   50      4621     12.36    0.2%
   52      4791     9.027    0.1%
   54      4963     20.38    0.4%
   56      5134     13.56    0.2%
   58      5269        15    0.2%
   60      5440     12.62    0.2%
   62      5616     16.15    0.2%
   64      5739     13.04    0.2%
   66      6026     13.02    0.2%
   68      6183     19.26    0.3%
   70      6355      14.9    0.2%
   72      6518     22.51    0.3%
   74      6679     20.52    0.3%
   76      6847     26.78    0.3%
   78      6998     22.46    0.3%
   80      7177     18.33    0.2%
   82      7348     28.34    0.3%
   84      7500     29.54    0.3%
   86      7652     9.041    0.1%
   88      7810     16.03    0.2%
   90      7977     24.92    0.3%
   92      8137     27.13    0.3%
   94      8299     21.61    0.2%
   96      8458     17.92    0.2%
   98      9052     20.02    0.2%
  100      9221      22.4    0.2%
  102      9374     25.29    0.2%
  104      9555     21.34    0.2%
  106      9699     26.39    0.2%
  108      9871     37.63    0.3%
  110     10020     25.13    0.2%
  112     10190     21.96    0.2%
  114     10360     13.42    0.1%
  116     10520     27.73    0.2%
  118     10680     35.43    0.3%
  120     10820     13.35    0.1%
  122     10980      13.6    0.1%
  124     11180      18.3    0.1%
  126     11320     30.37    0.2%
  128     11490     23.24    0.2%

Quality and confidence:
param     error
c         0.088

Model:
Time ~=    34.19
    + c    90.02
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    163.4
    + c    103.9
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     172.8     0.304    0.1%
    2       390     1.004    0.2%
    4     595.8     2.497    0.4%
    6     804.1     0.931    0.1%
    8      1002     1.515    0.1%
   10      1202      1.57    0.1%
   12      1400     1.845    0.1%
   14      1615     12.98    0.8%
   16      1822     11.09    0.6%
   18      2012     13.14    0.6%
   20      2240     22.06    0.9%
   22      2467     4.622    0.1%
   24      2669     2.029    0.0%
   26      2894     2.305    0.0%
   28      3094     6.822    0.2%
   30      3302     3.773    0.1%
   32      3489     6.009    0.1%
   34      3696     2.517    0.0%
   36      3892     1.981    0.0%
   38      4096     3.962    0.0%
   40      4296     2.785    0.0%
   42      4497     1.705    0.0%
   44      4695     3.743    0.0%
   46      4892     2.231    0.0%
   48      5100     5.058    0.0%
   50      5390     7.032    0.1%
   52      5598     3.788    0.0%
   54      5798     5.659    0.0%
   56      5995     3.363    0.0%
   58      6192     4.065    0.0%
   60      6401     4.726    0.0%
   62      6590     8.655    0.1%
   64      6791     5.468    0.0%
   66      6996     11.06    0.1%
   68      7200     8.423    0.1%
   70      7390     19.86    0.2%
   72      7601     5.683    0.0%
   74      7791      26.4    0.3%
   76      8009     8.901    0.1%
   78      8189     19.71    0.2%
   80      8407     15.97    0.1%
   82      8593     25.78    0.3%
   84      8768     33.27    0.3%
   86      8978     40.51    0.4%
   88      9172     27.53    0.3%
   90      9373     47.94    0.5%
   92      9558     21.03    0.2%
   94      9779     30.59    0.3%
   96      9972     28.21    0.2%
   98     10520     35.02    0.3%
  100     10720     43.29    0.4%
  102     10910      46.1    0.4%
  104     11120     38.77    0.3%
  106     11330     39.41    0.3%
  108     11560     46.14    0.3%
  110     11760     29.78    0.2%
  112     11930     40.85    0.3%
  114     12190     26.98    0.2%
  116     12290     23.07    0.1%
  118     12510     33.25    0.2%
  120     12770     27.41    0.2%
  122     12920     36.35    0.2%
  124     13130      32.9    0.2%
  126     13290     36.55    0.2%
  128     13480     50.95    0.3%

Quality and confidence:
param     error
c          0.09

Model:
Time ~=    130.8
    + c    104.5
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    640.2
    + c    329.4
    + s    1.868
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2473     15.01    0.6%
    1  1024      2905     20.84    0.7%
    2  1024      3225     15.69    0.4%
    3  1024      3555     10.68    0.3%
    4  1024      3891     23.69    0.6%
    5  1024      4216     22.05    0.5%
    6  1024      4545     24.52    0.5%
    7  1024      4924     21.48    0.4%
    8  1024      5223      11.2    0.2%
    9  1024      5518     29.74    0.5%
   10  1024      5933     162.6    2.7%
   11  1024      6196     23.84    0.3%
   12  1024      6483     22.66    0.3%
   13  1024      6928     21.33    0.3%
   14  1024      7208     23.52    0.3%
   15  1024      7478     16.94    0.2%
   16  1024      7736     25.23    0.3%
   17  1024      8075     34.96    0.4%
   18  1024      8338     32.81    0.3%
   19  1024      8823     27.19    0.3%
   20  1024      9139     20.08    0.2%
   21  1024      9451     38.71    0.4%
   22  1024      9692     27.69    0.2%
   23  1024     10050     48.21    0.4%
   24  1024     10240     37.34    0.3%
   25  1024     10750     42.46    0.3%
   26  1024     11140     38.87    0.3%
   27  1024     11440     39.08    0.3%
   28  1024     11750      59.3    0.5%
   29  1024     12100     36.95    0.3%
   30  1024     12370     32.84    0.2%
   31  1024     12720     26.94    0.2%
   32  1024     13060     26.96    0.2%
   33  1024     13500     19.11    0.1%
   34  1024     13780      45.7    0.3%
   35  1024     13940     22.94    0.1%
   36  1024     14530     54.96    0.3%
   37  1024     14880      70.9    0.4%
   38  1024     15160     39.22    0.2%
   39  1024     15430     26.45    0.1%
   40  1024     15870     38.05    0.2%
   41  1024     16050     56.86    0.3%
   42  1024     16360     28.69    0.1%
   43  1024     16610      47.5    0.2%
   44  1024     17040     44.07    0.2%
   45  1024     17410     44.72    0.2%
   46  1024     17650     70.54    0.3%
   47  1024     18110     40.53    0.2%
   48  1024     17980     60.19    0.3%
   49  1024     18690     31.45    0.1%
   50  1024     19050     36.08    0.1%
   51  1024     19470     72.75    0.3%
   52  1024     19760       121    0.6%
   53  1024     19980      38.8    0.1%
   54  1024     20460     136.3    0.6%
   55  1024     20760     73.25    0.3%
   56  1024     20930     65.06    0.3%
   57  1024     21410     94.82    0.4%
   58  1024     21570      33.6    0.1%
   59  1024     21850     35.07    0.1%
   60  1024     22190     45.23    0.2%
   61  1024     22620     89.34    0.3%
   62  1024     22990     108.5    0.4%
   63  1024     23440     104.1    0.4%
   64     0     21590       147    0.6%
   64    20     21460     112.4    0.5%
   64    40     21900     93.82    0.4%
   64    60     21900       217    0.9%
   64    80     21540     46.39    0.2%
   64   100     21570     42.32    0.1%
   64   120     21550     56.51    0.2%
   64   140     21620     45.02    0.2%
   64   160     21730     32.49    0.1%
   64   180     21880     78.51    0.3%
   64   200     22060       112    0.5%
   64   220     22310     64.75    0.2%
   64   240     22320     41.41    0.1%
   64   260     22320     38.82    0.1%
   64   280     22380      38.3    0.1%
   64   300     22380      77.9    0.3%
   64   320     22360     98.54    0.4%
   64   340     22500     82.79    0.3%
   64   360     22540     56.68    0.2%
   64   380     22590     67.63    0.2%
   64   400     22520     59.15    0.2%
   64   420     22520     71.48    0.3%
   64   440     22330     80.11    0.3%
   64   460     26090     58.27    0.2%
   64   480     23150     379.8    1.6%
   64   500     22550     94.43    0.4%
   64   520     22820     118.9    0.5%
   64   540     22870     77.06    0.3%
   64   560     22820     68.25    0.2%
   64   580     22930     47.14    0.2%
   64   600     22790      98.9    0.4%
   64   620     23010     110.9    0.4%
   64   640     22770       104    0.4%
   64   660     22930     122.7    0.5%
   64   680     22930     102.6    0.4%
   64   700     23180     40.63    0.1%
   64   720     23280     84.31    0.3%
   64   740     23070     80.68    0.3%
   64   760     23060     96.99    0.4%
   64   780     23340     71.17    0.3%
   64   800     22930     60.57    0.2%
   64   820     22950     39.26    0.1%
   64   840     23020     74.19    0.3%
   64   860     23080     63.66    0.2%
   64   880     23020     15.69    0.0%
   64   900     23170     72.38    0.3%
   64   920     23150     58.42    0.2%
   64   940     23200     62.14    0.2%
   64   960     23530     72.97    0.3%
   64   980     23510     25.32    0.1%
   64  1000     23590     57.45    0.2%
   64  1020     23620     53.32    0.2%
   64  1024     23900      97.4    0.4%

Quality and confidence:
param     error
c         0.627
s          0.04

Model:
Time ~=    677.2
    + c    329.6
    + s    1.822
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    261.2
    + s    2.029
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     266.1     3.051    1.1%
   20     300.8     0.754    0.2%
   40     342.7     0.748    0.2%
   60       396     12.77    3.2%
   80     431.8      1.03    0.2%
  100     438.8     1.287    0.2%
  120     478.4     0.523    0.1%
  140       521     1.991    0.3%
  160       570     6.551    1.1%
  180       609     6.417    1.0%
  200       641     0.537    0.0%
  220     719.3     11.89    1.6%
  240     748.2     1.499    0.2%
  260     789.3     1.671    0.2%
  280       829     1.393    0.1%
  300     870.9     1.271    0.1%
  320     913.4     5.137    0.5%
  340     951.1      1.36    0.1%
  360     996.2     2.311    0.2%
  380      1034     2.572    0.2%
  400      1076      4.81    0.4%
  420      1110     10.13    0.9%
  440      1156     2.438    0.2%
  460      1178     13.56    1.1%
  480      1216     11.04    0.9%
  500      1268     11.65    0.9%
  520      1303     12.95    0.9%
  540      1361     5.402    0.3%
  560      1406     14.26    1.0%
  580      1437     14.51    1.0%
  600      1495     10.12    0.6%
  620      1520     3.098    0.2%
  640      1563     3.033    0.1%
  660      1612     13.05    0.8%
  680      1651     3.339    0.2%
  700      1683     14.63    0.8%
  720      1734     4.141    0.2%
  740      1787     24.96    1.3%
  760      1800     3.842    0.2%
  780      1824     15.09    0.8%
  800      1856     9.605    0.5%
  820      1930     11.17    0.5%
  840      1956     15.04    0.7%
  860      2016     8.315    0.4%
  880      2040     14.07    0.6%
  900      2078     13.48    0.6%
  920      2105     14.83    0.7%
  940      2143     14.72    0.6%
  960      2196     11.95    0.5%
  980      2236      13.2    0.5%
 1000      2295      4.65    0.2%
 1020      2339     19.26    0.8%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    257.5
    + s     2.03
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    196.2
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    196.2
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    91.37
    + c    90.51
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     93.61     0.383    0.4%
    1     186.4     0.264    0.1%
    2       280     2.236    0.7%
    3       358     0.448    0.1%
    4     452.9     1.074    0.2%
    5     536.4     0.442    0.0%
    6     632.6     9.521    1.5%
    7     735.2     15.57    2.1%
    8     818.5     10.73    1.3%
    9     905.6     14.63    1.6%
   10     977.4     8.549    0.8%
   11      1068     17.72    1.6%
   12      1159     14.97    1.2%
   13      1281     14.17    1.1%
   14      1363     14.16    1.0%
   15      1441     10.86    0.7%
   16      1528     12.15    0.7%
   17      1632     15.05    0.9%
   18      1724     9.574    0.5%
   19      1809     14.33    0.7%
   20      1880     14.85    0.7%
   21      1958     16.85    0.8%
   22      2056     4.751    0.2%
   23      2126     12.53    0.5%
   24      2222     8.024    0.3%
   25      2393     16.29    0.6%
   26      2470      15.5    0.6%
   27      2563     7.312    0.2%
   28      2634     16.21    0.6%
   29      2730     16.08    0.5%
   30      2785     14.58    0.5%
   31      2878      21.5    0.7%
   32      2956     17.89    0.6%
   33      3101     19.68    0.6%
   34      3182     16.64    0.5%
   35      3271     10.06    0.3%
   36      3360     12.68    0.3%
   37      3437      12.3    0.3%
   38      3517     13.53    0.3%
   39      3599     13.28    0.3%
   40      3675     14.11    0.3%
   41      3741     13.25    0.3%
   42      3845     12.55    0.3%
   43      3893      14.4    0.3%
   44      4000     8.576    0.2%
   45      4075      13.6    0.3%
   46      4168     15.85    0.3%
   47      4251      14.1    0.3%
   48      4329     11.21    0.2%
   49      4647     14.93    0.3%
   50      4733     12.33    0.2%
   51      4780     16.17    0.3%
   52      4871     11.08    0.2%
   53      4952     14.25    0.2%
   54      5047     16.32    0.3%
   55      5120     16.25    0.3%
   56      5194     14.85    0.2%
   57      5272     15.12    0.2%
   58      5369     21.24    0.3%
   59      5452     16.42    0.3%
   60      5515     12.39    0.2%
   61      5626     24.08    0.4%
   62      5672     7.435    0.1%
   63      5773      18.4    0.3%
   64      5846     19.71    0.3%

Quality and confidence:
param     error
c         0.096

Model:
Time ~=    82.05
    + c    90.69
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40.54
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40.54
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    264.9
    + r    270.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     177.2     0.609    0.3%
    1     465.8     16.76    3.5%
    2     843.7     5.457    0.6%
    3      1128     1.392    0.1%
    4      1386     9.101    0.6%
    5      1521     2.727    0.1%
    6      1814     16.63    0.9%
    7      2164      10.6    0.4%
    8      2441     10.39    0.4%
    9      2724     6.324    0.2%
   10      2997     14.57    0.4%
   11      3271     10.69    0.3%
   12      3529     19.23    0.5%
   13      3781     11.07    0.2%
   14      4062     27.82    0.6%
   15      4313     13.96    0.3%
   16      4557     21.76    0.4%
   17      4899     17.15    0.3%
   18      5133     20.53    0.3%
   19      5364     20.91    0.3%
   20      5653     16.22    0.2%

Quality and confidence:
param     error
r         0.519

Model:
Time ~=    247.6
    + r    271.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    299.4
    + r    269.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     180.3     0.851    0.4%
    1     558.9     15.27    2.7%
    2     777.9     3.361    0.4%
    3      1081     28.54    2.6%
    4      1396     3.868    0.2%
    5      1666     5.655    0.3%
    6      1946     3.758    0.1%
    7      2195     5.809    0.2%
    8      2468     10.45    0.4%
    9      2748     3.196    0.1%
   10      3009     6.232    0.2%
   11      3283     8.474    0.2%
   12      3540     21.97    0.6%
   13      3812     16.28    0.4%
   14      4081     16.94    0.4%
   15      4331     9.748    0.2%
   16      4604     14.98    0.3%
   17      4864     14.93    0.3%
   18      5096     20.04    0.3%
   19      5428     13.48    0.2%
   20      5646     11.15    0.1%

Quality and confidence:
param     error
r         0.425

Model:
Time ~=    283.1
    + r    270.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      274
    + r    273.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     175.9     0.699    0.3%
    1     471.3     29.65    6.2%
    2     830.9     4.719    0.5%
    3      1123     5.221    0.4%
    4      1407     5.157    0.3%
    5      1666      5.97    0.3%
    6      1929     5.983    0.3%
    7      2137     46.59    2.1%
    8      2359     10.46    0.4%
    9      2639     7.266    0.2%
   10      3023     15.16    0.5%
   11      3327     6.366    0.1%
   12      3551     19.73    0.5%
   13      3843     6.975    0.1%
   14      4128     15.96    0.3%
   15      4405      9.27    0.2%
   16      4639     10.23    0.2%
   17      4911     19.86    0.4%
   18      5181     13.62    0.2%
   19      5428     21.59    0.3%
   20      5721     29.72    0.5%

Quality and confidence:
param     error
r         0.554

Model:
Time ~=    249.1
    + r    274.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    280.9
    + r    487.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     207.7      1.94    0.9%
    1     750.2     7.289    0.9%
    2      1273     33.21    2.6%
    3      1744     5.115    0.2%
    4      2230     6.852    0.3%
    5      2725     9.004    0.3%
    6      3215     8.142    0.2%
    7      3686     8.217    0.2%
    8      4225     17.19    0.4%
    9      4712     16.91    0.3%
   10      5196     9.951    0.1%
   11      5663     23.71    0.4%
   12      6162     19.44    0.3%
   13      6616     36.52    0.5%
   14      7117     19.72    0.2%
   15      7598     21.69    0.2%
   16      8068     22.81    0.2%
   17      8608      24.4    0.2%
   18      8984     38.56    0.4%
   19      9501      30.3    0.3%
   20      9951     17.21    0.1%

Quality and confidence:
param     error
r         0.476

Model:
Time ~=    290.1
    + r    486.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    246.2
    + r    272.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     179.1     1.103    0.6%
    1       545      26.9    4.9%
    2     804.3     8.501    1.0%
    3      1075     4.139    0.3%
    4      1342     2.708    0.2%
    5      1537     3.958    0.2%
    6      1959     4.121    0.2%
    7      2224     18.21    0.8%
    8      2485     5.891    0.2%
    9      2708     31.27    1.1%
   10      2897     13.36    0.4%
   11      3180     9.676    0.3%
   12      3459     12.78    0.3%
   13      3785     3.365    0.0%
   14      4048     14.79    0.3%
   15      4359     12.48    0.2%
   16      4606      12.1    0.2%
   17      4873     16.57    0.3%
   18      5155     16.42    0.3%
   19      5434     15.47    0.2%
   20      5696     15.06    0.2%

Quality and confidence:
param     error
r          0.52

Model:
Time ~=    245.7
    + r    272.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    321.5
    + r    267.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     180.5     1.196    0.6%
    1     537.5     40.38    7.5%
    2     803.7     43.23    5.3%
    3      1159     35.11    3.0%
    4      1443     13.88    0.9%
    5      1669     10.57    0.6%
    6      1927     13.11    0.6%
    7      2228     9.826    0.4%
    8      2472     15.83    0.6%
    9      2742     5.396    0.1%
   10      3014     6.259    0.2%
   11      3279     17.04    0.5%
   12      3553     7.017    0.1%
   13      3773     7.147    0.1%
   14      4078      7.21    0.1%
   15      4316     17.46    0.4%
   16      4468      11.7    0.2%
   17      4746     9.784    0.2%
   18      5139     17.72    0.3%
   19      5390     12.53    0.2%
   20      5678     13.15    0.2%

Quality and confidence:
param     error
r         0.653

Model:
Time ~=    308.9
    + r    267.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    216.9
    + r    275.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     201.6     2.443    1.2%
    1     514.6     10.86    2.1%
    2     825.4     9.023    1.0%
    3      1071     54.51    5.0%
    4      1267     3.043    0.2%
    5      1537     2.397    0.1%
    6      1818     5.469    0.3%
    7      2162     48.83    2.2%
    8      2489     3.802    0.1%
    9      2702     3.938    0.1%
   10      2990     24.16    0.8%
   11      3266     19.32    0.5%
   12      3519     11.45    0.3%
   13      3820     35.12    0.9%
   14      4094     13.19    0.3%
   15      4356     5.451    0.1%
   16      4602     16.91    0.3%
   17      4924     8.719    0.1%
   18      5151     20.09    0.3%
   19      5447     19.78    0.3%
   20      5719     26.18    0.4%

Quality and confidence:
param     error
r         0.442

Model:
Time ~=    222.7
    + r    275.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      305
    + r    263.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       204     6.717    3.2%
    1     528.3     3.199    0.6%
    2     820.6     34.41    4.1%
    3      1118     9.732    0.8%
    4      1401     5.746    0.4%
    5      1663     12.26    0.7%
    6      1937     7.302    0.3%
    7      2218     8.283    0.3%
    8      2479     5.699    0.2%
    9      2705     38.03    1.4%
   10      2898     11.96    0.4%
   11      3167      7.26    0.2%
   12      3443     15.28    0.4%
   13      3724     8.784    0.2%
   14      3964     12.89    0.3%
   15      4248     10.35    0.2%
   16      4522     18.79    0.4%
   17      4773     9.269    0.1%
   18      5034     8.078    0.1%
   19      5302      14.8    0.2%
   20      5559     17.48    0.3%

Quality and confidence:
param     error
r         0.489

Model:
Time ~=      309
    + r    262.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    342.2
    + r    438.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     182.1     3.473    1.9%
    1     730.9     35.34    4.8%
    2      1169     48.69    4.1%
    3      1661     4.302    0.2%
    4      2121     9.984    0.4%
    5      2575     7.364    0.2%
    6      3027     13.14    0.4%
    7      3452     17.14    0.4%
    8      3881     6.652    0.1%
    9      4362     16.14    0.3%
   10      4827     25.61    0.5%
   11      5200     46.15    0.8%
   12      5545     16.08    0.2%
   13      5975     10.53    0.1%
   14      6452     29.14    0.4%
   15      6876     15.73    0.2%
   16      7304     12.31    0.1%
   17      7742     15.95    0.2%
   18      8170     17.42    0.2%
   19      8619     15.85    0.1%
   20      9193     25.47    0.2%

Quality and confidence:
param     error
r         0.766

Model:
Time ~=    331.8
    + r    438.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    193.2
    + r    141.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     187.6     1.279    0.6%
    1     378.3     23.15    6.1%
    2     525.5     17.33    3.2%
    3       705     13.78    1.9%
    4     812.2     6.676    0.8%
    5       881     2.723    0.3%
    6      1024     0.866    0.0%
    7      1167     2.402    0.2%
    8      1304     2.544    0.1%
    9      1450     4.046    0.2%
   10      1593     7.194    0.4%
   11      1754     10.15    0.5%
   12      1890     10.51    0.5%
   13      2036      13.4    0.6%
   14      2194     10.05    0.4%
   15      2310     15.16    0.6%
   16      2461     14.25    0.5%
   17      2593     17.78    0.6%
   18      2744     13.01    0.4%
   19      2877     13.87    0.4%
   20      3140      6.12    0.1%

Quality and confidence:
param     error
r         0.435

Model:
Time ~=    207.7
    + r    141.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    288.7
    + r    256.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     204.7     0.862    0.4%
    1     518.6      4.84    0.9%
    2     778.4     3.706    0.4%
    3      1061     10.41    0.9%
    4      1332     5.648    0.4%
    5      1590     5.457    0.3%
    6      1853     5.208    0.2%
    7      2101     6.506    0.3%
    8      2369     7.724    0.3%
    9      2616     6.351    0.2%
   10      2870     10.08    0.3%
   11      3136     7.822    0.2%
   12      3380     8.985    0.2%
   13      3629     8.601    0.2%
   14      3877     28.55    0.7%
   15      4156     25.08    0.6%
   16      4374      15.3    0.3%
   17      4631     30.26    0.6%
   18      4897     12.31    0.2%
   19      5154     16.66    0.3%
   20      5379     7.379    0.1%

Quality and confidence:
param     error
r         0.342

Model:
Time ~=    285.4
    + r    256.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    488.7
    + n    8.437
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     520.8     21.24    4.0%
   20     659.2     9.976    1.5%
   40     817.7     23.27    2.8%
   60     954.1     4.961    0.5%
   80      1070     11.12    1.0%
  100      1278     31.93    2.4%
  120      1419     34.18    2.4%
  140      1510     21.06    1.3%
  160      1782     25.07    1.4%
  180      2040     10.04    0.4%
  200      2221      27.8    1.2%
  220      2313     6.334    0.2%
  240      2522     39.99    1.5%
  260      2723     24.57    0.9%
  280      2841     47.89    1.6%
  300      3055     18.74    0.6%
  320      3269     11.04    0.3%
  340      3357     19.34    0.5%
  360      3406     31.81    0.9%
  380      3723     23.67    0.6%
  400      3997     58.55    1.4%
  420      4097     60.33    1.4%
  440      4270     39.08    0.9%
  460      4397     78.23    1.7%
  480      4518      83.3    1.8%
  500      4716      57.7    1.2%
  520      4933     54.68    1.1%
  540      5128     66.67    1.3%
  560      5222     41.78    0.8%
  580      5585     40.84    0.7%
  600      5698      47.5    0.8%
  620      5677     29.14    0.5%
  640      5878     78.33    1.3%
  660      5999      56.8    0.9%
  680      6281     43.11    0.6%
  700      6228     31.58    0.5%
  720      6678     57.82    0.8%
  740      6816     51.03    0.7%
  760      6944     77.64    1.1%
  780      7011       107    1.5%
  800      7269     93.81    1.2%
  820      7536     82.84    1.0%
  840      7574     82.57    1.0%
  860      7789     74.83    0.9%
  880      7838      94.7    1.2%
  900      7995     149.1    1.8%
  920      8328     61.76    0.7%
  940      8405     51.37    0.6%
  960      8300     50.76    0.6%
  980      8714     35.89    0.4%
 1000      8794     96.14    1.0%
 1020      8930     57.15    0.6%

Quality and confidence:
param     error
n         0.015

Model:
Time ~=    499.5
    + n    8.412
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    153.8
    + r    25.01
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     153.9     0.229    0.1%
    1       179     0.749    0.4%

Quality and confidence:
param     error
r         0.261

Model:
Time ~=    153.9
    + r    25.14
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    201.8
    + n    0.513
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     178.7       0.3    0.1%
   20     195.4     0.488    0.2%
   40     206.7     0.497    0.2%
   60     215.6     3.023    1.4%
   80     242.2     0.422    0.1%
  100     252.7     0.664    0.2%
  120     263.6     0.931    0.3%
  140       282     4.378    1.5%
  160     283.3     2.003    0.7%
  180     290.2     0.483    0.1%
  200     328.5     2.136    0.6%
  220     337.6      2.29    0.6%
  240     349.1     2.935    0.8%
  260     360.8     1.953    0.5%
  280     322.9     0.573    0.1%
  300     332.6     0.462    0.1%
  320     343.8     1.548    0.4%
  340     401.7     2.042    0.5%
  360     414.3     1.979    0.4%
  380     421.8     1.415    0.3%
  400     398.5     2.358    0.5%
  420     407.5     1.875    0.4%
  440     455.1      2.73    0.5%
  460     462.9     3.462    0.7%
  480     464.4      18.6    4.0%
  500     433.3     0.831    0.1%
  520     474.1     2.048    0.4%
  540     484.5     1.193    0.2%
  560     492.6     1.629    0.3%
  580     498.7     4.844    0.9%
  600     512.8     2.515    0.4%
  620     491.9     1.324    0.2%
  640     502.5     0.836    0.1%
  660     560.8     2.878    0.5%
  680     572.4     3.053    0.5%
  700     561.1      1.21    0.2%
  720     570.7     1.497    0.2%
  740     581.4     1.772    0.3%
  760     593.8     2.472    0.4%
  780     601.2     2.267    0.3%
  800     611.4     3.009    0.4%
  820     619.5     1.549    0.2%
  840     656.5     6.187    0.9%
  860     661.2     2.208    0.3%
  880     677.4     6.421    0.9%
  900     654.9     1.068    0.1%
  920     691.4     10.06    1.4%
  940     673.5     20.01    2.9%
  960     714.9      5.06    0.7%
  980     672.1     2.224    0.3%
 1000       682     1.598    0.2%
 1020     689.9     1.305    0.1%

Quality and confidence:
param     error
n         0.002

Model:
Time ~=    203.9
    + n    0.511
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    161.3
    + r    151.6
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     161.4     0.456    0.2%
    1     315.1     8.706    2.7%

Quality and confidence:
param     error
r         2.906

Model:
Time ~=    161.4
    + r    153.6
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      275
    + r    546.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     162.2     0.433    0.2%
    1     742.1     2.207    0.2%
    2      1299     3.378    0.2%
    3      1856      4.12    0.2%
    4      2409     6.692    0.2%
    5      3088      10.9    0.3%
    6      3647     9.135    0.2%
    7      4206      11.4    0.2%
    8      4731     29.18    0.6%
    9      5291     19.51    0.3%
   10      5834     14.92    0.2%
   11      6378     22.11    0.3%
   12      6880      10.7    0.1%
   13      7436     13.74    0.1%
   14      7928     22.98    0.2%
   15      8427     26.19    0.3%
   16      8960     50.32    0.5%
   17      9490     33.42    0.3%
   18     10090     15.66    0.1%
   19     10680     30.64    0.2%
   20     11060     21.81    0.1%

Quality and confidence:
param     error
r         0.921

Model:
Time ~=    282.4
    + r    546.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    342.7
    + r    733.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     193.7     1.076    0.5%
    1      1025     43.67    4.2%
    2      1806     14.63    0.8%
    3      2529     23.84    0.9%
    4      3266     6.771    0.2%
    5      4056      5.06    0.1%
    6      4763     21.11    0.4%
    7      5505     17.21    0.3%
    8      6209     20.86    0.3%
    9      6956     14.82    0.2%
   10      7690     11.34    0.1%
   11      8422     32.83    0.3%
   12      9162     35.56    0.3%
   13      9896     34.23    0.3%
   14     10590        23    0.2%
   15     11300     36.18    0.3%
   16     12040     40.09    0.3%
   17     12760     23.02    0.1%
   18     13470     24.81    0.1%
   19     14280     36.61    0.2%
   20     14950     46.77    0.3%

Quality and confidence:
param     error
r         0.584

Model:
Time ~=    328.4
    + r    733.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1166
    + t      478
    + n    125.8
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3152     15.38    0.4%
    1    16      3684     13.14    0.3%
    2    16      4141     6.753    0.1%
    3    16      4626     15.98    0.3%
    4     0      2981     5.875    0.1%
    4     1      3205        10    0.3%
    4     2      3296     7.961    0.2%
    4     3      3457     17.91    0.5%
    4     4      3557     8.073    0.2%
    4     5      3679     19.22    0.5%
    4     6      3782     46.73    1.2%
    4     7      3944      15.3    0.3%
    4     8      4011     35.19    0.8%
    4     9      4172     18.23    0.4%
    4    10      4251     41.36    0.9%
    4    11      4436     17.22    0.3%
    4    12      4526     11.79    0.2%
    4    13      4650     13.57    0.2%
    4    14      4820     27.62    0.5%
    4    15      4937     14.06    0.2%
    4    16      5084     21.76    0.4%

Quality and confidence:
param     error
t         2.556
n         0.503

Model:
Time ~=     1155
    + t    469.5
    + n    126.9
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    298.7
    + r    172.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     175.5     0.353    0.2%
    1     414.1     25.08    6.0%
    2     661.7     23.15    3.4%
    3     851.4     3.139    0.3%
    4      1001     7.462    0.7%
    5      1173     2.832    0.2%
    6      1352     3.413    0.2%
    7      1519     8.208    0.5%
    8      1694     6.079    0.3%
    9      1854     11.93    0.6%
   10      1914     12.61    0.6%
   11      2096     6.458    0.3%
   12      2393     5.657    0.2%
   13      2518     8.873    0.3%
   14      2731        13    0.4%
   15      2860     13.86    0.4%
   16      3092     14.82    0.4%
   17      3225     11.36    0.3%
   18      3298     11.46    0.3%
   19      3589     10.74    0.2%
   20      3762     12.17    0.3%

Quality and confidence:
param     error
r         0.588

Model:
Time ~=    277.6
    + r    173.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    397.6
    + r    527.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     175.6     0.557    0.3%
    1     963.7     8.089    0.8%
    2      1484     9.922    0.6%
    3      2018     10.42    0.5%
    4      2520     11.99    0.4%
    5      3084     17.12    0.5%
    6      3600      13.9    0.3%
    7      4062     16.18    0.3%
    8      4597     19.96    0.4%
    9      5196     15.87    0.3%
   10      5587     33.53    0.6%
   11      6087     18.43    0.3%
   12      6709     15.88    0.2%
   13      7273     17.72    0.2%
   14      7743      40.3    0.5%
   15      8268     21.77    0.2%
   16      8778     93.77    1.0%
   17      9295     31.25    0.3%
   18     10000     14.01    0.1%
   19     10500     36.21    0.3%
   20     10940     70.02    0.6%

Quality and confidence:
param     error
r         0.905

Model:
Time ~=    370.7
    + r    529.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    847.2
    + n    41.22
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     754.2     35.98    4.7%
    1     901.3      2.86    0.3%
    2     921.3     30.53    3.3%
    3     974.2     17.04    1.7%
    4      1038     10.63    1.0%
    5      1068     9.148    0.8%
    6      1097     15.66    1.4%
    7      1157     12.13    1.0%
    8      1144     8.092    0.7%
    9      1228     4.175    0.3%
   10      1226     3.938    0.3%
   11      1303     25.95    1.9%
   12      1331     22.81    1.7%
   13      1391     13.68    0.9%
   14      1410     18.01    1.2%
   15      1483     50.03    3.3%
   16      1489     28.21    1.8%

Quality and confidence:
param     error
n         0.554

Model:
Time ~=    834.9
    + n    42.13
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    186.1
    + r    986.3
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     200.7     1.586    0.7%
    1      1297     16.37    1.2%
    2      2270     21.72    0.9%
    3      3185     30.43    0.9%
    4      4145     58.14    1.4%
    5      5097     74.95    1.4%
    6      6097     21.57    0.3%
    7      7022      20.3    0.2%
    8      8003     28.14    0.3%
    9      9013     32.81    0.3%
   10      9796     42.88    0.4%
   11     10760     23.75    0.2%
   12     11930     69.43    0.5%
   13     12950     37.58    0.2%
   14     13960     47.67    0.3%
   15     15000     43.29    0.2%
   16     16000     68.45    0.4%
   17     16740      43.7    0.2%
   18     18130     31.36    0.1%
   19     19330     54.05    0.2%
   20     20110     56.42    0.2%

Quality and confidence:
param     error
r         1.775

Model:
Time ~=    144.7
    + r    990.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    176.5
    + r    704.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     176.1     1.468    0.8%
    1       915     27.39    2.9%
    2      1625     12.57    0.7%
    3      2212     8.246    0.3%
    4      2999     25.92    0.8%
    5      3724     24.33    0.6%
    6      4413     17.41    0.3%
    7      5070     24.58    0.4%
    8      5762     37.66    0.6%
    9      6502     31.07    0.4%
   10      7186     24.05    0.3%
   11      7904      35.4    0.4%
   12      8585     28.84    0.3%
   13      9283     24.23    0.2%
   14      9975     26.93    0.2%
   15     10730     56.87    0.5%
   16     11450     92.35    0.8%
   17     11940     57.95    0.4%
   18     12950     32.58    0.2%
   19     13620     31.69    0.2%
   20     14390     31.63    0.2%

Quality and confidence:
param     error
r         0.866

Model:
Time ~=    159.8
    + r    705.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    809.5
    + n    76.51
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     747.7     43.02    5.7%
    1     873.1     33.91    3.8%
    2     974.6     5.584    0.5%
    3      1057     3.324    0.3%
    4      1131     9.762    0.8%
    5      1202     10.52    0.8%
    6      1279     14.34    1.1%
    7      1354     15.64    1.1%
    8      1439     15.08    1.0%
    9      1529     20.09    1.3%
   10      1612     15.16    0.9%
   11      1568     19.91    1.2%
   12      1646     13.63    0.8%
   13      1741     11.88    0.6%
   14      1821     11.72    0.6%
   15      1997     45.11    2.2%
   16      2058     29.79    1.4%

Quality and confidence:
param     error
n         0.745

Model:
Time ~=    808.9
    + n    75.62
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    205.1
    + r     3818
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     181.6     1.853    1.0%
    1      4109     43.85    1.0%
    2      7942     26.18    0.3%
    3     11690     31.69    0.2%
    4     15450     29.03    0.1%
    5     19320     51.01    0.2%
    6     23080     35.14    0.1%
    7     26820     48.49    0.1%
    8     30670     63.02    0.2%
    9     34540     88.81    0.2%
   10     38420     61.52    0.1%
   11     42060     118.1    0.2%
   12     45840     72.62    0.1%
   13     49880     42.54    0.0%
   14     53590      91.9    0.1%
   15     57600     94.43    0.1%
   16     61340     94.85    0.1%
   17     64810     110.3    0.1%
   18     69090     61.14    0.0%
   19     72840     58.32    0.0%
   20     76750     111.5    0.1%

Quality and confidence:
param     error
r         1.528

Model:
Time ~=    189.3
    + r     3819
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    12800
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     188.7     4.101    2.1%
    1     12940     113.8    0.8%
    2     25400     180.6    0.7%
    3     38290     137.4    0.3%
    4     50540     179.6    0.3%
    5     63620     179.6    0.2%
    6     75950     334.5    0.4%
    7     89040     375.8    0.4%
    8    101300     319.7    0.3%
    9    115000     251.5    0.2%
   10    127900     530.9    0.4%
   11    140900       583    0.4%
   12    154100     301.6    0.1%
   13    167400     621.7    0.3%
   14    180100     296.1    0.1%
   15    192900      1425    0.7%
   16    203500     664.6    0.3%
   17    216700     926.1    0.4%
   18    229300     947.1    0.4%
   19    242900       909    0.3%
   20    256400     467.1    0.1%

Quality and confidence:
param     error
r         10.02

Model:
Time ~=        0
    + r    12800
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17840
    + t     3856
    + i    34.91
    + o    59.83
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    111000     251.9    0.2%
    1     0   960     79130     531.8    0.6%
    1    20   960     79910       554    0.6%
    1    40   960     80430       443    0.5%
    1    60   960     81540     665.2    0.8%
    1    80   960     82440      1045    1.2%
    1   100   960     82800     509.4    0.6%
    1   120   960     84420       898    1.0%
    1   140   960     84300     568.4    0.6%
    1   160   960     85670     715.8    0.8%
    1   180   960     85620     505.6    0.5%
    1   200   960     87270     702.4    0.8%
    1   220   960     86870      1017    1.1%
    1   240   960     88230      1237    1.4%
    1   260   960     88330     365.9    0.4%
    1   280   960     89510     558.4    0.6%
    1   300   960     90620     547.6    0.6%
    1   320   960     90700     851.3    0.9%
    1   340   960     92450     943.8    1.0%
    1   360   960     93140     643.2    0.6%
    1   380   960     93650     645.3    0.6%
    1   400   960     93760     587.1    0.6%
    1   420   960     93860      1155    1.2%
    1   440   960     95730     864.2    0.9%
    1   460   960     95440     453.5    0.4%
    1   480   960     96310      1034    1.0%
    1   500   960     97480     693.3    0.7%
    1   520   960     98430       872    0.8%
    1   540   960     98150     887.9    0.9%
    1   560   960     99400     362.8    0.3%
    1   580   960     99480     919.6    0.9%
    1   600   960    100600     530.7    0.5%
    1   620   960    101700     997.9    0.9%
    1   640   960    101500     707.2    0.6%
    1   660   960    101900     453.9    0.4%
    1   680   960    102500     948.5    0.9%
    1   700   960    105000     804.2    0.7%
    1   720   960    104900     650.4    0.6%
    1   740   960    106000     828.3    0.7%
    1   760   960    107000     508.3    0.4%
    1   780   960    107400       381    0.3%
    1   800   960    107800      1030    0.9%
    1   820   960    107800     793.5    0.7%
    1   840   960    108900     739.4    0.6%
    1   860   960    110000      1241    1.1%
    1   880   960    110400     887.4    0.8%
    1   900   960    110000     686.6    0.6%
    1   920   960    111500     574.4    0.5%
    1   940   960    112000      1014    0.9%
    1   960   960    113200     634.2    0.5%
    1   980   960    113200     647.1    0.5%
    1  1000   960    114200     347.8    0.3%
    1  1020   960    115900     818.8    0.7%
    1  1024     0     57820     828.4    1.4%
    1  1024    19     59500     931.3    1.5%
    1  1024    38     59770     413.3    0.6%
    1  1024    57     60970     787.6    1.2%
    1  1024    76     62140     805.7    1.2%
    1  1024    95     62290      1019    1.6%
    1  1024   114     65250      1128    1.7%
    1  1024   133     65960     846.5    1.2%
    1  1024   152     67180     782.3    1.1%
    1  1024   171     68930     834.8    1.2%
    1  1024<truncated>...
```

</details>",10468,2021-12-10T17:11:14Z,0
443,jamesblacklock,/benchmark runtime pallet pallet_contracts,10468,2021-12-14T18:31:15Z,0
444,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""wasmer-2.1-test-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.264
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.264
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.187
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     70.07     0.387    0.5%
   20     56.24     0.425    0.7%
   40     94.74      0.62    0.6%
   60     132.8     0.682    0.5%
   80     166.9     1.129    0.6%
  100     205.2     1.168    0.5%
  120     248.8     2.381    0.9%
  140     289.7     2.474    0.8%
  160     324.8     2.826    0.8%
  180     371.8     1.802    0.4%
  200     413.7      2.59    0.6%
  220     450.5     4.555    1.0%
  240     491.3     3.856    0.7%
  260     545.4     7.007    1.2%
  280     581.8     2.155    0.3%
  300     626.6     4.704    0.7%
  320     671.6     1.529    0.2%
  340     706.7     8.421    1.1%
  360     764.1     9.412    1.2%
  380     813.9     11.49    1.4%
  400     849.4     8.751    1.0%
  420     904.9     10.26    1.1%
  440     933.7     12.27    1.3%
  460     990.1     4.927    0.4%
  480      1039     10.72    1.0%
  500      1066     12.76    1.1%
  520      1119     9.131    0.8%
  540      1185     13.21    1.1%
  560      1208     13.08    1.0%
  580      1263     6.389    0.5%
  600      1303     4.955    0.3%
  620      1345        12    0.8%
  640      1421     5.664    0.3%
  660      1429     13.75    0.9%
  680      1480     10.26    0.6%
  700      1492     17.86    1.1%
  720      1563     17.83    1.1%
  740      1604     9.177    0.5%
  760      1644     14.12    0.8%
  780      1702     15.27    0.8%
  800      1772     19.07    1.0%
  820      1780     17.46    0.9%
  840      1836     18.22    0.9%
  860      1875     12.51    0.6%
  880      1929     18.26    0.9%
  900      1930     17.36    0.8%
  920      2011      15.8    0.7%
  940      2043     19.61    0.9%
  960      2086     9.726    0.4%
  980      2161     17.52    0.8%
 1000      2193     9.803    0.4%
 1020      2227     15.44    0.6%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.192
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      119
    + q    0.283
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.335     0.032    1.3%
   20     88.25      0.72    0.8%
   40     103.1     1.312    1.2%
   60     112.9     1.655    1.4%
   80     122.4       1.1    0.8%
  100       128     2.154    1.6%
  120     137.2     2.698    1.9%
  140     147.9     4.252    2.8%
  160     155.5     4.167    2.6%
  180     171.1     3.295    1.9%
  200     172.6     3.619    2.0%
  220     189.7     7.623    4.0%
  240     192.6     5.006    2.5%
  260       205     7.624    3.7%
  280     212.2     9.738    4.5%
  300     208.9     2.989    1.4%
  320     217.9     1.368    0.6%
  340       222     2.044    0.9%
  360       233     5.309    2.2%
  380     238.7     4.898    2.0%
  400     241.1     1.888    0.7%
  420     258.9      9.39    3.6%
  440     253.1     1.764    0.6%
  460     259.6     2.467    0.9%
  480     263.5     2.533    0.9%
  500     269.3      2.81    1.0%
  520     275.4     1.968    0.7%
  540     279.8     3.164    1.1%
  560     285.7     2.262    0.7%
  580     292.1      2.31    0.7%
  600     295.7     3.417    1.1%
  620     298.2     7.553    2.5%
  640     302.3     5.944    1.9%
  660     304.5     3.649    1.1%
  680       313     4.896    1.5%
  700     312.3     13.48    4.3%
  720     306.7     3.337    1.0%
  740     327.8     3.269    0.9%
  760     333.3     4.077    1.2%
  780     322.1     4.489    1.3%
  800     340.8     6.376    1.8%
  820     332.5      6.01    1.8%
  840     343.7     4.238    1.2%
  860     357.5     3.955    1.1%
  880     358.8     4.541    1.2%
  900     363.1     6.674    1.8%
  920     373.6     11.45    3.0%
  940     375.7     3.029    0.8%
  960     384.3     2.869    0.7%
  980     378.9     3.831    1.0%
 1000     387.2     7.073    1.8%
 1020     397.8     2.231    0.5%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    108.7
    + q    0.294
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.97
    + c    91.94
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     48.19     0.233    0.4%
    2     228.4     0.169    0.0%
    4     408.3      0.34    0.0%
    6     580.6      9.28    1.5%
    8       781     15.41    1.9%
   10       942      13.6    1.4%
   12      1111     14.28    1.2%
   14      1328     14.57    1.0%
   16      1501     16.31    1.0%
   18      1685     14.73    0.8%
   20      1854     16.27    0.8%
   22      2099     25.65    1.2%
   24      2172     15.18    0.6%
   26      2459     9.289    0.3%
   28      2620      14.9    0.5%
   30      2773     15.42    0.5%
   32      2954      21.7    0.7%
   34      3165     17.28    0.5%
   36      3327     12.86    0.3%
   38      3504     7.241    0.2%
   40      3670     22.22    0.6%
   42      3834     10.01    0.2%
   44      4015     26.76    0.6%
   46      4180     39.47    0.9%
   48      4332     12.75    0.2%
   50      4709     17.97    0.3%
   52      4883     21.59    0.4%
   54      5025     3.741    0.0%
   56      5199     14.74    0.2%
   58      5348     22.94    0.4%
   60      5518     9.579    0.1%
   62      5676      22.5    0.3%
   64      5866     22.45    0.3%
   66      6124      11.7    0.1%
   68      6290     19.67    0.3%
   70      6455     24.34    0.3%
   72      6619      16.2    0.2%
   74      7020     15.25    0.2%
   76      6956     29.06    0.4%
   78      7125     10.21    0.1%
   80      7280     25.66    0.3%
   82      7477     20.81    0.2%
   84      7637      34.9    0.4%
   86      7797     28.61    0.3%
   88      7983     28.25    0.3%
   90      8117     9.205    0.1%
   92      8289     13.71    0.1%
   94      8436     19.11    0.2%
   96      8905     14.77    0.1%
   98      9225     37.61    0.4%
  100      9364     23.41    0.2%
  102      9519     15.47    0.1%
  104      9720      21.1    0.2%
  106      9888     29.57    0.2%
  108     10030     28.92    0.2%
  110     10210     19.56    0.1%
  112     10360     15.63    0.1%
  114     10520      23.9    0.2%
  116     10730     29.72    0.2%
  118     10850     17.99    0.1%
  120     11030      23.5    0.2%
  122     11190      18.6    0.1%
  124     11370     39.91    0.3%
  126     11570      32.9    0.2%
  128     12090     32.73    0.2%

Quality and confidence:
param     error
c         0.095

Model:
Time ~=    10.88
    + c    92.15
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    213.6
    + c    104.2
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     199.1     7.061    3.5%
    2     437.9     9.461    2.1%
    4     663.9     2.616    0.3%
    6     867.6     1.655    0.1%
    8      1076     2.465    0.2%
   10      1278     1.592    0.1%
   12      1480     1.158    0.0%
   14      1700      2.67    0.1%
   16      1902     2.027    0.1%
   18      2103     1.976    0.0%
   20      2308     2.308    0.0%
   22      2504     5.481    0.2%
   24      2698      5.01    0.1%
   26      2930     2.166    0.0%
   28      3132     4.358    0.1%
   30      3336     2.579    0.0%
   32      3533     4.111    0.1%
   34      3746     3.403    0.0%
   36      3952     1.398    0.0%
   38      4143     3.082    0.0%
   40      4348     3.017    0.0%
   42      4532     2.992    0.0%
   44      4741     8.155    0.1%
   46      4956       1.8    0.0%
   48      5161     3.708    0.0%
   50      5457     3.726    0.0%
   52      5657      5.84    0.1%
   54      5867     4.719    0.0%
   56      6050     13.78    0.2%
   58      6265     15.66    0.2%
   60      6462     7.102    0.1%
   62      6665     16.31    0.2%
   64      6862     17.33    0.2%
   66      7086     8.029    0.1%
   68      7283     7.023    0.0%
   70      7493      14.1    0.1%
   72      7658     20.09    0.2%
   74      7846     17.47    0.2%
   76      8070     23.44    0.2%
   78      8267     20.78    0.2%
   80      8482     30.01    0.3%
   82      8668     26.01    0.3%
   84      8888     26.18    0.2%
   86      9082     29.38    0.3%
   88      9276     7.122    0.0%
   90      9519     27.51    0.2%
   92      9675     24.12    0.2%
   94      9856     22.08    0.2%
   96     10060     18.77    0.1%
   98     10580     16.92    0.1%
  100     10780     20.03    0.1%
  102     10990      25.3    0.2%
  104     11150     14.03    0.1%
  106     11350     35.12    0.3%
  108     11570     23.47    0.2%
  110     11780     45.54    0.3%
  112     11950     21.95    0.1%
  114     12150     37.69    0.3%
  116     12340     20.51    0.1%
  118     12600     34.68    0.2%
  120     12800      27.2    0.2%
  122     12970      29.8    0.2%
  124     13230     48.35    0.3%
  126     13410     18.56    0.1%
  128     13590     31.59    0.2%

Quality and confidence:
param     error
c         0.072

Model:
Time ~=    190.2
    + c    104.6
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      410
    + c    334.2
    + s    2.093
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2562      80.5    3.1%
    1  1024      2837     38.18    1.3%
    2  1024      3250     7.431    0.2%
    3  1024      3600     21.01    0.5%
    4  1024      3876     16.99    0.4%
    5  1024      4171     13.92    0.3%
    6  1024      4497     17.11    0.3%
    7  1024      4902     32.84    0.6%
    8  1024      5296     24.93    0.4%
    9  1024      5561     14.66    0.2%
   10  1024      5938     16.51    0.2%
   11  1024      6279     26.46    0.4%
   12  1024      6484     18.96    0.2%
   13  1024      7028     22.02    0.3%
   14  1024      7289     31.81    0.4%
   15  1024      7656      28.1    0.3%
   16  1024      7928     37.04    0.4%
   17  1024      8291     18.93    0.2%
   18  1024      8628     11.45    0.1%
   19  1024      8939     17.09    0.1%
   20  1024      9213     24.68    0.2%
   21  1024      9503     27.45    0.2%
   22  1024      9749     21.91    0.2%
   23  1024     10030     16.08    0.1%
   24  1024     10400     21.57    0.2%
   25  1024     10870     32.33    0.2%
   26  1024     11210     22.46    0.2%
   27  1024     11640     66.78    0.5%
   28  1024     11980     43.55    0.3%
   29  1024     12270     31.69    0.2%
   30  1024     12670     32.65    0.2%
   31  1024     12930     53.49    0.4%
   32  1024     13310     18.85    0.1%
   33  1024     13450     29.49    0.2%
   34  1024     13720     16.72    0.1%
   35  1024     14100     52.17    0.3%
   36  1024     14530     14.71    0.1%
   37  1024     14820     26.97    0.1%
   38  1024     15210     54.26    0.3%
   39  1024     15510     82.54    0.5%
   40  1024     15930     33.43    0.2%
   41  1024     16250     20.02    0.1%
   42  1024     16430     87.73    0.5%
   43  1024     16670     12.49    0.0%
   44  1024     16990     17.32    0.1%
   45  1024     17440     28.67    0.1%
   46  1024     17690     33.92    0.1%
   47  1024     17940      54.1    0.3%
   48  1024     18350     19.23    0.1%
   49  1024     19100     43.87    0.2%
   50  1024     19680     11.41    0.0%
   51  1024     19950     45.77    0.2%
   52  1024     20310     15.32    0.0%
   53  1024     20630     18.41    0.0%
   54  1024     21370     389.9    1.8%
   55  1024     21270     23.52    0.1%
   56  1024     21560      48.1    0.2%
   57  1024     21710     32.06    0.1%
   58  1024     22320     21.23    0.0%
   59  1024     22340      94.7    0.4%
   60  1024     22580      38.5    0.1%
   61  1024     22860     30.32    0.1%
   62  1024     23160     46.08    0.1%
   63  1024     23470     29.14    0.1%
   64     0     21920     73.43    0.3%
   64    20     22020     40.95    0.1%
   64    40     22020     44.43    0.2%
   64    60     22140     37.07    0.1%
   64    80     22210     56.23    0.2%
   64   100     22250     35.71    0.1%
   64   120     22260     49.73    0.2%
   64   140     22300     43.73    0.1%
   64   160     22370     63.73    0.2%
   64   180     22190     37.41    0.1%
   64   200     22160     88.12    0.3%
   64   220     22170     78.39    0.3%
   64   240     22200     61.08    0.2%
   64   260     22180     110.2    0.4%
   64   280     22590     26.03    0.1%
   64   300     22660     22.85    0.1%
   64   320     22660     20.89    0.0%
   64   340     22520     68.53    0.3%
   64   360     22590     13.54    0.0%
   64   380     22520     51.21    0.2%
   64   400     22810     68.13    0.2%
   64   420     22860     79.23    0.3%
   64   440     23040     70.09    0.3%
   64   460     22950     12.98    0.0%
   64   480     22770     33.68    0.1%
   64   500     22840     39.11    0.1%
   64   520     23100     76.24    0.3%
   64   540     23280     33.95    0.1%
   64   560     23110     69.61    0.3%
   64   580     23170     46.76    0.2%
   64   600     23250     114.8    0.4%
   64   620     23000     69.62    0.3%
   64   640     23350     46.11    0.1%
   64   660     23540     25.43    0.1%
   64   680     23460     51.68    0.2%
   64   700     23450     16.51    0.0%
   64   720     23470     23.21    0.0%
   64   740     23300      65.8    0.2%
   64   760     23550     14.88    0.0%
   64   780     23630     14.22    0.0%
   64   800     23710     20.77    0.0%
   64   820     23790     14.39    0.0%
   64   840     23750     16.28    0.0%
   64   860     23540     36.79    0.1%
   64   880     23810     9.679    0.0%
   64   900     23860     14.35    0.0%
   64   920     23900     16.13    0.0%
   64   940     23760     87.35    0.3%
   64   960     23920     129.2    0.5%
   64   980     24080     17.79    0.0%
   64  1000     23930     34.93    0.1%
   64  1020     23880     96.69    0.4%
   64  1024     23970     82.29    0.3%

Quality and confidence:
param     error
c         0.295
s         0.019

Model:
Time ~=    394.6
    + c    336.7
    + s    2.053
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      250
    + s    2.042
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0       223     0.712    0.3%
   20       265     0.913    0.3%
   40     306.2     1.341    0.4%
   60     383.9      12.2    3.1%
   80     393.1     10.12    2.5%
  100     437.5     11.57    2.6%
  120     479.4     15.29    3.1%
  140     541.2     1.091    0.2%
  160     588.3     6.948    1.1%
  180     622.2     1.444    0.2%
  200     662.1     1.468    0.2%
  220     700.9     0.495    0.0%
  240     758.7     16.56    2.1%
  260       786     9.583    1.2%
  280     822.1     6.447    0.7%
  300     886.7     7.417    0.8%
  320     889.4     9.357    1.0%
  340       927     11.21    1.2%
  360     967.1     11.38    1.1%
  380      1012     19.09    1.8%
  400      1045     8.498    0.8%
  420      1091      9.75    0.8%
  440      1171     10.86    0.9%
  460      1195     5.265    0.4%
  480      1230     8.185    0.6%
  500      1272     17.26    1.3%
  520      1314      13.3    1.0%
  540      1356     12.52    0.9%
  560      1387     13.43    0.9%
  580      1426     19.68    1.3%
  600      1467      16.5    1.1%
  620      1518     2.287    0.1%
  640      1557     9.196    0.5%
  660      1594     15.22    0.9%
  680      1633     16.05    0.9%
  700      1679     14.33    0.8%
  720      1749     16.74    0.9%
  740      1779     15.22    0.8%
  760      1809     6.385    0.3%
  780      1839     14.67    0.7%
  800      1875      13.3    0.7%
  820      1921     11.86    0.6%
  840      1960     10.86    0.5%
  860      1992     16.43    0.8%
  880      2016     1.875    0.0%
  900      2111     13.36    0.6%
  920      2114      15.1    0.7%
  940      2165     11.24    0.5%
  960      2206     11.41    0.5%
  980      2260     12.25    0.5%
 1000      2281     10.84    0.4%
 1020      2329      8.23    0.3%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    243.7
    + s    2.049
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    201.3
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    201.3
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    77.53
    + c    91.83
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     78.11     0.365    0.4%
    1     174.6     0.272    0.1%
    2     260.9     0.556    0.2%
    3     347.9     3.386    0.9%
    4       442     0.501    0.1%
    5     534.7      14.2    2.6%
    6     615.3      10.4    1.6%
    7     728.6     12.27    1.6%
    8     805.8     9.141    1.1%
    9     901.4     15.16    1.6%
   10     978.1     4.671    0.4%
   11      1067     15.59    1.4%
   12      1157     11.29    0.9%
   13      1282     12.73    0.9%
   14      1364     9.661    0.7%
   15      1470     12.75    0.8%
   16      1536      14.1    0.9%
   17      1652     11.62    0.7%
   18      1732      12.3    0.7%
   19      1817     12.49    0.6%
   20      1895     14.12    0.7%
   21      1974     14.67    0.7%
   22      2077     11.59    0.5%
   23      2141     18.13    0.8%
   24      2226     16.78    0.7%
   25      2429     10.29    0.4%
   26      2501     15.35    0.6%
   27      2589     10.95    0.4%
   28      2675     15.04    0.5%
   29      2754      19.8    0.7%
   30      2834      14.2    0.5%
   31      2913     16.43    0.5%
   32      3005     9.303    0.3%
   33      3137     8.136    0.2%
   34      3222     7.478    0.2%
   35      3303     13.23    0.4%
   36      3383     9.086    0.2%
   37      3473     12.08    0.3%
   38      3552     19.59    0.5%
   39      3638     13.53    0.3%
   40      3710        17    0.4%
   41      3796     7.592    0.1%
   42      3889     14.77    0.3%
   43      3957     10.29    0.2%
   44      4052     13.09    0.3%
   45      4123     8.205    0.1%
   46      4203     18.26    0.4%
   47      4287     9.943    0.2%
   48      4373     9.706    0.2%
   49      4668     16.76    0.3%
   50      4756     19.38    0.4%
   51      4853     13.11    0.2%
   52      4915     16.27    0.3%
   53      5006     12.46    0.2%
   54      5096     18.33    0.3%
   55      5171     14.07    0.2%
   56      5283     25.99    0.4%
   57      5328     14.58    0.2%
   58      5427     13.83    0.2%
   59      5498     13.34    0.2%
   60      5590     18.18    0.3%
   61      5677     18.97    0.3%
   62      5744     13.63    0.2%
   63      5843     21.94    0.3%
   64      5934     27.07    0.4%

Quality and confidence:
param     error
c         0.093

Model:
Time ~=    69.79
    + c    91.98
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.61
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.61
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      280
    + r    207.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     202.8     1.991    0.9%
    1     427.2     25.77    6.0%
    2     657.1     30.75    4.6%
    3     817.9     2.772    0.3%
    4      1022     3.434    0.3%
    5      1356     3.947    0.2%
    6      1562     2.865    0.1%
    7      1762     4.969    0.2%
    8      1847     27.96    1.5%
    9      2160     4.781    0.2%
   10      2373     3.762    0.1%
   11      2529     57.91    2.2%
   12      2743     54.51    1.9%
   13      2993      9.34    0.3%
   14      3192     8.825    0.2%
   15      3386     4.199    0.1%
   16      3599     11.37    0.3%
   17      3810      19.2    0.5%
   18      3979     16.94    0.4%
   19      4203     4.269    0.1%
   20      4342     39.91    0.9%

Quality and confidence:
param     error
r         0.551

Model:
Time ~=    242.4
    + r    208.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    307.1
    + r    205.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     205.9     2.495    1.2%
    1     482.3     5.034    1.0%
    2     681.9     24.81    3.6%
    3     955.6     3.578    0.3%
    4      1156     3.603    0.3%
    5      1231     14.67    1.1%
    6      1562     2.288    0.1%
    7      1760     13.71    0.7%
    8      1962     5.245    0.2%
    9      2169     3.343    0.1%
   10      2384     4.087    0.1%
   11      2587     5.395    0.2%
   12      2788     4.656    0.1%
   13      2900     39.08    1.3%
   14      3195     5.555    0.1%
   15      3392     7.519    0.2%
   16      3582     7.653    0.2%
   17      3806     2.954    0.0%
   18      4001     4.016    0.1%
   19      4218     18.27    0.4%
   20      4413     18.65    0.4%

Quality and confidence:
param     error
r         0.456

Model:
Time ~=    281.6
    + r    207.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    320.8
    + r    203.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     212.8     9.007    4.2%
    1     493.4     6.981    1.4%
    2     712.2     36.38    5.1%
    3     938.9     14.47    1.5%
    4      1154     4.745    0.4%
    5      1355     4.908    0.3%
    6      1570     3.981    0.2%
    7      1759      4.22    0.2%
    8      1961     4.726    0.2%
    9      2171     4.821    0.2%
   10      2309     4.223    0.1%
   11      2572     2.571    0.0%
   12      2737      31.4    1.1%
   13      2964      9.63    0.3%
   14      3178     3.834    0.1%
   15      3336     32.31    0.9%
   16      3564     6.261    0.1%
   17      3779     15.85    0.4%
   18      3997     21.79    0.5%
   19      4178     5.777    0.1%
   20      4383     9.753    0.2%

Quality and confidence:
param     error
r          0.38

Model:
Time ~=    304.9
    + r    204.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    312.6
    + r    354.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       210     2.529    1.2%
    1     642.5     25.09    3.9%
    2      1015     14.57    1.4%
    3      1398     8.693    0.6%
    4      1729     4.581    0.2%
    5      1974     8.682    0.4%
    6      2473     6.285    0.2%
    7      2819     4.843    0.1%
    8      3172     5.401    0.1%
    9      3482     41.94    1.2%
   10      3880     10.87    0.2%
   11      4149     43.27    1.0%
   12      4573     8.897    0.1%
   13      4923     15.92    0.3%
   14      5262     20.12    0.3%
   15      5602     24.21    0.4%
   16      5958     20.64    0.3%
   17      6347     13.76    0.2%
   18      6664     12.55    0.1%
   19      7017     16.99    0.2%
   20      7383     18.38    0.2%

Quality and confidence:
param     error
r         0.482

Model:
Time ~=    291.5
    + r      355
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    314.4
    + r    204.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     220.1     13.41    6.0%
    1     407.2     3.743    0.9%
    2       711     12.92    1.8%
    3     944.9     9.625    1.0%
    4      1150     2.866    0.2%
    5      1349     6.996    0.5%
    6      1558     1.413    0.0%
    7      1758     3.332    0.1%
    8      1965     2.809    0.1%
    9      2175     4.465    0.2%
   10      2373     4.606    0.1%
   11      2566     9.991    0.3%
   12      2771     7.842    0.2%
   13      2973     7.031    0.2%
   14      3166     4.141    0.1%
   15      3388      6.71    0.1%
   16      3587     7.421    0.2%
   17      3792     5.924    0.1%
   18      4000     9.761    0.2%
   19      4198     3.565    0.0%
   20      4395     9.636    0.2%

Quality and confidence:
param     error
r         0.366

Model:
Time ~=    289.8
    + r    206.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    295.7
    + r    205.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     214.9     6.046    2.8%
    1     469.5     30.62    6.5%
    2     714.1     3.624    0.5%
    3     942.8      5.31    0.5%
    4      1016     1.969    0.1%
    5      1217     1.889    0.1%
    6      1528     69.25    4.5%
    7      1758     5.061    0.2%
    8      1956     3.262    0.1%
    9      2151     3.987    0.1%
   10      2360     11.45    0.4%
   11      2581     6.503    0.2%
   12      2778     6.781    0.2%
   13      2978     4.337    0.1%
   14      3189     7.744    0.2%
   15      3389     10.54    0.3%
   16      3580     6.289    0.1%
   17      3779     7.224    0.1%
   18      3991     7.483    0.1%
   19      4176     5.296    0.1%
   20      4385     7.634    0.1%

Quality and confidence:
param     error
r         0.467

Model:
Time ~=      266
    + r    207.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    316.2
    + r    204.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.1     8.342    3.6%
    1     448.5      29.1    6.4%
    2     722.4     10.21    1.4%
    3     947.7     8.756    0.9%
    4      1150     4.912    0.4%
    5      1356     2.973    0.2%
    6      1554     4.491    0.2%
    7      1732     4.882    0.2%
    8      1955      4.22    0.2%
    9      2163      4.99    0.2%
   10      2350     24.62    1.0%
   11      2583     4.792    0.1%
   12      2772     6.975    0.2%
   13      2970     3.896    0.1%
   14      3189      6.75    0.2%
   15      3367      19.9    0.5%
   16      3603     8.511    0.2%
   17      3788     12.56    0.3%
   18      4003     9.429    0.2%
   19      4184     4.446    0.1%
   20      4379     2.826    0.0%

Quality and confidence:
param     error
r         0.328

Model:
Time ~=    298.4
    + r    205.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    255.7
    + r    207.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     225.5     6.365    2.8%
    1     449.9     11.09    2.4%
    2     614.7     3.314    0.5%
    3       919     17.28    1.8%
    4      1131     3.776    0.3%
    5      1368     2.482    0.1%
    6      1429     2.948    0.2%
    7      1620     2.519    0.1%
    8      1863     43.82    2.3%
    9      2052      29.1    1.4%
   10      2372     6.011    0.2%
   11      2581     9.309    0.3%
   12      2770     4.521    0.1%
   13      2987     7.475    0.2%
   14      3080     28.38    0.9%
   15      3393     13.68    0.4%
   16      3572     5.844    0.1%
   17      3781     4.444    0.1%
   18      3987     8.699    0.2%
   19      4186     5.742    0.1%
   20      4417     11.33    0.2%

Quality and confidence:
param     error
r         0.559

Model:
Time ~=    241.2
    + r    208.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    329.5
    + r    347.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.7     3.618    1.5%
    1       635     27.21    4.2%
    2      1016     5.828    0.5%
    3      1373     54.93    3.9%
    4      1752     4.767    0.2%
    5      2007     46.98    2.3%
    6      2444     6.804    0.2%
    7      2789     8.754    0.3%
    8      3130     12.27    0.3%
    9      3480     8.576    0.2%
   10      3818     8.701    0.2%
   11      4153     16.57    0.3%
   12      4495     13.42    0.2%
   13      4846     8.934    0.1%
   14      5110     35.95    0.7%
   15      5437     25.32    0.4%
   16      5797      26.9    0.4%
   17      6215     17.02    0.2%
   18      6588     18.82    0.2%
   19      6954     25.97    0.3%
   20      7570     355.2    4.6%

Quality and confidence:
param     error
r         1.268

Model:
Time ~=    290.6
    + r    351.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    327.4
    + r    125.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     211.1     10.05    4.7%
    1     359.9     22.71    6.3%
    2     601.4     7.625    1.2%
    3     743.9     38.89    5.2%
    4     695.2     0.813    0.1%
    5     926.2     16.12    1.7%
    6      1270     8.241    0.6%
    7      1399     14.69    1.0%
    8      1404     5.467    0.3%
    9      1598     84.69    5.2%
   10      1581     4.724    0.2%
   11      1710     2.941    0.1%
   12      1836     4.868    0.2%
   13      1959     4.103    0.2%
   14      2090     6.953    0.3%
   15      2217     12.17    0.5%
   16      2325     3.169    0.1%
   17      2445     22.71    0.9%
   18      2578     3.946    0.1%
   19      2705     4.587    0.1%
   20      2830     5.211    0.1%

Quality and confidence:
param     error
r         0.967

Model:
Time ~=    332.4
    + r    126.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    269.6
    + r    196.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     214.1     2.528    1.1%
    1     395.8     5.389    1.3%
    2     701.4     16.02    2.2%
    3     927.8     9.639    1.0%
    4      1085     8.453    0.7%
    5      1167     2.056    0.1%
    6      1359     5.801    0.4%
    7      1574      40.7    2.5%
    8      1884     5.437    0.2%
    9      2062     16.79    0.8%
   10      2241     20.83    0.9%
   11      2389     53.45    2.2%
   12      2662     6.258    0.2%
   13      2839     7.737    0.2%
   14      3057     12.51    0.4%
   15      3216     10.02    0.3%
   16      3400     9.005    0.2%
   17      3592     14.28    0.3%
   18      3792     13.82    0.3%
   19      3998     7.597    0.1%
   20      4181     8.725    0.2%

Quality and confidence:
param     error
r         0.545

Model:
Time ~=    250.9
    + r    197.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.2
    + n    8.533
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     399.3     5.026    1.2%
   20     575.9     33.51    5.8%
   40     695.4     9.606    1.3%
   60     933.4        12    1.2%
   80      1079     18.99    1.7%
  100      1205     37.08    3.0%
  120      1426     18.35    1.2%
  140      1577     17.13    1.0%
  160      1773     24.15    1.3%
  180      1976     24.81    1.2%
  200      2034     44.93    2.2%
  220      2220     30.98    1.3%
  240      2445     49.11    2.0%
  260      2614     25.76    0.9%
  280      2832     28.97    1.0%
  300      3005     33.91    1.1%
  320      3167     24.99    0.7%
  340      3307     52.31    1.5%
  360      3473     29.76    0.8%
  380      3653     75.95    2.0%
  400      3878     22.45    0.5%
  420      3981     36.54    0.9%
  440      4218     50.77    1.2%
  460      4481     27.18    0.6%
  480      4501     47.06    1.0%
  500      4669     47.35    1.0%
  520      4922     31.13    0.6%
  540      5068      78.3    1.5%
  560      5091      15.7    0.3%
  580      5325     62.77    1.1%
  600      5661     20.48    0.3%
  620      5733     107.1    1.8%
  640      6040     62.76    1.0%
  660      6095     82.17    1.3%
  680      6344     32.89    0.5%
  700      6277     73.22    1.1%
  720      6527     36.13    0.5%
  740      6661     55.14    0.8%
  760      6949     31.52    0.4%
  780      7032     93.48    1.3%
  800      7176     84.22    1.1%
  820      7347     99.77    1.3%
  840      7587      55.3    0.7%
  860      7683     107.1    1.3%
  880      8002     138.1    1.7%
  900      8029     88.32    1.1%
  920      8334     98.71    1.1%
  940      8372     78.63    0.9%
  960      8556     66.04    0.7%
  980      8833     97.07    1.0%
 1000      8650     51.75    0.5%
 1020      9083     75.24    0.8%

Quality and confidence:
param     error
n         0.013

Model:
Time ~=    417.5
    + n    8.515
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    224.6
    + r    20.99
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     225.8     7.412    3.2%
    1     246.8     7.198    2.9%

Quality and confidence:
param     error
r         3.444

Model:
Time ~=    225.8
    + r    20.97
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    239.2
    + n    0.518
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     245.7     4.703    1.9%
   20     239.2       2.8    1.1%
   40     265.6     13.32    5.0%
   60     265.6     1.996    0.7%
   80     280.6     8.058    2.8%
  100     288.2     3.412    1.1%
  120     298.1     1.353    0.4%
  140     317.6     3.857    1.2%
  160     331.3     4.211    1.2%
  180     328.1     15.25    4.6%
  200     341.2     1.943    0.5%
  220     341.3     4.621    1.3%
  240       371     3.706    0.9%
  260     368.4     12.65    3.4%
  280     397.3     5.617    1.4%
  300     384.5     7.762    2.0%
  320     419.9     4.795    1.1%
  340     419.3     12.28    2.9%
  360     439.7      10.3    2.3%
  380     441.2     11.33    2.5%
  400     431.4     4.646    1.0%
  420     449.8     5.599    1.2%
  440       478     3.066    0.6%
  460     486.4     13.29    2.7%
  480     490.2      7.61    1.5%
  500     504.3     2.103    0.4%
  520     509.7     8.762    1.7%
  540     524.3     5.509    1.0%
  560     536.1      3.29    0.6%
  580     544.9     3.044    0.5%
  600     550.3     2.045    0.3%
  620     558.2     7.474    1.3%
  640     560.5     13.99    2.4%
  660     588.9     4.184    0.7%
  680       591     4.806    0.8%
  700     577.3     2.792    0.4%
  720     616.7      5.57    0.9%
  740     624.4     2.978    0.4%
  760       623     10.24    1.6%
  780       630     5.845    0.9%
  800     651.5     4.769    0.7%
  820     667.9     3.302    0.4%
  840     690.7      26.8    3.8%
  860     683.2     2.674    0.3%
  880     690.6     5.125    0.7%
  900     711.3     8.219    1.1%
  920     702.2     12.49    1.7%
  940     722.5     5.617    0.7%
  960     730.3     2.064    0.2%
  980     755.7     7.128    0.9%
 1000     780.2     10.47    1.3%
 1020     764.9     4.009    0.5%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    240.1
    + n    0.518
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    220.5
    + r    93.58
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     219.2     8.202    3.7%
    1     313.9     6.478    2.0%

Quality and confidence:
param     error
r         3.484

Model:
Time ~=    219.2
    + r    94.63
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    323.1
    + r    393.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     216.4     5.122    2.3%
    1     672.4     14.63    2.1%
    2      1038     45.85    4.4%
    3      1517     5.876    0.3%
    4      1919     4.026    0.2%
    5      2298     3.691    0.1%
    6      2698     6.813    0.2%
    7      3079     4.894    0.1%
    8      3462     14.36    0.4%
    9      3876     12.23    0.3%
   10      4260     14.16    0.3%
   11      4643     22.57    0.4%
   12      5064     26.44    0.5%
   13      5448     22.52    0.4%
   14      5842      21.3    0.3%
   15      6239     10.62    0.1%
   16      6574     10.54    0.1%
   17      6993     18.54    0.2%
   18      7398     26.73    0.3%
   19      7659     32.63    0.4%
   20      8143     42.71    0.5%

Quality and confidence:
param     error
r         0.545

Model:
Time ~=    309.8
    + r      393
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    364.9
    + r      538
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.5     12.14    5.2%
    1     763.7     7.973    1.0%
    2      1443     4.857    0.3%
    3      1982      4.41    0.2%
    4      2526      10.3    0.4%
    5      3059      3.04    0.0%
    6      3610      10.1    0.2%
    7      4109     26.83    0.6%
    8      4705     23.45    0.4%
    9      5213      17.5    0.3%
   10      5806     32.76    0.5%
   11      6296     25.99    0.4%
   12      6844     23.23    0.3%
   13      7409     8.967    0.1%
   14      7923     15.01    0.1%
   15      8438     33.44    0.3%
   16      8977     8.363    0.0%
   17      9465     15.02    0.1%
   18      9929     35.13    0.3%
   19     10500     38.25    0.3%
   20     11040     34.58    0.3%

Quality and confidence:
param     error
r          0.71

Model:
Time ~=    348.8
    + r    537.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    986.1
    + t    393.3
    + n    125.9
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      2939      14.5    0.4%
    1    16      3413     22.16    0.6%
    2    16      3823     16.82    0.4%
    3    16      4197     8.647    0.2%
    4     0      2510     12.69    0.5%
    4     1      2724     8.317    0.3%
    4     2      2787     32.81    1.1%
    4     3      2927     8.467    0.2%
    4     4      3058     12.78    0.4%
    4     5      3145     36.57    1.1%
    4     6      3322     15.67    0.4%
    4     7      3429     22.67    0.6%
    4     8      3548      20.4    0.5%
    4     9      3669     21.46    0.5%
    4    10      3781     35.54    0.9%
    4    11      3942     32.48    0.8%
    4    12      4033     12.65    0.3%
    4    13      4236     25.74    0.6%
    4    14      4296        13    0.3%
    4    15      4432     15.46    0.3%
    4    16      4551      17.6    0.3%

Quality and confidence:
param     error
t         2.487
n          0.49

Model:
Time ~=    966.6
    + t    394.1
    + n    126.4
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    306.5
    + r    159.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     236.4     5.696    2.4%
    1     430.5     22.02    5.1%
    2     631.1      10.9    1.7%
    3     918.7     11.77    1.2%
    4     841.9     16.48    1.9%
    5      1131     4.776    0.4%
    6      1290     4.542    0.3%
    7      1444     4.838    0.3%
    8      1461     4.787    0.3%
    9      1743     7.318    0.4%
   10      1918     5.711    0.2%
   11      2077     8.891    0.4%
   12      2226     6.537    0.2%
   13      2387     6.687    0.2%
   14      2542     7.536    0.2%
   15      2689      10.5    0.3%
   16      2855     11.63    0.4%
   17      3000     13.84    0.4%
   18      3158     9.571    0.3%
   19      3325     18.87    0.5%
   20      3827     188.6    4.9%

Quality and confidence:
param     error
r         1.065

Model:
Time ~=    270.7
    + r      164
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    438.4
    + r    448.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     234.2      6.17    2.6%
    1     898.7     7.491    0.8%
    2      1336     5.529    0.4%
    3      1820     5.488    0.3%
    4      2237     18.53    0.8%
    5      2708     34.55    1.2%
    6      3121     18.22    0.5%
    7      3606     40.16    1.1%
    8      4009     32.53    0.8%
    9      4467     22.96    0.5%
   10      5008        40    0.7%
   11      5376     36.71    0.6%
   12      5912     30.61    0.5%
   13      6202     42.11    0.6%
   14      6718     31.47    0.4%
   15      7182        28    0.3%
   16      7578     30.91    0.4%
   17      7947     24.16    0.3%
   18      8601     32.35    0.3%
   19      8899     27.78    0.3%
   20      9384     39.55    0.4%

Quality and confidence:
param     error
r         0.824

Model:
Time ~=    425.6
    + r    449.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    766.9
    + n    40.86
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     710.1     39.36    5.5%
    1     807.3     26.98    3.3%
    2     800.8     35.05    4.3%
    3     908.3     4.922    0.5%
    4     908.7     48.48    5.3%
    5     977.8     16.63    1.7%
    6      1017     14.03    1.3%
    7      1081     4.495    0.4%
    8      1079     9.382    0.8%
    9      1151     7.328    0.6%
   10      1154     9.322    0.8%
   11      1171     42.47    3.6%
   12      1266     5.338    0.4%
   13      1293     13.88    1.0%
   14      1346     14.46    1.0%
   15      1278     18.53    1.4%
   16      1432     17.02    1.1%

Quality and confidence:
param     error
n         0.634

Model:
Time ~=    755.3
    + n    40.77
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    155.6
    + r      925
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     231.4      2.78    1.2%
    1      1230     11.76    0.9%
    2      2149        28    1.3%
    3      2957     17.14    0.5%
    4      3833     19.81    0.5%
    5      4821     36.53    0.7%
    6      5603     37.78    0.6%
    7      6460     27.85    0.4%
    8      7406     36.02    0.4%
    9      8335      26.1    0.3%
   10      9429     40.91    0.4%
   11     10270     39.63    0.3%
   12     11070     35.78    0.3%
   13     11980     33.93    0.2%
   14     13040     33.57    0.2%
   15     13980     51.49    0.3%
   16     15020      76.6    0.5%
   17     15860     125.7    0.7%
   18     16950     56.81    0.3%
   19     18000     70.27    0.3%
   20     18920      56.2    0.2%

Quality and confidence:
param     error
r         1.639

Model:
Time ~=    120.3
    + r    928.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    229.1
    + r    601.6
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.1     9.747    4.2%
    1     888.2     20.75    2.3%
    2      1482     13.19    0.8%
    3      2003     38.84    1.9%
    4      2632     15.44    0.5%
    5      3224     23.41    0.7%
    6      3851     24.67    0.6%
    7      4439     21.57    0.4%
    8      5018     43.01    0.8%
    9      5600     18.06    0.3%
   10      6177     20.14    0.3%
   11      6799     18.15    0.2%
   12      7464     19.57    0.2%
   13      7989     34.57    0.4%
   14      8641     33.71    0.3%
   15      9247     31.83    0.3%
   16      9802     53.56    0.5%
   17     10420     46.89    0.4%
   18     11150     23.04    0.2%
   19     11710     34.44    0.2%
   20     12300     21.99    0.1%

Quality and confidence:
param     error
r         0.596

Model:
Time ~=    221.5
    + r    602.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    718.4
    + n    80.65
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     695.2     11.41    1.6%
    1     791.5     8.636    1.0%
    2     900.8     8.288    0.9%
    3     977.6     3.184    0.3%
    4      1057     5.599    0.5%
    5      1130     11.78    1.0%
    6      1130     31.39    2.7%
    7      1292     6.162    0.4%
    8      1352     9.204    0.6%
    9      1412     24.66    1.7%
   10      1514     6.074    0.4%
   11      1589     14.68    0.9%
   12      1593     33.39    2.0%
   13      1774     3.686    0.2%
   14      1853     5.741    0.3%
   15      1940     17.43    0.8%
   16      2017     3.051    0.1%

Quality and confidence:
param     error
n         0.538

Model:
Time ~=    712.5
    + n    80.23
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    264.4
    + r     2714
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.1     5.436    2.3%
    1      3038     7.809    0.2%
    2      5771     23.44    0.4%
    3      8477     21.99    0.2%
    4     11170     34.14    0.3%
    5     13750     25.94    0.1%
    6     16470     21.69    0.1%
    7     19160     24.94    0.1%
    8     22010     36.37    0.1%
    9     24600     30.39    0.1%
   10     27460     30.16    0.1%
   11     30030     61.07    0.2%
   12     32870     42.65    0.1%
   13     35600     68.89    0.1%
   14     38180     48.81    0.1%
   15     40850     53.12    0.1%
   16     43670     58.86    0.1%
   17     46240     56.28    0.1%
   18     49170     82.47    0.1%
   19     51950     57.18    0.1%
   20     54770     78.99    0.1%

Quality and confidence:
param     error
r          1.19

Model:
Time ~=    248.6
    + r     2715
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    14510
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     231.5     2.125    0.9%
    1     14110     103.8    0.7%
    2     28470     238.7    0.8%
    3     43110     452.8    1.0%
    4     57320     606.5    1.0%
    5     71780       414    0.5%
    6     85970     754.4    0.8%
    7    100500     708.6    0.7%
    8    114500      1287    1.1%
    9    128900      1044    0.8%
   10    144200     838.9    0.5%
   11    159100      1280    0.8%
   12    174100      1273    0.7%
   13    187000     976.7    0.5%
   14    202500      1296    0.6%
   15    216600      1056    0.4%
   16    232700      2100    0.9%
   17    246300      1357    0.5%
   18    261200      1558    0.5%
   19    275300      1917    0.6%
   20    291000     516.7    0.1%

Quality and confidence:
param     error
r         14.36

Model:
Time ~=        0
    + r    14540
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25070
    + t     2554
    + i    34.29
    + o     60.3
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    117800     648.3    0.5%
    1     0   960     84950     286.3    0.3%
    1    20   960     85490     399.4    0.4%
    1    40   960     85290     651.7    0.7%
    1    60   960     86370     590.3    0.6%
    1    80   960     86980     299.3    0.3%
    1   100   960     87830     467.5    0.5%
    1   120   960     89210     620.3    0.6%
    1   140   960     89730     515.1    0.5%
    1   160   960     91020     372.3    0.4%
    1   180   960     91330     452.4    0.4%
    1   200   960     91950     562.8    0.6%
    1   220   960     92840     333.8    0.3%
    1   240   960     92560     601.5    0.6%
    1   260   960     93520     470.3    0.5%
    1   280   960     94180     309.2    0.3%
    1   300   960     94730     387.2    0.4%
    1   320   960     95930     298.6    0.3%
    1   340   960     96600     480.7    0.4%
    1   360   960     97120     309.3    0.3%
    1   380   960     98320       455    0.4%
    1   400   960     98650     540.7    0.5%
    1   420   960     97990     583.4    0.5%
    1   440   960     99490       387    0.3%
    1   460   960    100600       445    0.4%
    1   480   960    100300     426.1    0.4%
    1   500   960    101300     379.6    0.3%
    1   520   960    102800     627.1    0.6%
    1   540   960    103100     491.5    0.4%
    1   560   960    103400     664.5    0.6%
    1   580   960    104700     437.6    0.4%
    1   600   960    105100     487.5    0.4%
    1   620   960    105800     434.8    0.4%
    1   640   960    106700     584.6    0.5%
    1   660   960    107200     705.7    0.6%
    1   680   960    108100     345.8    0.3%
    1   700   960    109000     519.4    0.4%
    1   720   960    109000     854.2    0.7%
    1   740   960    110100     433.6    0.3%
    1   760   960    111200     834.5    0.7%
    1   780   960    111800     504.3    0.4%
    1   800   960    111600     270.5    0.2%
    1   820   960    113000     487.3    0.4%
    1   840   960    113700     516.9    0.4%
    1   860   960    114800     275.9    0.2%
    1   880   960    114600     745.3    0.6%
    1   900   960    114900     519.7    0.4%
    1   920   960    115400     698.8    0.6%
    1   940   960    116500     734.7    0.6%
    1   960   960    117200     449.7    0.3%
    1   980   960    118200     465.2    0.3%
    1  1000   960    119000     509.1    0.4%
    1  1020   960    120000     582.3    0.4%
    1  1024     0     61920     256.9    0.4%
    1  1024    19     62900     427.4    0.6%
    1  1024    38     64460     522.6    0.8%
    1  1024    57     66190       510    0.7%
    1  1024    76     66740     933.6    1.3%
    1  1024    95     68500     329.7    0.4%
    1  1024   114     69130     300.2    0.4%
    1  1024   133     69740     365.7    0.5%
    1  1024   152     70820       499    0.7%
    1  1024   171     72400       545    0.7%
    1  1024<truncated>...
```

</details>",10468,2021-12-14T18:31:17Z,0
445,jamesblacklock,/benchmark runtime pallet pallet_contracts,10468,2021-12-14T21:53:01Z,0
446,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""wasmer-2.1-test-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.664
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.664
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.196
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     69.24     0.584    0.8%
   20     56.92     0.206    0.3%
   40     93.83     0.591    0.6%
   60     130.9     1.377    1.0%
   80     165.5     1.502    0.9%
  100     202.7     2.519    1.2%
  120     240.3     2.218    0.9%
  140     285.7      1.94    0.6%
  160     322.7     3.771    1.1%
  180     362.6     3.029    0.8%
  200     401.5     4.252    1.0%
  220     442.1      2.44    0.5%
  240     500.7     3.814    0.7%
  260     529.6     5.385    1.0%
  280     577.8     11.56    2.0%
  300     611.9     2.761    0.4%
  320     660.6     3.911    0.5%
  340     714.5     8.695    1.2%
  360       753     8.173    1.0%
  380     791.5     3.887    0.4%
  400     837.6     5.484    0.6%
  420     892.1     5.308    0.5%
  440     920.7     9.279    1.0%
  460     981.2     12.37    1.2%
  480      1013      8.68    0.8%
  500      1060     13.48    1.2%
  520      1135     10.04    0.8%
  540      1184     12.33    1.0%
  560      1221     12.62    1.0%
  580      1262     9.312    0.7%
  600      1305     15.48    1.1%
  620      1341     7.458    0.5%
  640      1393     10.79    0.7%
  660      1438     9.952    0.6%
  680      1487     28.77    1.9%
  700      1529     13.87    0.9%
  720      1564     17.71    1.1%
  740      1617     20.41    1.2%
  760      1660     13.14    0.7%
  780      1696     27.65    1.6%
  800      1750     19.85    1.1%
  820      1779     10.37    0.5%
  840      1839     4.672    0.2%
  860      1899     13.45    0.7%
  880      1947     15.78    0.8%
  900      1972     14.08    0.7%
  920      1980     17.32    0.8%
  940      2034     15.63    0.7%
  960      2104     22.01    1.0%
  980      2165      20.1    0.9%
 1000      2181     18.45    0.8%
 1020      2208     15.65    0.7%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.203
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    105.7
    + q    0.294
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.719     0.037    1.3%
   20     84.69      0.87    1.0%
   40     97.41     1.234    1.2%
   60     105.9     1.206    1.1%
   80       116      1.34    1.1%
  100     118.6     0.738    0.6%
  120     128.9     2.105    1.6%
  140       141     3.719    2.6%
  160     149.5     3.966    2.6%
  180     161.8     2.996    1.8%
  200       171     3.273    1.9%
  220     183.2     3.837    2.0%
  240     182.4     5.725    3.1%
  260     201.6     3.187    1.5%
  280     198.4     9.868    4.9%
  300     204.2     5.655    2.7%
  320     203.2     1.216    0.5%
  340     218.3     8.371    3.8%
  360     225.9     5.977    2.6%
  380     233.1     8.917    3.8%
  400     228.3     2.471    1.0%
  420     235.5     2.201    0.9%
  440     243.4     2.029    0.8%
  460     244.1     3.108    1.2%
  480     251.1     2.609    1.0%
  500     255.6     2.305    0.9%
  520     262.5     2.809    1.0%
  540     267.5     1.874    0.7%
  560     271.9     2.572    0.9%
  580     276.2     1.747    0.6%
  600     285.3     2.297    0.8%
  620     287.3     2.445    0.8%
  640     291.7     4.048    1.3%
  660     294.2     2.582    0.8%
  680     312.4     4.444    1.4%
  700     310.3     4.553    1.4%
  720     329.7     14.12    4.2%
  740     336.6     2.884    0.8%
  760       328     5.405    1.6%
  780     325.3     5.132    1.5%
  800     333.6     7.451    2.2%
  820     339.3     4.377    1.2%
  840     350.8     3.249    0.9%
  860     352.2      3.21    0.9%
  880     357.3     11.95    3.3%
  900       365     3.198    0.8%
  920     374.5     3.623    0.9%
  940     374.7     3.183    0.8%
  960     373.3     4.608    1.2%
  980     385.2     3.303    0.8%
 1000     395.9     3.105    0.7%
 1020     393.7     10.28    2.6%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    98.27
    + q    0.304
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.81
    + c    92.03
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     47.88     0.142    0.2%
    2     232.1     3.548    1.5%
    4       411     0.165    0.0%
    6     577.2     0.731    0.1%
    8     776.2     14.91    1.9%
   10     948.6     12.28    1.2%
   12      1117     15.45    1.3%
   14      1336     15.59    1.1%
   16      1527     16.24    1.0%
   18      1699     17.13    1.0%
   20      1869     14.78    0.7%
   22      2022     13.14    0.6%
   24      2206     8.607    0.3%
   26      2463     13.16    0.5%
   28      2641     8.638    0.3%
   30      2796     12.63    0.4%
   32      2966     21.07    0.7%
   34      3149     14.51    0.4%
   36      3348     9.766    0.2%
   38      3519     15.15    0.4%
   40      3669     11.05    0.3%
   42      3834     8.142    0.2%
   44      4017     21.06    0.5%
   46      4170     14.86    0.3%
   48      4343     20.74    0.4%
   50      4726     15.01    0.3%
   52      4890     15.97    0.3%
   54      5055     19.95    0.3%
   56      5212     9.329    0.1%
   58      5385     12.15    0.2%
   60      5569     19.32    0.3%
   62      5752      23.8    0.4%
   64      5892     18.76    0.3%
   66      6100     21.43    0.3%
   68      6257     11.82    0.1%
   70      6482     18.23    0.2%
   72      6653     12.97    0.1%
   74      6828     17.37    0.2%
   76      6976     18.72    0.2%
   78      7160     15.02    0.2%
   80      7326     11.98    0.1%
   82      7471     26.83    0.3%
   84      7650     14.36    0.1%
   86      7816     18.88    0.2%
   88      7992     23.39    0.2%
   90      8141     20.05    0.2%
   92      8306     8.676    0.1%
   94      8456     13.58    0.1%
   96      8631     18.49    0.2%
   98      9221     18.72    0.2%
  100      9393     17.53    0.1%
  102      9730     58.34    0.5%
  104      9755     21.86    0.2%
  106      9899     27.64    0.2%
  108     10070     28.66    0.2%
  110     10370        20    0.1%
  112     10380     17.39    0.1%
  114     10580     30.65    0.2%
  116     10730      11.2    0.1%
  118     10900      10.3    0.0%
  120     11080     24.69    0.2%
  122     11210     9.852    0.0%
  124     11430     18.44    0.1%
  126     11570     13.52    0.1%
  128     12120     46.32    0.3%

Quality and confidence:
param     error
c         0.105

Model:
Time ~=     8.08
    + c     92.4
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    181.2
    + c    103.3
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     152.5     0.946    0.6%
    2       432     16.97    3.9%
    4     638.8     1.655    0.2%
    6     839.3     1.706    0.2%
    8      1041     4.855    0.4%
   10      1235     2.699    0.2%
   12      1444     2.451    0.1%
   14      1650     2.836    0.1%
   16      1848     3.195    0.1%
   18      2064     1.984    0.0%
   20      2260     3.153    0.1%
   22      2450     2.609    0.1%
   24      2657     6.581    0.2%
   26      2869     3.915    0.1%
   28      3074     4.453    0.1%
   30      3284     4.335    0.1%
   32      3474     5.249    0.1%
   34      3672     2.243    0.0%
   36      3877      6.14    0.1%
   38      4069     8.361    0.2%
   40      4268     8.469    0.1%
   42      4460     5.264    0.1%
   44      4669     4.203    0.0%
   46      4874     9.034    0.1%
   48      5069     2.244    0.0%
   50      5353     6.605    0.1%
   52      5562     8.291    0.1%
   54      5790     11.92    0.2%
   56      5971     6.099    0.1%
   58      6167     5.113    0.0%
   60      6354     8.085    0.1%
   62      6575     9.696    0.1%
   64      6768     14.88    0.2%
   66      6988     15.13    0.2%
   68      7172     13.14    0.1%
   70      7378     10.22    0.1%
   72      7560     24.11    0.3%
   74      7741     26.21    0.3%
   76      7934     29.77    0.3%
   78      8104     22.69    0.2%
   80      8348     18.29    0.2%
   82      8569     18.33    0.2%
   84      8793     24.98    0.2%
   86      8962     33.86    0.3%
   88      9199     21.82    0.2%
   90      9368     29.84    0.3%
   92      9571     33.59    0.3%
   94      9732     21.41    0.2%
   96      9939     36.27    0.3%
   98     10480     32.78    0.3%
  100     10690     43.45    0.4%
  102     10870     28.16    0.2%
  104     11060     35.86    0.3%
  106     11270     24.92    0.2%
  108     11580     40.54    0.3%
  110     11650     17.91    0.1%
  112     11870     26.03    0.2%
  114     12000     14.34    0.1%
  116     12220     25.44    0.2%
  118     12430     18.86    0.1%
  120     12690     37.49    0.2%
  122     12830     36.21    0.2%
  124     13030     24.31    0.1%
  126     13280     25.62    0.1%
  128     13500     26.18    0.1%

Quality and confidence:
param     error
c         0.086

Model:
Time ~=    150.2
    + c    103.8
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    123.6
    + c      325
    + s    2.223
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2396     6.449    0.2%
    1  1024      2846     12.13    0.4%
    2  1024      3164     18.74    0.5%
    3  1024      3352     8.183    0.2%
    4  1024      3686     8.615    0.2%
    5  1024      4000     10.89    0.2%
    6  1024      4296     13.14    0.3%
    7  1024      4664     13.88    0.2%
    8  1024      5064     19.81    0.3%
    9  1024      5352     22.93    0.4%
   10  1024      5689     20.61    0.3%
   11  1024      5976     40.69    0.6%
   12  1024      6295     22.38    0.3%
   13  1024      6673     17.35    0.2%
   14  1024      6967     27.07    0.3%
   15  1024      7283     26.87    0.3%
   16  1024      7578     19.39    0.2%
   17  1024      7926     17.41    0.2%
   18  1024      8271     17.57    0.2%
   19  1024      8577     27.93    0.3%
   20  1024      8869     23.26    0.2%
   21  1024      9210     40.94    0.4%
   22  1024      9465     25.68    0.2%
   23  1024      9780     38.92    0.3%
   24  1024     10090     19.91    0.1%
   25  1024     10590     25.08    0.2%
   26  1024     10920     20.71    0.1%
   27  1024     11230     35.81    0.3%
   28  1024     11550        41    0.3%
   29  1024     11860     19.71    0.1%
   30  1024     12160     26.69    0.2%
   31  1024     12410     48.76    0.3%
   32  1024     12700     35.62    0.2%
   33  1024     13080     46.59    0.3%
   34  1024     13420     75.47    0.5%
   35  1024     13790     41.03    0.2%
   36  1024     14640     443.3    3.0%
   37  1024     14410     17.07    0.1%
   38  1024     14680     39.25    0.2%
   39  1024     14890     41.86    0.2%
   40  1024     15240     41.15    0.2%
   41  1024     15670     19.35    0.1%
   42  1024     15950     35.62    0.2%
   43  1024     16260     23.47    0.1%
   44  1024     16560     28.86    0.1%
   45  1024     16920     27.52    0.1%
   46  1024     17220     17.38    0.1%
   47  1024     17390     69.89    0.4%
   48  1024     17670      59.7    0.3%
   49  1024     18470     52.76    0.2%
   50  1024     18690     47.91    0.2%
   51  1024     19260     30.07    0.1%
   52  1024     19570     19.37    0.0%
   53  1024     19810     98.12    0.4%
   54  1024     20200     12.34    0.0%
   55  1024     20460     76.49    0.3%
   56  1024     20980      72.8    0.3%
   57  1024     23510     565.1    2.4%
   58  1024     21430     24.18    0.1%
   59  1024     21760     27.35    0.1%
   60  1024     21900     13.04    0.0%
   61  1024     22230     16.03    0.0%
   62  1024     22380     103.4    0.4%
   63  1024     22850     81.18    0.3%
   64     0     20960     77.19    0.3%
   64    20     20990     69.19    0.3%
   64    40     21120     98.43    0.4%
   64    60     21290     25.06    0.1%
   64    80     21110      36.4    0.1%
   64   100     21080     30.64    0.1%
   64   120     21050     36.38    0.1%
   64   140     21090     23.33    0.1%
   64   160     21330     56.84    0.2%
   64   180     21510     22.57    0.1%
   64   200     21520     22.15    0.1%
   64   220     21460     10.98    0.0%
   64   240     21550      35.5    0.1%
   64   260     21310     46.43    0.2%
   64   280     21410     56.82    0.2%
   64   300     21410     25.17    0.1%
   64   320     21600     63.64    0.2%
   64   340     21880     16.33    0.0%
   64   360     21700     53.69    0.2%
   64   380     21570     40.89    0.1%
   64   400     21620      57.2    0.2%
   64   420     21650     31.91    0.1%
   64   440     21690     40.92    0.1%
   64   460     21720      36.7    0.1%
   64   480     21940     143.7    0.6%
   64   500     22200     36.06    0.1%
   64   520     22210     11.33    0.0%
   64   540     22210     16.81    0.0%
   64   560     22380     12.52    0.0%
   64   580     22280     33.02    0.1%
   64   600     22320     33.99    0.1%
   64   620     22390     21.34    0.0%
   64   640     24090     19.73    0.0%
   64   660     22520     27.53    0.1%
   64   680     22560     28.66    0.1%
   64   700     22230     37.32    0.1%
   64   720     22250     42.77    0.1%
   64   740     22290     32.07    0.1%
   64   760     22570     139.8    0.6%
   64   780     22800     28.95    0.1%
   64   800     22870     33.45    0.1%
   64   820     22900     12.98    0.0%
   64   840     22660     59.78    0.2%
   64   860     22960     10.84    0.0%
   64   880     22970     25.84    0.1%
   64   900     22840     105.1    0.4%
   64   920     23090     28.78    0.1%
   64   940     23160     34.17    0.1%
   64   960     23050     14.33    0.0%
   64   980     23020     14.05    0.0%
   64  1000     23090     55.48    0.2%
   64  1020     23110     31.73    0.1%
   64  1024     23230     16.51    0.0%

Quality and confidence:
param     error
c         0.556
s         0.036

Model:
Time ~=        0
    + c    327.5
    + s    2.362
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    233.3
    + s    2.012
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     228.9     0.755    0.3%
   20     269.2     0.614    0.2%
   40     312.1     1.242    0.3%
   60     353.4     0.675    0.1%
   80     393.4     1.315    0.3%
  100     432.3     2.407    0.5%
  120     473.3     1.689    0.3%
  140     536.2     12.16    2.2%
  160     550.5     1.177    0.2%
  180     590.6     1.396    0.2%
  200     630.7     1.368    0.2%
  220     670.8     0.831    0.1%
  240     713.4     0.656    0.0%
  260       767     16.32    2.1%
  280     807.3     16.02    1.9%
  300     856.6     16.58    1.9%
  320     883.1     2.219    0.2%
  340     922.6     2.545    0.2%
  360     962.9     1.392    0.1%
  380      1007     3.766    0.3%
  400      1043     1.233    0.1%
  420      1091     2.534    0.2%
  440      1137     11.81    1.0%
  460      1159     2.685    0.2%
  480      1199     4.126    0.3%
  500      1230     13.12    1.0%
  520      1270     12.06    0.9%
  540      1313        10    0.7%
  560      1355     13.95    1.0%
  580      1386     14.89    1.0%
  600      1443     3.936    0.2%
  620      1464     13.15    0.8%
  640      1510     12.74    0.8%
  660      1545     12.57    0.8%
  680      1588      14.9    0.9%
  700      1618     9.741    0.6%
  720      1672     13.93    0.8%
  740      1719     13.76    0.8%
  760      1750     15.29    0.8%
  780      1786     12.26    0.6%
  800      1843     39.89    2.1%
  820      1879     11.16    0.5%
  840      1915     14.08    0.7%
  860      1964     3.556    0.1%
  880      2012     9.659    0.4%
  900      2021     12.75    0.6%
  920      2077     11.47    0.5%
  940      2116     14.32    0.6%
  960      2163     13.15    0.6%
  980      2242     15.55    0.6%
 1000      2253     11.35    0.5%
 1020      2286      12.4    0.5%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=      235
    + s    2.006
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    174.5
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    174.5
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     77.5
    + c    90.57
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     80.43     0.324    0.4%
    1       176     0.354    0.2%
    2     260.3     0.281    0.1%
    3     343.1     0.318    0.0%
    4     448.1     6.609    1.4%
    5     521.3     0.441    0.0%
    6     602.2     0.316    0.0%
    7     710.9     0.807    0.1%
    8     795.4     8.851    1.1%
    9     885.7     12.58    1.4%
   10     975.2     10.65    1.0%
   11      1056     17.17    1.6%
   12      1130     13.63    1.2%
   13      1287     5.291    0.4%
   14      1354     16.61    1.2%
   15      1440     16.26    1.1%
   16      1508     11.88    0.7%
   17      1616      14.3    0.8%
   18      1710     13.37    0.7%
   19      1785     15.65    0.8%
   20      1865     13.31    0.7%
   21      1952     18.72    0.9%
   22      2058     4.449    0.2%
   23      2116     14.57    0.6%
   24      2192     14.37    0.6%
   25      2408     12.49    0.5%
   26      2462     15.32    0.6%
   27      2546     10.94    0.4%
   28      2643     17.25    0.6%
   29      2712     11.46    0.4%
   30      2815     22.14    0.7%
   31      2880     12.27    0.4%
   32      2958     16.69    0.5%
   33      3046     14.05    0.4%
   34      3143     24.21    0.7%
   35      3263     17.37    0.5%
   36      3338     20.81    0.6%
   37      3413     11.03    0.3%
   38      3498     8.643    0.2%
   39      3573     22.13    0.6%
   40      3679     10.94    0.2%
   41      3737      7.01    0.1%
   42      3813     15.47    0.4%
   43      3890     14.55    0.3%
   44      3996     8.267    0.2%
   45      4079     13.24    0.3%
   46      4154     14.97    0.3%
   47      4225     15.95    0.3%
   48      4313      22.9    0.5%
   49      4629      15.2    0.3%
   50      4699     13.57    0.2%
   51      4787     18.17    0.3%
   52      4870      17.3    0.3%
   53      4952     24.65    0.4%
   54      5021     13.23    0.2%
   55      5106     16.68    0.3%
   56      5196     17.16    0.3%
   57      5277     13.25    0.2%
   58      5356     12.22    0.2%
   59      5431     13.46    0.2%
   60      5525     13.34    0.2%
   61      5592     15.11    0.2%
   62      5667     11.63    0.2%
   63      5776     34.78    0.6%
   64      5839     11.04    0.1%

Quality and confidence:
param     error
c         0.098

Model:
Time ~=    67.32
    + c    90.78
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.47
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.47
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    283.2
    + r    210.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       170       9.7    5.7%
    1     451.1     19.26    4.2%
    2       694     7.961    1.1%
    3     920.1     15.48    1.6%
    4      1145     7.945    0.6%
    5      1342      5.48    0.4%
    6      1559     9.589    0.6%
    7      1772     5.543    0.3%
    8      1984     7.299    0.3%
    9      2183     6.249    0.2%
   10      2390     8.908    0.3%
   11      2629     12.02    0.4%
   12      2825     14.25    0.5%
   13      3016     10.51    0.3%
   14      3191     22.33    0.6%
   15      3402     10.29    0.3%
   16      3653     12.78    0.3%
   17      3877     13.05    0.3%
   18      4043     10.47    0.2%
   19      4268     11.97    0.2%
   20      4478     17.94    0.4%

Quality and confidence:
param     error
r          0.38

Model:
Time ~=    268.4
    + r    211.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    276.6
    + r    206.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     177.3     13.21    7.4%
    1     380.2     3.567    0.9%
    2     675.7     23.74    3.5%
    3     883.3     36.56    4.1%
    4      1134     3.544    0.3%
    5      1319     8.108    0.6%
    6      1541     5.741    0.3%
    7      1739     5.322    0.3%
    8      1957      8.08    0.4%
    9      2135     8.447    0.3%
   10      2345     8.504    0.3%
   11      2570     11.68    0.4%
   12      2767     11.69    0.4%
   13      2966     9.269    0.3%
   14      3165     17.81    0.5%
   15      3358     7.434    0.2%
   16      3573      16.6    0.4%
   17      3762     10.75    0.2%
   18      3973     10.74    0.2%
   19      4177     10.64    0.2%
   20      4393     9.519    0.2%

Quality and confidence:
param     error
r         0.415

Model:
Time ~=    256.1
    + r    207.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    202.8
    + r    203.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     187.4      3.35    1.7%
    1     438.1     13.96    3.1%
    2     672.1     5.441    0.8%
    3     803.5      10.7    1.3%
    4      1002     2.815    0.2%
    5      1209     6.693    0.5%
    6      1413     6.071    0.4%
    7      1613     6.331    0.3%
    8      1871      11.2    0.5%
    9      2029     9.929    0.4%
   10      2261     7.437    0.3%
   11      2471     11.79    0.4%
   12      2655     15.06    0.5%
   13      2845     11.01    0.3%
   14      3020     10.32    0.3%
   15      3364     36.79    1.0%
   16      3490     12.39    0.3%
   17      3651     14.29    0.3%
   18      3844     18.94    0.4%
   19      4074     14.01    0.3%
   20      4273     30.55    0.7%

Quality and confidence:
param     error
r         0.404

Model:
Time ~=    211.7
    + r    203.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    293.8
    + r    367.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     175.7     10.58    6.0%
    1     573.9     26.39    4.5%
    2      1015     9.371    0.9%
    3      1394     9.808    0.7%
    4      1784     4.214    0.2%
    5      2142     7.043    0.3%
    6      2521     8.631    0.3%
    7      2892     12.38    0.4%
    8      3245     8.352    0.2%
    9      3619     13.31    0.3%
   10      3983     19.08    0.4%
   11      4347     12.63    0.2%
   12      4711     25.86    0.5%
   13      5068     19.22    0.3%
   14      5433     17.77    0.3%
   15      5792     10.33    0.1%
   16      6140     19.98    0.3%
   17      6516     22.13    0.3%
   18      6885     24.67    0.3%
   19      7253     27.22    0.3%
   20      7585     11.42    0.1%

Quality and confidence:
param     error
r         0.455

Model:
Time ~=    277.7
    + r    367.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    226.3
    + r      210
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     185.5     1.473    0.7%
    1     431.6     11.47    2.6%
    2     653.5     13.29    2.0%
    3     914.3     21.41    2.3%
    4      1126     12.16    1.0%
    5      1329     8.756    0.6%
    6      1547     5.387    0.3%
    7      1642     38.94    2.3%
    8      1859     18.15    0.9%
    9      2034     11.12    0.5%
   10      2255     18.32    0.8%
   11      2462     15.07    0.6%
   12      2796     21.16    0.7%
   13      3003     24.97    0.8%
   14      3201     8.759    0.2%
   15      3369     12.57    0.3%
   16      3605     19.52    0.5%
   17      3785     23.75    0.6%
   18      3987     12.96    0.3%
   19      4234     18.53    0.4%
   20      4423     30.03    0.6%

Quality and confidence:
param     error
r          0.57

Model:
Time ~=    229.5
    + r    209.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    247.4
    + r    208.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.8     0.805    0.4%
    1     436.9     7.938    1.8%
    2     666.6     3.726    0.5%
    3       797     12.74    1.5%
    4      1004     11.69    1.1%
    5      1329      6.04    0.4%
    6      1533     4.828    0.3%
    7      1744     7.499    0.4%
    8      1949     6.892    0.3%
    9      2134     6.486    0.3%
   10      2351     8.262    0.3%
   11      2557     16.49    0.6%
   12      2759     12.22    0.4%
   13      2959     11.76    0.3%
   14      3156     21.55    0.6%
   15      3347     10.85    0.3%
   16      3619     39.62    1.0%
   17      3773     11.07    0.2%
   18      3960     14.63    0.3%
   19      4187     23.34    0.5%
   20      4419     25.45    0.5%

Quality and confidence:
param     error
r          0.43

Model:
Time ~=    234.3
    + r    209.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    285.4
    + r    205.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     174.4     4.358    2.4%
    1     472.2     28.49    6.0%
    2     693.2     14.33    2.0%
    3     888.2      5.87    0.6%
    4      1117     7.555    0.6%
    5      1325     5.354    0.4%
    6      1534      10.1    0.6%
    7      1745      8.35    0.4%
    8      1950     4.107    0.2%
    9      2160     18.46    0.8%
   10      2369     22.58    0.9%
   11      2561     11.81    0.4%
   12      2765     9.309    0.3%
   13      2969     14.65    0.4%
   14      3142      6.97    0.2%
   15      3348     7.951    0.2%
   16      3558     17.58    0.4%
   17      3736     15.37    0.4%
   18      3946     6.961    0.1%
   19      4173      14.5    0.3%
   20      4407     23.71    0.5%

Quality and confidence:
param     error
r         0.391

Model:
Time ~=    276.9
    + r    205.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.2
    + r    199.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     186.9     0.794    0.4%
    1       423     6.644    1.5%
    2     676.9     6.571    0.9%
    3     891.6     8.202    0.9%
    4      1075     10.17    0.9%
    5      1317     9.427    0.7%
    6      1448     47.43    3.2%
    7      1597     6.118    0.3%
    8      1824     8.185    0.4%
    9      2019     11.47    0.5%
   10      2221      8.83    0.3%
   11      2439     12.43    0.5%
   12      2632     9.341    0.3%
   13      2835      11.2    0.3%
   14      3030     9.601    0.3%
   15      3227     14.67    0.4%
   16      3444     17.64    0.5%
   17      3638     15.75    0.4%
   18      3833     9.344    0.2%
   19      4028     19.04    0.4%
   20      4230     9.816    0.2%

Quality and confidence:
param     error
r         0.368

Model:
Time ~=    249.5
    + r    198.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    282.1
    + r    353.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     187.4     1.027    0.5%
    1     607.7     3.653    0.6%
    2     995.9      7.99    0.8%
    3      1377     11.34    0.8%
    4      1736     7.322    0.4%
    5      2098     7.962    0.3%
    6      2453     11.27    0.4%
    7      2830     15.63    0.5%
    8      3175     14.28    0.4%
    9      3557      12.7    0.3%
   10      3774     16.91    0.4%
   11      4134     21.41    0.5%
   12      4479     16.23    0.3%
   13      4829     12.43    0.2%
   14      5187     17.99    0.3%
   15      5502     17.74    0.3%
   16      5862     19.42    0.3%
   17      6228     24.59    0.3%
   18      6642     44.03    0.6%
   19      7099     29.46    0.4%
   20      7456     27.08    0.3%

Quality and confidence:
param     error
r          0.75

Model:
Time ~=    285.5
    + r    353.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    141.9
    + r    128.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       153     0.903    0.5%
    1     274.4     2.483    0.9%
    2       402     3.068    0.7%
    3     527.4     0.812    0.1%
    4     648.8     2.186    0.3%
    5     769.4     2.637    0.3%
    6       893     1.927    0.2%
    7      1013     1.421    0.1%
    8      1135     1.921    0.1%
    9      1258     2.851    0.2%
   10      1383     6.425    0.4%
   11      1633     4.247    0.2%
   12      1753     2.906    0.1%
   13      1832     5.344    0.2%
   14      1949     4.992    0.2%
   15      2073     9.333    0.4%
   16      2204      8.25    0.3%
   17      2316     5.096    0.2%
   18      2436     8.795    0.3%
   19      2571     13.37    0.5%
   20      2737     8.128    0.2%

Quality and confidence:
param     error
r         0.346

Model:
Time ~=    135.2
    + r    129.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    288.7
    + r    195.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     188.6     1.034    0.5%
    1     410.2      5.71    1.3%
    2     644.7     17.61    2.7%
    3     856.6     34.85    4.0%
    4      1093     4.314    0.3%
    5      1278      3.33    0.2%
    6      1467     2.344    0.1%
    7      1667     5.918    0.3%
    8      1874     5.592    0.2%
    9      2041      9.87    0.4%
   10      2239     7.441    0.3%
   11      2451     5.218    0.2%
   12      2641     4.419    0.1%
   13      2843     8.666    0.3%
   14      3030       5.3    0.1%
   15      3215     8.182    0.2%
   16      3317     38.68    1.1%
   17      3578     8.823    0.2%
   18      3779     6.099    0.1%
   19      3937     19.64    0.4%
   20      4179     13.54    0.3%

Quality and confidence:
param     error
r         0.451

Model:
Time ~=    270.5
    + r    195.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    370.4
    + n    8.504
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     442.4     5.423    1.2%
   20     556.8     40.61    7.2%
   40     734.9      37.6    5.1%
   60     857.1     33.63    3.9%
   80      1010     23.75    2.3%
  100      1191      21.1    1.7%
  120      1363     31.11    2.2%
  140      1560     27.58    1.7%
  160      1695     39.37    2.3%
  180      1782     39.14    2.1%
  200      2071     34.01    1.6%
  220      2260     40.79    1.8%
  240      2476     35.15    1.4%
  260      2492      11.3    0.4%
  280      2716        31    1.1%
  300      2929     33.05    1.1%
  320      3047      44.5    1.4%
  340      3274     69.39    2.1%
  360      3557     10.87    0.3%
  380      3712     39.82    1.0%
  400      3795     59.51    1.5%
  420      3912     14.81    0.3%
  440      4225     53.79    1.2%
  460      4469     48.81    1.0%
  480      4498     65.12    1.4%
  500      4739     39.78    0.8%
  520      4885      57.6    1.1%
  540      5041     21.69    0.4%
  560      5156     91.85    1.7%
  580      5233     58.34    1.1%
  600      5420     81.94    1.5%
  620      5571      34.6    0.6%
  640      5663     31.16    0.5%
  660      6074      56.2    0.9%
  680      6125     36.39    0.5%
  700      6267     53.27    0.8%
  720      6470     70.59    1.0%
  740      6632     41.09    0.6%
  760      6582     23.63    0.3%
  780      6953     79.58    1.1%
  800      7317     33.22    0.4%
  820      7309     45.54    0.6%
  840      7423     58.17    0.7%
  860      7687     67.54    0.8%
  880      8029     43.01    0.5%
  900      7953     67.15    0.8%
  920      8128     93.12    1.1%
  940      8429     51.33    0.6%
  960      8463     96.15    1.1%
  980      8587     94.76    1.1%
 1000      8988     39.05    0.4%
 1020      9144     88.43    0.9%

Quality and confidence:
param     error
n         0.014

Model:
Time ~=    378.9
    + n    8.492
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    175.2
    + r    20.12
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     174.6     4.248    2.4%
    1     195.7     5.929    3.0%

Quality and confidence:
param     error
r         2.431

Model:
Time ~=    174.6
    + r    21.16
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    186.3
    + n    0.504
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       176     0.879    0.4%
   20     195.9     3.508    1.7%
   40     206.3     0.995    0.4%
   60     216.1     0.807    0.3%
   80     226.6     0.648    0.2%
  100     237.3     0.811    0.3%
  120     247.1     2.324    0.9%
  140     251.5     0.688    0.2%
  160     277.9     7.484    2.6%
  180     294.5     6.168    2.0%
  200     302.9     11.71    3.8%
  220       293     0.466    0.1%
  240     303.7     0.397    0.1%
  260       321     7.498    2.3%
  280     353.1     7.445    2.1%
  300     347.1     6.967    2.0%
  320     344.2     1.165    0.3%
  340     355.6     2.883    0.8%
  360     376.4      1.58    0.4%
  380     372.3     0.425    0.1%
  400     383.8      1.02    0.2%
  420     393.4     0.691    0.1%
  440     407.7     2.782    0.6%
  460     413.4     1.147    0.2%
  480     418.7      1.14    0.2%
  500     414.6     0.703    0.1%
  520     472.4     5.949    1.2%
  540       484     1.502    0.3%
  560     490.8     9.592    1.9%
  580     490.2     10.34    2.1%
  600     488.6     1.358    0.2%
  620     500.9     1.212    0.2%
  640     508.1      1.96    0.3%
  660     519.7     2.832    0.5%
  680       499     1.148    0.2%
  700     562.8     3.269    0.5%
  720     571.6     2.174    0.3%
  740     590.8     8.096    1.3%
  760     570.9     1.943    0.3%
  780     548.8     0.867    0.1%
  800     560.3     1.505    0.2%
  820     572.3     0.498    0.0%
  840       614     2.167    0.3%
  860       637     12.36    1.9%
  880     651.6     2.758    0.4%
  900     661.9     2.078    0.3%
  920       672     2.508    0.3%
  940     681.4     2.249    0.3%
  960     695.4     1.124    0.1%
  980     653.6     2.023    0.3%
 1000     662.1     1.249    0.1%
 1020     668.4     2.395    0.3%

Quality and confidence:
param     error
n         0.002

Model:
Time ~=    189.5
    + n    0.502
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    160.2
    + r    131.9
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     159.8     13.59    8.5%
    1       291     2.351    0.8%

Quality and confidence:
param     error
r         4.599

Model:
Time ~=    159.8
    + r    131.1
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    256.9
    + r    400.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     184.3     5.842    3.1%
    1     657.8      4.55    0.6%
    2      1120     5.171    0.4%
    3      1530      6.91    0.4%
    4      1918     6.353    0.3%
    5      2206     10.78    0.4%
    6      2613     14.09    0.5%
    7      3020     11.66    0.3%
    8      3414     14.65    0.4%
    9      3870     25.64    0.6%
   10      4359     8.055    0.1%
   11      4718     22.58    0.4%
   12      5101     18.86    0.3%
   13      5507     24.45    0.4%
   14      5949     29.25    0.4%
   15      6346     13.27    0.2%
   16      6697     17.47    0.2%
   17      7035     13.02    0.1%
   18      7406     21.39    0.2%
   19      7840     18.86    0.2%
   20      8210     19.73    0.2%

Quality and confidence:
param     error
r         0.659

Model:
Time ~=    270.3
    + r    400.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    283.7
    + r    565.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     185.3     1.426    0.7%
    1     840.4     21.27    2.5%
    2      1476     9.044    0.6%
    3      2018     5.388    0.2%
    4      2592     6.244    0.2%
    5      3175     7.217    0.2%
    6      3774     22.23    0.5%
    7      4206     14.81    0.3%
    8      4789     12.98    0.2%
    9      5312     14.62    0.2%
   10      5902     22.37    0.3%
   11      6488     20.44    0.3%
   12      7078     18.94    0.2%
   13      7622     16.19    0.2%
   14      8162     17.47    0.2%
   15      8711     28.92    0.3%
   16      9311     28.03    0.3%
   17      9886     26.92    0.2%
   18     10420     23.05    0.2%
   19     11140     40.61    0.3%
   20     11690     26.65    0.2%

Quality and confidence:
param     error
r         0.686

Model:
Time ~=    279.9
    + r    566.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1035
    + t    381.3
    + n      124
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      2888     33.71    1.1%
    1    16      3488     20.64    0.5%
    2    16      3809     22.61    0.5%
    3    16      4190     15.22    0.3%
    4     0      2499     7.763    0.3%
    4     1      2698     6.303    0.2%
    4     2      2851     13.63    0.4%
    4     3      2944     23.83    0.8%
    4     4      3084     12.79    0.4%
    4     5      3179     34.13    1.0%
    4     6      3330     19.72    0.5%
    4     7      3439     21.79    0.6%
    4     8      3553     11.61    0.3%
    4     9      3666     41.52    1.1%
    4    10      3803     33.47    0.8%
    4    11      3919     21.42    0.5%
    4    12      4092     22.63    0.5%
    4    13      4169     27.48    0.6%
    4    14      4326     8.563    0.1%
    4    15      4469     16.67    0.3%
    4    16      4527     11.59    0.2%

Quality and confidence:
param     error
t         3.284
n         0.647

Model:
Time ~=    981.8
    + t    394.5
    + n    125.4
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    263.8
    + r    157.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     176.6     5.622    3.1%
    1     356.9       5.7    1.5%
    2     545.6     9.445    1.7%
    3     731.7     19.38    2.6%
    4     894.1     2.086    0.2%
    5      1071     9.046    0.8%
    6      1228     4.203    0.3%
    7      1383     5.277    0.3%
    8      1534     3.676    0.2%
    9      1694     4.474    0.2%
   10      1845     3.842    0.2%
   11      2022     5.691    0.2%
   12      2164     10.66    0.4%
   13      2308      3.32    0.1%
   14      2462      7.06    0.2%
   15      2620     9.144    0.3%
   16      2776     5.943    0.2%
   17      2925     7.606    0.2%
   18      3082     6.722    0.2%
   19      3223     4.566    0.1%
   20      3369     3.988    0.1%

Quality and confidence:
param     error
r         0.334

Model:
Time ~=    248.8
    + r      158
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      353
    + r    464.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     158.4     0.668    0.4%
    1     905.3     11.13    1.2%
    2      1222     12.41    1.0%
    3      1786     6.859    0.3%
    4      2244     20.78    0.9%
    5      2694      12.8    0.4%
    6      3171     14.36    0.4%
    7      3596     10.87    0.3%
    8      4038     13.69    0.3%
    9      4527        22    0.4%
   10      5016     18.97    0.3%
   11      5465     23.67    0.4%
   12      5924     17.73    0.2%
   13      6345     21.27    0.3%
   14      6815     30.09    0.4%
   15      7256     32.85    0.4%
   16      7751     20.39    0.2%
   17      8193     17.26    0.2%
   18      8776     18.88    0.2%
   19      9262     32.95    0.3%
   20      9644     27.19    0.2%

Quality and confidence:
param     error
r         0.722

Model:
Time ~=    331.5
    + r    465.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    756.2
    + n    39.21
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     729.1     7.222    0.9%
    1     783.7     7.176    0.9%
    2     836.9     11.46    1.3%
    3     862.9     11.01    1.2%
    4     927.6     51.42    5.5%
    5     990.2     17.68    1.7%
    6      1006     5.491    0.5%
    7      1026     24.25    2.3%
    8      1071     31.91    2.9%
    9     980.6     12.16    1.2%
   10      1152     29.48    2.5%
   11      1199        10    0.8%
   12      1244      9.94    0.7%
   13      1293     5.321    0.4%
   14      1314     22.37    1.7%
   15      1310     7.663    0.5%
   16      1352      2.67    0.1%

Quality and confidence:
param     error
n         0.649

Model:
Time ~=    753.1
    + n    38.82
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    207.4
    + r    913.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     141.9     0.503    0.3%
    1      1231     17.27    1.4%
    2      2128     22.88    1.0%
    3      2987     48.05    1.6%
    4      3861     23.05    0.5%
    5      4779     26.28    0.5%
    6      5707     27.18    0.4%
    7      6595     34.71    0.5%
    8      7526      31.8    0.4%
    9      8302     46.11    0.5%
   10      9272     32.05    0.3%
   11     10340     38.16    0.3%
   12     11070     59.34    0.5%
   13     11970     75.48    0.6%
   14     12910     34.57    0.2%
   15     13830     27.32    0.1%
   16     14700     67.59    0.4%
   17     15640     53.08    0.3%
   18     16770     63.82    0.3%
   19     17760        48    0.2%
   20     18720     64.01    0.3%

Quality and confidence:
param     error
r         1.295

Model:
Time ~=    192.9
    + r    915.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    183.9
    + r    614.5
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     146.7     6.843    4.6%
    1     841.9      11.5    1.3%
    2      1465     8.707    0.5%
    3      2061     19.69    0.9%
    4      2651     19.63    0.7%
    5      3258     21.26    0.6%
    6      3888     10.37    0.2%
    7      4445     13.38    0.3%
    8      5018     25.57    0.5%
    9      5729     27.11    0.4%
   10      6266      15.4    0.2%
   11      6897     27.32    0.3%
   12      7539     20.12    0.2%
   13      8175     25.35    0.3%
   14      8819     44.51    0.5%
   15      9368     41.01    0.4%
   16      9992     20.64    0.2%
   17     10590     28.27    0.2%
   18     11260     42.82    0.3%
   19     12020     60.25    0.5%
   20     12580     51.42    0.4%

Quality and confidence:
param     error
r         0.701

Model:
Time ~=    168.4
    + r    616.6
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    693.3
    + n     80.1
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     633.1     49.62    7.8%
    1     771.8     20.84    2.6%
    2     866.9     13.84    1.5%
    3     946.8     26.02    2.7%
    4      1015     40.63    4.0%
    5      1125      12.7    1.1%
    6      1196     21.58    1.8%
    7      1255     30.63    2.4%
    8      1304     14.18    1.0%
    9      1399     18.16    1.2%
   10      1505     12.68    0.8%
   11      1528     5.045    0.3%
   12      1605     7.416    0.4%
   13      1686     26.57    1.5%
   14      1843     19.79    1.0%
   15      1905     21.81    1.1%
   16      1989     9.133    0.4%

Quality and confidence:
param     error
n         0.585

Model:
Time ~=    687.4
    + n    80.09
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    254.4
    + r     2830
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     152.3     0.946    0.6%
    1      3114     14.56    0.4%
    2      5943     14.33    0.2%
    3      8813     13.15    0.1%
    4     11550     25.55    0.2%
    5     14420     60.99    0.4%
    6     17190      55.8    0.3%
    7     19990     23.78    0.1%
    8     22960     46.75    0.2%
    9     25700     41.99    0.1%
   10     28650     49.88    0.1%
   11     31320     56.86    0.1%
   12     34210     33.85    0.0%
   13     37150     70.02    0.1%
   14     39600     41.79    0.1%
   15     42450     70.52    0.1%
   16     45410     110.6    0.2%
   17     48160     67.98    0.1%
   18     51170     49.32    0.0%
   19     54180     58.91    0.1%
   20     57190     59.93    0.1%

Quality and confidence:
param     error
r         1.659

Model:
Time ~=    233.2
    + r     2830
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    168.1
    + r    11360
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     172.9     3.687    2.1%
    1     11490     57.19    0.4%
    2     22860     139.5    0.6%
    3     33900     184.4    0.5%
    4     45270     181.1    0.3%
    5     57010     381.4    0.6%
    6     68320     347.3    0.5%
    7     79660     269.5    0.3%
    8     90660     194.9    0.2%
    9    102700     379.6    0.3%
   10    114500       605    0.5%
   11    126000     400.8    0.3%
   12    137800     354.3    0.2%
   13    149400     209.2    0.1%
   14    161700     668.5    0.4%
   15    170500      1397    0.8%
   16    180600       483    0.2%
   17    192100     310.1    0.1%
   18    203500     747.2    0.3%
   19    216100     722.8    0.3%
   20    226800     366.1    0.1%

Quality and confidence:
param     error
r         11.83

Model:
Time ~=      354
    + r    11350
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    18850
    + t     3080
    + i    34.34
    + o    60.15
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    111600       569    0.5%
    1     0   960     78160     734.2    0.9%
    1    20   960     79850     661.5    0.8%
    1    40   960     78520      1462    1.8%
    1    60   960     80620     715.8    0.8%
    1    80   960     80060     523.3    0.6%
    1   100   960     82040     707.4    0.8%
    1   120   960     81300     790.2    0.9%
    1   140   960     81570      1158    1.4%
    1   160   960     84190     253.6    0.3%
    1   180   960     84050     447.6    0.5%
    1   200   960     86260      1023    1.1%
    1   220   960     87060     653.2    0.7%
    1   240   960     85630     788.7    0.9%
    1   260   960     86340     615.5    0.7%
    1   280   960     86940      1053    1.2%
    1   300   960     88050     391.4    0.4%
    1   320   960     88930     669.9    0.7%
    1   340   960     89110     602.9    0.6%
    1   360   960     90290     669.6    0.7%
    1   380   960     90440       725    0.8%
    1   400   960     90500       821    0.9%
    1   420   960     91180     560.1    0.6%
    1   440   960     92170     538.7    0.5%
    1   460   960     93100      1200    1.2%
    1   480   960     94080     640.7    0.6%
    1   500   960     93890     587.6    0.6%
    1   520   960     96210     536.3    0.5%
    1   540   960     95640     547.3    0.5%
    1   560   960     96990     423.6    0.4%
    1   580   960     98230     562.4    0.5%
    1   600   960     99680     683.7    0.6%
    1   620   960     98720      1182    1.1%
    1   640   960    100300     660.4    0.6%
    1   660   960    100100     740.5    0.7%
    1   680   960    101400     609.7    0.6%
    1   700   960    100800     778.1    0.7%
    1   720   960    102400     350.6    0.3%
    1   740   960    103500     549.4    0.5%
    1   760   960    103800     506.8    0.4%
    1   780   960    104600     639.7    0.6%
    1   800   960    105100     716.6    0.6%
    1   820   960    105700     613.5    0.5%
    1   840   960    107100     686.6    0.6%
    1   860   960    107300     522.9    0.4%
    1   880   960    108200     800.4    0.7%
    1   900   960    108100     650.5    0.6%
    1   920   960    108300     613.5    0.5%
    1   940   960    109600     750.6    0.6%
    1   960   960    110200     997.3    0.9%
    1   980   960    111500     695.3    0.6%
    1  1000   960    116300      3623    3.1%
    1  1020   960    113600     820.5    0.7%
    1  1024     0     54350     650.4    1.1%
    1  1024    19     55270     301.3    0.5%
    1  1024    38     57460     657.7    1.1%
    1  1024    57     58680     668.9    1.1%
    1  1024    76     60390     690.9    1.1%
    1  1024    95     61930      1047    1.6%
    1  1024   114     62600     392.8    0.6%
    1  1024   133     62600      1005    1.6%
    1  1024   152     63970     487.3    0.7%
   <truncated>...
```

</details>

ERROR: Unable to push ./frame/contracts/src/weights.rs",10468,2021-12-14T21:53:03Z,0
447,athei,bot merge,10481,2021-12-15T07:25:10Z,0
448,paritytech-processbot[bot],Waiting for commit status.,10481,2021-12-15T07:25:19Z,0
449,bkchr,bot merge,10492,2021-12-15T10:57:07Z,0
450,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 2 in https://github.com/paritytech/substrate/pull/10492,10492,2021-12-15T10:57:19Z,0
451,dvdplm,"> needs a polkadot companion though.

I don't think I can open a companion before the crates are published. I'll make one as soon as the crates from this PR are published.",10451,2021-12-10T11:15:44Z,0
452,bkchr,"> > needs a polkadot companion though.
> 
> I don't think I can open a companion before the crates are published. I'll make one as soon as the crates from this PR are published.

Ignore it.",10451,2021-12-15T11:30:45Z,0
453,alvicsam,"We can have 2 different jobs. During PR pipeline we can use the one with `RUSTDOCFLAGS=""-Dwarnings""` so developer can see that the check failed. And during master pipeline use the one without flag so not to break pipeline.",10387,2021-11-29T10:32:53Z,0
454,thiolliere,"I don't know when the master pipelin is run instead of PR pipeline, but for me any solution which ensures that the docs for the crate in the workspace are without warning would be great.
All in all what I want to ensure is:
```
RUSTDOCFLAGS=""-Dwarnings"" time cargo +nightly doc --workspace --all-features --verbose --no-deps
```
Because I don't want to check the doc of the dependencies, only the doc of our crates here in substrate.",10387,2021-11-30T03:47:58Z,0
455,thiolliere,"> We should make sure all doc links are valid at all times 100

but we don't control the doc of our dependency, there might be some time where their doc is broken and we need to update to their new version, that can be annoying if our CI doesn't allow our dependency to have doc with warnings.",10387,2021-11-30T12:24:09Z,0
456,kianenigma,"> > We should make sure all doc links are valid at all times 100
> 
> 
> 
> but we don't control the doc of our dependency, there might be some time where their doc is broken and we need to update to their new version, that can be annoying if our CI doesn't allow our dependency to have doc with warnings.

Okay, I mean everything in our repo if possible. ",10387,2021-12-01T07:43:04Z,0
457,thiolliere,"@alvicsam I have no idea how to implement something for the master pipeline/ PR pipeline.
",10387,2021-12-03T07:04:31Z,0
458,alvicsam,"@thiolliere I can help you with that but I don't understand how it should work.

Currently this job (`build-rustdoc` ) runs on both PR and master pipelines. With this PR the master pipeline will fail.
So my assumption was to keep this the `build-rustdoc` task with `RUSTDOCFLAGS=""-Dwarnings""` so developer can see that this step fails and docs have some issues. And create another task `build-rustdoc-master` (the name is just an example) for master without `RUSTDOCFLAGS=""-Dwarnings""` in order not to break the whole pipeline because of the docs. 

Otherwise we can mark `continuous-integration/gitlab-build-rustdoc` in github as `Required` and a PR cannot be merge until docs are fixed. But I don't know what should a developer do if there is an issue that you described:

> but we don't control the doc of our dependency, there might be some time where their doc is broken and we need to update to their new version, that can be annoying if our CI doesn't allow our dependency to have doc with warnings. ",10387,2021-12-03T08:43:45Z,0
459,thiolliere,"or maybe we can also have 2 jobs:
* one required, which does `RUSTDOCFLAGS=""-Dwarnings""` but doesn't build doc for deps with `--no-deps`
* another job, not required, which builds the whole doc without denying warnings and without excluding deps.

The only issue I see is that it makes the CI even longer",10387,2021-12-07T03:06:25Z,0
460,thiolliere,"So I added the new job, which is meant to be mandatory, and kept the doc generation unchanged.

It seems ok to me

EDIT: I also fixed the doc or removed the link that can't be fixed",10387,2021-12-07T09:29:08Z,0
461,alvicsam,"LGTM

> The only issue I see is that it makes the CI even longer

Actually it doesn't. The `check-rustdoc` job is quick as I can see and at the same stage there is `test-linux-stable` job which is way longer (jobs in one stage run simultaneously)

@TriplEight can you please mark `check-rustdoc` as ""Required""?",10387,2021-12-07T09:53:20Z,0
462,TriplEight,"So it turns out that we'll have two jobs:

```yaml
check-rustdoc:
  ...
  - RUSTDOCFLAGS=""-Dwarnings"" time cargo +nightly doc --workspace --all-features --verbose
```

and

```yaml
build-rustdoc:
  ...
  - time cargo +nightly doc --workspace --all-features --verbose --no-deps
```

Both running on PRs and master.
Two questions: why do we care **checking** while failing on warnings, but with deps. And **building** rustdocs for publishing without deps? Is there some `cargo doc` workaround or we can just have one job as one in `chech-rustdoc` now?",10387,2021-12-07T15:45:46Z,0
463,thiolliere,"> So it turns out that we'll have two jobs:
> 
> ```yaml
> check-rustdoc:
>   ...
>   - RUSTDOCFLAGS=""-Dwarnings"" time cargo +nightly doc --workspace --all-features --verbose
> ```
> 
> and
> 
> ```yaml
> build-rustdoc:
>   ...
>   - time cargo +nightly doc --workspace --all-features --verbose --no-deps
> ```
> 
> Both running on PRs and master. Two questions: why do we care **checking** while failing on warnings, but with deps. And **building** rustdocs for publishing without deps? Is there some `cargo doc` workaround or we can just have one job as one in `chech-rustdoc` now?

no the jobs should be:
```yaml
check-rustdoc:
  ...
  - RUSTDOCFLAGS=""-Dwarnings"" time cargo +nightly doc --workspace --all-features --verbose --no-deps
```

and

```yaml
build-rustdoc:
  ...
  - time cargo +nightly doc --workspace --all-features --verbose
  ... publish docs
```

So we check docs while failing on warnings but without deps (because we don't want to check our deps, we only want to check our own doc). this job should be required, our doc should always build without warning.

We build the docs while with deps without failing on warnings (this is because we want to publish all the docs in one place, it makes it easier to walk through all docs) ",10387,2021-12-08T06:03:58Z,0
464,TriplEight,Now it makes sense,10387,2021-12-15T19:28:14Z,0
465,shawntabrizi,"Sorry, can you explain the problem a bit more? I don't get what you have uncovered or why removing Default would cause an issue?

For example, we can assume any infinite stream of bytes can be truncated and encoded into an AccountId, so a function which does not know about `T` should be fine.",10461,2021-12-10T07:16:36Z,0
466,kianenigma,"> For example, we can assume any infinite stream of bytes can be truncated and encoded into an AccountId, so a function which does not know about T should be fine.

My PR is exactly against this, since it is an invite to make (avoidable) mistakes. You can also decode any stream of bytes into a wrong type which is NOT accountId, same as with my example above. For instance in the mentioned PR we mistakenly did: 

```
let ready: ReadySolution<T> = account(...);
```

which raises no compile time error, and in most cases no runtime errors either since some `ReadySolution` could actually be decoded, but the result was obviously wrong. 

All in all, I am okay with closing this if you think keeping `account` more flexible is serving a purpose.  ",10461,2021-12-11T07:54:31Z,0
467,kianenigma,closing for now. ,10461,2021-12-16T05:13:52Z,0
468,bkchr,It is also not compiling :D ,10475,2021-12-13T19:44:48Z,0
469,kianenigma,bot merge,10475,2021-12-16T05:26:34Z,0
470,paritytech-processbot[bot],Waiting for commit status.,10475,2021-12-16T05:26:42Z,0
471,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 919415840b865cdee965d70787017f6725288997,10475,2021-12-16T05:46:55Z,0
472,kianenigma,bot merge,10475,2021-12-16T06:20:15Z,0
473,paritytech-processbot[bot],Waiting for commit status.,10475,2021-12-16T06:20:23Z,0
474,GopherJ,"I'd really like to know why it's refused? is it because of a bad reputation? how can I check this, thanks",10130,2021-10-31T01:58:39Z,0
475,GopherJ,"the connection to another three bootnodes is refused:
```
2021-10-31 02:04:46.972 DEBUG tokio-runtime-worker sync: [Parachain] Connected 12D3KooWLUTzbrJJDowUKMPfEZrDY6eH8HXvm8hrG6YrdUmdrKPz
2021-10-31 02:04:46.973 DEBUG tokio-runtime-worker sync: [Parachain] Request to peer PeerId(""12D3KooWLUTzbrJJDowUKMPfEZrDY6eH8HXvm8hrG6YrdUmdrKPz"") failed: Refused.
2021-10-31 02:04:46.974 DEBUG tokio-runtime-worker sync: [Parachain] 12D3KooWLUTzbrJJDowUKMPfEZrDY6eH8HXvm8hrG6YrdUmdrKPz disconnected
```

```
2021-10-31 02:06:32.190 DEBUG tokio-runtime-worker sync: [Parachain] Connected 12D3KooWA8jSwEbscptbwv1KqY7d7n2qURbd6zUaaPvzTVBMMgSd
2021-10-31 02:06:32.191 DEBUG tokio-runtime-worker sync: [Parachain] Request to peer PeerId(""12D3KooWA8jSwEbscptbwv1KqY7d7n2qURbd6zUaaPvzTVBMMgSd"") failed: Refused.
2021-10-31 02:06:32.191 DEBUG tokio-runtime-worker sync: [Parachain] 12D3KooWA8jSwEbscptbwv1KqY7d7n2qURbd6zUaaPvzTVBMMgSd disconnected
```

```
2021-10-31 02:07:03.711 DEBUG tokio-runtime-worker sync: [Parachain] Connected 12D3KooWL63x8ZPkY2ZekUqyvyNwsakwbuy8Rq3Dt9tJcxw5NFTt
2021-10-31 02:07:03.810 DEBUG tokio-runtime-worker sync: [Parachain] Request to peer PeerId(""12D3KooWL63x8ZPkY2ZekUqyvyNwsakwbuy8Rq3Dt9tJcxw5NFTt"") failed: Refused.
```

but seems no reason was given",10130,2021-10-31T02:05:24Z,0
476,GopherJ,https://github.com/paritytech/substrate/blob/5e2b0f041c8a10c3ceb06721389e1d5c95380e65/client/network/src/protocol.rs#L1480-L1483,10130,2021-10-31T02:18:45Z,0
477,GopherJ,"@tomaka sorry to ping you, we would like to fix this issue as it's on live, do you mind having a look?",10130,2021-10-31T02:23:01Z,0
478,GopherJ,just discoverred it's back now with 17 peers so this error happened for a few hours,10130,2021-10-31T02:43:46Z,0
479,GopherJ,"this error happened again on one of our collator: https://telemetry.polkadot.io/#list/0x64a1c658a48b2e70a7fb1ad4c39eea35022568c20fc44a6e2e3d0a57aee6053b
<img width=""1440"" alt=""image"" src=""https://user-images.githubusercontent.com/33961674/139608788-72ac64ad-723a-435c-9ad5-714c0bbcf0f3.png"">
",10130,2021-11-01T01:18:34Z,0
480,tomaka,"The `Refused` error happens if the reputation of the source node is too low, or if the node targeted by the request is overloaded and is uncapable of processing more block requests (to prevent DoS attacks)",10130,2021-11-01T08:35:54Z,0
481,GopherJ,"> The `Refused` error happens if the reputation of the source node is too low, or if the node targeted by the request is overloaded and is uncapable of processing more block requests (to prevent DoS attacks)

How to check the reputation? The latter shouldn't be our case because it's our own node and we didn't find any potential DDOS attack yet. ",10130,2021-11-01T09:13:59Z,0
482,tomaka,"You can use `-l peerset=trace` to see all reputation changes. If there's no error in the logs, it is likely that this doesn't relate to reputations. Instead, chances are that the CPU or disk the nodes are running on isn't powerful enough.",10130,2021-11-01T11:03:34Z,0
483,GopherJ,ok let me test,10130,2021-11-01T13:29:00Z,0
484,GopherJ,"<img width=""1211"" alt=""image"" src=""https://user-images.githubusercontent.com/33961674/139680439-97392036-3e21-45c4-a6f6-752f3a44313a.png"">

I saw this, from this disconnected collator's perspective, the others have a pretty bad reputation

If I check this reputation from other nodes' perspective, this disconnected node has 0 as reputation",10130,2021-11-01T13:38:16Z,0
485,tomaka,"Reputations start being ""bad"" below approximately `-2^28` if I remember correctly.
The reputations displayed here shouldn't have any consequence.",10130,2021-11-01T13:43:26Z,0
486,GopherJ,"@tomaka so you are saying that we should increase VPS's size right. Currently we are using 8Cores + 16GB and 10Gbps for our collators, do you have suggestions?",10130,2021-11-01T13:44:32Z,0
487,tomaka,"This should be more than enough, as far as I know.

In my opinion, *something* (i.e. some event) happened and caused the nodes to act very slowly for a few hours. It would be nice to figure out what this ""something"" is, but we don't have any clue here unfortunately.
Getting a more powerful machine would mitigate the problem if/when it happens again.",10130,2021-11-01T13:46:10Z,0
488,GopherJ,"@tomaka ok we will investigate it and let you know, great thanks on the help",10130,2021-11-01T13:48:27Z,0
489,GopherJ,"@tomaka we didn't find any attack, so I believe it's ok on this part, also we don't have any error logs yet, but we constantly have one collator disconnected with the others

https://telemetry.polkadot.io/#/0x64a1c658a48b2e70a7fb1ad4c39eea35022568c20fc44a6e2e3d0a57aee6053b

this time it's `heiko-collator-0`",10130,2021-11-03T02:17:54Z,0
490,GopherJ,"hi @tomaka I think there is a bug, restarting the nodes can help solving this for some hours but then it starts to lose peers again.

do you have some advice that we can apply, util now we don't have any error logs, the number of peers just go down periodically",10130,2021-11-04T07:32:19Z,0
491,GopherJ,"<img width=""1369"" alt=""image"" src=""https://user-images.githubusercontent.com/33961674/140699544-41c66fd1-140e-46e0-9a51-83b8abf7d9f1.png"">

this really doesn't look cool, what type of information can I post to help fixing this issue?",10130,2021-11-08T07:18:05Z,0
492,tomaka,Please check the CPU usage of the nodes and see if it correlates with the disconnections.,10130,2021-11-08T09:33:14Z,0
493,GopherJ,"@tomaka 
<img width=""1440"" alt=""image"" src=""https://user-images.githubusercontent.com/33961674/140760677-7f460eb4-5869-49a2-a8fc-36ebf6671283.png"">

I think it looks totally fine. Actually we didn't find anything strange except `Request to peerid failed: Refused`
",10130,2021-11-08T14:33:53Z,0
494,GopherJ,"hi @tomaka we are still suffering from this issue, we are restarting our collators everyday:) it helps but not much

https://telemetry.polkadot.io/#/0x64a1c658a48b2e70a7fb1ad4c39eea35022568c20fc44a6e2e3d0a57aee6053b

as you can see from the following, `heiko-collator-4` and `heiko-collator-7` got refused by the others today
<img width=""1440"" alt=""image"" src=""https://user-images.githubusercontent.com/33961674/141232062-5a93abf7-b8f4-467d-b30c-cc97a2931d3d.png"">
",10130,2021-11-11T03:27:44Z,0
495,GopherJ,"I tried to use `reserved-nodes` but it's also disconnecting no matter what I do 
<img width=""1010"" alt=""image"" src=""https://user-images.githubusercontent.com/33961674/142357173-28a38eb2-e311-4dce-b0cc-202d6c696915.png"">",10130,2021-11-18T05:27:15Z,0
496,GopherJ,after adding `--state-cache-size 1` it looks much better now but not sure yet if it's resolved,10130,2021-11-22T16:16:08Z,0
497,GopherJ,"since these three days our collators are working fine by adjusting `--state-cache-size` to `1`, I think this issue can be closed",10130,2021-11-23T11:10:58Z,0
498,nazar-pc,"I see the same issue on my network with a few nodes. There was nothing special happening there, node was working fine for a few days and suddenly that happened. Shouldn't it ""just work"" without need to disable state cache?

I think this should be reopened for further investigation, there is clearly something wrong if it happens on simple network with no misbehavior.",10130,2021-11-30T02:17:28Z,0
499,GopherJ,@tomaka @bkchr @nazar-pc I'm reopening this because there are definitely some issues with the cache.,10130,2021-12-16T03:59:54Z,0
500,bkchr,With what cache? The state cache? ,10130,2021-12-16T07:04:32Z,0
501,cla-bot-2021[bot],"User @incertia, please sign the CLA [here](http://127.0.0.1:3001/sign_cla/1653966/3).",9939,2021-10-05T22:15:13Z,0
502,KiChjang,May I ask what the impetus for this change is?,9939,2021-10-06T00:33:36Z,0
503,incertia,"No real impetus, it is just nicer tm to have more serde impls available.

More specifically, my company maintains a somewhat easy to use [afl wrapper](https://github.com/trailofbits/test-fuzz) that requires serde impls for corpus storage/retrieval and being able to better fuzz substrate is something that is of interest to us.

This shouldn't really bloat the software too much as any unused code will just get removed by rustc and the derive macros should hardly impact compile times given how large the project is already.",9939,2021-10-06T04:06:17Z,0
504,bkchr,Why do you need this?,9939,2021-10-06T09:12:21Z,0
505,bkchr,Any update?,9939,2021-10-15T10:31:43Z,0
506,incertia,Apologies for being extra late. Figured out how to move the derive into the macro expansion.,9939,2021-10-26T04:40:24Z,0
507,bkchr,Still not compiling.,9939,2021-10-29T11:54:22Z,0
508,incertia,"moving derives into pallet derive macros seems to be blocked on an issue i cannot resolve within `pallet-atomic-swap`

its `pallet:Event` enum has a variant of type `PendingSwap<T: Config>`, which we can add Serialize/Deserialize for as follows

```rust
#[cfg(feature = ""std"")]
#[derive(Serialize, Deserialize)]
#[serde(crate = ""frame_support::serde"")]
pub struct PendingSwap<T: Config> {
	/// Source of the swap.
	pub source: T::AccountId,
	/// Action of this swap.
	pub action: T::SwapAction,
	/// End block of the lock.
	pub end_block: T::BlockNumber,
}
```

however, `T::SwapAction` is a trait bound

```rust
pub trait SwapAction<'a, AccountId, T: Config> {
	/// Reserve the resources needed for the swap, from the given `source`. The reservation is
	/// allowed to fail. If that is the case, the the full swap creation operation is cancelled.
	fn reserve(&self, source: &AccountId) -> DispatchResult;
	/// Claim the reserved resources, with `source` and `target`. Returns whether the claim
	/// succeeds.
	fn claim(&self, source: &AccountId, target: &AccountId) -> bool;
	/// Weight for executing the operation.
	fn weight(&self) -> Weight;
	/// Cancel the resources reserved in `source`.
	fn cancel(&self, source: &AccountId);
}
// ...
type SwapAction: SwapAction<Self::AccountId, Self> + Parameter;
```

adding a `Deserialize` trait bound requires adding a named lifetime parameter, which appears to be not so trivial to do.

```rust
#[cfg(feature = ""std"")]
type SwapAction<'a>: SwapAction<'a, Self::AccountId, Self> + Parameter + Serialize + Deserialize<'a>;
#[cfg(not(feature = ""std""))]
type SwapAction<'a>: SwapAction<'a, Self::AccountId, Self> + Parameter;
```

is my naive approach of accomplishing this but this depends on unstable features (GATs)
```
error[E0658]: generic associated types are unstable
   --> frame/atomic-swap/src/lib.rs:177:3
    |
177 |         type SwapAction<'a>: SwapAction<'a, Self::AccountId, Self> + Parameter + Serialize + Deserialize<'a>;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information
```

not really sure how to proceed here",9939,2021-11-17T17:05:31Z,0
509,bkchr,"> Why do you need this?

Please answer this",9939,2021-11-17T20:26:30Z,0
510,incertia,"> > Why do you need this?
> 
> Please answer this

> More specifically, my company maintains a somewhat easy to use [afl wrapper](https://github.com/trailofbits/test-fuzz) that requires serde impls for corpus storage/retrieval and being able to better fuzz substrate is something that is of interest to us.

Being able to automatically fuzz event inputs without having to write bespoke wrappers to various pallet functions would be a very nice to have.",9939,2021-11-17T22:41:20Z,0
511,bkchr,You want to fuzz using json?,9939,2021-11-18T09:44:45Z,0
512,incertia,"Not json, specifically, no. Currently, data is serialized out via either bincode or cbor.

serde's Serialize/Deserialize is also the serialization/deserialization standard in Rust and deviating from it would require extra (and non-sensical) work for little benefit.",9939,2021-11-18T19:14:23Z,0
513,incertia,"> adding a `Deserialize` trait bound requires adding a named lifetime parameter, which appears to be not so trivial to do.

turns out `DeserializedOwned` is a thing. things build locally so now hopefully we just need CI to pass.",9939,2021-11-18T21:54:44Z,0
514,incertia,i will fix `cargo test` soon tm,9939,2021-11-18T22:14:09Z,0
515,incertia,"> I can imagine a custom derive macro in frame that derives `Encode, Decode` always and `Serialize, Deserialize` only in `std`.

I am currently looking into how doable this is.

> After a while, we end up with an unorganized mess of types, where some random ones are `ser`/`de` and others are not, with no clear rule to define why some are some are not.

wrt this, currently all that happened was I made pallet::Error (maybe questionably) and pallet::Event (maybe not so questionably) serde and then adding it to any types that the compiler complained about but it can certainly be done more consistently within the smaller types within the pallet ecosystem.",9939,2021-12-03T21:32:28Z,0
516,bkchr,@incertia maybe you can just make the macros support custom derive attributes. Then you can add serde support downstream in your runtime. ,9939,2021-12-04T13:05:01Z,0
517,thiolliere,"I also don't very like derive serde everywhere like this.
Also I don't really usecase for it.

Types implements Encode/Decode, there have full type information with TypeInfo. I don't think we need more.

If some people want to use type which implement serde for fuzzing maybe it is possible to do: use types which implement serde when declaring the runtime. Fuzz from the runtime with concrete types which implements serde.

As 2 other people seems to be against this I'll close the PR, but anybody can reopen it with some more opinions.",9939,2021-12-16T08:23:37Z,0
518,bkchr,Did you tried to resync? ,10499,2021-12-16T09:18:23Z,0
519,bkchr,@dependabot rebase,10495,2021-12-15T22:33:19Z,0
520,KiChjang,bot merge,10495,2021-12-16T01:54:18Z,0
521,paritytech-processbot[bot]," Error: 
Error: When trying to meet the ""Project Owners"" approval requirements: this pull request does not belong to a project defined in Process.json.

Approval by ""Project Owners"" is only attempted if other means defined in the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge) are not satisfied first.

The following errors **might** have affected the outcome of this attempt:
- 'Client' does not match any projects in substrate's Process.json
- 'Benchmarking and Weights' does not match any projects in substrate's Process.json

Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are members of substrateteamleads or core-devs.
",10495,2021-12-16T01:54:26Z,0
522,girazoki,The impression I have is that the new _ExistenceReason_ enum is designed to avoid migrations with the current boolean type right? So my assumption is that the PR does not imply data migrations?,10382,2021-11-29T09:06:40Z,0
523,thiolliere,"the trait FrozenBalance says:
```
	/// In reality, the balance of every account must be at least the sum of this (if `Some`) and
	/// the asset's minimum_balance, since there may be complications to destroying an asset's
	/// account completely.
	///
	/// If `None` is returned, then nothing special is enforced.
	///
	/// If any operation ever breaks this requirement (which will only happen through some sort of
	/// privileged intervention), then `melted` is called to do any cleanup.
```
I think it needs to be updated.",10382,2021-11-30T05:44:29Z,0
524,shawntabrizi,"Ive reviewed most of the code, and it is mostly looking good, but I think @thiolliere is right, and there are some scenarios not correctly handled by the apis exposed and the logic underneath them.",10382,2021-12-01T07:08:07Z,0
525,gavofyork,"> The impression I have is that the new _ExistenceReason_ enum is designed to avoid migrations with the current boolean type right? So my assumption is that the PR does not imply data migrations?

Correct.",10382,2021-12-07T16:22:14Z,0
526,gavofyork,"> the trait FrozenBalance says:
> 
> ```
> 	/// In reality, the balance of every account must be at least the sum of this (if `Some`) and
> 	/// the asset's minimum_balance, since there may be complications to destroying an asset's
> 	/// account completely.
> 	///
> 	/// If `None` is returned, then nothing special is enforced.
> 	///
> 	/// If any operation ever breaks this requirement (which will only happen through some sort of
> 	/// privileged intervention), then `melted` is called to do any cleanup.
> ```
> 
> I think it needs to be updated.

@thiolliere How so?",10382,2021-12-07T16:35:26Z,0
527,gavofyork,@thiolliere @shawntabrizi @KiChjang Updated.,10382,2021-12-07T16:41:55Z,0
528,thiolliere,"> > the trait FrozenBalance says:
> > ```
> > 	/// In reality, the balance of every account must be at least the sum of this (if `Some`) and
> > 	/// the asset's minimum_balance, since there may be complications to destroying an asset's
> > 	/// account completely.
> > 	///
> > 	/// If `None` is returned, then nothing special is enforced.
> > 	///
> > 	/// If any operation ever breaks this requirement (which will only happen through some sort of
> > 	/// privileged intervention), then `melted` is called to do any cleanup.
> > ```
> > 
> > 
> >     
> >       
> >     
> > 
> >       
> >     
> > 
> >     
> >   
> > I think it needs to be updated.
> 
> @thiolliere How so?

It is now good with https://github.com/paritytech/substrate/pull/10431
",10382,2021-12-09T08:47:53Z,0
529,gavofyork,@thiolliere An approval would be good :),10382,2021-12-09T11:02:39Z,0
530,gavofyork,Note the build error is unrelated.,10485,2021-12-14T19:30:45Z,0
531,gavofyork,Cumulus error unrelated.,10485,2021-12-15T00:27:03Z,0
532,bkchr,bot merge force,10440,2021-12-13T14:42:22Z,0
533,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/cumulus/pull/856,10440,2021-12-13T14:42:33Z,0
534,ordian,bot merge,10440,2021-12-14T09:00:59Z,0
535,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4483 is not mergeable,10440,2021-12-14T09:01:06Z,0
536,bkchr,bot merge force,10440,2021-12-16T11:17:59Z,0
537,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10440,2021-12-16T11:18:22Z,0
538,TriplEight,"> In order to resolve rust-docs not being built, we could make the `build-rust-doc` job require a previous job directly

yeah, it makes sense depend `build-rust-doc` from `test-linux-stable`. But for [`publish-s3-doc`](https://github.com/paritytech/substrate/blob/68a058cdc315217d87b381b539d38d3cf24e9896/.gitlab-ci.yml#L678) then it makes sense to add the dependency from the `build-linux-substrate` as well.
That will make a logical chain ""if the test is OK and the binaries are built, we publish the docs"". Regardless of the `cargo deny` or `unleash`. HDYT?

> but we should also fix the two failing jobs.

Talked w @kirushik , he suggests avoiding [this crate](https://crates.io/crates/minicbor-derive). So we can't allow this license. @romanb maybe you have a good idea on how to get rid of `minicbor`?
",7584,2020-11-24T12:56:22Z,0
539,TriplEight,Done the first part in https://github.com/paritytech/substrate/pull/7591,7584,2020-11-24T13:23:53Z,0
540,TriplEight,cc https://github.com/paritytech/ci_cd/issues/102,7584,2021-02-18T17:31:55Z,0
541,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",7584,2021-07-07T21:23:35Z,0
542,Xanewok,"`unleash-check` has been fixed (#9129) but `publish-s3-doc` still failed in https://gitlab.parity.io/parity/substrate/-/jobs/1009988.

It now depends on
- `build-rust-doc` and
- `build-linux-substrate`

both of which are were green in the pipeline containing the failed doc publish job (https://gitlab.parity.io/parity/substrate/-/pipelines/146797).

@s3krit @TriplEight Do you have any idea what might be causing this?
",7584,2021-07-11T13:20:17Z,0
543,TriplEight,"@Xanewok gitlab [says](https://gitlab.parity.io/parity/substrate/-/jobs/1013918#L26) `warning: Skipping file /builds/parity/substrate/crate-docs/.lock. File/Directory is not readable.` as a last line of the `script:` and runs `after_script:` right after, this means it's likely the thing that caused the error. (`after_script:` runs regardless)",7584,2021-07-13T16:59:46Z,0
544,TriplEight,Docs publishing fixed in https://github.com/paritytech/substrate/pull/9341,7584,2021-07-20T16:31:35Z,0
545,danforbes,I would be happy to help out with this; I think this is very important from a developer advocacy perspective :+1: ,5681,2020-06-04T18:04:07Z,0
546,bkchr,Requires master merge,10402,2021-12-11T15:45:21Z,0
547,dharjeezy,"> Requires master merge

Hello @bkchr I have merged master now",10402,2021-12-11T17:31:12Z,0
548,thiolliere,CI needs to be green,10402,2021-12-13T04:03:26Z,0
549,dharjeezy,"> Details

Hello @acatangiu when you say old model, you mean `ord_parameter_types `right?",10402,2021-12-15T13:21:24Z,0
550,acatangiu,"> > Details
> 
> Hello @acatangiu when you say old model, you mean `ord_parameter_types `right?

Yes, for example [here](https://github.com/dharjeezy/substrate-1/blob/7db185e952631b042234ebec844fb9925b186c9f/frame/beefy/src/mock.rs#L60) and [here](https://github.com/dharjeezy/substrate-1/blob/7db185e952631b042234ebec844fb9925b186c9f/frame/beefy/src/mock.rs#L96). I suggest you grep for `parameter_types!` in the code-base to get them all.",10402,2021-12-15T15:00:23Z,0
551,dharjeezy,"> here



> > > Details
> > 
> > 
> > Hello @acatangiu when you say old model, you mean `ord_parameter_types `right?
> 
> Yes, for example [here](https://github.com/dharjeezy/substrate-1/blob/7db185e952631b042234ebec844fb9925b186c9f/frame/beefy/src/mock.rs#L60) and [here](https://github.com/dharjeezy/substrate-1/blob/7db185e952631b042234ebec844fb9925b186c9f/frame/beefy/src/mock.rs#L96). I suggest you grep for `parameter_types!` in the code-base to get them all.

So, i am searching the codebase pallet by pallet to change as many `parameter_types!` as i can,  i only took into consideration `parameter_types!` as described in the issue and not `ord_parameter_types!`",10402,2021-12-15T15:10:13Z,0
552,thiolliere,bot merge,10402,2021-12-16T02:10:17Z,0
553,paritytech-processbot[bot],Waiting for commit status.,10402,2021-12-16T02:10:26Z,0
554,thiolliere,"but I think we can have a follow up we remove more parameter_types:
* https://github.com/paritytech/substrate/pull/10402#discussion_r763573992
* https://github.com/paritytech/substrate/pull/10402#discussion_r770154002
* https://github.com/paritytech/substrate/pull/10402#discussion_r770154858",10402,2021-12-16T02:10:45Z,0
555,paritytech-processbot[bot],Merge cancelled due to error. Error: Head SHA changed from 1aca17dcb7709564d00ecdc16524c465250d75bc to c67bc2470a30a099cea1f6f89dd32987183caf53,10402,2021-12-16T02:19:18Z,0
556,thiolliere,bot merge,10402,2021-12-16T02:21:51Z,0
557,paritytech-processbot[bot],Waiting for commit status.,10402,2021-12-16T02:21:59Z,0
558,dharjeezy,"See you merged @thiolliere
No tip? 😑😕",10402,2021-12-16T07:40:03Z,0
559,thiolliere,sorry I'm not used to the tip system,10402,2021-12-16T07:45:54Z,0
560,thiolliere,/tip small,10402,2021-12-16T07:45:59Z,0
561,substrate-tip-bot[bot],"Please fix the following problems before calling the tip bot again:
 * You are not allowed to access the tip bot. Only [""shawntabrizi"", ""gavofyork"", ""rphmeier"", ""athei"", ""andresilva"", ""arkpar"", ""bkchr"", ""eskimor"", ""drahnr"", ""dvdplm"", ""robbepop"", ""cmichi"", ""tomaka"", ""pepyakin"", ""tomusdrw""] are allowed.",10402,2021-12-16T07:46:00Z,0
562,thiolliere,@shawntabrizi maybe can I have access to the tip bot or you could run it here ?,10402,2021-12-16T07:47:07Z,0
563,dharjeezy,"> @shawntabrizi maybe can I have access to the tip bot or you could run it here ?

You there? @shawntabrizi ",10402,2021-12-16T17:45:45Z,0
564,shawntabrizi,/tip small,10402,2021-12-16T23:11:22Z,0
565,substrate-tip-bot[bot],"A small tip was successfully submitted for dharjeezy (12ZNas89oEagaxLVNbpqmvfMxdrGrqN7gJKSpwthTUPZsrku on polkadot). 

 https://polkadot.js.org/apps/#/treasury/tips",10402,2021-12-16T23:11:27Z,0
566,dharjeezy,"> /tip small

Thanks for the tip everyone.",10402,2021-12-16T23:15:08Z,0
567,bkchr,@liuchengxu please run cargo fmt.,10501,2021-12-16T15:02:28Z,0
568,liuchengxu,"@bkchr Thanks for the info, does that mean substrate will probably not provide the network gossiping support in the future? I notice that beefy also use this crate
https://github.com/paritytech/substrate/blob/c476b86c73a942c3a542e4a0ef0c2d73e4399271/client/beefy/Cargo.toml#L33",10501,2021-12-16T15:51:37Z,0
569,bkchr,"It is not yet set in stone. Maybe there will be a replacement, maybe not. I just wanted to make you aware, in the end you could always copy the current code. ",10501,2021-12-16T15:53:58Z,0
570,liuchengxu,"@bkchr I'm also curious why polkadot does not use this crate instead using its own gossiping logic, are there any design considerations that could be useful for those who might have to develop their own gossiping network too?",10501,2021-12-16T16:03:12Z,0
571,bkchr,bot merge,10501,2021-12-16T23:19:18Z,0
572,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10501,2021-12-16T23:19:29Z,0
573,bkchr,"> @bkchr I'm also curious why polkadot does not use this crate instead using its own gossiping logic, are there any design considerations that could be useful for those who might have to develop their own gossiping network too?

Best to read the implementors guide.",10501,2021-12-16T23:19:49Z,0
574,bkchr,bot merge,10500,2021-12-17T08:30:46Z,0
575,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10500,2021-12-17T08:30:57Z,0
576,bkchr,bot merge,10506,2021-12-17T10:18:24Z,0
577,paritytech-processbot[bot],Waiting for commit status.,10506,2021-12-17T10:18:33Z,0
578,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10506,2021-12-17T10:52:15Z,0
579,bkchr,Do you use this somewhere in the runtime?,10504,2021-12-17T08:22:08Z,0
580,liuchengxu,">Do you use this somewhere in the runtime?

Exactly, was trying to use it in runtime because somehow the main runtime only cares about the extrinsic blob. Eventually, we would get rid of the approach loading the full opaque extrinsic, but it can still be nice to have this derive anyway if that doesn't hurt.",10504,2021-12-17T08:29:32Z,0
581,bkchr,"@liuchengxu next time please add a little bit of description on ""why"". ty.",10504,2021-12-17T08:32:10Z,0
582,liuchengxu,"@bkchr Will do, I thought it's a mere fairly trivial change and made a really quick PR :(.",10504,2021-12-17T08:35:24Z,0
583,bkchr,bot merge ,10504,2021-12-17T09:43:38Z,0
584,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10504,2021-12-17T09:43:49Z,0
585,bkchr,"> @bkchr Will do, I thought it's a mere fairly trivial change and made a really quick PR :(.

I know, but I'm still interested on a why. Otherwise I will need to ask again and wait and bla. Could be faster :) ",10504,2021-12-17T09:44:21Z,0
586,joao-paulo-parity,"For check-dependent-cumulus, [the Polkadot companion was patched into Cumulus](https://gitlab.parity.io/parity/substrate/-/jobs/1290949#L380) and so the scenario from https://github.com/paritytech/substrate/pull/10496#issue-803556795 worked as intended.

Meanwhile the ""simple case"" of check-dependent-polkadot [still works as expected](https://gitlab.parity.io/parity/substrate/-/jobs/1290995).",10496,2021-12-15T16:22:04Z,0
587,leonardocustodio,"@NukeManDan there you go, hope it helps.

Regards,",10135,2021-12-18T04:31:14Z,0
588,cla-bot-2021[bot],"User @leonardocustodio, please sign the CLA [here](https://cla.parity.io/sign_cla/5619696/3).",9271,2021-07-05T11:01:30Z,0
589,gavofyork,Is it not possible to enumerate all `Classes` and filter those created by the user?,9777,2021-10-06T11:11:06Z,0
590,Yuripetusko,"> Is it not possible to enumerate all `Classes` and filter those created by the user?

I am worried that query will be too heavy / slow once people start minting uniques actively and there are thousands of classes

",9777,2021-10-06T12:05:30Z,0
591,xlc,this requires migration,9940,2021-10-06T01:01:13Z,0
592,gavofyork,Not against this going in but it will need the migration.,9940,2021-10-14T09:28:38Z,0
593,hamidra,Migration code was missing. Also we would need to run benchmark to update the weights. Will add the storage version and migration logic to the pallet and will run the benchmark to fix.,9940,2021-10-14T20:38:33Z,0
594,hamidra,"2021-11-02 16:26:04 ⚠️ System declares internal migrations (which *might* execute). On-chain `StorageVersion(0)` vs current storage version `StorageVersion(0)`    
2021-11-02 16:26:04 ✅ no migration for BagsList    
2021-11-02 16:26:04 ✅ no migration for TransactionStorage    
2021-11-02 16:26:04 ⚠️ Uniques declares internal migrations (which *might* execute). On-chain `StorageVersion(0)` vs current storage version `StorageVersion(0)`    
2021-11-02 16:26:04 Running migration storage v1 for uniques with storage version StorageVersion(0)    
2021-11-02 16:26:04 Running migration storage v1 for uniques with storage version StorageVersion(0) was complete    
2021-11-02 16:26:04 ✅ no migration for Gilt    ",9940,2021-10-31T17:35:27Z,0
595,kianenigma,"> Try-runtime was ran against a substrate node with some unique classes and assets and the migration result was complete with no errors:
> 
> 2021-10-31 15:52:22 ✅ no migration for TransactionStorage 2021-10-31 15:52:22 ⚠️ Uniques declares internal migrations (which _might_ execute). On-chain `<wasm:stripped>` vs current storage version `<wasm:stripped>` 2021-10-31 15:52:22 Running migration storage v1 for uniques with storage version wasm:stripped 2021-10-31 15:52:22 Running migration storage v1 for uniques with storage version wasm:stripped was complete 2021-10-31 15:52:22 ✅ no migration for Gilt

run this with `--execution Native`",9940,2021-10-31T19:22:07Z,0
596,shawntabrizi,"> Looks overall good to me. To test the migration properly with try-runtime you need to integrate it in cumulus, but I think the logic of the migration is pretty trivial. I am just worried about the size of migration.

I think there are very few classes actually, so this should be fine?",9940,2021-10-31T19:46:52Z,0
597,hamidra,"> > Looks overall good to me. To test the migration properly with try-runtime you need to integrate it in cumulus, but I think the logic of the migration is pretty trivial. I am just worried about the size of migration.
> 
> I think there are very few classes actually, so this should be fine?

currently there are 7 classes. so it will be a light migration.",9940,2021-10-31T22:50:51Z,0
598,hamidra,/benchmark runtime pallet pallet_uniques,9940,2021-11-02T15:00:33Z,0
599,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""hamidra/class-account-storage"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_uniques --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/uniques/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_uniques"", Extrinsic: ""create"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques ClassAccount (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     41.1
              µs

Reads = 1
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     41.1
              µs

Reads = 1
Writes = 2

Pallet: ""pallet_uniques"", Extrinsic: ""force_create"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques ClassAccount (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.98
              µs

Reads = 1
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.98
              µs

Reads = 1
Writes = 2

Pallet: ""pallet_uniques"", Extrinsic: ""destroy"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques Asset (r:1 w:0)
Storage: Uniques ClassAccount (r:0 w:1)
Storage: Uniques Attribute (r:0 w:1000)
Storage: Uniques ClassMetadataOf (r:0 w:1)
Storage: Uniques InstanceMetadataOf (r:0 w:1000)
Storage: Uniques Account (r:0 w:20)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + n    14.71
    + m    1.114
    + a    1.067
              µs

Reads = 2 + (1 * n) + (0 * m) + (0 * a)
Writes = 3 + (2 * n) + (1 * m) + (1 * a)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n     m     a   mean µs  sigma µs       %
    0  1000  1000      1696     10.99    0.6%
   20  1000  1000      1955     10.66    0.5%
   40  1000  1000      2225     12.32    0.5%
   60  1000  1000      2504        12    0.4%
   80  1000  1000      2768     12.73    0.4%
  100  1000  1000      3044     20.74    0.6%
  120  1000  1000      3305     25.91    0.7%
  140  1000  1000      3629     7.986    0.2%
  160  1000  1000      3875     18.45    0.4%
  180  1000  1000      4159     10.73    0.2%
  200  1000  1000      4466     7.328    0.1%
  220  1000  1000      4716     6.096    0.1%
  240  1000  1000      4974     13.53    0.2%
  260  1000  1000      5275     12.52    0.2%
  280  1000  1000      5633     29.69    0.5%
  300  1000  1000      5846     22.27    0.3%
  320  1000  1000      6178     14.82    0.2%
  340  1000  1000      6562     23.35    0.3%
  360  1000  1000      6721     12.85    0.1%
  380  1000  1000      6985     21.99    0.3%
  400  1000  1000      7280     34.32    0.4%
  420  1000  1000      7501     30.24    0.4%
  440  1000  1000      7978     43.11    0.5%
  460  1000  1000      8261     29.58    0.3%
  480  1000  1000      8523     38.36    0.4%
  500  1000  1000      8870     18.54    0.2%
  520  1000  1000      9130     24.92    0.2%
  540  1000  1000      9558     33.86    0.3%
  560  1000  1000      9702      36.9    0.3%
  580  1000  1000     10010     32.95    0.3%
  600  1000  1000     10220     44.93    0.4%
  620  1000  1000     10590     33.21    0.3%
  640  1000  1000     11020      40.1    0.3%
  660  1000  1000     11110     44.17    0.3%
  680  1000  1000     11510      55.6    0.4%
  700  1000  1000     11890     68.65    0.5%
  720  1000  1000     12190     31.56    0.2%
  740  1000  1000     12390     26.85    0.2%
  760  1000  1000     12850     36.44    0.2%
  780  1000  1000     13110     50.11    0.3%
  800  1000  1000     13310     37.46    0.2%
  820  1000  1000     13590     42.76    0.3%
  840  1000  1000     13980     32.79    0.2%
  860  1000  1000     14190     53.24    0.3%
  880  1000  1000     14410     37.25    0.2%
  900  1000  1000     14860     27.62    0.1%
  920  1000  1000     15080     44.42    0.2%
  940  1000  1000     15260     76.07    0.4%
  960  1000  1000     15670     49.35    0.3%
  980  1000  1000     15920     70.45    0.4%
 1000     0  1000     15400     55.18    0.3%
 1000    20  1000     15460     41.72    0.2%
 1000    40  1000     15350     42.35    0.2%
 1000    60  1000     15360     87.91    0.5%
 1000    80  1000     15390     36.43    0.2%
 1000   100  1000     15460     81.28    0.5%
 1000   120  1000     15420     22.69    0.1%
 1000   140  1000     15380     35.84    0.2%
 1000   160  1000     15570      66.6    0.4%
 1000   180  1000     15390     52.83    0.3%
 1000   200  1000     15200     51.59    0.3%
 1000   220  1000     15410     63.62    0.4%
 1000   240  1000     15680     58.96    0.3%
 1000   260  1000     15560     53.19    0.3%
 1000   280  1000     15520     57.47    0.3%
 1000   300  1000     15390     32.48    0.2%
 1000   320  1000     15590     55.86    0.3%
 1000   340  1000     15580     63.97    0.4%
 1000   360  1000     15600     65.55    0.4%
 1000   380  1000     15550     60.89    0.3%
 1000   400  1000     15840     50.27    0.3%
 1000   420  1000     15850     65.68    0.4%
 1000   440  1000     15790     38.27    0.2%
 1000   460  1000     15910      83.9    0.5%
 1000   480  1000     15740     59.24    0.3%
 1000   500  1000     15880     38.12    0.2%
 1000   520  1000     15640     64.22    0.4%
 1000   540  1000     15990     54.02    0.3%
 1000   560  1000     15900      65.4    0.4%
 1000   580  1000     15880     47.19    0.2%
 1000   600  1000     16160     57.39    0.3%
 1000   620  1000     16010     61.79    0.3%
 1000   640  1000     15740     34.03    0.2%
 1000   660  1000     15860     47.53    0.2%
 1000   680  1000     16110     37.69    0.2%
 1000   700  1000     15840     68.46    0.4%
 1000   720  1000     16180     60.13    0.3%
 1000   740  1000     16160      33.5    0.2%
 1000   760  1000     16070      45.1    0.2%
 1000   780  1000     15890     17.69    0.1%
 1000   800  1000     16330     55.74    0.3%
 1000   820  1000     16250     47.64    0.2%
 1000   840  1000     16170     67.08    0.4%
 1000   860  1000     16330     42.11    0.2%
 1000   880  1000     16070     69.08    0.4%
 1000   900  1000     16240     44.63    0.2%
 1000   920  1000     16260     60.05    0.3%
 1000   940  1000     16350     48.73    0.2%
 1000   960  1000     16570      59.7    0.3%
 1000   980  1000     16450     48.21    0.2%
 1000  1000     0     15370     47.78    0.3%
 1000  1000    20     15550      45.6    0.2%
 1000  1000    40     15490     77.73    0.5%
 1000  1000    60     15520     45.33    0.2%
 1000  1000    80     15430     89.56    0.5%
 1000  1000   100     15520     53.32    0.3%
 1000  1000   120     15570     48.61    0.3%
 1000  1000   140     15590     49.12    0.3%
 1000  1000   160     15320     59.99    0.3%
 1000  1000   180     15280     59.89    0.3%
 1000  1000   200     15580     59.84    0.3%
 1000  1000   220     15520     64.88    0.4%
 1000  1000   240     15700      51.8    0.3%
 1000  1000   260     15610      45.4    0.2%
 1000  1000   280     15630     53.11    0.3%
 1000  1000   300     15560     38.35    0.2%
 1000  1000   320     15560     39.38    0.2%
 1000  1000   340     15810     46.63    0.2%
 1000  1000   360     15530     56.81    0.3%
 1000  1000   380     15750     28.58    0.1%
 1000  1000   400     15780     40.52    0.2%
 1000  1000   420     15880     39.28    0.2%
 1000  1000   440     15820     29.47    0.1%
 1000  1000   460     15680     48.17    0.3%
 1000  1000   480     16000     36.69    0.2%
 1000  1000   500     15700     49.34    0.3%
 1000  1000   520     16090     42.97    0.2%
 1000  1000   540     15980     58.44    0.3%
 1000  1000   560     15980     33.18    0.2%
 1000  1000   580     15720     44.21    0.2%
 1000  1000   600     15970     71.01    0.4%
 1000  1000   620     16260     70.97    0.4%
 1000  1000   640     15970     57.85    0.3%
 1000  1000   660     16100     53.81    0.3%
 1000  1000   680     16140     70.67    0.4%
 1000  1000   700     16130     65.16    0.4%
 1000  1000   720     16200     74.16    0.4%
 1000  1000   740     16120     78.51    0.4%
 1000  1000   760     16030     76.52    0.4%
 1000  1000   780     16390      46.1    0.2%
 1000  1000   800     16320     52.53    0.3%
 1000  1000   820     16230     36.65    0.2%
 1000  1000   840     16440     72.76    0.4%
 1000  1000   860     16000     68.01    0.4%
 1000  1000   880     16300     88.98    0.5%
 1000  1000   900     16130     68.15    0.4%
 1000  1000   920     16300     43.96    0.2%
 1000  1000   940     16560      61.9    0.3%
 1000  1000   960     16190     65.12    0.4%
 1000  1000   980     16610     48.01    0.2%
 1000  1000  1000     16360     71.04    0.4%

Quality and confidence:
param     error
n         0.014
m         0.014
a         0.014

Model:
Time ~=        0
    + n    14.87
    + m    1.058
    + a    0.956
              µs

Reads = 2 + (1 * n) + (0 * m) + (0 * a)
Writes = 3 + (2 * n) + (1 * m) + (1 * a)

Pallet: ""pallet_uniques"", Extrinsic: ""mint"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Asset (r:1 w:1)
Storage: Uniques Class (r:1 w:1)
Storage: Uniques Account (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    51.24
              µs

Reads = 2
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    51.24
              µs

Reads = 2
Writes = 3

Pallet: ""pallet_uniques"", Extrinsic: ""burn"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques Asset (r:1 w:1)
Storage: Uniques Account (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.17
              µs

Reads = 2
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.17
              µs

Reads = 2
Writes = 3

Pallet: ""pallet_uniques"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:0)
Storage: Uniques Asset (r:1 w:1)
Storage: Uniques Account (r:0 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    39.68
              µs

Reads = 2
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    39.68
              µs

Reads = 2
Writes = 3

Pallet: ""pallet_uniques"", Extrinsic: ""redeposit"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques Asset (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + i    22.71
              µs

Reads = 1 + (1 * i)
Writes = 1 + (1 * i)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    i   mean µs  sigma µs       %
    0     23.43      0.08    0.3%
  100      2159     10.85    0.5%
  200      4317     18.98    0.4%
  300      6522     30.67    0.4%
  400      8710      26.1    0.2%
  500     10890     20.33    0.1%
  600     13100     14.59    0.1%
  700     15360     26.32    0.1%
  800     17490     38.66    0.2%
  900     19820     46.76    0.2%
 1000     21880     50.09    0.2%
 1100     24270     45.59    0.1%
 1200     26650     50.08    0.1%
 1300     28760     34.42    0.1%
 1400     30970      35.7    0.1%
 1500     33090     66.99    0.2%
 1600     35370     56.74    0.1%
 1700     37530      79.7    0.2%
 1800     40030     65.62    0.1%
 1900     42160     85.99    0.2%
 2000     44530     36.65    0.0%
 2100     46500     39.37    0.0%
 2200     48770     58.75    0.1%
 2300     51460     70.63    0.1%
 2400     53540     26.09    0.0%
 2500     55590     61.35    0.1%
 2600     57810     48.17    0.0%
 2700     59910     54.54    0.0%
 2800     62430     113.3    0.1%
 2900     64470       116    0.1%
 3000     67520     105.7    0.1%
 3100     69940     78.56    0.1%
 3200     72100     98.17    0.1%
 3300     74340     144.5    0.1%
 3400     76530     50.72    0.0%
 3500     78970     171.5    0.2%
 3600     81270     73.12    0.0%
 3700     83630     114.3    0.1%
 3800     85600     122.6    0.1%
 3900     87590     79.51    0.0%
 4000     90100     81.31    0.0%
 4100     92420     120.1    0.1%
 4200     94630     103.5    0.1%
 4300     96980        76    0.0%
 4400     99260     84.82    0.0%
 4500    102500     130.4    0.1%
 4600    104300     119.3    0.1%
 4700    106600     103.8    0.0%
 4800    108600       177    0.1%
 4900    111500     111.4    0.0%
 5000    114000     132.1    0.1%

Quality and confidence:
param     error
i         0.012

Model:
Time ~=        0
    + i    22.75
              µs

Reads = 1 + (1 * i)
Writes = 1 + (1 * i)

Pallet: ""pallet_uniques"", Extrinsic: ""freeze"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Asset (r:1 w:1)
Storage: Uniques Class (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.83
              µs

Reads = 2
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.83
              µs

Reads = 2
Writes = 1

Pallet: ""pallet_uniques"", Extrinsic: ""thaw"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Asset (r:1 w:1)
Storage: Uniques Class (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.73
              µs

Reads = 2
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.73
              µs

Reads = 2
Writes = 1

Pallet: ""pallet_uniques"", Extrinsic: ""freeze_class"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.89
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.89
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_uniques"", Extrinsic: ""thaw_class"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.84
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.84
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_uniques"", Extrinsic: ""transfer_ownership"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Uniques ClassAccount (r:0 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    51.52
              µs

Reads = 2
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    51.52
              µs

Reads = 2
Writes = 4

Pallet: ""pallet_uniques"", Extrinsic: ""set_team"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.03
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.03
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_uniques"", Extrinsic: ""force_asset_status"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques ClassAccount (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.87
              µs

Reads = 1
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.87
              µs

Reads = 1
Writes = 2

Pallet: ""pallet_uniques"", Extrinsic: ""set_attribute"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques InstanceMetadataOf (r:1 w:0)
Storage: Uniques Attribute (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    63.36
              µs

Reads = 3
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    63.36
              µs

Reads = 3
Writes = 2

Pallet: ""pallet_uniques"", Extrinsic: ""clear_attribute"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques InstanceMetadataOf (r:1 w:0)
Storage: Uniques Attribute (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.84
              µs

Reads = 3
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.84
              µs

Reads = 3
Writes = 2

Pallet: ""pallet_uniques"", Extrinsic: ""set_metadata"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques InstanceMetadataOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.98
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.98
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_uniques"", Extrinsic: ""clear_metadata"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques InstanceMetadataOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.34
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.34
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_uniques"", Extrinsic: ""set_class_metadata"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:1)
Storage: Uniques ClassMetadataOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    46.89
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    46.89
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_uniques"", Extrinsic: ""clear_class_metadata"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:0)
Storage: Uniques ClassMetadataOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.74
              µs

Reads = 2
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.74
              µs

Reads = 2
Writes = 1

Pallet: ""pallet_uniques"", Extrinsic: ""approve_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:0)
Storage: Uniques Asset (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.82
              µs

Reads = 2
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.82
              µs

Reads = 2
Writes = 1

Pallet: ""pallet_uniques"", Extrinsic: ""cancel_approval"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Uniques Class (r:1 w:0)
Storage: Uniques Asset (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.75
              µs

Reads = 2
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.75
              µs

Reads = 2
Writes = 1


```

</details>",9940,2021-11-02T15:00:35Z,0
600,hamidra,"> Looks overall good to me. To test the migration properly with try-runtime you need to integrate it in cumulus, but I think the logic of the migration is pretty trivial. I am just worried about the size of migration.

Now that try-runtime is added to cumulus I also tried the runtime upgrade on cumulus and it was successful against the current statemine state:

2021-12-06 13:17:07 ✅ no migration for Proxy    
2021-12-06 13:17:07 ✅ no migration for Assets    
2021-12-06 13:17:07 ⚠️ Uniques declares internal migrations (which *might* execute). On-chain `StorageVersion(0)` vs current storage version `StorageVersion(0)`    
2021-12-06 13:17:07 Running migration storage v1 for uniques with storage version StorageVersion(0)    
2021-12-06 13:17:07 Running migration storage v1 for uniques with storage version StorageVersion(0) was complete    
2021-12-06 13:17:10 proof: 9f06aa394eea5630e07c48ae0c9558cef7398f80688cf08b3f5dffa06d8e56ec0c3e65686b6b969ae836a98cfb64a6c690e48d488020721217d71a031cd2d75e12e6279a0869341eccdb5269c5bad2615450113c4d505f0e7b9012096b41c4eb3aaf947f6ea4290800004c5f0684a022a34dd8bfa2baaf44f172b71004018032e57306806680739e8d0bb9146bfb4ece88127889eccc82c5b3bb4ca18a6f088091c51caec933f99099d9533a10fff9fa19d95981a63b7caf99ad17f14b7d606a80b87a3952cfb2e514fbb79173aa18e5bf21c6a3b2fd27f70d42dde0dacda0ea8780366d0f60b7986a88ffd219874f0ac04eb0344850c3d0c775e93ac27702ce4045785f09cce9c888469bb1a0dceaa129672ef83065092473746174656d696e659f02f224bb127609e7cebd7d411456bd968a6e806d47c287ea48da6148df16f6021539c89aaab786440ff04a34cea13547c7a395805e531b65407ddd65eb11aa12fc4ea7a958040c314a558180143e7f8d8890952e80ecdd9dd5efdab70a1f5946a274ab5dc208e9345ccfdf3efe8ff58f44d47367d280da166af004aa5ce308ca55b9499480f7afa7f72bbdff23d94e9e7cef79f4a14480245647965fd6c1cddfb5e109c6c951421cba9bff690e40850b907f387b1cc2b780491cc11505735d5484f305ec4ef0d3e13d42858060f976b6a918b333a3ffb95380bc0550ea9c...27615450c9c7ac04323db766688b2d8112c4aa008c6b63f80b31c6fd5cedb58f27615450c9c7ac04323db766688b2d8112c4aa008c6b63f80b31c6fd5cedb58f27615450c9c7ac04323db766688b2d8112c4aa008c6b63f80b31c6fd5cedb58f27615450c9c7ac04323db766688b2d8112c4aa008c6b63f80b31ac69961f64020000000000000000000000610000006100000000000000006623b1a14cb49e4d32c1f7dff3396751450000007902ce10c51e89ab2907983cc8b846d9d1afa2f9700db18e176c7fcfe709d0406339ce10c51e89ab2907983cc8b846d9d1afa2f9700db18e176c7fcfe709d0406339ce10c51e89ab2907983cc8b846d9d1afa2f9700db18e176c7fcfe709d0406339ce10c51e89ab2907983cc8b846d9d1afa2f9700db18e176c7fcfe709d04063396ca55f4aee000000000000000000000000010000000100000000000000006619bf46066d74446ee15c8c2715f7030d0000007902c6fd5cedb58f27615450c9c7ac04323db766688b2d8112c4aa008c6b63f80b31c6fd5cedb58f27615450c9c7ac04323db766688b2d8112c4aa008c6b63f80b31c6fd5cedb58f27615450c9c7ac04323db766688b2d8112c4aa008c6b63f80b31c6fd5cedb58f27615450c9c7ac04323db766688b2d8112c4aa008c6b63f80b3192b9626480030000000000000000000000aa000000aa0000000000000001 / 36 nodes    
2021-12-06 13:17:10 proof size: 626.45 KB (641488 bytes)    
2021-12-06 13:17:10 compact proof size: 625.35 KB (640360 bytes)    
2021-12-06 13:17:10 zstd-compressed compact proof 625.37 KB (640381 bytes)    
2021-12-06 13:17:10 TryRuntime_on_runtime_upgrade executed without errors. Consumed weight = 2325000000, total weight = 500000000000 (0.00465) ",9940,2021-12-06T13:33:17Z,0
601,shawntabrizi,bot merge,9940,2021-12-18T15:40:55Z,0
602,burdges,"You'll find numerous major optimization directions here if you look closely. 

We bloat PoV blocks and CPU time by 4x in dense trees, due to using radix 16 hashing.  I've told at least four people how to fix this, but they always come back saying the relay chain trees has mostly sparse subtrees.  Actually dense trees pop up, especially if you're working to minimize state. 

We serialize stuff crossing the WASM boundary to native.  Servo avoids this by just passing references, which brings some complexity like using Spidermonkey's allocator outside JS/WASM.  I'd expect calls between WASM blobs face some similar concerns. ",9354,2021-07-15T22:39:33Z,0
603,h4x3rotab,"Not sure about how the availability protocol runs, but I think another direction is to make the contract code distributed to the validators on the relay chain (just like the runtime WASM file?), and then we only need to include the hash of the contract code in the PoV block.",9354,2021-07-16T08:44:06Z,0
604,burdges,"It's tricky..

We're scalable for transactions because we do not distribute all state or parablock data to all validators.  Any pre-distributed code limits our total code size across the system, but we could simply charge much higher rent for pre-distributed code of course.  

We've a similar problem with parathread code..

I've always favored parachain code being left as whole blocks, both erasure coded in the availability store and when optimal downloaded and precompiled, but never moved into state.  We'd then do parathreads by making approval checkers reconstruct and build the parathread's code block, in addition to reconstructing the candidate itself.  It's basically a storage chain where you could access whole recent blocks with some price.  

Intuitively here, all parathreads pay not merely for their reconstructing and running their candidate, but also for reconstructing and building their code, which takes far longer than merely running the block.  We'd cache builds somewhat here too but @rphmeier observed that builds turn out very costly, so if your parathreads make many blocks then pre-distributing and pre-building is optimal.  We'll likely want swarms of identical parathreads and SPREE modules, which both favor pre-distributing and pre-building too. 

Could contracts use this solution?

In principle, we could tweak the erasure coding and reconstruction logic to support reconstruction on `2 * num_validator` byte boundaries, so likely 3 kilobyte regions, so then contract code could be referenced by a position in a previous block.  We eventually prune old blocks from availability though, which parachains/parathreads could solve by reuping their code blocks.  We'd need contract code to similarly rent this alternative storage space together with other contracts, which risks a tragedy of the commons.  

In brief, we've trouble applying our availability tricks to code, but sometimes doing so likely does make sense.  ",9354,2021-07-16T10:17:31Z,0
605,athei,"> We bloat PoV blocks and CPU time by 4x in dense trees, due to using radix 16 hashing. I've told at least four people how to fix this, but they always come back saying the relay chain trees has mostly sparse subtrees. Actually dense trees pop up, especially if you're working to minimize state.
> 
> We serialize stuff crossing the WASM boundary to native. Servo avoids this by just passing references, which brings some complexity like using Spidermonkey's allocator outside JS/WASM. I'd expect calls between WASM blobs face some similar concerns.

I fail to understand how that would decrease the size of the PoV which is dominated by the wasm blob size of the contract in this scenario. Can you elaborate? Please keep in mind that I am no deep expert in the parachain code as most people working on this issue right now.


> Intuitively here, all parathreads pay not merely for their reconstructing and running their candidate, but also for reconstructing and building their code, which takes far longer than merely running the block. We'd cache builds somewhat here too but @rphmeier observed that builds turn out very costly, so if your parathreads make many blocks then pre-distributing and pre-building is optimal. We'll likely want swarms of identical parathreads and SPREE modules, which both favor pre-distributing and pre-building too.
> 
> Could contracts use this solution?

Again, you assume to much knowledge about parachain details here. I don't understand what you mean. I would need some background (maybe you can link me some relevant doc or explain) in order to answer this question.",9354,2021-07-16T10:46:35Z,0
606,burdges,"Apologies.  I wondered off thinking about the problem some..  ;)

Availability could be made contract friendly, but does not provide any silver bullet.  We're inherently less scalable for code than for data.  Yes, we could consider mechanisms for pre-building contracts on all validators.  It's ugly but it'll be fastest if the contract gets used lots.  I'll caution pre-builds makes contracts compete more directly with resources used by parachains and especially parathreads. 

> I fail to understand how that would decrease the size of the PoV which is dominated by the wasm blob size of the contract in this scenario. Can you elaborate? 

You're correct.  If the WASM blob is the problem then this won't help much.  Initially my comments were more general.",9354,2021-07-16T14:43:35Z,0
607,athei,"> Apologies. I wondered off thinking about the problem some.. ;)

No worries anything that helps is welcome. However, I try to keep this issue focused on the bandwith issue and not general performance.

> Availability could be made contract friendly, but does not provide any silver bullet. We're inherently less scalable for code than for data. Yes, we could consider mechanisms for pre-building contracts on all validators. It's ugly but it'll be fastest if the contract gets used lots. I'll caution pre-builds makes contracts compete more directly with resources used by parachains and especially parathreads.

Moving common functionality from contracts to the runtime (maybe additionally with the help of the module linking proposal) is something that the ink! team will be looking into. Maybe that makes having ""precompiled contracts"" as ethereum has them obsolete. Additionally, chains could move this core functionality to a pallet and make that accessible via chain extensions (extending the host functions a contract can call).

> You're correct. If the WASM blob is the problem then this won't help much. Initially my comments were more general.

While improving execution speed and hence the transaction weight is always appreciated this is not the point here. We are bottle necked on bandwith (PoV size). So speed improvements do not buy us anything right now. It is a fair point, though. It is just the wrong place to discuss it.",9354,2021-07-16T17:38:01Z,0
608,athei,"I continue to work on analyzing where the bloat of our ink contracts stems from. I figured out a workaround  that allows twiggy to open our contracts even with an intact name section. I am trying to [upstream](https://github.com/rustwasm/twiggy/pull/576) this fix. Unfortunately the project seems to be abandoned. Please install [my fork](https://github.com/athei/twiggy) for a working twiggy. If I need further improvements I will update the master there.

In order to have analyzeable contracts I [added a new flag](https://github.com/paritytech/cargo-contract/pull/302) to `cargo contract` that allows us to keep the debug symbols in optimized builds. This allows the usage of `twiggy mono` to detect bloat generated by monomorphizations and makes working with the binary a more pleasant experience in general.",9354,2021-07-19T17:44:23Z,0
609,burdges,"I just learned from https://github.com/johnthagen/min-sized-rust that some binary size reductions occur with
```
[profile.release]
codegen-units = 1
```
so maybe web3 could finance rustc work on communication between codegen units in the most relevant passes? ",9354,2021-07-25T22:24:32Z,0
610,testhound,"The compiler team is working on adding procedure outlining as a optimization to the LLVM backend. Some background on procedure outlining:

https://mnt.io/2016/12/06/reducing-code-size-using-outlining/

https://www.linaro.org/blog/reducing-code-size-with-llvm-machine-outliner-on-32-bit-arm-targets/

https://llvm.org/doxygen/MachineOutliner_8cpp_source.html

This will be paired with function merging which achieved a 8% reduction in code size.",9354,2021-10-04T14:22:01Z,0
611,athei,"- Updated the code merkelization sub issue ( #9431 ) to reflect what the currently envisioned design is.
- Added a paragraph to the solang comparison summarizing my recent discoveries.
- @0x7CFE is looking into Huffman coding.",9354,2021-10-05T11:17:40Z,0
612,athei,"Added a link to the solc vs. solang comparison [repository](https://github.com/paritytech/contract-sizes). Please note that this effort is currently on hold until solang is changed so that it realiably allows compiling with different address types. However, the initial results with the ERC20 contract (see top post) make me confident that the size issues in wasm contracts can be overcome by passing large data types by reference.",9354,2021-10-18T09:36:00Z,0
613,Robbepop,"# ink! Update: Wasm File Sizes

After implementing
- https://github.com/paritytech/ink/pull/831
- https://github.com/paritytech/ink/pull/665
- https://github.com/paritytech/ink/pull/971
- https://github.com/paritytech/ink/pull/974
- https://github.com/paritytech/ink/pull/978

It was finally possible to properly implement the `Mapping` type efficiently that has first been introduced by @HCastano in:

- https://github.com/paritytech/ink/pull/946: ~29kB -> 12.9kB :+1: 

Which I took and further optimized it using the above mentioned PRs:

- https://github.com/paritytech/ink/pull/979: 12.9kB -> 10.8kB :+1: 

Some further researches to reuse the `Mapping` internal index key with `RefCell` and `UnsafeCell` have not been successful but can still be inspected in ink! branches:

- `hc-rf-mapping-type-refcell`: 10.8kB -> 11.3kB :-1: 
- `hc-rf-mapping-type-unsafe-cell`: 10.8kB -> 10.9kB :-1: 

While implementing [#979][pr979] it was discovered that emitting of events in the ERC-20 example contract was especially costly.
Also we did experiments by replacing the 256-bit wide `AccountId` with a 32-bit one in order to emulate all `AccountId` uses through references that are 32-bit on Wasm in size.

By using a 32-bit `AccountId` we can decrease the 10.8kB down to 8.7kB of uncompressed Wasm file size.
If we additionally remove all `emit_event` operations we get down to 6.0kB of uncompressed Wasm file size.
After compression using `zstd` we get down from 8.7kB to 4.9kB and from 6.0kB to 2.8kB.

- `hc-rf-mapping-type-6kb`: 10.8kB -> 6.0kB (cheated) :+1: :-1: 

With both [#946][pr946] and [#979][pr979] merged we should look into how we can further optimize how we emit events in ink! for the largest gains with respect to our ERC-20 example contract benchmark.

Note that those 6.0 kB are not a realistic goal for now since they lack emitting of events entirely.
However, I am optimistic that we can get the ERC-20 example contract down to 9.0kB or maybe even under 8.0kB of uncompressed Wasm file size.

There are still a lot of improvements that can be done in ink! with respect to Wasm file sizes:

- https://github.com/paritytech/ink/pull/970: Still WIP since it won't have an effect on our base benchmark ERC-20 contract and is not as trivially implemented as we initially thought.
- There are some SEAL functions that take big types such as `AccountId` or `Balance` by value which it should actually take by reference. However, we do not expect large gains by this change.
- Since we now got [#987][pr987] in we can introduce other new non-caching and more efficient `ink_storage` data structures that should have a huge impact on other example smart contracts.
- By using `EncodeLike` in more places (besides the optimized `Mapping`) we can get Wasm file sizes down in more places since it allows to pass references instead of values even for tuple types.
- As stated above we need to take a deep look into how ink! emits events currently since there seems to be a huge optimization potential with respect to passing large types by references instead of by value.
- We could allow references as input parameters to ink! messages and constructors. I thought this through and it might work but I am not sure if it will actually have a measurable impact on the Wasm file sizes. However, it will have an impact on users since helper methods that take the same inputs as references as currently done in the improved `Mapping` PR won't be needed anymore.

[pr946]: https://github.com/paritytech/ink/pull/946
[pr979]: https://github.com/paritytech/ink/pull/979
[pr987]: https://github.com/paritytech/ink/pull/978",9354,2021-10-23T13:03:35Z,0
614,shawntabrizi,"I would not recommend this kind of thing to happen automatically because extrinsics are sensitive in their ordering and encoding.

For example, at this point, adding or removing this `setter` function would actually adjust the number of extrinsics in the pallet, the ordering, etc...",10507,2021-12-17T11:43:21Z,0
615,bkchr,"For that exists `frame_system::set_storage`.

No need to have a dispatchable for each storage item + the things @shawntabrizi said. ",10507,2021-12-19T10:36:12Z,0
616,bkchr,bot merge,10350,2021-11-23T09:38:41Z,0
617,paritytech-processbot[bot],Waiting for commit status.,10350,2021-11-23T09:38:49Z,0
618,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 9743d5b136114843e63412312b375a1d31423256,10350,2021-11-23T10:23:38Z,0
619,dependabot[bot],Superseded by #10513.,10350,2021-12-19T11:26:30Z,0
620,dharjeezy,Picking this up @gavofyork ,10383,2021-11-28T17:28:46Z,0
621,dharjeezy,"@gavofyork i see in your PR here https://github.com/paritytech/substrate/pull/10382 that you have defined the implementation for ConstU64, ConstU128 and ConstBool.  Only  ConstU32 is available currently in master.

Should i wait for your PR to get merged before solving this issue?",10383,2021-11-28T20:50:01Z,0
622,gavofyork,You could just start on a branch which brings in that change. It's not a lot of code.,10383,2021-11-28T23:50:26Z,0
623,dharjeezy,"When you say start on a branch, Are you saying i should start off on my own branch which I already started(changing parameter types for ConstU32)?

More so, are you saying i should implement the `ConstU64, ConstU128 and ConstBool` on my own branch?

@gavofyork ",10383,2021-11-29T10:22:46Z,0
624,gavofyork,"> More so, are you saying i should implement the ConstU64, ConstU128 and ConstBool on my own branch?

Yes, you could copy that code in if it's going to be useful (and it probably is).",10383,2021-12-01T18:15:54Z,0
625,dharjeezy,"I have started the implementation as opened in the PR
@gavofyork ",10383,2021-12-02T00:15:56Z,0
626,KiChjang,Fixed by #10402.,10383,2021-12-18T11:53:24Z,0
627,thiolliere,some place could still be replaced https://github.com/paritytech/substrate/pull/10402#issuecomment-995374677,10383,2021-12-20T05:22:48Z,0
628,bkchr,bot merge,10512,2021-12-20T09:56:03Z,0
629,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10512,2021-12-20T09:56:15Z,0
630,cheme,"For caching accesses during block building, I think the easiest model would be to have a trie node cache.
The issue with storage cache is that we need to access trie node at least once to build the proof.
Trie node cache is very close to a db cache, could be a simple lru put in front of the database state column.",9770,2021-09-14T09:41:35Z,0
631,bkchr,"Good idea! We should implement an early version and compare that against the state cache. Even if there is a small performance hit,I think we should switch to a trie level cache. The point here being is that parachains currently can not use the state cache for block building and the state cache is rather complicated.

Another bonus point of a trie cache would be that we would solve #9769 as well.",9770,2021-09-14T10:01:55Z,0
632,cheme,Drafted such cache in this branch : https://github.com/paritytech/substrate/compare/master...cheme:trie_state_cache ,9770,2021-09-14T16:30:20Z,0
633,bkchr,@cheme do we have a benchmark for comparing state-cache vs trie-cache?,9770,2021-09-16T10:00:34Z,0
634,cheme,"In theory on my branch switching values in https://github.com/cheme/substrate/blob/b23b1a11b17e480d8d4ade4c77f87ffddd1979a1/bin/node/testing/src/bench.rs#L381 should apply to bench, but I am not familiar enough with the bench to say.
Also I started to look on a polkadot build, but just end up fixing bugs and errors.
Just syncing show nothing (network limits), but maybe I should try to synch from a block export to get a rough idea.",9770,2021-09-16T10:10:55Z,0
635,bkchr,Can you try to run it and compare it against master?,9770,2021-09-16T11:49:00Z,0
636,cheme,"I will check syncing this afternoon, but would be good a bench specialist points to relevant benchmarks.",9770,2021-09-16T11:50:19Z,0
637,bkchr,@arkpar do you know which benchmark we could use for this?,9770,2021-09-16T11:51:35Z,0
638,arkpar,There's no benchmark specifically for the block building that I'm aware of. We could try replacing the storage cache with the trie cache and simply compare importing 100k blocks of an existing parachain with an `import` command.,9770,2021-09-16T15:31:50Z,0
639,cheme,"I did run 100k first blocks polkadot import, but I did not really see difference (on my pc it's about 3:45min for all scenario (even for no cache at all)). So I guess first 100k blocks are being a bit empty.
I also try runing
`cargo run --release -p node-bench -- ::node::import::native::sr25519::transfer_keep_alive::paritydb::small --json`
and on a modified version that remove all access to storage cache when size at 0 (otherwhise we keep accessing the local cache), I obtain:
```
Trie only: [{""name"":""Block import (RandomTransfersKeepAlive/small, Native, ParityDb backend)"",""raw_average"":5474621,""average"":5441007}]
Storage cache: [{""name"":""Block import (RandomTransfersKeepAlive/small, Native, ParityDb backend)"",""raw_average"":6145274,""average"":6097683}]
No cache: [{""name"":""Block import (RandomTransfersKeepAlive/small, Native, ParityDb backend)"",""raw_average"":6502472,""average"":6441670}]
```
But I did run the bench locally and there is strong chance I may have interfere with it.
So could make sense running more of those node_bench for different settings:
9d5e0112e558cacc208acc628fc58bc77601c60b
6375499689263b80bf7d115a3c149c3341532c7e
b5e4111602beb3145c3c92977e68cb179d5e662d
bc98fa6a68ca212944029d7e5f721c58e9950684
ab760ead296758ab9ff1c9c2516dbba0223fa5ee
but it is quite time consuming.",9770,2021-09-16T16:53:47Z,0
640,bkchr,"@cheme could you prepare a polkadot branch? And then we do multiple syncs with state-cache/without/with trie-cache?

The state-cache issues are getting more and more pressing, so I would like to switch as fast as possible. However, if you are currently to overwhelmed by the trie migration stuff, I will find someone else.",9770,2021-10-01T09:46:11Z,0
641,cheme,"That's good, trie stuff is a bit pending review, and I think it will be mainly updating the branch from my previous message.
Will be my next next task :)",9770,2021-10-01T09:47:59Z,0
642,bkchr,"> That's good, trie stuff is a bit pending review, and I think it will be mainly updating the branch from my previous message. Will be my next next task :)

What is good? So should I ask someone else? This needs to be done asap",9770,2021-10-01T11:16:53Z,0
643,cheme,I mean I will prepare a branch (today).,9770,2021-10-01T12:00:05Z,0
644,cheme,"@bkchr this polkadot branch is usable: https://github.com/cheme/polkadot-1/tree/trie_state_cache
`polkadot --trie-cache-size 0 --state-cache-size 67108864` to use state cache.
`polkadot --trie-cache-size 67108864 --state-cache-size 0` to use trie cache (the one we want tested).

One possible cause of performance regression could be the absence of `storage_hash` cache (especially when hashing wasm). So testing with 
`polkadot --trie-cache-size 1 --state-cache-size 67108864` can also be interesting (storage_hash cache is statically sized and having 1 byte cache will reactivate the state cache so it will be active).",9770,2021-10-01T13:55:06Z,0
645,bkchr,"I have written a benchmark:
```
Benchmarking State access/with 128MB state cache: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 81.8s.
State access/with 128MB state cache                                                                          
                        time:   [362.44 ms 393.31 ms 434.62 ms]

Found 2 outliers among 10 measurements (20.00%)
  2 (20.00%) high severe
Benchmarking State access/with 128MB trie cache: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 57.4s.
State access/with 128MB trie cache                                                                          
                        time:   [5.4999 s 5.6672 s 5.8909 s]

Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild
Benchmarking State access/with cache disabled: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 67.7s.
State access/with cache disabled                                                                          
                        time:   [6.7507 s 6.8234 s 6.9544 s]

Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high severe
```

I tried some optimizations in the trie code, however, I think we will never get to the same level as the state cache. There is just too much ""happening"" when using the trie. So, I will try to rewrite the state cache using overlays.",9770,2021-10-31T22:24:01Z,0
646,bkchr,"```
State access/with 128MB state cache                                                                          
                        time:   [319.20 ms 327.98 ms 344.54 ms]
                        change: [-11.082% -4.6915% +1.9686%] (p = 0.23 > 0.05)
                        No change in performance detected.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high severe
Benchmarking State access/with 128MB trie cache: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 44.6s.
State access/with 128MB trie cache                                                                          
                        time:   [805.19 ms 812.33 ms 822.12 ms]
                        change: [-86.385% -86.050% -85.707%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild
Benchmarking State access/with cache disabled: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 36.3s.
State access/with cache disabled                                                                          
                        time:   [815.38 ms 824.47 ms 834.81 ms]
                        change: [-91.668% -91.414% -91.220%] (p = 0.00 < 0.05)
                        Performance has improved.
```

That looks quite good! (Ignore that without cache is also faster, because it currently also uses this new cache). 

However, I think that is good enough to switch to it. We can maybe do some more optimizations in the future, but for now this should be good enough.",9770,2021-11-05T00:28:13Z,0
647,zqhxuyuan,"from the latest benchmark result of `time` data, seems newly `state cache` is more optimized than `trie cache`, so the final choice is newly `state cache`?",9770,2021-11-30T04:09:25Z,0
648,bkchr,The `state cache` isn't new. This is the old/current implementation. I have some newer benchmarks and they look even better for the new implementation. ,9770,2021-11-30T08:51:58Z,0
649,bkchr,"Latest benchmark results:

```
Benchmarking State access multiple values/with state cache and reading each key once: Warming up for 3.0000 s
Warning: Unable to complete 20 samples in 5.0s. You may wish to increase target time to 8.8s, or reduce sample count to 10.
State access multiple values/with state cache and reading each key once                                                                          
                        time:   [404.71 ms 405.86 ms 407.10 ms]
                        change: [-2.5741% -1.8305% -1.1932%] (p = 0.00 < 0.05)
                        Performance has improved.
Benchmarking State access multiple values/with trie node cache and reading each key once: Warming up for 3.0000 s
Warning: Unable to complete 20 samples in 5.0s. You may wish to increase target time to 154.3s, or reduce sample count to 10.
State access multiple values/with trie node cache and reading each key once                                                                          
                        time:   [383.66 ms 393.08 ms 409.82 ms]
                        change: [-3.0754% +0.0165% +4.1128%] (p = 1.00 > 0.05)
                        No change in performance detected.
Found 1 outliers among 20 measurements (5.00%)
  1 (5.00%) high severe
Benchmarking State access multiple values/with trie node cache (without fast cache) and reading each key once: Warming up for 3.0000 s
Warning: Unable to complete 20 samples in 5.0s. You may wish to increase target time to 136.0s, or reduce sample count to 10.
State access multiple values/with trie node cache (without fast cache) and reading each key once                                                                          
                        time:   [1.4344 s 1.4361 s 1.4380 s]
                        change: [-2.6102% -1.8309% -1.0828%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 1 outliers among 20 measurements (5.00%)
  1 (5.00%) high mild
Benchmarking State access multiple values/no cache and reading each key once: Warming up for 3.0000 s
Warning: Unable to complete 20 samples in 5.0s. You may wish to increase target time to 131.8s, or reduce sample count to 10.
State access multiple values/no cache and reading each key once                                                                          
                        time:   [6.5531 s 6.5810 s 6.6072 s]
                        change: [-6.2601% -5.3016% -4.3704%] (p = 0.00 < 0.05)
                        Performance has improved.
Benchmarking State access multiple values/with state cache and reading 4 times each key: Warming up for 3.0000 s
Warning: Unable to complete 20 samples in 5.0s. You may wish to increase target time to 32.2s, or reduce sample count to 10.
State access multiple values/with state cache and reading 4 times each key                                                                          
                        time:   [1.6155 s 1.6235 s 1.6306 s]
                        change: [-0.3501% +0.2337% +0.8051%] (p = 0.44 > 0.05)
                        No change in performance detected.
Found 2 outliers among 20 measurements (10.00%)
  2 (10.00%) low mild
Benchmarking State access multiple values/with trie node cache and reading 4 times each key: Warming up for 3.0000 s
Warning: Unable to complete 20 samples in 5.0s. You may wish to increase target time to 175.8s, or reduce sample count to 10.
State access multiple values/with trie node cache and reading 4 times each key                                                                          
                        time:   [1.5609 s 1.5674 s 1.5746 s]
                        change: [-26.240% -14.527% -2.5934%] (p = 0.04 < 0.05)
                        Performance has improved.
Benchmarking State access multiple values/with trie node cache (without fast cache) and reading 4 times each key: Warming up for 3.0000 s
Warning: Unable to complete 20 samples in 5.0s. You may wish to increase target time to 230.4s, or reduce sample count to 10.
State access multiple values/with trie node cache (without fast cache) and reading 4 times each key                                                                          
                        time:   [5.6453 s 5.6689 s 5.6943 s]
                        change: [-3.6856% -2.8017% -1.9841%] (p = 0.00 < 0.05)
                        Performance has improved.
Benchmarking State access multiple values/no cache and reading 4 times each key: Warming up for 3.0000 s
Warning: Unable to complete 20 samples in 5.0s. You may wish to increase target time to 531.6s, or reduce sample count to 10.
State access multiple values/no cache and reading 4 times each key                                                                          
                        time:   [26.184 s 26.290 s 26.391 s]
                        change: [-10.544% -6.9626% -4.6803%] (p = 0.00 < 0.05)
                        Performance has improved.

State access single value/with state cache and reading the key once                                                                             
                        time:   [459.22 ns 460.13 ns 460.91 ns]
                        change: [-4.2646% -3.5852% -2.8996%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) low severe
  3 (3.00%) low mild
State access single value/with trie node cache and reading the key once                                                                             
                        time:   [534.99 ns 537.11 ns 539.49 ns]
                        change: [-0.1012% +0.4546% +1.0906%] (p = 0.14 > 0.05)
                        No change in performance detected.
Found 13 outliers among 100 measurements (13.00%)
  5 (5.00%) low severe
  1 (1.00%) low mild
  5 (5.00%) high mild
  2 (2.00%) high severe
State access single value/with trie node cache (without fast cache) and reading the key once                                                                             
                        time:   [999.81 ns 1.0024 us 1.0054 us]
                        change: [-1.9941% -1.5677% -1.1460%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 15 outliers among 100 measurements (15.00%)
  4 (4.00%) low severe
  2 (2.00%) low mild
  3 (3.00%) high mild
  6 (6.00%) high severe
State access single value/no cache and reading the key once                                                                             
                        time:   [4.2824 us 4.3202 us 4.3615 us]
                        change: [-3.3785% -2.7279% -2.0472%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 5 outliers among 100 measurements (5.00%)
  4 (4.00%) high mild
  1 (1.00%) high severe
State access single value/with state cache and reading 4 times the key                                                                             
                        time:   [825.88 ns 826.69 ns 827.37 ns]
                        change: [+1.8542% +2.2619% +2.6606%] (p = 0.00 < 0.05)
                        Performance has regressed.
Found 8 outliers among 100 measurements (8.00%)
  1 (1.00%) low severe
  7 (7.00%) low mild
State access single value/with trie node cache and reading 4 times the key                                                                             
                        time:   [931.92 ns 934.56 ns 938.28 ns]
                        change: [+2.3531% +2.9439% +3.5274%] (p = 0.00 < 0.05)
                        Performance has regressed.
Found 15 outliers among 100 measurements (15.00%)
  7 (7.00%) low severe
  4 (4.00%) low mild
  3 (3.00%) high mild
  1 (1.00%) high severe
State access single value/with trie node cache (without fast cache) and reading 4 times the key                                                                             
                        time:   [2.7984 us 2.8077 us 2.8189 us]
                        change: [-5.2103% -4.9443% -4.6644%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high mild
State access single value/no cache and reading 4 times the key                                                                             
                        time:   [15.856 us 15.962 us 16.075 us]
                        change: [-2.7102% -2.1355% -1.6064%] (p = 0.00 < 0.05)
                        Performance has improved.
Found 5 outliers among 100 measurements (5.00%)
  4 (4.00%) high mild
  1 (1.00%) high severe
```",9770,2021-12-11T15:12:22Z,0
650,bkchr,@dependabot rebase,10223,2021-11-10T08:24:48Z,0
651,KiChjang,bot merge,10223,2021-12-20T12:24:52Z,0
652,bkchr,bot merge,10516,2021-12-20T12:26:45Z,0
653,paritytech-processbot[bot],Waiting for commit status.,10516,2021-12-20T12:26:53Z,0
654,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for a00fc8c986a7ce73f942cdd8192f436cbf637434,10516,2021-12-20T12:57:33Z,0
655,bkchr,@dependabot rebase,10462,2021-12-16T10:31:34Z,0
656,andresilva,bot merge,10509,2021-12-20T15:50:56Z,0
657,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/cumulus/pull/864,10509,2021-12-20T15:51:07Z,0
658,bkchr,bot merge,10509,2021-12-20T19:48:54Z,0
659,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10509,2021-12-20T19:49:16Z,0
660,KiChjang,@dependabot rebase,10517,2021-12-20T13:04:43Z,0
661,crystalin,"@bkchr sorry to ping you, but not sure who can do a review of this one.
",10177,2021-11-18T14:14:48Z,0
662,librelois,"> Sorry for the late review. I left some comments

Thanks for the review, I applied your feedback",10177,2021-11-25T13:51:05Z,0
663,bkchr,It also doesn't compile.,10177,2021-12-01T22:37:14Z,0
664,librelois,"> It also doesn't compile.

Fixed",10177,2021-12-01T23:01:05Z,0
665,bkchr,"> > It also doesn't compile.
> 
> Fixed

There are still warnings. Cargo fmt is also not happy.",10177,2021-12-02T09:05:55Z,0
666,librelois,"> There are still warnings. Cargo fmt is also not happy.

Sorry about that, it should be fine now.",10177,2021-12-02T10:14:19Z,0
667,bkchr,"> > There are still warnings. Cargo fmt is also not happy.
> 
> Sorry about that, it should be fine now.

I need to inform you, that CI is still not happy :see_no_evil: ",10177,2021-12-03T10:52:26Z,0
668,librelois,@bkchr It seems that the CI is green now. There is no need of companion PR on polkadot or cumulus.,10177,2021-12-03T12:47:10Z,0
669,bkchr,@librelois for polkadot we need a companion. See the error. Cumulus should be fine and can be ignored.,10177,2021-12-03T13:31:25Z,0
670,librelois,"> @librelois for polkadot we need a companion. See the error. Cumulus should be fine and can be ignored.

Can one of you take care of the polkadot companion PR or should I do it myself? And in this last case, how to proceed? (I have never made a ""polkadot companion"" PR).",10177,2021-12-03T14:08:42Z,0
671,arkpar,The docs should probably specify that `--runtime-cache-size` is capped at 255. Btw what happens if the users sets `--runtime-cache-size=1000`?,10177,2021-12-03T14:15:54Z,0
672,librelois,"> The docs should probably specify that `--runtime-cache-size` is capped at 255. Btw what happens if the users sets `--runtime-cache-size=1000`?

`runtime_cache_size` is of type `u8` so it is structopt that will fail to parse the value and will print an error to the user.",10177,2021-12-03T14:28:58Z,0
673,bkchr,"> > @librelois for polkadot we need a companion. See the error. Cumulus should be fine and can be ignored.
> 
> Can one of you take care of the polkadot companion PR or should I do it myself? And in this last case, how to proceed? (I have never made a ""polkadot companion"" PR).

You need to create a pr to polkadot that fixes the compilation with your branch. Then you need to mention it as `polkadot companion: link` in the description of this pr.",10177,2021-12-03T18:54:09Z,0
674,librelois,"> You need to create a pr to polkadot that fixes the compilation with your branch. Then you need to mention it as `polkadot companion: link` in the description of this pr.

It's done",10177,2021-12-04T16:34:54Z,0
675,bkchr,"@librelois can you please merge master into this branch? :see_no_evil: 
",10177,2021-12-04T22:52:40Z,0
676,librelois,"@bkchr Looking at the log of the gitlab-check-dependent-polkadot job, there seems to be a problem in your CI: 

```
$ ./pipeline-scripts/check_dependent_project.sh paritytech substrate --substrate ""$DEPENDENT_REPO"" ""$GITHUB_PR_TOKEN"" ""$CARGO_UPDATE_CRATES""
check_dependent_project
========================
This check ensures that this project's dependents do not suffer downstream breakages from new code
changes.
From https://gitlab.parity.io/parity/substrate
 * branch              master     -> FETCH_HEAD
fatal: It seems that there is already a rebase-apply directory, and
I wonder if you are in the middle of another rebase.  If that is the
case, please try
	git rebase (--continue | --abort | --skip)
If that is not the case, please
	rm -fr "".git/rebase-apply""
and run me again.  I am stopping in case you still have something
valuable there.
```",10177,2021-12-06T13:09:15Z,0
677,bkchr,bot merge,10177,2021-12-09T14:51:54Z,0
678,paritytech-processbot[bot]," Error: Github API says ""Allow edits from maintainers"" is not enabled for https://github.com/paritytech/polkadot/pull/4466. The bot would use that permission to push the lockfile update after merging this PR. Please check https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork.",10177,2021-12-09T14:52:01Z,0
679,librelois,">  Please check https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork.

I don't have any checkboxes like ""Allow edits from maintainers"":

![image](https://user-images.githubusercontent.com/22670546/145419796-54c0f18c-bd08-4c21-af9d-452b04123884.png)

Maybe I need to redo the companion PR from a personal fork instead of the purestake fork.
",10177,2021-12-09T15:02:20Z,0
680,FlorianFranzen,"@librelois  Would have been nice it that new parameter was also documented in code and that I did not have to read this issue to understand what it is for, e.g. see also the [missing rust docs](https://paritytech.github.io/substrate/master/sc_executor/struct.WasmExecutor.html#method.new).",10177,2021-12-21T11:15:56Z,0
681,bkchr,bot merge,10523,2021-12-21T12:35:14Z,0
682,paritytech-processbot[bot],Waiting for commit status.,10523,2021-12-21T12:35:22Z,0
683,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10523,2021-12-21T12:36:10Z,0
684,acatangiu,"Needs companion PR in Polkadot.

Polkadot implements _dummy_ `BeefyApi` (see [here](https://github.com/paritytech/polkadot/blob/10f3c85ebdeaf422fe151096c173b102297a95d1/runtime/polkadot/src/lib.rs#L1739)) with empty validator set which is not possible (not allowed) anymore with this PR.

What should we do for these dummy `BeefyApi` runtime api impl in `Polkadot`, `Kusama`, `Westend`? We either:
1. remove them -> implies runtime API change
or,
2. provide some _other dummy_ validator set - some random key instead of empty set.

WDYT?

**L.E.**: Went with option 3: change runtime API to `Option<ValidatorSet>`.",10445,2021-12-08T17:11:03Z,0
685,acatangiu,@tomusdrw can you please take a look?,10445,2021-12-20T12:11:14Z,0
686,athei,bot merge,10526,2021-12-21T15:09:28Z,0
687,bkchr,@dependabot rebase,10518,2021-12-20T14:28:51Z,0
688,ferrell-code,"Example output by using polkadot (it outputs the logs 50 times as it executes on_runtime_upgrade 50 times in this case... `--steps 50`): 

>Running `target/release/polkadot try-runtime --execution wasm --chain polkadot-dev benchmark-upgrade --steps 50 live '--uri=wss://polkadot.api.onfinality.io/public-ws'`
2021-10-22 16:19:32 [0] 💸 generated 1 npos voters, 1 from validators and 0 nominators    
2021-10-22 16:19:32 Took active validators from set with wrong size    
2021-10-22 16:19:32 Took active validators from set with wrong size.    
2021-10-22 16:19:32 Took active validators from set with wrong size    
2021-10-22 16:19:35 scraping key-pairs from remote @ 0x7018d8b12491b329f34898b008814e9803cf1f4e5af3a85b20c2ec2fc909d825    
2021-10-22 16:19:35 downloading data for all pallets.    
2021-10-22 16:40:27 injecting a total of 884252 keys    
2021-10-22 16:40:46 found matching spec name: ""polkadot""    
2021-10-22 16:40:46 spec version mismatch (local 9120 != remote 9110). This could cause some issues.    
2021-10-22 16:40:46 ⚠️ System declares internal migrations (which *might* execute). On-chain `<wasm:stripped>` vs current storage version `<wasm:stripped>`    
2021-10-22 16:40:46 ✅ no migratiomn for Crowdloan    
2021-10-22 16:40:46 ✅ no migration for Auctions    
2021-10-22 16:40:46 ✅ no migration for Slots    
2021-10-22 16:40:46 ✅ no migration for Registrar    
2021-10-22 16:40:46 ✅ no migration for ParaSessionInfo    
2021-10-22 16:40:46 ✅ no migration for Hrmp    
2021-10-22 16:40:46 ✅ no migration for Ump    
2021-10-22 16:40:46 ✅ no migration for Dmp    
2021-10-22 16:40:46 ✅ no migration for Initializer    
2021-10-22 16:40:46 ✅ no migration for Paras    
2021-10-22 16:40:46 ✅ no migration for ParaScheduler    
2021-10-22 16:40:46 ✅ no migration for ParaInherent    
2021-10-22 16:40:46 ✅ no migration for ParaInclusion    
2021-10-22 16:40:46 ✅ no migration for ParasShared    
2021-10-22 16:40:46 ⚠️ Configuration declares internal migrations (which *might* execute). On-chain `<wasm:stripped>` vs current storage version `<wasm:stripped>`    
2021-10-22 16:40:46 ✅ no migration for ParachainsOrigin    
2021-10-22 16:40:46 ✅ no migration for ElectionProviderMultiPhase    
2021-10-22 16:40:46 ✅ no migration for Tips    
2021-10-22 16:40:46 ✅ no migration for Bounties    
2021-10-22 16:40:46 ✅ no migration for Multisig    
2021-10-22 16:40:46 ✅ no migration for Proxy    
2021-10-22 16:40:46 ✅ no migration for Identity    
2021-10-22 16:40:46 ✅ no migration for Utility    
2021-10-22 16:40:46 ⚠️ Vesting declares internal migrations (which *might* execute). On-chain `<wasm:stripped>` vs current storage version `<wasm:stripped>`    
2021-10-22 16:40:46 ✅ no migration for Claims    
2021-10-22 16:40:46 ✅ no migration for Treasury    
2021-10-22 16:40:46 ✅ no migration for TechnicalMembership    
2021-10-22 16:40:46 ✅ no migration for PhragmenElection    
2021-10-22 16:40:46 ✅ no migration for TechnicalCommittee    
2021-10-22 16:40:46 ✅ no migration for Council    
2021-10-22 16:40:46 ✅ no migration for Democracy    
2021-10-22 16:40:46 ✅ no migration for AuthorityDiscovery    
2021-10-22 16:40:46 ✅ no migration for ImOnline    
2021-10-22 16:40:46 ✅ no migration for Grandpa    
2021-10-22 16:40:46 ✅ no migration for Session    
2021-10-22 16:40:46 ✅ no migration for Historical    
2021-10-22 16:40:46 ⚠️ Offences declares internal migrations (which *might* execute). On-chain `<wasm:stripped>` vs current storage version `<wasm:stripped>`    
2021-10-22 16:40:46 have 0 deferred offences, applying.    
2021-10-22 16:40:46 ⚠️ Staking declares internal migrations (which *might* execute). On-chain `<wasm:stripped>` vs current storage version `<wasm:stripped>`    
2021-10-22 16:40:46 ✅ no migration for Authorship    
2021-10-22 16:40:46 ✅ no migration for TransactionPayment    
2021-10-22 16:40:46 ✅ no migration for Balances    
2021-10-22 16:40:46 ✅ no migration for Indices    
2021-10-22 16:40:46 ✅ no migration for Timestamp    
2021-10-22 16:40:46 ✅ no migration for Babe    
2021-10-22 16:40:46 ✅ no migration for Scheduler    
...
2021-10-22 16:40:46 TryRuntime_on_runtime_upgrade executed without errors. Consumed weight = 1829779000, total weight = 2000000000000 (0.0009148895)  ",10088,2021-10-22T20:46:58Z,0
689,ferrell-code,"Yeah I agree your suggestion is much cleaner and fits with how benchmarking is done in the rest of substrate, although as you pointed out it is much more difficult. Also I think this pr is incorrect as caching makes it so the loop of `on_runtime_upgrade` are faster than reality making the calculated weight wrong. I think I will close it as I don't like the code

>Sidenote: also anywhere when we do return weight being max_block in on_initialize, it will to be fixed for parachain, to ensure to doesn't exhaust the block weight

thank you, i figured that out after a bit of confusion :p",10088,2021-11-01T18:06:41Z,0
690,dependabot[bot],"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",10528,2021-12-22T10:44:15Z,0
691,shawntabrizi,good catch,10443,2021-12-07T20:40:02Z,0
692,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10326,2021-12-22T08:02:35Z,0
693,sorpaas,"Let me close this for now, as flake is still unstable.",10326,2021-12-22T12:23:35Z,0
694,bkchr,bot merge,10539,2021-12-22T10:56:29Z,0
695,paritytech-processbot[bot],Waiting for commit status.,10539,2021-12-22T10:56:37Z,0
696,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 3381d5800d5f857ae6edeaac1bf4547327a87be8,10539,2021-12-22T11:39:19Z,0
697,bkchr,bot merge,10542,2021-12-22T16:22:43Z,0
698,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10542,2021-12-22T16:22:54Z,0
699,bkchr,bot merge,10550,2021-12-23T17:45:30Z,0
700,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10550,2021-12-23T17:45:42Z,0
701,h4x3rotab,LGTM,10521,2021-12-22T10:53:48Z,0
702,athei,bot merge,10521,2021-12-23T11:31:56Z,0
703,dharjeezy,"Hello @thiolliere 

I saw you mentioned the previous issue you closed(#10288) which  I attempted on this current issue.
Can you elaborate the differences between that other issue(#10288) and this current issue you opened? 
I am willing to pick this issue up but i need to understand what i am to do and the difference between what i attempted in my PR here(https://github.com/paritytech/substrate/pull/10332) earlier?",10416,2021-12-17T20:03:08Z,0
704,dharjeezy,you there @thiolliere ?,10416,2021-12-19T21:09:42Z,0
705,thiolliere,"> you there @thiolliere ?

I didn't work last weekend why did you expect me to answer a low priority question ?

EDIT: I also find the tone of your sentence disrespectful.",10416,2021-12-20T05:11:22Z,0
706,thiolliere,"> Hello @thiolliere
> 
> I saw you mentioned the previous issue you closed(#10288) which I attempted on this current issue. Can you elaborate the differences between that other issue(#10288) and this current issue you opened? I am willing to pick this issue up but i need to understand what i am to do and the difference between what i attempted in my PR here(#10332) earlier?

The solution I suggested in the issue #10288 doesn't work.
The goal of this issue is to enhance the the method `remove_all` for `StorageCountedMap` type.
We want to be able to give a limit on the number of key to remove from the backend (or both backend and overlay, the important point is to be able to give a limit), similarly to the method `remove_all` for `StorageMap`.

There might be a way found by Shawn that I explained in the top message. This consist of looking at the number of key in the backend by looking the value of the counter in the backend (maybe by using the parent block hash or something I don't know).

I don't have a precise idea about how to fetch the value of the counter in the backend. But if we have it then we can implement remove_all with some limit, and update the counter with the value: counter in backend minus number of key removed from backend. Because all keys are removed from overlay this should work.
",10416,2021-12-20T05:19:26Z,0
707,dharjeezy,"> > you there @thiolliere ?
> 
> I didn't work last weekend why did you expect me to answer a low priority question ?
> 
> EDIT: I also find the tone of your sentence disrespectful.

@thiolliere I am sorry for the tone I used, never knew you'd get offended by it. I will do better next time.",10416,2021-12-24T07:15:33Z,0
708,dharjeezy,"> > Hello @thiolliere
> > I saw you mentioned the previous issue you closed(#10288) which I attempted on this current issue. Can you elaborate the differences between that other issue(#10288) and this current issue you opened? I am willing to pick this issue up but i need to understand what i am to do and the difference between what i attempted in my PR here(#10332) earlier?
> 
> The solution I suggested in the issue #10288 doesn't work. The goal of this issue is to enhance the the method `remove_all` for `StorageCountedMap` type. We want to be able to give a limit on the number of key to remove from the backend (or both backend and overlay, the important point is to be able to give a limit), similarly to the method `remove_all` for `StorageMap`.
> 
> There might be a way found by Shawn that I explained in the top message. This consist of looking at the number of key in the backend by looking the value of the counter in the backend (maybe by using the parent block hash or something I don't know).
> 
> I don't have a precise idea about how to fetch the value of the counter in the backend. But if we have it then we can implement remove_all with some limit, and update the counter with the value: counter in backend minus number of key removed from backend. Because all keys are removed from overlay this should work.

If i can get you correctly, we need to implement a limit on remove_all function `CountedStorageMap` right?

The caller of the function will definitely include the limit while calling this function right? or is the `remove_all` to determine the limit that is to be removed out of the box inside the function?

More so, will one implement a v2 for `remove_all` or modify the existing one?",10416,2021-12-24T08:06:20Z,0
709,KiChjang,@dependabot rebase,10540,2021-12-23T04:52:07Z,0
710,dependabot[bot],Superseded by #10551.,10540,2021-12-24T09:06:11Z,0
711,rcny,Superseeded by #10553.,10534,2021-12-24T12:33:57Z,0
712,bkchr,bot merge,10541,2021-12-25T07:19:33Z,0
713,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10541,2021-12-25T07:19:45Z,0
714,cla-bot-2021[bot],"User @yarikbratashchuk, please sign the CLA [here](https://cla.parity.io/sign_cla/12980380/3).",10560,2021-12-26T15:24:49Z,0
715,shawntabrizi,/benchmark runtime pallet collective,8522,2021-04-03T16:38:15Z,0
716,parity-benchapp[bot],"Finished benchmark for branch: **shawntabrizi-collective-dispatch-account**

Benchmark: **Benchmark Runtime Pallet**

cargo run --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=collective --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame//src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

error: failed to parse manifest at `/home/shawntabrizi/bench-bot/git/substrate/Cargo.toml`

Caused by:
  feature `resolver` is required

  this Cargo does not support nightly features, but if you
  switch to nightly channel you can add
  `cargo-features = [""resolver""]` to enable this feature


 </details>",8522,2021-04-03T16:38:16Z,0
717,shawntabrizi,/benchmark runtime pallet collective,8522,2021-04-03T16:49:18Z,0
718,parity-benchapp[bot],"Finished benchmark for branch: **shawntabrizi-collective-dispatch-account**

Benchmark: **Benchmark Runtime Pallet**

cargo run --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=collective --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame//src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

 Downloading crates ...
  Downloaded wasmtime-cache v0.24.0
  Downloaded wasmtime-profiling v0.24.0
  Downloaded cranelift-bforest v0.71.0
  Downloaded cranelift-wasm v0.71.0
  Downloaded cranelift-native v0.71.0
  Downloaded wasmtime v0.24.0
  Downloaded wasmtime-fiber v0.24.0
  Downloaded wasmtime-environ v0.24.0
  Downloaded wasmtime-cranelift v0.24.0
  Downloaded jsonrpsee-http-client v0.2.0-alpha.3
  Downloaded cranelift-frontend v0.71.0
  Downloaded wasmtime-runtime v0.24.0
  Downloaded zstd v0.6.1+zstd.1.4.9
  Downloaded jsonrpsee-utils v0.2.0-alpha.3
  Downloaded jsonrpsee-proc-macros v0.2.0-alpha.3
  Downloaded gcd v2.0.1
  Downloaded cranelift-codegen-meta v0.71.0
  Downloaded jsonrpsee-types v0.2.0-alpha.3
  Downloaded cranelift-entity v0.71.0
  Downloaded wasmtime-debug v0.24.0
  Downloaded wasmtime-jit v0.24.0
  Downloaded cranelift-codegen-shared v0.71.0
  Downloaded wasmtime-obj v0.24.0
  Downloaded zstd-sys v1.4.20+zstd.1.4.9
  Downloaded cranelift-codegen v0.71.0
  Downloaded zstd-safe v3.0.1+zstd.1.4.9
  Downloaded wasmparser v0.76.0
   Compiling libc v0.2.90
   Compiling proc-macro2 v1.0.24
   Compiling unicode-xid v0.2.1
   Compiling syn v1.0.62
   Compiling value-bag v1.0.0-alpha.6
   Compiling autocfg v1.0.1
   Compiling log v0.4.14
   Compiling cfg-if v1.0.0
   Compiling serde_derive v1.0.124
   Compiling serde v1.0.124
   Compiling memchr v2.3.4
   Compiling byteorder v1.3.4
   Compiling version_check v0.9.2
   Compiling typenum v1.12.0
   Compiling proc-macro-hack v0.5.19
   Compiling getrandom v0.2.2
   Compiling getrandom v0.1.16
   Compiling proc-macro-nested v0.1.7
   Compiling scopeguard v1.1.0
   Compiling lazy_static v1.4.0
   Compiling smallvec v1.6.1
   Compiling anyhow v1.0.38
   Compiling crunchy v0.2.2
   Compiling ryu v1.0.5
   Compiling libm v0.2.1
   Compiling radium v0.6.2
   Compiling regex-syntax v0.6.22
   Compiling ppv-lite86 v0.2.10
   Compiling futures v0.1.31
   Compiling ahash v0.4.7
   Compiling cfg-if v0.1.10
   Compiling parity-util-mem v0.9.0
   Compiling slab v0.4.2
   Compiling ref-cast v1.0.6
   Compiling arrayvec v0.4.12
   Compiling either v1.6.1
   Compiling async-trait v0.1.47
   Compiling tiny-keccak v2.0.2
   Compiling pin-project-lite v0.2.6
   Compiling futures-core v0.3.13
   Compiling futures-io v0.3.13
   Compiling constant_time_eq v0.1.5
   Compiling futures-sink v0.3.13
   Compiling crc32fast v1.2.1
   Compiling pin-utils v0.1.0
   Compiling futures-task v0.3.13
   Compiling arrayvec v0.5.2
   Compiling bytes v1.0.1
   Compiling unicode-segmentation v1.7.1
   Compiling tinyvec_macros v0.1.0
   Compiling subtle v2.4.0
   Compiling static_assertions v1.1.0
   Compiling paste v1.0.4
   Compiling block-padding v0.2.1
   Compiling opaque-debug v0.3.0
   Compiling cpuid-bool v0.1.2
   Compiling itoa v0.4.7
   Compiling byte-tools v0.3.1
   Compiling arrayref v0.3.6
   Compiling keccak v0.1.0
   Compiling nodrop v0.1.14
   Compiling fake-simd v0.1.2
   Compiling remove_dir_all v0.5.3
   Compiling opaque-debug v0.2.3
   Compiling subtle v1.0.0
   Compiling fixedbitset v0.2.0
   Compiling multimap v0.8.2
   Compiling signature v1.3.0
   Compiling serde_json v1.0.64
   Compiling wyz v0.2.0
   Compiling funty v1.1.0
   Compiling tap v1.0.1
   Compiling byte-slice-cast v1.0.0
   Compiling rustc-hash v1.1.0
   Compiling hex v0.4.3
   Compiling stable_deref_trait v1.2.0
   Compiling semver-parser v0.7.0
   Compiling rustc-hex v2.1.0
   Compiling fallible-iterator v0.2.0
   Compiling adler v1.0.2
   Compiling sp-std v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/std)
   Compiling parity-wasm v0.41.0
   Compiling ansi_term v0.12.1
   Compiling pin-project-internal v0.4.27
   Compiling memory_units v0.3.0
   Compiling hash-db v0.15.2
   Compiling bitflags v1.2.1
   Compiling environmental v1.1.2
   Compiling dyn-clone v1.0.4
   Compiling base58 v0.1.0
   Compiling rustc-demangle v0.1.18
   Compiling httparse v1.3.5
   Compiling fnv v1.0.7
   Compiling signal-hook v0.3.6
   Compiling wasm-bindgen-shared v0.2.71
   Compiling pkg-config v0.3.19
   Compiling bumpalo v3.6.1
   Compiling wasm-bindgen v0.2.71
   Compiling prometheus v0.11.0
   Compiling matches v0.1.8
   Compiling data-encoding v2.3.2
   Compiling spin v0.5.2
   Compiling untrusted v0.7.1
   Compiling percent-encoding v2.1.0
   Compiling futures-timer v3.0.2
   Compiling unsigned-varint v0.5.1
   Compiling bs58 v0.4.0
   Compiling void v1.0.2
   Compiling maybe-uninit v2.0.0
   Compiling cache-padded v1.1.1
   Compiling gimli v0.23.0
   Compiling waker-fn v1.1.0
   Compiling fastrand v1.4.0
   Compiling parking v2.0.0
   Compiling object v0.23.0
   Compiling bytes v0.5.6
   Compiling glob v0.3.0
   Compiling vec-arena v1.0.0
   Compiling pin-project-lite v0.1.12
   Compiling event-listener v2.5.1
   Compiling quick-error v1.2.3
   Compiling async-task v4.0.3
   Compiling try-lock v0.2.3
   Compiling atomic-waker v1.0.0
   Compiling base64 v0.12.3
   Compiling base64 v0.13.0
   Compiling ipnet v2.3.0
   Compiling tower-service v0.3.1
   Compiling httpdate v0.3.2
   Compiling linked-hash-map v0.5.4
   Compiling match_cfg v0.1.0
   Compiling nohash-hasher v0.2.0
   Compiling cranelift-entity v0.71.0
   Compiling cranelift-codegen-shared v0.71.0
   Compiling hex_fmt v0.3.0
   Compiling target-lexicon v0.11.2
   Compiling parity-send-wrapper v0.1.0
   Compiling wasmparser v0.76.0
   Compiling more-asserts v0.2.1
   Compiling rayon-core v1.9.0
   Compiling termcolor v1.1.2
   Compiling rawpointer v0.2.1
   Compiling zstd-safe v3.0.1+zstd.1.4.9
   Compiling leb128 v0.2.4
   Compiling wasmtime-cache v0.24.0
   Compiling failure_derive v0.1.8
   Compiling scoped-tls v1.0.0
   Compiling lazycell v1.3.0
   Compiling unicode-width v0.1.8
   Compiling ansi_term v0.11.0
   Compiling vec_map v0.8.2
   Compiling strsim v0.8.0
   Compiling bindgen v0.54.0
   Compiling peeking_take_while v0.1.2
   Compiling winapi v0.3.9
   Compiling shlex v0.1.1
   Compiling sc-consensus-slots v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/consensus/slots)
   Compiling ucd-trie v0.1.3
   Compiling percent-encoding v1.0.1
   Compiling base-x v0.2.8
   Compiling take_mut v0.2.2
   Compiling ip_network v0.3.4
   Compiling names v0.11.0
   Compiling retain_mut v0.1.2
   Compiling openssl-probe v0.1.2
   Compiling mio-named-pipes v0.1.7
   Compiling pdqselect v0.1.0
   Compiling futures-timer v2.0.2
   Compiling maplit v1.0.2
   Compiling hex-literal v0.3.1
   Compiling same-file v1.0.6
   Compiling humantime v2.1.0
   Compiling platforms v1.1.0
   Compiling safe-mix v1.0.1
   Compiling gcd v2.0.1
   Compiling quick-error v2.0.0
   Compiling instant v0.1.9
   Compiling num-traits v0.2.14
   Compiling num-integer v0.1.44
   Compiling num-bigint v0.2.6
   Compiling num-rational v0.2.4
   Compiling miniz_oxide v0.4.4
   Compiling indexmap v1.6.2
   Compiling crossbeam-utils v0.8.3
   Compiling atomic v0.5.0
   Compiling crossbeam-utils v0.7.2
   Compiling num-complex v0.2.4
   Compiling memoffset v0.6.1
   Compiling memoffset v0.5.6
   Compiling crossbeam-epoch v0.8.2
   Compiling rayon v1.5.0
   Compiling lock_api v0.4.2
   Compiling lock_api v0.3.4
   Compiling generic-array v0.14.4
   Compiling proc-macro-error-attr v1.0.4
   Compiling proc-macro-error v1.0.4
   Compiling unicase v2.6.0
   Compiling nom v5.1.2
   Compiling tracing-core v0.1.17
   Compiling sharded-slab v0.1.1
   Compiling ckb-merkle-mountain-range v0.3.1
   Compiling hashbrown v0.9.1
   Compiling itertools v0.9.0
   Compiling futures-channel v0.3.13
   Compiling tinyvec v1.1.1
   Compiling itertools v0.10.0
   Compiling tokio-service v0.1.0
   Compiling heck v0.3.2
   Compiling block-padding v0.1.5
   Compiling blake2b_simd v0.5.11
   Compiling blake2s_simd v0.5.11
   Compiling ed25519 v1.0.3
   Compiling owning_ref v0.4.1
   Compiling semver v0.9.0
   Compiling semver v0.6.0
   Compiling trie-root v0.16.0
   Compiling tokio-sync v0.1.8
   Compiling wasmi-validation v0.3.0
   Compiling http v0.2.3
   Compiling unicode-bidi v0.3.4
   Compiling form_urlencoded v1.0.1
   Compiling concurrent-queue v1.2.2
   Compiling cpp_demangle v0.3.2
   Compiling clang-sys v0.29.3
   Compiling quicksink v0.1.2
   Compiling async-mutex v1.4.0
   Compiling async-lock v2.3.0
   Compiling humantime v1.3.0
   Compiling addr2line v0.14.1
   Compiling lru-cache v0.1.2
   Compiling linked_hash_set v0.1.4
   Compiling cranelift-codegen-meta v0.71.0
   Compiling matrixmultiply v0.2.4
   Compiling wast v35.0.0
   Compiling textwrap v0.11.0
   Compiling pest v2.1.3
   Compiling walkdir v2.3.1
   Compiling lru v0.6.5
   Compiling unicode-normalization v0.1.17
   Compiling rustc_version v0.2.3
   Compiling build-helper v0.1.1
   Compiling async-channel v1.6.1
   Compiling http-body v0.3.1
   Compiling semver-parser v0.10.2
   Compiling pest_meta v2.1.3
   Compiling quote v1.0.9
   Compiling parking_lot_core v0.8.3
   Compiling jobserver v0.1.21
   Compiling num_cpus v1.13.0
   Compiling time v0.1.44
   Compiling iovec v0.1.4
   Compiling net2 v0.2.37
   Compiling socket2 v0.3.19
   Compiling signal-hook-registry v1.3.0
   Compiling hostname v0.3.1
   Compiling atty v0.2.14
   Compiling socket2 v0.4.0
   Compiling which v3.1.1
   Compiling parking_lot_core v0.7.2
   Compiling fs2 v0.4.3
   Compiling memmap2 v0.2.1
   Compiling fs-swap v0.2.6
   Compiling dirs-sys v0.3.5
   Compiling rand v0.4.6
   Compiling fdlimit v0.2.1
   Compiling rpassword v5.0.1
   Compiling errno v0.2.7
   Compiling dirs-sys-next v0.1.2
   Compiling wat v1.0.36
   Compiling aho-corasick v0.7.15
   Compiling futures-lite v1.11.3
   Compiling bstr v0.2.15
   Compiling regex-automata v0.1.9
   Compiling dns-parser v0.8.0
   Compiling parity-wasm v0.32.0
   Compiling uint v0.9.0
   Compiling hash256-std-hasher v0.15.2
   Compiling paste-impl v0.1.18
   Compiling bitvec v0.20.2
   Compiling generic-array v0.12.4
   Compiling generic-array v0.13.3
   Compiling blake2-rfc v0.2.18
   Compiling region v2.2.0
   Compiling snow v0.7.2
   Compiling parking_lot_core v0.6.2
   Compiling parking_lot v0.9.0
   Compiling hyper v0.12.36
   Compiling smallvec v0.6.14
   Compiling idna v0.2.2
   Compiling idna v0.1.5
   Compiling substrate-build-script-utils v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/build-script-utils)
   Compiling parking_lot v0.11.1
   Compiling cc v1.0.67
   Compiling rand_core v0.6.2
   Compiling futures-cpupool v0.1.8
   Compiling threadpool v1.8.1
   Compiling rand_core v0.5.1
   Compiling bytes v0.4.12
   Compiling resolv-conf v0.7.0
   Compiling nb-connect v1.0.3
   Compiling miow v0.3.6
   Compiling clap v2.33.3
   Compiling parking_lot v0.10.2
   Compiling directories v3.0.1
   Compiling rand v0.3.23
   Compiling directories-next v2.0.0
   Compiling cranelift-codegen v0.71.0
   Compiling crossbeam-channel v0.5.0
   Compiling petgraph v0.5.1
   Compiling backtrace v0.3.56
   Compiling crossbeam-epoch v0.9.3
   Compiling tokio-executor v0.1.10
   Compiling crossbeam-queue v0.2.3
   Compiling matchers v0.0.1
   Compiling integer-sqrt v0.1.5
   Compiling approx v0.3.2
   Compiling paste v0.1.18
   Compiling cexpr v0.4.0
   Compiling digest v0.8.1
   Compiling block-buffer v0.7.3
   Compiling crypto-mac v0.7.0
   Compiling digest v0.9.0
   Compiling block-buffer v0.9.0
   Compiling crypto-mac v0.8.0
   Compiling cipher v0.2.5
   Compiling url v2.2.1
   Compiling url v1.7.2
   Compiling once_cell v1.7.2
   Compiling rand_chacha v0.3.0
   Compiling rand_pcg v0.2.1
   Compiling rand_chacha v0.2.2
   Compiling ring v0.16.20
   Compiling blake3 v0.3.7
   Compiling libz-sys v1.1.2
   Compiling zstd-sys v1.4.20+zstd.1.4.9
   Compiling psm v0.1.12
   Compiling wasmtime-runtime v0.24.0
   Compiling wasmtime-fiber v0.24.0
   Compiling libloading v0.5.2
   Compiling http v0.1.21
   Compiling string v0.2.1
   Compiling tokio-buf v0.1.1
   Compiling synstructure v0.12.4
   Compiling pest_generator v2.1.3
   Compiling sp-panic-handler v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/panic-handler)
   Compiling crossbeam-deque v0.8.0
   Compiling tokio-current-thread v0.1.7
   Compiling tokio-timer v0.2.13
   Compiling crossbeam-deque v0.7.3
   Compiling chrono v0.4.19
   Compiling ctor v0.1.19
   Compiling thiserror-impl v1.0.24
   Compiling futures-macro v0.3.13
   Compiling tracing-attributes v0.1.13
   Compiling impl-trait-for-tuples v0.2.1
   Compiling sp-debug-derive v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/debug-derive)
   Compiling ref-cast-impl v1.0.6
   Compiling dyn-clonable-impl v0.9.0
   Compiling derive_more v0.99.11
   Compiling prost-derive v0.7.0
   Compiling pin-project-internal v1.0.5
   Compiling asn1_der_derive v0.1.2
   Compiling enum-as-inner v0.3.3
   Compiling minicbor-derive v0.6.2
   Compiling libp2p-swarm-derive v0.22.0
   Compiling frame-support-procedural-tools-derive v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/support/procedural/tools/derive)
   Compiling scroll_derive v0.10.5
   Compiling data-encoding-macro-internal v0.1.9
   Compiling strum_macros v0.20.1
   Compiling enumflags2_derive v0.6.4
   Compiling pallet-contracts-proc-macro v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/contracts/proc-macro)
   Compiling simba v0.1.5
   Compiling pbkdf2 v0.3.0
   Compiling sha2 v0.8.2
   Compiling hmac v0.7.1
   Compiling sha-1 v0.8.2
   Compiling sha2 v0.9.3
   Compiling sha3 v0.9.1
   Compiling sha-1 v0.9.4
   Compiling pbkdf2 v0.4.0
   Compiling hmac v0.8.1
   Compiling salsa20 v0.7.2
   Compiling thread_local v1.1.3
   Compiling blocking v1.0.2
   Compiling async-executor v1.4.0
   Compiling rand v0.8.3
   Compiling rand v0.7.3
   Compiling http-body v0.1.0
   Compiling structopt-derive v0.4.14
   Compiling zeroize_derive v1.0.1
   Compiling parity-util-mem-derive v0.1.0
   Compiling pest_derive v2.1.0
   Compiling futures-util v0.3.13
   Compiling thiserror v1.0.24
   Compiling dyn-clonable v0.9.0
   Compiling asn1_der v0.6.3
   Compiling pin-project v1.0.5
   Compiling prost v0.7.0
   Compiling pin-project v0.4.27
   Compiling scroll v0.10.2
   Compiling data-encoding-macro v0.1.10
   Compiling hmac-drbg v0.2.0
   Compiling enumflags2 v0.6.4
   Compiling minicbor v0.8.0
   Compiling strum v0.20.0
   Compiling regex v1.4.3
   Compiling tempfile v3.2.0
   Compiling fixed-hash v0.7.0
   Compiling twox-hash v1.6.0
   Compiling cuckoofilter v0.5.0
   Compiling rand_distr v0.2.2
   Compiling statrs v0.12.0
   Compiling zeroize v1.2.0
   Compiling wasmi v0.6.2
   Compiling failure v0.1.8
   Compiling structopt v0.3.21
   Compiling which v4.0.2
   Compiling prost-types v0.7.0
   Compiling multibase v0.8.0
   Compiling libsecp256k1 v0.3.5
   Compiling futures-executor v0.3.13
   Compiling asynchronous-codec v0.6.0
   Compiling asynchronous-codec v0.5.0
   Compiling flate2 v1.0.20
   Compiling Inflector v0.11.4
   Compiling impl-serde v0.3.1
   Compiling tracing-serde v0.1.2
   Compiling toml v0.5.8
   Compiling bincode v1.3.2
   Compiling erased-serde v0.3.13
   Compiling cargo-platform v0.1.1
   Compiling semver v0.11.0
   Compiling nalgebra v0.21.1
   Compiling curve25519-dalek v3.0.2
   Compiling curve25519-dalek v2.1.2
   Compiling merlin v2.0.1
   Compiling secrecy v0.7.0
   Compiling tiny-bip39 v0.8.0
   Compiling webpki v0.21.4
   Compiling sct v0.6.0
   Compiling wasm-bindgen-backend v0.2.71
   Compiling tracing v0.1.25
   Compiling tracing-log v0.1.2
   Compiling trie-db v0.22.3
   Compiling mio v0.6.23
   Compiling polling v2.0.2
   Compiling kv-log-macro v1.0.7
   Compiling want v0.3.0
   Compiling trust-dns-proto v0.20.1
   Compiling env_logger v0.7.1
   Compiling tokio-io v0.1.13
   Compiling tokio-threadpool v0.1.18
   Compiling globset v0.4.6
   Compiling want v0.2.0
   Compiling parity-db v0.2.3
   Compiling wasm-gc-api v0.1.11
   Compiling env_logger v0.8.3
   Compiling regalloc v0.0.31
   Compiling pwasm-utils v0.14.0
   Compiling pwasm-utils v0.16.0
   Compiling prost-build v0.7.0
   Compiling futures v0.3.13
   Compiling unsigned-varint v0.7.0
   Compiling unsigned-varint v0.6.0
   Compiling jsonrpsee-proc-macros v0.2.0-alpha.3
   Compiling sp-serializer v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/serializer)
   Compiling jsonrpc-core v15.1.0
   Compiling sp-chain-spec v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/chain-spec)
   Compiling handlebars v3.5.3
   Compiling cranelift-bforest v0.71.0
   Compiling proc-macro-crate v0.1.5
   Compiling proc-macro-crate v1.0.0
   Compiling cargo_metadata v0.12.3
   Compiling ed25519-dalek v1.0.1
   Compiling x25519-dalek v1.1.0
   Compiling schnorrkel v0.9.1
   Compiling webpki-roots v0.21.0
   Compiling rustls v0.19.0
   Compiling rustls v0.18.1
   Compiling ct-logs v0.7.0
   Compiling tracing-futures v0.2.5
   Compiling tracing-subscriber v0.2.16
   Compiling async-io v1.3.1
   Compiling wasm-bindgen-macro-support v0.2.71
   Compiling mio-uds v0.6.8
   Compiling mio-extras v2.0.6
   Compiling tokio-reactor v0.1.12
   Compiling tokio-codec v0.1.2
   Compiling h2 v0.1.26
   Compiling tokio-fs v0.1.7
   Compiling trust-dns-resolver v0.20.1
   Compiling linregress v0.4.0
   Compiling file-per-thread-logger v0.1.4
   Compiling rw-stream-sink v0.2.1
   Compiling wasm-timer v0.2.5
   Compiling yamux v0.8.1
   Compiling libp2p-pnet v0.20.0
   Compiling sp-utils v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/utils)
   Compiling futures-diagnose v1.0.1
   Compiling intervalier v0.4.0
   Compiling exit-future v0.2.0
   Compiling jsonrpsee-types v0.2.0-alpha.3
   Compiling multistream-select v0.10.2
   Compiling soketto v0.4.2
   Compiling jsonrpc-pubsub v15.1.0
   Compiling parity-scale-codec-derive v2.0.1
   Compiling multihash-derive v0.7.1
   Compiling jsonrpc-derive v15.1.0
   Compiling frame-support-procedural-tools v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/support/procedural/tools)
   Compiling sp-runtime-interface-proc-macro v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/runtime-interface/proc-macro)
   Compiling sp-api-proc-macro v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/api/proc-macro)
   Compiling sc-tracing-proc-macro v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/tracing/proc-macro)
   Compiling sc-chain-spec-derive v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/chain-spec/derive)
   Compiling sp-npos-elections-compact v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/npos-elections/compact)
   Compiling pallet-staking-reward-curve v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/staking/reward-curve)
   Compiling substrate-wasm-builder v4.0.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/wasm-builder)
   Compiling substrate-bip39 v0.4.2
   Compiling futures-rustls v0.21.1
   Compiling rustls-native-certs v0.4.0
   Compiling async-global-executor v2.0.2
   Compiling async-process v1.0.2
   Compiling if-watch v0.2.0
   Compiling tokio v0.2.25
   Compiling parity-ws v0.10.0
   Compiling tokio-udp v0.1.6
   Compiling tokio-uds v0.2.7
   Compiling tokio-tcp v0.1.4
   Compiling wasm-bindgen-macro v0.2.71
   Compiling librocksdb-sys v6.11.4
   Compiling parity-scale-codec v2.0.1
   Compiling multihash v0.13.2
   Compiling frame-support-procedural v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/support/procedural)
   Compiling jsonrpc-client-transports v15.1.0
   Compiling node-runtime v2.0.1 (/home/shawntabrizi/bench-bot/git/substrate/bin/node/runtime)
   Compiling async-std v1.9.0
   Compiling tokio v0.1.22
   Compiling tokio-util v0.3.1
   Compiling tokio-rustls v0.14.1
   Compiling libp2p-core v0.28.1
   Compiling libp2p-relay v0.1.0
   Compiling libp2p-kad v0.29.0
   Compiling libp2p-floodsub v0.28.0
   Compiling libp2p-identify v0.28.0
   Compiling libp2p-plaintext v0.28.0
   Compiling libp2p-gossipsub v0.29.0
   Compiling libp2p-noise v0.30.0
   Compiling sc-network v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/network)
   Compiling sc-authority-discovery v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/authority-discovery)
   Compiling cranelift-frontend v0.71.0
   Compiling cranelift-native v0.71.0
   Compiling parity-multiaddr v0.11.2
   Compiling cid v0.6.1
   Compiling jsonrpc-core-client v15.1.0
   Compiling impl-codec v0.5.0
   Compiling sp-tracing v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/tracing)
   Compiling sp-storage v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/storage)
   Compiling sp-wasm-interface v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/wasm-interface)
   Compiling sp-arithmetic v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/arithmetic)
   Compiling fork-tree v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/fork-tree)
   Compiling finality-grandpa v0.14.0
   Compiling jsonrpc-server-utils v15.1.0
   Compiling tokio-named-pipes v0.1.0
   Compiling js-sys v0.3.47
   Compiling h2 v0.2.7
   Compiling async-std-resolver v0.20.1
   Compiling cranelift-wasm v0.71.0
   Compiling primitive-types v0.9.0
   Compiling sc-tracing v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/tracing)
   Compiling sp-externalities v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/externalities)
   Compiling parity-tokio-ipc v0.4.0
   Compiling jsonrpc-ws-server v15.1.0
   Compiling jsonrpc-http-server v15.1.0
   Compiling wasm-bindgen-futures v0.4.20
   Compiling hyper v0.13.10
   Compiling wasmtime-environ v0.24.0
   Compiling sp-runtime-interface v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/runtime-interface)
   Compiling jsonrpc-ipc-server v15.1.0
   Compiling wasmtime-debug v0.24.0
   Compiling wasmtime-cranelift v0.24.0
   Compiling libp2p-swarm v0.28.0
   Compiling libp2p-wasm-ext v0.28.0
   Compiling libp2p-deflate v0.28.0
   Compiling libp2p-tcp v0.28.0
   Compiling libp2p-uds v0.28.0
   Compiling libp2p-yamux v0.31.0
   Compiling libp2p-dns v0.28.0
   Compiling libp2p-mplex v0.28.0
   Compiling libp2p-websocket v0.29.0
   Compiling memory-db v0.26.0
   Compiling kvdb v0.9.0
   Compiling sp-core v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/core)
   Compiling substrate-prometheus-endpoint v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/prometheus)
   Compiling hyper-rustls v0.21.0
   Compiling jsonrpsee-utils v0.2.0-alpha.3
   Compiling wasmtime-obj v0.24.0
   Compiling wasmtime-profiling v0.24.0
   Compiling libp2p-request-response v0.10.0
   Compiling libp2p-ping v0.28.0
   Compiling libp2p-mdns v0.29.0
   Compiling sp-database v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/database)
   Compiling kvdb-memorydb v0.9.0
   Compiling jsonrpsee-http-client v0.2.0-alpha.3
   Compiling sp-trie v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/trie)
   Compiling sp-keystore v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/keystore)
   Compiling sp-inherents v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/inherents)
   Compiling frame-metadata v13.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/metadata)
   Compiling sp-allocator v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/allocator)
   Compiling sp-rpc v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/rpc)
   Compiling sp-npos-elections v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/npos-elections)
   Compiling wasmtime-jit v0.24.0
   Compiling sc-proposer-metrics v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/proposer-metrics)
   Compiling libp2p v0.36.0
   Compiling sp-state-machine v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/state-machine)
   Compiling sc-executor-common v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/executor/common)
   Compiling sc-peerset v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/peerset)
   Compiling sc-telemetry v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/telemetry)
   Compiling sc-executor-wasmi v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/executor/wasmi)
   Compiling sp-io v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/io)
   Compiling sp-application-crypto v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/application-crypto)
   Compiling sp-tasks v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/tasks)
   Compiling sp-sandbox v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/sandbox)
   Compiling sp-runtime v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/runtime)
   Compiling sc-keystore v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/keystore)
   Compiling sp-version v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/version)
   Compiling sp-staking v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/staking)
   Compiling sp-authorship v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/authorship)
   Compiling sp-consensus-slots v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/consensus/slots)
   Compiling sp-consensus-vrf v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/consensus/vrf)
   Compiling sp-keyring v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/keyring)
   Compiling pallet-contracts-primitives v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/contracts/common)
   Compiling sc-rpc-server v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/rpc-servers)
   Compiling sp-api v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/api)
   Compiling frame-support v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/support)
   Compiling remote-externalities v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/frame/remote-externalities)
   Compiling sp-block-builder v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/block-builder)
   Compiling sp-timestamp v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/timestamp)
   Compiling sp-session v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/session)
   Compiling sp-finality-grandpa v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/finality-grandpa)
   Compiling sp-offchain v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/offchain)
   Compiling sp-authority-discovery v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/authority-discovery)
   Compiling pallet-contracts-rpc-runtime-api v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/contracts/rpc/runtime-api)
   Compiling frame-system-rpc-runtime-api v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/system/rpc/runtime-api)
   Compiling sp-consensus v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/consensus/common)
   Compiling sc-executor v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/executor)
   Compiling frame-system v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/system)
   Compiling frame-try-runtime v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/try-runtime)
   Compiling sp-blockchain v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/blockchain)
   Compiling sp-consensus-babe v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/consensus/babe)
   Compiling sp-transaction-pool v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/primitives/transaction-pool)
   Compiling frame-benchmarking v3.1.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/benchmarking)
   Compiling pallet-authorship v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/authorship)
   Compiling frame-election-provider-support v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/election-provider-support)
   Compiling pallet-mmr-primitives v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/merkle-mountain-range/primitives)
   Compiling pallet-transaction-payment v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/transaction-payment)
   Compiling frame-executive v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/executive)
   Compiling node-primitives v2.0.0 (/home/shawntabrizi/bench-bot/git/substrate/bin/node/primitives)
   Compiling pallet-randomness-collective-flip v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/randomness-collective-flip)
   Compiling pallet-sudo v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/sudo)
   Compiling pallet-recovery v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/recovery)
   Compiling pallet-society v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/society)
   Compiling pallet-membership v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/membership)
   Compiling sc-client-api v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/api)
   Compiling sc-rpc-api v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/rpc-api)
   Compiling sc-transaction-graph v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/transaction-pool/graph)
   Compiling pallet-timestamp v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/timestamp)
   Compiling pallet-balances v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/balances)
   Compiling pallet-lottery v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/lottery)
   Compiling pallet-collective v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/collective)
   Compiling pallet-scheduler v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/scheduler)
   Compiling pallet-multisig v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/multisig)
   Compiling pallet-assets v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/assets)
   Compiling pallet-elections-phragmen v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/elections-phragmen)
   Compiling pallet-gilt v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/gilt)
   Compiling pallet-vesting v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/vesting)
   Compiling pallet-proxy v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/proxy)
   Compiling pallet-contracts v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/contracts)
   Compiling pallet-utility v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/utility)
   Compiling frame-system-benchmarking v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/system/benchmarking)
   Compiling pallet-democracy v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/democracy)
   Compiling pallet-election-provider-multi-phase v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/election-provider-multi-phase)
   Compiling pallet-indices v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/indices)
   Compiling pallet-identity v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/identity)
   Compiling pallet-mmr v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/merkle-mountain-range)
   Compiling pallet-im-online v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/im-online)
   Compiling pallet-transaction-payment-rpc-runtime-api v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/transaction-payment/rpc/runtime-api)
   Compiling sc-block-builder v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/block-builder)
   Compiling sc-consensus v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/consensus/common)
   Compiling sc-consensus-uncles v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/consensus/uncles)
   Compiling sc-state-db v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/state-db)
   Compiling sc-light v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/light)
   Compiling sc-transaction-pool v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/transaction-pool)
   Compiling pallet-session v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/session)
   Compiling pallet-treasury v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/treasury)
   Compiling pallet-offences v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/offences)
   Compiling sc-rpc v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/rpc)
   Compiling sc-consensus-epochs v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/consensus/epochs)
   Compiling pallet-staking v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/staking)
   Compiling pallet-grandpa v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/grandpa)
   Compiling pallet-authority-discovery v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/authority-discovery)
   Compiling pallet-bounties v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/bounties)
   Compiling pallet-tips v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/tips)
   Compiling sc-consensus-babe v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/consensus/babe)
   Compiling sc-network-gossip v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/network-gossip)
   Compiling sc-informant v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/informant)
   Compiling sc-offchain v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/offchain)
   Compiling pallet-session-benchmarking v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/session/benchmarking)
   Compiling sc-finality-grandpa v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/finality-grandpa)
   Compiling sc-chain-spec v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/client/chain-spec)
   Compiling pallet-transaction-payment-rpc v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/transaction-payment/rpc)
   Compiling pallet-contracts-rpc v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/contracts/rpc)
   Compiling pallet-mmr-rpc v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/merkle-mountain-range/rpc)
   Compiling pallet-babe v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/babe)
   Compiling pallet-offences-benchmarking v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/frame/offences/benchmarking)
   Compiling zstd v0.6.1+zstd.1.4.9
   Compiling wasmtime v0.24.0
   Compiling sc-executor-wasmtime v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/executor/wasmtime)
   Compiling substrate-frame-rpc-system v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/frame/rpc/system)
   Compiling sc-basic-authorship v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/basic-authorship)
   Compiling sc-consensus-babe-rpc v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/consensus/babe/rpc)
   Compiling sc-finality-grandpa-rpc v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/finality-grandpa/rpc)
   Compiling sc-sync-state-rpc v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/sync-state-rpc)
   Compiling rocksdb v0.15.0
   Compiling kvdb-rocksdb v0.11.0
   Compiling node-executor v2.0.0 (/home/shawntabrizi/bench-bot/git/substrate/bin/node/executor)
   Compiling node-rpc v2.0.0 (/home/shawntabrizi/bench-bot/git/substrate/bin/node/rpc)
   Compiling sc-client-db v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/db)
   Compiling sc-service v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/service)
   Compiling sc-cli v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/cli)
   Compiling try-runtime-cli v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/frame/try-runtime/cli)
   Compiling frame-benchmarking-cli v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/frame/benchmarking-cli)
   Compiling substrate-frame-cli v3.0.0 (/home/shawntabrizi/bench-bot/git/substrate/utils/frame/frame-utilities-cli)
   Compiling node-inspect v0.8.0 (/home/shawntabrizi/bench-bot/git/substrate/bin/node/inspect)
   Compiling node-cli v2.0.0 (/home/shawntabrizi/bench-bot/git/substrate/bin/node/cli)
   Compiling sc-finality-grandpa-warp-sync v0.9.0 (/home/shawntabrizi/bench-bot/git/substrate/client/finality-grandpa-warp-sync)
    Finished release [optimized] target(s) in 11m 27s
     Running `target/release/substrate benchmark --chain=dev --steps=50 --repeat=20 --pallet=collective '--extrinsic=*' --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame//src/weights.rs --template=./.maintain/frame-weight-template.hbs`
Error: Benchmark not found for this pallet.


 </details>",8522,2021-04-03T16:49:20Z,0
719,shawntabrizi,/benchmark runtime pallet pallet_collective,8522,2021-04-03T19:14:38Z,0
720,parity-benchapp[bot],"Finished benchmark for branch: **shawntabrizi-collective-dispatch-account**

Benchmark: **Benchmark Runtime Pallet**

cargo run --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_collective --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/collective/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

Pallet: ""pallet_collective"", Extrinsic: ""set_members"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + m    16.11
    + n    0.229
    + p    22.08
              µs

Reads = 2 + (0 * m) + (0 * n) + (1 * p)
Writes = 2 + (0 * m) + (0 * n) + (1 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    m     n     p   mean µs  sigma µs       %
    1   100   100     711.3      2.42    0.3%
    2   100   100     714.3      4.21    0.5%
    3   100   100       718     3.567    0.4%
    4   100   100     727.9     1.798    0.2%
    5   100   100     755.1     6.114    0.8%
    6   100   100     772.8     7.538    0.9%
    7   100   100     769.9     5.671    0.7%
    8   100   100     792.3     4.686    0.5%
    9   100   100     812.5     5.361    0.6%
   10   100   100       841     1.656    0.1%
   11   100   100     855.5     6.042    0.7%
   12   100   100     864.1     2.269    0.2%
   13   100   100     871.3     4.747    0.5%
   14   100   100     893.9     2.329    0.2%
   15   100   100     900.4     2.696    0.2%
   16   100   100     913.2     4.647    0.5%
   17   100   100     923.1     3.895    0.4%
   18   100   100     945.2     4.623    0.4%
   19   100   100     968.4     6.771    0.6%
   20   100   100     977.8     6.368    0.6%
   21   100   100     994.4     8.063    0.8%
   22   100   100      1030     10.79    1.0%
   23   100   100      1020     8.647    0.8%
   24   100   100      1045     6.891    0.6%
   25   100   100      1049      3.34    0.3%
   26   100   100      1072     6.301    0.5%
   27   100   100      1073     3.352    0.3%
   28   100   100      1094     4.292    0.3%
   29   100   100      1101     1.646    0.1%
   30   100   100      1126     8.472    0.7%
   31   100   100      1143     8.407    0.7%
   32   100   100      1159     8.703    0.7%
   33   100   100      1197      6.13    0.5%
   34   100   100      1233     8.514    0.6%
   35   100   100      1247     2.995    0.2%
   36   100   100      1258     4.032    0.3%
   37   100   100      1282     8.507    0.6%
   38   100   100      1296     11.59    0.8%
   39   100   100      1302     9.068    0.6%
   40   100   100      1314     4.088    0.3%
   41   100   100      1336     4.153    0.3%
   42   100   100      1356     12.36    0.9%
   43   100   100      1349     2.012    0.1%
   44   100   100      1373     3.853    0.2%
   45   100   100      1396     7.445    0.5%
   46   100   100      1415     8.841    0.6%
   47   100   100      1427     2.687    0.1%
   48   100   100      1439     7.907    0.5%
   49   100   100      1464     10.45    0.7%
   50   100   100      1474     6.304    0.4%
   51   100   100      1496     13.05    0.8%
   52   100   100      1501      3.72    0.2%
   53   100   100      1520     3.161    0.2%
   54   100   100      1527      7.69    0.5%
   55   100   100      1545     7.069    0.4%
   56   100   100      1564     4.479    0.2%
   57   100   100      1592     7.249    0.4%
   58   100   100      1593     6.751    0.4%
   59   100   100      1613     5.903    0.3%
   60   100   100      1628     5.964    0.3%
   61   100   100      1643     7.282    0.4%
   62   100   100      1662     10.06    0.6%
   63   100   100      1684     12.72    0.7%
   64   100   100      1699     13.97    0.8%
   65   100   100      1713     6.437    0.3%
   66   100   100      1724     9.231    0.5%
   67   100   100      1748     9.689    0.5%
   68   100   100      1766     17.55    0.9%
   69   100   100      1779     10.19    0.5%
   70   100   100      1799     12.53    0.6%
   71   100   100      1820     11.75    0.6%
   72   100   100      1822      6.75    0.3%
   73   100   100      1840     4.559    0.2%
   74   100   100      1850     12.79    0.6%
   75   100   100      1874     7.615    0.4%
   76   100   100      1900     14.17    0.7%
   77   100   100      1916     12.69    0.6%
   78   100   100      1925     10.73    0.5%
   79   100   100      1935     11.14    0.5%
   80   100   100      1967     13.78    0.7%
   81   100   100      1968     8.974    0.4%
   82   100   100      1995     8.997    0.4%
   83   100   100      2008     7.516    0.3%
   84   100   100      2028     11.25    0.5%
   85   100   100      2036     9.514    0.4%
   86   100   100      2039     6.486    0.3%
   87   100   100      2062     8.624    0.4%
   88   100   100      2081     4.306    0.2%
   89   100   100      2110     9.208    0.4%
   90   100   100      2128      10.5    0.4%
   91   100   100      2141     9.669    0.4%
   92   100   100      2150     13.56    0.6%
   93   100   100      2174     12.39    0.5%
   94   100   100      2196     13.42    0.6%
   95   100   100      2187     6.498    0.2%
   96   100   100      2206     6.601    0.2%
   97   100   100      2223     5.563    0.2%
   98   100   100      2254     9.688    0.4%
   99   100   100      2266     10.66    0.4%
  100     1   100      2254     5.563    0.2%
  100     2   100      2248     8.859    0.3%
  100     3   100      2244      9.69    0.4%
  100     4   100      2250      7.54    0.3%
  100     5   100      2248     8.464    0.3%
  100     6   100      2247     6.051    0.2%
  100     7   100      2246     8.089    0.3%
  100     8   100      2239      8.11    0.3%
  100     9   100      2263     11.22    0.4%
  100    10   100      2256     10.98    0.4%
  100    11   100      2247     9.845    0.4%
  100    12   100      2247     13.06    0.5%
  100    13   100      2259     12.35    0.5%
  100    14   100      2246     10.04    0.4%
  100    15   100      2255      14.6    0.6%
  100    16   100      2252     7.125    0.3%
  100    17   100      2250     10.88    0.4%
  100    18   100      2252     16.06    0.7%
  100    19   100      2245     8.413    0.3%
  100    20   100      2250     9.513    0.4%
  100    21   100      2265     14.68    0.6%
  100    22   100      2246     7.643    0.3%
  100    23   100      2253     13.48    0.5%
  100    24   100      2259     13.99    0.6%
  100    25   100      2249     7.159    0.3%
  100    26   100      2264     11.75    0.5%
  100    27   100      2262     5.598    0.2%
  100    28   100      2252     7.368    0.3%
  100    29   100      2245     7.266    0.3%
  100    30   100      2244     8.282    0.3%
  100    31   100      2249     10.49    0.4%
  100    32   100      2258     12.87    0.5%
  100    33   100      2248     7.246    0.3%
  100    34   100      2253     9.993    0.4%
  100    35   100      2255      10.8    0.4%
  100    36   100      2250     10.97    0.4%
  100    37   100      2273     8.321    0.3%
  100    38   100      2262     14.21    0.6%
  100    39   100      2249     9.873    0.4%
  100    40   100      2264     12.43    0.5%
  100    41   100      2256     11.19    0.4%
  100    42   100      2256     8.648    0.3%
  100    43   100      2247     6.291    0.2%
  100    44   100      2268     14.59    0.6%
  100    45   100      2258     13.73    0.6%
  100    46   100      2253     10.91    0.4%
  100    47   100      2246     7.184    0.3%
  100    48   100      2257     11.29    0.5%
  100    49   100      2252     10.47    0.4%
  100    50   100      2264     14.24    0.6%
  100    51   100      2264     9.309    0.4%
  100    52   100      2256      14.7    0.6%
  100    53   100      2260     6.515    0.2%
  100    54   100      2256     7.713    0.3%
  100    55   100      2253     4.261    0.1%
  100    56   100      2267     11.29    0.4%
  100    57   100      2267     10.93    0.4%
  100    58   100      2254     11.39    0.5%
  100    59   100      2256      8.71    0.3%
  100    60   100      2262     19.04    0.8%
  100    61   100      2263     11.05    0.4%
  100    62   100      2263     9.648    0.4%
  100    63   100      2265     11.95    0.5%
  100    64   100      2259     10.95    0.4%
  100    65   100      2265     13.18    0.5%
  100    66   100      2256     6.724    0.2%
  100    67   100      2266     14.75    0.6%
  100    68   100      2268     10.55    0.4%
  100    69   100      2260     10.29    0.4%
  100    70   100      2264      12.6    0.5%
  100    71   100      2265     12.67    0.5%
  100    72   100      2260     7.051    0.3%
  100    73   100      2261     6.032    0.2%
  100    74   100      2268     13.67    0.6%
  100    75   100      2275     11.21    0.4%
  100    76   100      2257      10.9    0.4%
  100    77   100      2258     9.801    0.4%
  100    78   100      2272     10.95    0.4%
  100    79   100      2274     11.34    0.4%
  100    80   100      2266      7.22    0.3%
  100    81   100      2268     15.13    0.6%
  100    82   100      2273     8.274    0.3%
  100    83   100      2267     9.572    0.4%
  100    84   100      2261     10.75    0.4%
  100    85   100      2272     10.49    0.4%
  100    86   100      2271     11.51    0.5%
  100    87   100      2273     7.177    0.3%
  100    88   100      2261     11.06    0.4%
  100    89   100      2268     8.341    0.3%
  100    90   100      2265     11.33    0.5%
  100    91   100      2266     10.74    0.4%
  100    92   100      2270     11.48    0.5%
  100    93   100      2267     11.89    0.5%
  100    94   100      2267     6.743    0.2%
  100    95   100      2268     11.83    0.5%
  100    96   100      2264     10.42    0.4%
  100    97   100      2261     7.094    0.3%
  100    98   100      2263     8.717    0.3%
  100    99   100      2266     6.187    0.2%
  100   100     1     80.51     0.136    0.1%
  100   100     2     104.8     0.201    0.1%
  100   100     3     128.1      0.26    0.2%
  100   100     4     151.3     0.335    0.2%
  100   100     5     173.3      0.29    0.1%
  100   100     6     196.3     0.367    0.1%
  100   100     7     218.4     1.407    0.6%
  100   100     8     238.5     0.416    0.1%
  100   100     9     260.4     0.499    0.1%
  100   100    10     282.8     0.442    0.1%
  100   100    11     304.5     0.271    0.0%
  100   100    12     325.9     0.584    0.1%
  100   100    13     349.6     0.875    0.2%
  100   100    14     369.9     0.747    0.2%
  100   100    15     392.7     0.633    0.1%
  100   100    16       415     0.827    0.1%
  100   100    17     437.2     0.411    0.0%
  100   100    18     459.1     0.613    0.1%
  100   100    19     481.7     0.859    0.1%
  100   100    20     505.2     1.437    0.2%
  100   100    21     525.4     1.197    0.2%
  100   100    22     549.4     3.124    0.5%
  100   100    23     569.6     0.482    0.0%
  100   100    24     591.3     1.372    0.2%
  100   100    25     615.8     0.878    0.1%
  100   100    26     635.4     0.759    0.1%
  100   100    27     657.3     1.083    0.1%
  100   100    28     680.3     1.019    0.1%
  100   100    29     702.6     1.077    0.1%
  100   100    30     726.2     4.766    0.6%
  100   100    31     750.3     7.563    1.0%
  100   100    32     770.6     1.068    0.1%
  100   100    33     790.3      1.16    0.1%
  100   100    34     812.9     1.482    0.1%
  100   100    35     834.7     1.575    0.1%
  100   100    36     858.1     1.565    0.1%
  100   100    37       878     2.144    0.2%
  100   100    38     902.4     1.091    0.1%
  100   100    39     922.8     1.575    0.1%
  100   100    40     952.2     11.23    1.1%
  100   100    41     966.3     0.834    0.0%
  100   100    42     991.7     1.779    0.1%
  100   100    43      1016     2.612    0.2%
  100   100    44      1033      1.52    0.1%
  100   100    45      1061     1.914    0.1%
  100   100    46      1078     0.971    0.0%
  100   100    47      1099     1.148    0.1%
  100   100    48      1124     0.744    0.0%
  100   100    49      1146     2.233    0.1%
  100   100    50      1182     11.24    0.9%
  100   100    51      1191     2.727    0.2%
  100   100    52      1216     5.806    0.4%
  100   100    53      1244     12.89    1.0%
  100   100    54      1260     1.771    0.1%
  100   100    55      1291     7.806    0.6%
  100   100    56      1307     3.625    0.2%
  100   100    57      1334     8.938    0.6%
  100   100    58      1353     8.062    0.5%
  100   100    59      1377     8.827    0.6%
  100   100    60      1391     5.177    0.3%
  100   100    61      1416     5.534    0.3%
  100   100    62      1440     10.51    0.7%
  100   100    63      1455     3.778    0.2%
  100   100    64      1477     3.251    0.2%
  100   100    65      1496     2.084    0.1%
  100   100    66      1516     2.127    0.1%
  100   100    67      1541     8.544    0.5%
  100   100    68      1559     6.218    0.3%
  100   100    69      1582     2.532    0.1%
  100   100    70      1610     7.709    0.4%
  100   100    71      1625     2.726    0.1%
  100   100    72      1652     12.05    0.7%
  100   100    73      1677     11.26    0.6%
  100   100    74      1696     6.446    0.3%
  100   100    75      1722     10.23    0.5%
  100   100    76      1736     2.162    0.1%
  100   100    77      1755     3.973    0.2%
  100   100    78      1781     3.892    0.2%
  100   100    79      1811     11.79    0.6%
  100   100    80      1827     3.931    0.2%
  100   100    81      1849     7.761    0.4%
  100   100    82      1881     11.74    0.6%
  100   100    83      1904     11.87    0.6%
  100   100    84      1920     9.199    0.4%
  100   100    85      1946     13.45    0.6%
  100   100    86      1959     11.64    0.5%
  100   100    87      1989     11.85    0.5%
  100   100    88      2004      5.79    0.2%
  100   100    89      2050      12.6    0.6%
  100   100    90      2041     2.043    0.1%
  100   100    91      2084     7.362    0.3%
  100   100    92      2097     11.47    0.5%
  100   100    93      2123     11.73    0.5%
  100   100    94      2148     13.95    0.6%
  100   100    95      2165     9.078    0.4%
  100   100    96      2177     5.047    0.2%
  100   100    97      2230     10.97    0.4%
  100   100    98      2233     6.783    0.3%
  100   100    99      2261     14.44    0.6%
  100   100   100      2272     10.64    0.4%

Quality and confidence:
param     error
m         0.009
n         0.009
p         0.009

Model:
Time ~=        0
    + m    16.09
    + n    0.299
    + p    22.13
              µs

Reads = 2 + (0 * m) + (0 * n) + (1 * p)
Writes = 2 + (0 * m) + (0 * n) + (1 * p)
Pallet: ""pallet_collective"", Extrinsic: ""execute"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    26.04
    + b    0.003
    + m    0.114
              µs

Reads = 1 + (0 * b) + (0 * m)
Writes = 0 + (0 * b) + (0 * m)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m   mean µs  sigma µs       %
    1   100     37.28     0.218    0.5%
   21   100     37.81     0.104    0.2%
   41   100     37.73     0.054    0.1%
   61   100     37.67     0.069    0.1%
   81   100     37.89     0.068    0.1%
  101   100     37.92     0.069    0.1%
  121   100     38.03      0.08    0.2%
  141   100     38.03      0.06    0.1%
  161   100     38.11     0.158    0.4%
  181   100     38.08     0.053    0.1%
  201   100     38.03     0.059    0.1%
  221   100     38.03     0.068    0.1%
  241   100     38.27     0.072    0.1%
  261   100     38.44     0.084    0.2%
  281   100     38.41     0.081    0.2%
  301   100     38.43     0.076    0.1%
  321   100     38.51     0.094    0.2%
  341   100     38.51     0.088    0.2%
  361   100     38.65     0.168    0.4%
  381   100     38.64     0.115    0.2%
  401   100      38.8       0.1    0.2%
  421   100     38.76     0.061    0.1%
  441   100     38.76     0.061    0.1%
  461   100     38.91     0.128    0.3%
  481   100     38.95     0.095    0.2%
  501   100     38.97     0.079    0.2%
  521   100     39.12     0.068    0.1%
  541   100     39.35      0.13    0.3%
  561   100     39.19     0.064    0.1%
  581   100     39.23     0.093    0.2%
  601   100     39.32     0.084    0.2%
  621   100     39.31     0.144    0.3%
  641   100      39.6     0.076    0.1%
  661   100     39.58     0.083    0.2%
  681   100     39.63     0.055    0.1%
  701   100     39.59     0.136    0.3%
  721   100     39.67     0.062    0.1%
  741   100     39.69     0.094    0.2%
  761   100     39.88      0.06    0.1%
  781   100     40.13     0.083    0.2%
  801   100     40.21     0.055    0.1%
  821   100     40.18     0.086    0.2%
  841   100     40.23     0.057    0.1%
  861   100      40.4     0.129    0.3%
  881   100     40.19      0.12    0.2%
  901   100     40.51     0.101    0.2%
  921   100     40.56     0.052    0.1%
  941   100     40.57     0.094    0.2%
  961   100     40.72     0.073    0.1%
  981   100     40.67      0.08    0.1%
 1001   100      40.8     0.108    0.2%
 1021   100     41.14     0.082    0.1%
 1024     1     29.37     0.067    0.2%
 1024     2     29.86     0.049    0.1%
 1024     3      29.6     0.045    0.1%
 1024     4     29.65     0.043    0.1%
 1024     5     29.92     0.084    0.2%
 1024     6     29.95      0.07    0.2%
 1024     7     30.33     0.081    0.2%
 1024     8     30.07     0.044    0.1%
 1024     9     30.39     0.096    0.3%
 1024    10     30.57     0.069    0.2%
 1024    11     30.52     0.059    0.1%
 1024    12     30.66     0.128    0.4%
 1024    13     30.74     0.075    0.2%
 1024    14     30.92     0.061    0.1%
 1024    15     30.95     0.072    0.2%
 1024    16     31.18     0.076    0.2%
 1024    17     31.25     0.066    0.2%
 1024    18     31.51     0.068    0.2%
 1024    19      31.5     0.037    0.1%
 1024    20     31.44     0.061    0.1%
 1024    21     31.55     0.076    0.2%
 1024    22     31.49     0.024    0.0%
 1024    23     31.88     0.098    0.3%
 1024    24     31.76     0.077    0.2%
 1024    25      32.2     0.087    0.2%
 1024    26      32.2     0.058    0.1%
 1024    27     32.13     0.045    0.1%
 1024    28     32.23     0.075    0.2%
 1024    29     32.28     0.083    0.2%
 1024    30     32.47     0.063    0.1%
 1024    31     32.61     0.049    0.1%
 1024    32     33.11     0.077    0.2%
 1024    33     33.29     0.102    0.3%
 1024    34     33.21     0.049    0.1%
 1024    35     33.64     0.043    0.1%
 1024    36     33.75     0.109    0.3%
 1024    37     33.63     0.061    0.1%
 1024    38     33.87     0.073    0.2%
 1024    39     33.88     0.101    0.2%
 1024    40        34     0.074    0.2%
 1024    41     34.35     0.072    0.2%
 1024    42     34.26     0.054    0.1%
 1024    43     34.35     0.093    0.2%
 1024    44     34.43     0.061    0.1%
 1024    45     34.49     0.083    0.2%
 1024    46     34.49     0.068    0.1%
 1024    47     34.71     0.071    0.2%
 1024    48     34.98     0.033    0.0%
 1024    49     34.92     0.077    0.2%
 1024    50     34.96      0.11    0.3%
 1024    51      35.1      0.09    0.2%
 1024    52     35.43     0.081    0.2%
 1024    53     35.67     0.092    0.2%
 1024    54     35.62     0.104    0.2%
 1024    55      35.6     0.088    0.2%
 1024    56     35.95     0.075    0.2%
 1024    57     36.03     0.097    0.2%
 1024    58        36     0.085    0.2%
 1024    59     36.26     0.076    0.2%
 1024    60     36.21     0.077    0.2%
 1024    61     36.52     0.072    0.1%
 1024    62     36.58      0.07    0.1%
 1024    63     36.63     0.119    0.3%
 1024    64     36.87     0.072    0.1%
 1024    65     37.01     0.056    0.1%
 1024    66     36.88     0.093    0.2%
 1024    67     36.82     0.117    0.3%
 1024    68     37.14     0.109    0.2%
 1024    69     37.47     0.083    0.2%
 1024    70     37.25     0.085    0.2%
 1024    71     37.27     0.081    0.2%
 1024    72     37.78     0.105    0.2%
 1024    73     37.61     0.089    0.2%
 1024    74     37.69     0.097    0.2%
 1024    75     37.76     0.062    0.1%
 1024    76     38.09     0.108    0.2%
 1024    77      38.2     0.075    0.1%
 1024    78     38.13     0.072    0.1%
 1024    79     38.49     0.078    0.2%
 1024    80     38.42      0.09    0.2%
 1024    81      38.4     0.087    0.2%
 1024    82     38.62     0.084    0.2%
 1024    83     38.79     0.086    0.2%
 1024    84     38.88     0.076    0.1%
 1024    85     38.99     0.112    0.2%
 1024    86     39.03     0.067    0.1%
 1024    87     39.57     0.091    0.2%
 1024    88     39.34     0.056    0.1%
 1024    89     39.37     0.091    0.2%
 1024    90     39.56     0.124    0.3%
 1024    91     39.63     0.103    0.2%
 1024    92     39.87     0.088    0.2%
 1024    93     39.97     0.063    0.1%
 1024    94     40.06     0.114    0.2%
 1024    95     40.13     0.113    0.2%
 1024    96     40.08     0.135    0.3%
 1024    97     40.36     0.071    0.1%
 1024    98     40.33     0.068    0.1%
 1024    99     40.62     0.073    0.1%
 1024   100      40.8     0.138    0.3%

Quality and confidence:
param     error
b             0
m             0

Model:
Time ~=    26.02
    + b    0.003
    + m    0.115
              µs

Reads = 1 + (0 * b) + (0 * m)
Writes = 0 + (0 * b) + (0 * m)
Pallet: ""pallet_collective"", Extrinsic: ""propose_execute"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.01
    + b    0.003
    + m    0.228
              µs

Reads = 2 + (0 * b) + (0 * m)
Writes = 0 + (0 * b) + (0 * m)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m   mean µs  sigma µs       %
    1   100     53.47     0.161    0.3%
   21   100     54.02     0.171    0.3%
   41   100     53.94     0.106    0.1%
   61   100     53.95     0.113    0.2%
   81   100     54.18     0.197    0.3%
  101   100     54.37     0.094    0.1%
  121   100     54.17     0.142    0.2%
  141   100     54.46     0.158    0.2%
  161   100     54.38     0.142    0.2%
  181   100     54.56     0.152    0.2%
  201   100     54.44      0.15    0.2%
  221   100     54.71     0.143    0.2%
  241   100     54.56     0.122    0.2%
  261   100     54.98       0.1    0.1%
  281   100      54.8      0.18    0.3%
  301   100     54.98     0.198    0.3%
  321   100     54.99     0.132    0.2%
  341   100     54.99     0.099    0.1%
  361   100     55.04     0.142    0.2%
  381   100     55.22     0.132    0.2%
  401   100     55.38     0.116    0.2%
  421   100      55.4     0.114    0.2%
  441   100     55.42     0.112    0.2%
  461   100     55.52     0.181    0.3%
  481   100     55.51     0.138    0.2%
  501   100     55.52      0.19    0.3%
  521   100     55.75     0.087    0.1%
  541   100     55.87     0.185    0.3%
  561   100        56     0.113    0.2%
  581   100     55.93     0.119    0.2%
  601   100     56.12     0.127    0.2%
  621   100     56.03     0.151    0.2%
  641   100     56.13     0.123    0.2%
  661   100     56.37     0.167    0.2%
  681   100     56.13     0.126    0.2%
  701   100     56.18     0.116    0.2%
  721   100     56.21     0.133    0.2%
  741   100     56.62     0.111    0.1%
  761   100     56.56     0.065    0.1%
  781   100     56.75      0.11    0.1%
  801   100     56.77      0.13    0.2%
  821   100      56.9     0.099    0.1%
  841   100        57     0.122    0.2%
  861   100     56.95     0.124    0.2%
  881   100     56.87     0.102    0.1%
  901   100     57.11      0.09    0.1%
  921   100      57.3     0.169    0.2%
  941   100     57.18     0.118    0.2%
  961   100     57.23     0.155    0.2%
  981   100     57.39     0.132    0.2%
 1001   100     57.37     0.123    0.2%
 1021   100     57.46     0.168    0.2%
 1024     1     35.38     0.073    0.2%
 1024     2     36.09     0.096    0.2%
 1024     3     35.71     0.077    0.2%
 1024     4     35.96     0.062    0.1%
 1024     5     36.51     0.045    0.1%
 1024     6     36.36     0.068    0.1%
 1024     7     36.79     0.066    0.1%
 1024     8     36.83     0.062    0.1%
 1024     9      36.9     0.107    0.2%
 1024    10     37.48     0.052    0.1%
 1024    11     37.59     0.086    0.2%
 1024    12     37.74     0.088    0.2%
 1024    13     37.86     0.095    0.2%
 1024    14     38.24     0.078    0.2%
 1024    15     38.25     0.072    0.1%
 1024    16     38.63     0.075    0.1%
 1024    17     38.95     0.042    0.1%
 1024    18     39.27     0.083    0.2%
 1024    19     39.22     0.041    0.1%
 1024    20     39.23     0.081    0.2%
 1024    21     39.43     0.062    0.1%
 1024    22     39.62     0.125    0.3%
 1024    23     39.97      0.11    0.2%
 1024    24      40.1     0.084    0.2%
 1024    25     40.48      0.09    0.2%
 1024    26     40.73     0.042    0.1%
 1024    27     40.74     0.091    0.2%
 1024    28     40.95     0.058    0.1%
 1024    29     41.03     0.078    0.1%
 1024    30     41.58     0.065    0.1%
 1024    31     41.63     0.108    0.2%
 1024    32     42.49     0.152    0.3%
 1024    33     42.68     0.123    0.2%
 1024    34     43.01     0.133    0.3%
 1024    35     43.22     0.052    0.1%
 1024    36      43.5      0.07    0.1%
 1024    37     43.46     0.064    0.1%
 1024    38     43.67     0.104    0.2%
 1024    39     43.92     0.105    0.2%
 1024    40     44.08     0.068    0.1%
 1024    41     44.67     0.086    0.1%
 1024    42     44.65     0.081    0.1%
 1024    43     44.89     0.119    0.2%
 1024    44     45.16     0.073    0.1%
 1024    45     45.38     0.041    0.0%
 1024    46     45.52     0.096    0.2%
 1024    47     45.68     0.072    0.1%
 1024    48     46.08     0.082    0.1%
 1024    49     46.13     0.073    0.1%
 1024    50     46.48      0.14    0.3%
 1024    51     46.72     0.085    0.1%
 1024    52     46.84     0.112    0.2%
 1024    53      47.2     0.061    0.1%
 1024    54     47.17     0.133    0.2%
 1024    55     47.34     0.105    0.2%
 1024    56     47.78     0.087    0.1%
 1024    57     48.03     0.114    0.2%
 1024    58     48.13     0.082    0.1%
 1024    59     48.32     0.082    0.1%
 1024    60     48.48     0.072    0.1%
 1024    61     48.96     0.137    0.2%
 1024    62     49.11     0.088    0.1%
 1024    63     49.15     0.038    0.0%
 1024    64     49.71     0.066    0.1%
 1024    65     50.14     0.063    0.1%
 1024    66     49.87     0.076    0.1%
 1024    67     50.16     0.119    0.2%
 1024    68     50.66     0.121    0.2%
 1024    69     50.92     0.083    0.1%
 1024    70     51.09     0.097    0.1%
 1024    71     51.05     0.096    0.1%
 1024    72     51.65     0.064    0.1%
 1024    73     51.58     0.102    0.1%
 1024    74     51.92     0.137    0.2%
 1024    75     52.03      0.07    0.1%
 1024    76     52.29     0.092    0.1%
 1024    77      52.5     0.103    0.1%
 1024    78     52.49     0.086    0.1%
 1024    79     53.12     0.105    0.1%
 1024    80     53.03      0.14    0.2%
 1024    81     53.22     0.156    0.2%
 1024    82     53.59     0.226    0.4%
 1024    83      53.6     0.109    0.2%
 1024    84     53.93     0.112    0.2%
 1024    85     54.37     0.062    0.1%
 1024    86     54.52     0.124    0.2%
 1024    87     54.64     0.115    0.2%
 1024    88     54.69     0.117    0.2%
 1024    89     55.09     0.073    0.1%
 1024    90     55.14     0.186    0.3%
 1024    91     55.34      0.06    0.1%
 1024    92     55.94      0.13    0.2%
 1024    93     67.04     8.842   13.1%
 1024    94     60.46     1.283    2.1%
 1024    95     72.64       8.6   11.8%
 1024    96        61      3.65    5.9%
 1024    97     58.53     0.282    0.4%
 1024    98     58.07     0.251    0.4%
 1024    99     57.08     0.198    0.3%
 1024   100     57.78     0.461    0.7%

Quality and confidence:
param     error
b             0
m         0.001

Model:
Time ~=     29.5
    + b    0.005
    + m    0.238
              µs

Reads = 2 + (0 * b) + (0 * m)
Writes = 0 + (0 * b) + (0 * m)
Pallet: ""pallet_collective"", Extrinsic: ""propose_proposed"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    50.94
    + b    0.005
    + m     0.11
    + p    0.628
              µs

Reads = 4 + (0 * b) + (0 * m) + (0 * p)
Writes = 5 + (0 * b) + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m     p   mean µs  sigma µs       %
    1   100   100     125.8      1.22    0.9%
   21   100   100     125.1     1.049    0.8%
   41   100   100     124.4     0.338    0.2%
   61   100   100     124.8     0.347    0.2%
   81   100   100     125.4     0.224    0.1%
  101   100   100     125.5     0.148    0.1%
  121   100   100     125.7     0.089    0.0%
  141   100   100     125.5     0.256    0.2%
  161   100   100     125.9     0.352    0.2%
  181   100   100     125.8     0.214    0.1%
  201   100   100     125.1     0.194    0.1%
  221   100   100     125.6     0.312    0.2%
  241   100   100     125.7     0.352    0.2%
  261   100   100     126.1     0.181    0.1%
  281   100   100     126.3     0.256    0.2%
  301   100   100       126     0.121    0.0%
  321   100   100     126.1      0.26    0.2%
  341   100   100     126.4     0.176    0.1%
  361   100   100     126.9     0.297    0.2%
  381   100   100     126.7     0.239    0.1%
  401   100   100     126.8      0.25    0.1%
  421   100   100       127     0.121    0.0%
  441   100   100     127.1      0.25    0.1%
  461   100   100     126.9     0.146    0.1%
  481   100   100     127.4     0.291    0.2%
  501   100   100     127.9     0.274    0.2%
  521   100   100     126.9      0.21    0.1%
  541   100   100     126.5     0.193    0.1%
  561   100   100     128.3     0.128    0.0%
  581   100   100     128.4     0.318    0.2%
  601   100   100     128.6     0.194    0.1%
  621   100   100     128.3     0.181    0.1%
  641   100   100     128.2     0.315    0.2%
  661   100   100     128.8     0.199    0.1%
  681   100   100     129.1      0.26    0.2%
  701   100   100     129.3     0.166    0.1%
  721   100   100     129.1     0.181    0.1%
  741   100   100     129.3     0.131    0.1%
  761   100   100     130.1      0.08    0.0%
  781   100   100     130.1      0.26    0.1%
  801   100   100     129.8     0.299    0.2%
  821   100   100     130.3     0.345    0.2%
  841   100   100       130     0.293    0.2%
  861   100   100       130     0.235    0.1%
  881   100   100     130.2     0.251    0.1%
  901   100   100     130.7     0.221    0.1%
  921   100   100     118.7     0.181    0.1%
  941   100   100     129.9     3.435    2.6%
  961   100   100     119.5     0.628    0.5%
  981   100   100     119.2     0.171    0.1%
 1001   100   100     119.9      0.73    0.6%
 1021   100   100     131.7     0.216    0.1%
 1024     2   100     112.1     5.485    4.8%
 1024     3   100       109      0.37    0.3%
 1024     4   100     115.2     5.628    4.8%
 1024     5   100     113.6      5.32    4.6%
 1024     6   100       111     3.445    3.1%
 1024     7   100     117.2     5.322    4.5%
 1024     8   100     121.9     0.219    0.1%
 1024     9   100     116.6     5.798    4.9%
 1024    10   100     120.5      3.56    2.9%
 1024    11   100     117.9     5.585    4.7%
 1024    12   100     114.9     5.494    4.7%
 1024    13   100     116.3     5.617    4.8%
 1024    14   100     117.8     5.859    4.9%
 1024    15   100     111.8     3.654    3.2%
 1024    16   100     110.2     0.209    0.1%
 1024    17   100       112     3.465    3.0%
 1024    18   100     111.6      3.49    3.1%
 1024    19   100     118.9     5.594    4.7%
 1024    20   100       116     5.681    4.8%
 1024    21   100     110.7     0.781    0.7%
 1024    22   100     110.9     0.238    0.2%
 1024    23   100     111.4     0.339    0.3%
 1024    24   100     115.5     5.243    4.5%
 1024    25   100     113.6     4.838    4.2%
 1024    26   100       111     0.209    0.1%
 1024    27   100     112.4     3.554    3.1%
 1024    28   100     111.4     0.364    0.3%
 1024    29   100     119.7     5.011    4.1%
 1024    30   100     111.9     0.399    0.3%
 1024    31   100     117.9     5.915    5.0%
 1024    32   100     116.1      5.47    4.7%
 1024    33   100       113      0.23    0.2%
 1024    34   100     113.6     3.644    3.2%
 1024    35   100     118.8     5.691    4.7%
 1024    36   100     113.3     0.651    0.5%
 1024    37   100     119.1     5.502    4.6%
 1024    38   100     117.1     5.082    4.3%
 1024    39   100     113.1      0.52    0.4%
 1024    40   100       117     5.404    4.6%
 1024    41   100     117.2     5.342    4.5%
 1024    42   100     114.1     1.422    1.2%
 1024    43   100     113.8      0.24    0.2%
 1024    44   100     114.1     0.275    0.2%
 1024    45   100     119.1     5.309    4.4%
 1024    46   100     114.9     3.406    2.9%
 1024    47   100     119.8     5.768    4.8%
 1024    48   100     114.2     0.335    0.2%
 1024    49   100     114.2     0.297    0.2%
 1024    50   100     116.8     4.702    4.0%
 1024    51   100     124.5       4.1    3.2%
 1024    52   100     117.5     4.526    3.8%
 1024    53   100     117.3     4.912    4.1%
 1024    54   100       117     3.498    2.9%
 1024    55   100     115.2     0.291    0.2%
 1024    56   100     115.2     0.239    0.2%
 1024    57   100     115.4     0.374    0.3%
 1024    58   100     115.1     0.161    0.1%
 1024    59   100     117.2     3.345    2.8%
 1024    60   100     115.6     0.287    0.2%
 1024    61   100       116     0.375    0.3%
 1024    62   100     115.9     0.209    0.1%
 1024    63   100     115.8      0.31    0.2%
 1024    64   100     115.7     0.199    0.1%
 1024    65   100     117.3     1.549    1.3%
 1024    66   100       117     0.191    0.1%
 1024    67   100     121.3     5.682    4.6%
 1024    68   100     116.3     0.269    0.2%
 1024    69   100     117.9     3.518    2.9%
 1024    70   100     117.5     2.221    1.8%
 1024    71   100     118.6     3.083    2.5%
 1024    72   100     116.9     0.272    0.2%
 1024    73   100     119.5     4.592    3.8%
 1024    74   100     117.3      0.27    0.2%
 1024    75   100     117.4     0.525    0.4%
 1024    76   100     118.3     3.642    3.0%
 1024    77   100     117.5     0.294    0.2%
 1024    78   100       118     0.314    0.2%
 1024    79   100     117.8     0.235    0.1%
 1024    80   100     122.6     5.682    4.6%
 1024    81   100     117.8     0.446    0.3%
 1024    82   100     120.9     5.381    4.4%
 1024    83   100     118.3     0.431    0.3%
 1024    84   100     117.8     0.408    0.3%
 1024    85   100     118.9     0.362    0.3%
 1024    86   100     122.2     5.184    4.2%
 1024    87   100       119     0.306    0.2%
 1024    88   100     118.6     0.293    0.2%
 1024    89   100     119.1     0.211    0.1%
 1024    90   100       124     5.167    4.1%
 1024    91   100     122.7     5.295    4.3%
 1024    92   100     118.8     0.272    0.2%
 1024    93   100     119.3     0.349    0.2%
 1024    94   100     120.1     1.312    1.0%
 1024    95   100     122.7     0.765    0.6%
 1024    96   100     124.2     1.942    1.5%
 1024    97   100     124.8     3.333    2.6%
 1024    98   100     120.2     0.859    0.7%
 1024    99   100     120.3     0.858    0.7%
 1024   100     1     66.23     0.151    0.2%
 1024   100     2     68.41     0.201    0.2%
 1024   100     3     70.44     0.513    0.7%
 1024   100     4      70.2     0.122    0.1%
 1024   100     5     71.08     0.142    0.1%
 1024   100     6     71.97     0.084    0.1%
 1024   100     7     72.81     0.092    0.1%
 1024   100     8     73.62      0.07    0.0%
 1024   100     9     74.26     0.137    0.1%
 1024   100    10     75.51     0.182    0.2%
 1024   100    11     75.98     0.122    0.1%
 1024   100    12     76.51     0.147    0.1%
 1024   100    13     77.26     0.129    0.1%
 1024   100    14     79.14     0.199    0.2%
 1024   100    15     78.79     0.138    0.1%
 1024   100    16     79.73     0.106    0.1%
 1024   100    17     81.31      0.08    0.0%
 1024   100    18     81.21     0.137    0.1%
 1024   100    19     82.12     0.211    0.2%
 1024   100    20     82.47      0.13    0.1%
 1024   100    21     83.63     0.091    0.1%
 1024   100    22     84.61     0.107    0.1%
 1024   100    23     85.03      0.23    0.2%
 1024   100    24     85.38      0.16    0.1%
 1024   100    25     86.26     0.127    0.1%
 1024   100    26     86.65     0.217    0.2%
 1024   100    27     87.91     0.257    0.2%
 1024   100    28     88.03     0.112    0.1%
 1024   100    29      89.1     0.182    0.2%
 1024   100    30     89.77     0.105    0.1%
 1024   100    31     90.09     0.233    0.2%
 1024   100    32     91.07     0.152    0.1%
 1024   100    33     92.11     0.156    0.1%
 1024   100    34     92.69     0.252    0.2%
 1024   100    35     93.23     0.103    0.1%
 1024   100    36     94.05     0.218    0.2%
 1024   100    37     94.38     0.135    0.1%
 1024   100    38     95.22     0.213    0.2%
 1024   100    39     96.26      0.19    0.1%
 1024   100    40     97.23     0.126    0.1%
 1024   100    41     97.17     0.107    0.1%
 1024   100    42     98.63     0.151    0.1%
 1024   100    43     98.45     0.198    0.2%
 1024   100    44     99.24     0.227    0.2%
 1024   100    45     99.71     0.183    0.1%
 1024   100    46     100.3      0.18    0.1%
 1024   100    47     100.9     0.196    0.1%
 1024   100    48     101.7     0.125    0.1%
 1024   100    49     101.6     0.143    0.1%
 1024   100    50     102.6     0.171    0.1%
 1024   100    51     102.8     0.176    0.1%
 1024   100    52       104     0.198    0.1%
 1024   100    53       104     0.219    0.2%
 1024   100    54     105.1     0.198    0.1%
 1024   100    55     105.6       0.2    0.1%
 1024   100    56     106.3     0.256    0.2%
 1024   100    57     107.2     0.368    0.3%
 1024   100    58       107     0.198    0.1%
 1024   100    59       108     0.221    0.2%
 1024   100    60     108.5     0.183    0.1%
 1024   100    61     108.9      0.22    0.2%
 1024   100    62     109.7      0.33    0.3%
 1024   100    63     109.9     0.213    0.1%
 1024   100    64     110.5     0.204    0.1%
 1024   100    65     111.3     0.236    0.2%
 1024   100    66     111.6     0.189    0.1%
 1024   100    67     112.6      0.22    0.1%
 1024   100    68     113.2     0.179    0.1%
 1024   100    69     113.9     0.129    0.1%
 1024   100    70     114.5     0.137    0.1%
 1024   100    71     115.3     0.256    0.2%
 1024   100    72     115.7     0.256    0.2%
 1024   100    73     116.3     0.194    0.1%
 1024   100    74     117.1     0.265    0.2%
 1024   100    75     117.9     0.327    0.2%
 1024   100    76     118.7     0.205    0.1%
 1024   100    77     118.5      0.17    0.1%
 1024   100    78     119.6     0.323    0.2%
 1024   100    79     120.3      0.36    0.2%
 1024   100    80     120.9     0.304    0.2%
 1024   100    81     121.1     0.265    0.2%
 1024   100    82     121.6     0.154    0.1%
 1024   100    83     122.8     0.304    0.2%
 1024   100    84     122.8     0.234    0.1%
 1024   100    85     123.6     0.204    0.1%
 1024   100    86     124.1     0.237    0.1%
 1024   100    87     124.4     0.346    0.2%
 1024   100    88       125     0.271    0.2%
 1024   100    89     125.4     0.239    0.1%
 1024   100    90       126     0.145    0.1%
 1024   100    91     126.4     0.149    0.1%
 1024   100    92     126.8     0.195    0.1%
 1024   100    93     127.5     0.094    0.0%
 1024   100    94     127.5     0.236    0.1%
 1024   100    95     128.6     0.205    0.1%
 1024   100    96     129.6      0.22    0.1%
 1024   100    97     130.2      0.16    0.1%
 1024   100    98     130.9     0.356    0.2%
 1024   100    99     123.9      5.19    4.1%
 1024   100   100     119.6     0.272    0.2%

Quality and confidence:
param     error
b             0
m         0.003
p         0.003

Model:
Time ~=    55.59
    + b        0
    + m    0.172
    + p    0.537
              µs

Reads = 4 + (0 * b) + (0 * m) + (0 * p)
Writes = 5 + (0 * b) + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""vote"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    38.34
    + m    0.293
              µs

Reads = 2 + (0 * m)
Writes = 1 + (0 * m)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    m   mean µs  sigma µs       %
    5     46.65     7.106   15.2%
    6     47.67     6.799   14.2%
    7      43.7     6.172   14.1%
    8     44.22     6.446   14.5%
    9     45.46     7.168   15.7%
   10     42.83     5.515   12.8%
   11     50.42      6.55   12.9%
   12     54.27     4.081    7.5%
   13     49.82     7.064   14.1%
   14     53.32     5.507   10.3%
   15     43.37      4.31    9.9%
   16     43.25     4.336   10.0%
   17     52.03     6.246   12.0%
   18      44.3     4.476   10.1%
   19     51.85     7.204   13.8%
   20     54.83     5.739   10.4%
   21     44.63     4.298    9.6%
   22     47.89     6.572   13.7%
   23     45.05      0.88    1.9%
   24     47.65     6.034   12.6%
   25     51.23     6.798   13.2%
   26     49.73      6.28   12.6%
   27     45.14     0.141    0.3%
   28     45.56      0.35    0.7%
   29     53.25     7.223   13.5%
   30     50.58     6.492   12.8%
   31     45.78     0.173    0.3%
   32     46.07     0.115    0.2%
   33     47.73     0.229    0.4%
   34     48.15     0.181    0.3%
   35     48.51     0.144    0.2%
   36     48.62     0.119    0.2%
   37     48.62     0.155    0.3%
   38     49.44     0.149    0.3%
   39     49.65     0.319    0.6%
   40     49.75     0.163    0.3%
   41     50.27     0.225    0.4%
   42     50.16     0.262    0.5%
   43     54.65      5.38    9.8%
   44     51.79     0.117    0.2%
   45     52.18     0.127    0.2%
   46     52.38     0.096    0.1%
   47     52.78     0.251    0.4%
   48     53.02      0.25    0.4%
   49     53.13      0.15    0.2%
   50     53.57     0.166    0.3%
   51     53.56     0.126    0.2%
   52     54.35     0.607    1.1%
   53      53.9     0.139    0.2%
   54     54.61     0.248    0.4%
   55     54.88     0.143    0.2%
   56     54.99     0.085    0.1%
   57      55.2     0.105    0.1%
   58     55.51     0.137    0.2%
   59     55.61     0.166    0.2%
   60     55.93     0.186    0.3%
   61     56.01     0.155    0.2%
   62     56.34      0.08    0.1%
   63     56.78      0.12    0.2%
   64        57     0.126    0.2%
   65     57.03     0.118    0.2%
   66     57.25     0.081    0.1%
   67     57.78     0.102    0.1%
   68     57.69     0.131    0.2%
   69      58.3     0.182    0.3%
   70     58.37     0.134    0.2%
   71     58.69     0.122    0.2%
   72     58.71     0.146    0.2%
   73     59.05     0.087    0.1%
   74     59.49     0.148    0.2%
   75     59.71     0.161    0.2%
   76     59.79     0.227    0.3%
   77     60.29     0.164    0.2%
   78     60.43     0.144    0.2%
   79     60.79     0.151    0.2%
   80     60.91      0.19    0.3%
   81     61.21     0.136    0.2%
   82     61.19     0.141    0.2%
   83     61.63     0.139    0.2%
   84     61.69       0.2    0.3%
   85     61.92     0.079    0.1%
   86     64.48     0.143    0.2%
   87     64.66     0.152    0.2%
   88     65.25     0.093    0.1%
   89     65.07      0.12    0.1%
   90     65.73     0.051    0.0%
   91     66.17     0.188    0.2%
   92     66.29     0.089    0.1%
   93     66.42     0.141    0.2%
   94      66.7     0.157    0.2%
   95     66.73     0.134    0.2%
   96     66.93     0.155    0.2%
   97     66.98     0.185    0.2%
   98     67.66     0.126    0.1%
   99     67.51     0.212    0.3%
  100     68.05      0.16    0.2%

Quality and confidence:
param     error
m         0.004

Model:
Time ~=    42.64
    + m    0.235
              µs

Reads = 2 + (0 * m)
Writes = 1 + (0 * m)
Pallet: ""pallet_collective"", Extrinsic: ""close_early_disapproved"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    50.15
    + m    0.213
    + p    0.563
              µs

Reads = 3 + (0 * m) + (0 * p)
Writes = 3 + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    m     p   mean µs  sigma µs       %
    4   100     107.1      0.25    0.2%
    5   100     106.9     0.242    0.2%
    6   100     107.2     0.151    0.1%
    7   100     107.4     0.149    0.1%
    8   100       108     0.228    0.2%
    9   100     108.2     0.375    0.3%
   10   100     108.3     0.258    0.2%
   11   100     108.3     0.405    0.3%
   12   100     108.7     0.218    0.2%
   13   100     109.1     0.183    0.1%
   14   100     109.2     0.103    0.0%
   15   100     109.6     0.238    0.2%
   16   100     109.7     0.259    0.2%
   17   100       110     0.222    0.2%
   18   100     109.9     0.274    0.2%
   19   100     110.3     0.137    0.1%
   20   100     110.5     0.188    0.1%
   21   100     110.7     0.202    0.1%
   22   100     110.3     0.251    0.2%
   23   100       111     0.267    0.2%
   24   100     111.7     0.155    0.1%
   25   100     111.9     0.127    0.1%
   26   100     111.7     0.112    0.1%
   27   100     112.4     0.401    0.3%
   28   100     112.5     0.181    0.1%
   29   100     112.2     0.163    0.1%
   30   100     112.7     0.287    0.2%
   31   100       113     0.284    0.2%
   32   100     112.7     0.185    0.1%
   33   100     116.5      1.03    0.8%
   34   100     116.1     0.455    0.3%
   35   100     113.8     0.283    0.2%
   36   100     113.7     0.214    0.1%
   37   100     114.7     0.392    0.3%
   38   100       115     0.283    0.2%
   39   100     115.3     0.078    0.0%
   40   100     115.4     0.281    0.2%
   41   100     115.4     0.255    0.2%
   42   100     116.1     0.135    0.1%
   43   100     115.8     0.196    0.1%
   44   100       116     0.171    0.1%
   45   100     116.6     0.202    0.1%
   46   100     116.7     0.183    0.1%
   47   100     116.9     0.127    0.1%
   48   100     117.2     0.142    0.1%
   49   100     117.1     0.289    0.2%
   50   100     117.6     0.167    0.1%
   51   100     117.5     0.205    0.1%
   52   100     118.4     0.169    0.1%
   53   100     118.3     0.127    0.1%
   54   100     118.1     0.218    0.1%
   55   100     118.9     0.263    0.2%
   56   100     118.9     0.285    0.2%
   57   100     119.1     0.272    0.2%
   58   100     119.9     0.189    0.1%
   59   100     119.4     0.229    0.1%
   60   100     119.9     0.204    0.1%
   61   100     119.3     0.182    0.1%
   62   100     120.3     0.166    0.1%
   63   100       120      0.35    0.2%
   64   100     120.2     0.094    0.0%
   65   100     120.6      0.21    0.1%
   66   100     120.6     0.153    0.1%
   67   100     120.7     0.232    0.1%
   68   100     121.3     0.205    0.1%
   69   100     121.2     0.251    0.2%
   70   100     121.5       0.2    0.1%
   71   100     121.7     0.331    0.2%
   72   100       122     0.306    0.2%
   73   100     122.5     0.153    0.1%
   74   100     122.4      0.19    0.1%
   75   100     122.4     0.212    0.1%
   76   100     122.6     0.242    0.1%
   77   100     122.9      0.34    0.2%
   78   100     123.8      0.24    0.1%
   79   100     123.5     0.183    0.1%
   80   100     123.5     0.185    0.1%
   81   100     123.6     0.171    0.1%
   82   100     124.2     0.167    0.1%
   83   100     125.8     1.169    0.9%
   84   100     125.6     0.919    0.7%
   85   100     124.5     0.141    0.1%
   86   100     124.3     0.175    0.1%
   87   100     124.9     0.133    0.1%
   88   100     124.5     0.186    0.1%
   89   100     125.4     0.349    0.2%
   90   100     125.6     0.186    0.1%
   91   100     125.9     0.095    0.0%
   92   100     125.8     0.288    0.2%
   93   100     125.9      0.22    0.1%
   94   100     126.8     0.309    0.2%
   95   100     126.4     0.181    0.1%
   96   100     126.4     0.218    0.1%
   97   100     126.5     0.151    0.1%
   98   100     126.5     0.213    0.1%
   99   100     127.2     0.203    0.1%
  100     1     69.68     0.184    0.2%
  100     2     70.79     0.115    0.1%
  100     3     71.93     0.169    0.2%
  100     4     72.68     0.147    0.2%
  100     5     73.28     0.079    0.1%
  100     6     74.05     0.215    0.2%
  100     7     74.71     0.154    0.2%
  100     8     75.21     0.153    0.2%
  100     9     75.63     0.173    0.2%
  100    10     75.61     0.191    0.2%
  100    11     76.77     0.125    0.1%
  100    12     78.22     0.183    0.2%
  100    13     78.15     0.088    0.1%
  100    14     78.93     0.241    0.3%
  100    15     80.25     0.128    0.1%
  100    16     80.76     0.154    0.1%
  100    17      81.7     0.088    0.1%
  100    18     81.49     0.231    0.2%
  100    19     82.78     0.152    0.1%
  100    20     82.87     0.211    0.2%
  100    21     83.27     0.102    0.1%
  100    22     84.34     0.086    0.1%
  100    23     85.09     0.115    0.1%
  100    24     85.66     0.118    0.1%
  100    25     85.91     0.138    0.1%
  100    26     86.88      0.16    0.1%
  100    27     86.69     0.083    0.0%
  100    28     87.29     0.132    0.1%
  100    29     88.54     0.138    0.1%
  100    30     89.23     0.171    0.1%
  100    31     90.04     0.113    0.1%
  100    32     90.71     0.108    0.1%
  100    33      90.8     0.157    0.1%
  100    34     92.11     0.189    0.2%
  100    35     92.55     0.176    0.1%
  100    36     93.37     0.229    0.2%
  100    37     94.06     0.224    0.2%
  100    38     94.27     0.173    0.1%
  100    39     94.91     0.209    0.2%
  100    40     96.13      0.25    0.2%
  100    41     95.95     0.197    0.2%
  100    42     96.31     0.171    0.1%
  100    43      96.9     0.209    0.2%
  100    44     97.74     0.225    0.2%
  100    45     99.01     0.119    0.1%
  100    46     98.74      0.13    0.1%
  100    47     99.41     0.155    0.1%
  100    48     100.3     0.304    0.3%
  100    49     100.6     0.203    0.2%
  100    50       101     0.093    0.0%
  100    51     101.7      0.15    0.1%
  100    52     102.2      0.26    0.2%
  100    53     102.1     0.217    0.2%
  100    54       103     0.223    0.2%
  100    55     103.8     0.104    0.1%
  100    56     104.3     0.233    0.2%
  100    57     104.3     0.128    0.1%
  100    58     105.2       0.1    0.0%
  100    59     105.6     0.188    0.1%
  100    60       106     0.181    0.1%
  100    61     106.9     0.257    0.2%
  100    62     107.4      0.27    0.2%
  100    63     107.6     0.329    0.3%
  100    64       108     0.183    0.1%
  100    65     108.7     0.253    0.2%
  100    66     109.4     0.087    0.0%
  100    67     109.7     0.115    0.1%
  100    68     110.3     0.269    0.2%
  100    69     110.8     0.279    0.2%
  100    70     111.8     0.293    0.2%
  100    71     111.8     0.177    0.1%
  100    72     112.2     0.169    0.1%
  100    73     113.3     0.104    0.0%
  100    74     114.2     0.163    0.1%
  100    75     114.4     0.187    0.1%
  100    76     114.9     0.177    0.1%
  100    77     115.2      0.22    0.1%
  100    78     115.6      0.15    0.1%
  100    79     115.7     0.121    0.1%
  100    80     116.7     0.188    0.1%
  100    81     117.5     0.106    0.0%
  100    82     117.6     0.148    0.1%
  100    83     118.1       0.2    0.1%
  100    84       119      0.18    0.1%
  100    85     119.2     0.163    0.1%
  100    86     119.5     0.227    0.1%
  100    87     120.5      0.25    0.2%
  100    88     120.5     0.128    0.1%
  100    89     121.5     0.375    0.3%
  100    90     121.7     0.227    0.1%
  100    91     122.8     0.173    0.1%
  100    92     123.2     0.293    0.2%
  100    93     123.4     0.282    0.2%
  100    94     124.1     0.083    0.0%
  100    95     124.6     0.258    0.2%
  100    96     125.3     0.141    0.1%
  100    97     125.7     0.248    0.1%
  100    98     125.2     0.213    0.1%
  100    99     126.4     0.241    0.1%
  100   100     127.3     0.209    0.1%

Quality and confidence:
param     error
m             0
p             0

Model:
Time ~=     50.1
    + m    0.217
    + p    0.563
              µs

Reads = 3 + (0 * m) + (0 * p)
Writes = 3 + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""close_early_approved"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    76.86
    + b    0.001
    + m    0.221
    + p      0.6
              µs

Reads = 5 + (0 * b) + (0 * m) + (0 * p)
Writes = 3 + (0 * b) + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m     p   mean µs  sigma µs       %
    1   100   100     157.3     0.322    0.2%
   21   100   100     157.6     0.273    0.1%
   41   100   100     159.6     0.562    0.3%
   61   100   100     157.9     0.611    0.3%
   81   100   100     158.1      0.33    0.2%
  101   100   100     158.3     0.185    0.1%
  121   100   100     157.9     0.305    0.1%
  141   100   100     158.1     0.209    0.1%
  161   100   100     158.3      0.18    0.1%
  181   100   100     159.4     0.406    0.2%
  201   100   100     159.1     0.215    0.1%
  221   100   100     159.9     0.368    0.2%
  241   100   100     159.8     0.296    0.1%
  261   100   100       159     0.396    0.2%
  281   100   100     159.6     1.113    0.6%
  301   100   100       159     0.338    0.2%
  321   100   100     159.2     0.344    0.2%
  341   100   100     158.5     0.232    0.1%
  361   100   100     160.8     1.363    0.8%
  381   100   100     159.7     0.243    0.1%
  401   100   100     159.3     0.354    0.2%
  421   100   100     159.6     0.216    0.1%
  441   100   100     159.4     0.248    0.1%
  461   100   100     159.4     0.217    0.1%
  481   100   100     160.7      0.36    0.2%
  501   100   100     160.8     0.241    0.1%
  521   100   100       160     0.289    0.1%
  541   100   100     158.7     0.387    0.2%
  561   100   100     160.6     0.282    0.1%
  581   100   100     160.6     0.144    0.0%
  601   100   100       162     0.415    0.2%
  621   100   100       161      0.33    0.2%
  641   100   100     160.3     0.284    0.1%
  661   100   100     160.5      0.28    0.1%
  681   100   100     160.7     0.342    0.2%
  701   100   100       162     0.323    0.1%
  721   100   100     161.2      0.52    0.3%
  741   100   100       161     0.141    0.0%
  761   100   100     161.1     0.279    0.1%
  781   100   100     154.1     5.295    3.4%
  801   100   100     161.7     0.292    0.1%
  821   100   100     161.9     0.359    0.2%
  841   100   100     150.9     0.378    0.2%
  861   100   100     150.7     0.427    0.2%
  881   100   100     162.5     0.341    0.2%
  901   100   100     153.5     5.141    3.3%
  921   100   100     151.1     0.413    0.2%
  941   100   100     150.2     0.554    0.3%
  961   100   100     150.1     0.344    0.2%
  981   100   100       150     0.771    0.5%
 1001   100   100     156.7     1.909    1.2%
 1021   100   100     151.2     0.272    0.1%
 1024     4   100     130.2     0.217    0.1%
 1024     5   100     129.8     0.191    0.1%
 1024     6   100       130     0.212    0.1%
 1024     7   100     130.1     0.169    0.1%
 1024     8   100     131.1     0.363    0.2%
 1024     9   100     132.1     0.245    0.1%
 1024    10   100     131.9     0.358    0.2%
 1024    11   100     132.2     0.446    0.3%
 1024    12   100     131.9     0.286    0.2%
 1024    13   100     131.6     0.312    0.2%
 1024    14   100     131.9     0.296    0.2%
 1024    15   100     131.8     0.166    0.1%
 1024    16   100     132.6      0.17    0.1%
 1024    17   100     132.7      0.25    0.1%
 1024    18   100     132.7     0.295    0.2%
 1024    19   100     133.2     0.266    0.1%
 1024    20   100       133     0.286    0.2%
 1024    21   100     133.5      0.16    0.1%
 1024    22   100     133.8     0.141    0.1%
 1024    23   100     134.1     0.298    0.2%
 1024    24   100     133.7     0.159    0.1%
 1024    25   100     134.5      0.16    0.1%
 1024    26   100     134.8     0.171    0.1%
 1024    27   100     135.4     0.364    0.2%
 1024    28   100     134.6     0.217    0.1%
 1024    29   100     135.1     0.156    0.1%
 1024    30   100     135.1     0.195    0.1%
 1024    31   100     135.6     0.267    0.1%
 1024    32   100     135.9     0.315    0.2%
 1024    33   100     137.1     0.382    0.2%
 1024    34   100     136.5     0.249    0.1%
 1024    35   100     137.4     0.231    0.1%
 1024    36   100     137.6     0.191    0.1%
 1024    37   100     137.9     0.259    0.1%
 1024    38   100       138     0.143    0.1%
 1024    39   100       138     0.132    0.0%
 1024    40   100     138.6     0.157    0.1%
 1024    41   100     137.8     0.293    0.2%
 1024    42   100     138.3     0.227    0.1%
 1024    43   100     139.4     0.114    0.0%
 1024    44   100       139     0.227    0.1%
 1024    45   100     139.1      0.14    0.1%
 1024    46   100     139.4     0.112    0.0%
 1024    47   100     139.8      0.26    0.1%
 1024    48   100       140     0.304    0.2%
 1024    49   100     140.4     0.129    0.0%
 1024    50   100     140.4     0.219    0.1%
 1024    51   100     140.8     0.321    0.2%
 1024    52   100     141.1     0.392    0.2%
 1024    53   100       141     0.174    0.1%
 1024    54   100     141.6      0.16    0.1%
 1024    55   100     141.9      0.24    0.1%
 1024    56   100     141.6     0.167    0.1%
 1024    57   100     142.2      0.31    0.2%
 1024    58   100     141.5     0.176    0.1%
 1024    59   100     142.8     0.403    0.2%
 1024    60   100     142.8     0.284    0.1%
 1024    61   100     142.3     0.302    0.2%
 1024    62   100     142.5     0.182    0.1%
 1024    63   100     143.2     0.154    0.1%
 1024    64   100     143.2     0.222    0.1%
 1024    65   100     144.1     0.246    0.1%
 1024    66   100     144.4      0.42    0.2%
 1024    67   100     144.4     0.163    0.1%
 1024    68   100       144     0.289    0.2%
 1024    69   100     144.5     0.156    0.1%
 1024    70   100       144     0.111    0.0%
 1024    71   100       145     0.213    0.1%
 1024    72   100     145.1     0.201    0.1%
 1024    73   100     145.3     0.202    0.1%
 1024    74   100     145.8      0.15    0.1%
 1024    75   100     146.1     0.423    0.2%
 1024    76   100     146.4     0.091    0.0%
 1024    77   100       146     0.154    0.1%
 1024    78   100     147.1     0.344    0.2%
 1024    79   100       147     0.292    0.1%
 1024    80   100     145.9     0.222    0.1%
 1024    81   100       147      0.48    0.3%
 1024    82   100     148.7     0.612    0.4%
 1024    83   100     147.8     0.316    0.2%
 1024    84   100     147.8     0.266    0.1%
 1024    85   100     147.9     0.227    0.1%
 1024    86   100     148.2     0.242    0.1%
 1024    87   100     148.3      0.19    0.1%
 1024    88   100     148.5     0.249    0.1%
 1024    89   100     149.2     0.035    0.0%
 1024    90   100     148.9     0.226    0.1%
 1024    91   100     148.9     0.227    0.1%
 1024    92   100     149.1     0.244    0.1%
 1024    93   100     149.5     0.401    0.2%
 1024    94   100     149.8     0.276    0.1%
 1024    95   100     149.9     0.354    0.2%
 1024    96   100     150.1     0.428    0.2%
 1024    97   100     150.5      0.22    0.1%
 1024    98   100     150.4     0.248    0.1%
 1024    99   100     150.8     0.231    0.1%
 1024   100     1     100.4     0.266    0.2%
 1024   100     2     102.1     0.204    0.1%
 1024   100     3     103.6     0.177    0.1%
 1024   100     4     104.2     0.123    0.1%
 1024   100     5     104.9     0.185    0.1%
 1024   100     6     105.7     0.238    0.2%
 1024   100     7     107.9     0.172    0.1%
 1024   100     8     107.9     0.191    0.1%
 1024   100     9     108.3      0.15    0.1%
 1024   100    10     108.6     0.267    0.2%
 1024   100    11     109.1     0.205    0.1%
 1024   100    12     111.5     0.126    0.1%
 1024   100    13     111.3     0.382    0.3%
 1024   100    14     112.9     0.268    0.2%
 1024   100    15     113.9     0.191    0.1%
 1024   100    16     113.6      0.17    0.1%
 1024   100    17     113.7     0.178    0.1%
 1024   100    18     115.7     0.268    0.2%
 1024   100    19     114.7     0.175    0.1%
 1024   100    20     116.8     0.332    0.2%
 1024   100    21     117.2      0.14    0.1%
 1024   100    22       118     0.117    0.0%
 1024   100    23     118.3     0.201    0.1%
 1024   100    24     119.1     0.155    0.1%
 1024   100    25     119.6     0.288    0.2%
 1024   100    26     119.8     0.191    0.1%
 1024   100    27     121.1     0.266    0.2%
 1024   100    28     121.4     0.165    0.1%
 1024   100    29     120.6     0.143    0.1%
 1024   100    30     122.5     0.294    0.2%
 1024   100    31     124.6      0.25    0.2%
 1024   100    32     124.5      0.25    0.2%
 1024   100    33     125.5     0.277    0.2%
 1024   100    34     125.6     0.354    0.2%
 1024   100    35     126.5     0.167    0.1%
 1024   100    36     127.6     0.165    0.1%
 1024   100    37     127.5      0.37    0.2%
 1024   100    38     128.8     0.105    0.0%
 1024   100    39     129.4     0.288    0.2%
 1024   100    40     130.5     0.251    0.1%
 1024   100    41     131.6     0.218    0.1%
 1024   100    42     130.9     0.239    0.1%
 1024   100    43     134.6     2.246    1.6%
 1024   100    44     133.4     1.005    0.7%
 1024   100    45     133.8     0.189    0.1%
 1024   100    46     133.4     0.284    0.2%
 1024   100    47     134.3     0.165    0.1%
 1024   100    48     134.5     0.217    0.1%
 1024   100    49       135     0.148    0.1%
 1024   100    50     135.6     0.301    0.2%
 1024   100    51     137.2     0.207    0.1%
 1024   100    52       137     0.388    0.2%
 1024   100    53       138     0.302    0.2%
 1024   100    54     136.2     0.142    0.1%
 1024   100    55     139.5     0.138    0.0%
 1024   100    56     139.4     0.188    0.1%
 1024   100    57     139.3     0.289    0.2%
 1024   100    58     139.8     0.262    0.1%
 1024   100    59     140.4     0.198    0.1%
 1024   100    60     142.2     0.187    0.1%
 1024   100    61     142.3     0.228    0.1%
 1024   100    62     142.5       0.3    0.2%
 1024   100    63       143     0.221    0.1%
 1024   100    64     143.2     0.242    0.1%
 1024   100    65     144.2     0.321    0.2%
 1024   100    66     144.7     0.316    0.2%
 1024   100    67       145     0.275    0.1%
 1024   100    68     145.7     0.118    0.0%
 1024   100    69     146.2     0.202    0.1%
 1024   100    70     147.1     0.232    0.1%
 1024   100    71     147.1      0.35    0.2%
 1024   100    72       148     0.361    0.2%
 1024   100    73     148.6     0.161    0.1%
 1024   100    74     149.2     0.256    0.1%
 1024   100    75     149.4     0.254    0.1%
 1024   100    76     150.2     0.279    0.1%
 1024   100    77     149.6     0.168    0.1%
 1024   100    78     151.1      0.41    0.2%
 1024   100    79     151.6     0.306    0.2%
 1024   100    80     152.2     0.275    0.1%
 1024   100    81       154     0.386    0.2%
 1024   100    82     153.4     0.227    0.1%
 1024   100    83     153.6     0.223    0.1%
 1024   100    84     155.1     0.461    0.2%
 1024   100    85     155.2     0.374    0.2%
 1024   100    86     156.6     0.299    0.1%
 1024   100    87     156.5     0.289    0.1%
 1024   100    88     157.4     0.217    0.1%
 1024   100    89       157     0.177    0.1%
 1024   100    90     157.8      0.22    0.1%
 1024   100    91     158.2     0.257    0.1%
 1024   100    92     161.2     1.478    0.9%
 1024   100    93     161.9     1.474    0.9%
 1024   100    94     160.4     0.754    0.4%
 1024   100    95     149.3     0.407    0.2%
 1024   100    96     149.5     0.172    0.1%
 1024   100    97     150.4       0.3    0.1%
 1024   100    98     150.6     0.171    0.1%
 1024   100    99     155.6     5.004    3.2%
 1024   100   100     150.8      0.28    0.1%

Quality and confidence:
param     error
b             0
m         0.003
p         0.002

Model:
Time ~=    80.86
    + b        0
    + m    0.308
    + p    0.486
              µs

Reads = 5 + (0 * b) + (0 * m) + (0 * p)
Writes = 3 + (0 * b) + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""close_disapproved"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.66
    + m    0.214
    + p    0.583
              µs

Reads = 4 + (0 * m) + (0 * p)
Writes = 3 + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    m     p   mean µs  sigma µs       %
    4   100     112.5     0.256    0.2%
    5   100     112.2     0.156    0.1%
    6   100     113.2     0.196    0.1%
    7   100     113.3     0.154    0.1%
    8   100     113.4     0.238    0.2%
    9   100     113.9      0.32    0.2%
   10   100     113.2     0.187    0.1%
   11   100     113.8     0.135    0.1%
   12   100     114.5      0.12    0.1%
   13   100     114.5     0.262    0.2%
   14   100     114.9     0.279    0.2%
   15   100     114.7     0.146    0.1%
   16   100     115.5     0.299    0.2%
   17   100     115.1     0.187    0.1%
   18   100     115.3     0.266    0.2%
   19   100     115.6     0.146    0.1%
   20   100     115.8      0.22    0.1%
   21   100     116.6     0.197    0.1%
   22   100     116.4     0.111    0.0%
   23   100     116.9     0.331    0.2%
   24   100     116.8     0.251    0.2%
   25   100     117.5     0.235    0.2%
   26   100     117.2     0.211    0.1%
   27   100     117.4     0.237    0.2%
   28   100     117.8     0.253    0.2%
   29   100     118.3     0.195    0.1%
   30   100     118.4     0.202    0.1%
   31   100     118.5     0.127    0.1%
   32   100     118.7     0.122    0.1%
   33   100     118.8     0.283    0.2%
   34   100     119.8     0.239    0.1%
   35   100     119.4     0.327    0.2%
   36   100       120     0.342    0.2%
   37   100     120.3     0.174    0.1%
   38   100     120.5     0.236    0.1%
   39   100     120.6     0.232    0.1%
   40   100     121.1     0.254    0.2%
   41   100     120.4     0.281    0.2%
   42   100     121.5     0.303    0.2%
   43   100     121.5      0.17    0.1%
   44   100     121.8     0.226    0.1%
   45   100     122.1     0.223    0.1%
   46   100     122.7     0.198    0.1%
   47   100     122.2     0.194    0.1%
   48   100     123.2     0.177    0.1%
   49   100     123.2     0.282    0.2%
   50   100     123.4     0.256    0.2%
   51   100     123.8     0.349    0.2%
   52   100     123.7     0.212    0.1%
   53   100       124     0.227    0.1%
   54   100     124.5      0.36    0.2%
   55   100     124.8     0.205    0.1%
   56   100     124.9     0.234    0.1%
   57   100     125.7     1.044    0.8%
   58   100     125.7     0.243    0.1%
   59   100     125.2     0.176    0.1%
   60   100     125.5     0.207    0.1%
   61   100     125.7     0.276    0.2%
   62   100     125.9     0.273    0.2%
   63   100     126.3     0.063    0.0%
   64   100     126.5      0.28    0.2%
   65   100     126.5     0.312    0.2%
   66   100     126.5     0.204    0.1%
   67   100     126.6     0.287    0.2%
   68   100     126.6     0.214    0.1%
   69   100     126.7     0.247    0.1%
   70   100     126.8      0.24    0.1%
   71   100     127.3      0.29    0.2%
   72   100     127.1     0.165    0.1%
   73   100     126.9     0.284    0.2%
   74   100     128.1     0.216    0.1%
   75   100     127.8     0.104    0.0%
   76   100     128.1     0.175    0.1%
   77   100     128.5     0.329    0.2%
   78   100     128.9     0.289    0.2%
   79   100       128     0.134    0.1%
   80   100       129     0.205    0.1%
   81   100     129.4     0.191    0.1%
   82   100     129.8     0.285    0.2%
   83   100     129.6     0.162    0.1%
   84   100     130.2      0.28    0.2%
   85   100     130.3     0.141    0.1%
   86   100     130.7      0.19    0.1%
   87   100     129.7      0.09    0.0%
   88   100       131     0.331    0.2%
   89   100     131.2     0.222    0.1%
   90   100     131.5     0.112    0.0%
   91   100     131.5     0.321    0.2%
   92   100     131.7     0.236    0.1%
   93   100     131.6     0.085    0.0%
   94   100     131.9      0.16    0.1%
   95   100     131.1     0.166    0.1%
   96   100     132.3     0.136    0.1%
   97   100     132.5       0.1    0.0%
   98   100     132.3     0.121    0.0%
   99   100     132.4     0.193    0.1%
  100     1     74.15     0.123    0.1%
  100     2     76.07     0.171    0.2%
  100     3     76.78     0.128    0.1%
  100     4     78.09     0.131    0.1%
  100     5     77.97     0.291    0.3%
  100     6     78.75     0.187    0.2%
  100     7     79.87     0.117    0.1%
  100     8     80.69     0.174    0.2%
  100     9     81.11     0.126    0.1%
  100    10     81.64     0.163    0.1%
  100    11     82.51     0.121    0.1%
  100    12     83.47     0.174    0.2%
  100    13     84.06     0.167    0.1%
  100    14     84.12     0.148    0.1%
  100    15     85.46     0.257    0.3%
  100    16      85.7     0.132    0.1%
  100    17        87     0.151    0.1%
  100    18      87.1     0.155    0.1%
  100    19     87.68     0.156    0.1%
  100    20     88.55     0.184    0.2%
  100    21     88.67     0.204    0.2%
  100    22     89.95     0.124    0.1%
  100    23     90.26     0.212    0.2%
  100    24     90.46     0.114    0.1%
  100    25     91.92     0.143    0.1%
  100    26     91.92     0.206    0.2%
  100    27     91.75     0.183    0.1%
  100    28     92.45     0.151    0.1%
  100    29     93.84      0.14    0.1%
  100    30     94.57     0.163    0.1%
  100    31     95.12     0.153    0.1%
  100    32     96.07     0.194    0.2%
  100    33     96.45     0.193    0.2%
  100    34     97.88     0.199    0.2%
  100    35     98.17      0.15    0.1%
  100    36     98.95     0.185    0.1%
  100    37     101.6     1.418    1.3%
  100    38     101.1     0.234    0.2%
  100    39     101.4     0.136    0.1%
  100    40     102.1     0.172    0.1%
  100    41     102.3     0.238    0.2%
  100    42     102.6     0.288    0.2%
  100    43       103     0.186    0.1%
  100    44     103.4     0.103    0.0%
  100    45     104.7     0.241    0.2%
  100    46     104.7     0.287    0.2%
  100    47     105.4     0.388    0.3%
  100    48     105.8     0.235    0.2%
  100    49     106.3     0.185    0.1%
  100    50     107.1     0.256    0.2%
  100    51     107.9     0.199    0.1%
  100    52       108     0.155    0.1%
  100    53     108.3     0.297    0.2%
  100    54     108.3     0.237    0.2%
  100    55     108.9     0.116    0.1%
  100    56     109.6     0.175    0.1%
  100    57     109.8     0.197    0.1%
  100    58     110.2     0.206    0.1%
  100    59     111.2     0.209    0.1%
  100    60     111.6     0.084    0.0%
  100    61     111.8     0.133    0.1%
  100    62     112.8     0.177    0.1%
  100    63     113.7     0.201    0.1%
  100    64     114.3     0.286    0.2%
  100    65     115.1     0.234    0.2%
  100    66     115.7     0.342    0.2%
  100    67       116     0.381    0.3%
  100    68     117.1      0.31    0.2%
  100    69       117     0.131    0.1%
  100    70     117.7     0.178    0.1%
  100    71     118.5      0.18    0.1%
  100    72     118.9     0.175    0.1%
  100    73     120.6     0.131    0.1%
  100    74     120.6     0.179    0.1%
  100    75     120.8     0.266    0.2%
  100    76     121.2     0.196    0.1%
  100    77     121.8      0.22    0.1%
  100    78     122.3     0.187    0.1%
  100    79     122.5     0.158    0.1%
  100    80     123.8     0.376    0.3%
  100    81     123.9     0.149    0.1%
  100    82     124.1     0.222    0.1%
  100    83     124.9     0.221    0.1%
  100    84     125.8       0.8    0.6%
  100    85     125.8      0.16    0.1%
  100    86     126.5     0.198    0.1%
  100    87     127.2     0.279    0.2%
  100    88     127.4     0.199    0.1%
  100    89     127.9     0.195    0.1%
  100    90     127.8     0.293    0.2%
  100    91     128.8     0.357    0.2%
  100    92     131.7     0.971    0.7%
  100    93     132.5     0.151    0.1%
  100    94     131.2     0.774    0.5%
  100    95     130.6     0.093    0.0%
  100    96       132     0.453    0.3%
  100    97     132.4     0.198    0.1%
  100    98     132.5     0.315    0.2%
  100    99     133.3     0.186    0.1%
  100   100       133     0.322    0.2%

Quality and confidence:
param     error
m             0
p             0

Model:
Time ~=    54.31
    + m    0.228
    + p    0.573
              µs

Reads = 4 + (0 * m) + (0 * p)
Writes = 3 + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""close_approved"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    83.11
    + b        0
    + m    0.221
    + p    0.607
              µs

Reads = 6 + (0 * b) + (0 * m) + (0 * p)
Writes = 3 + (0 * b) + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m     p   mean µs  sigma µs       %
    1   100   100       163      0.36    0.2%
   21   100   100     162.2     0.236    0.1%
   41   100   100     164.1     0.337    0.2%
   61   100   100     163.1     0.279    0.1%
   81   100   100     163.9     0.276    0.1%
  101   100   100     164.4     0.371    0.2%
  121   100   100     165.2     0.304    0.1%
  141   100   100     164.4     0.302    0.1%
  161   100   100     164.8     0.264    0.1%
  181   100   100       166     0.528    0.3%
  201   100   100     165.8     0.251    0.1%
  221   100   100     167.1     0.772    0.4%
  241   100   100     166.4     0.178    0.1%
  261   100   100     165.6     0.389    0.2%
  281   100   100     165.3     0.365    0.2%
  301   100   100     165.5     0.581    0.3%
  321   100   100       166     0.303    0.1%
  341   100   100     165.1     0.332    0.2%
  361   100   100     165.4     0.325    0.1%
  381   100   100     166.6     0.253    0.1%
  401   100   100     165.3     0.251    0.1%
  421   100   100     166.9     0.254    0.1%
  441   100   100     165.8     0.382    0.2%
  461   100   100     166.2     0.267    0.1%
  481   100   100     167.9     0.354    0.2%
  501   100   100     167.3     0.473    0.2%
  521   100   100     166.6     0.315    0.1%
  541   100   100       164     0.355    0.2%
  561   100   100     166.5     0.289    0.1%
  581   100   100       167     0.534    0.3%
  601   100   100     168.1     0.256    0.1%
  621   100   100     167.8     0.261    0.1%
  641   100   100     166.7     0.373    0.2%
  661   100   100     167.6     0.477    0.2%
  681   100   100     168.1       0.2    0.1%
  701   100   100     169.4     0.417    0.2%
  721   100   100     168.6     0.287    0.1%
  741   100   100     168.4      0.31    0.1%
  761   100   100     167.4     0.359    0.2%
  781   100   100     157.3     0.569    0.3%
  801   100   100     166.5     2.253    1.3%
  821   100   100     155.7     0.291    0.1%
  841   100   100     157.2     0.357    0.2%
  861   100   100     157.5     0.349    0.2%
  881   100   100     160.4     4.279    2.6%
  901   100   100     156.1     0.329    0.2%
  921   100   100     159.9     3.756    2.3%
  941   100   100     156.4     0.292    0.1%
  961   100   100     156.7      0.97    0.6%
  981   100   100     155.9     0.225    0.1%
 1001   100   100     156.2     0.372    0.2%
 1021   100   100     156.7     0.576    0.3%
 1024     4   100     135.7     0.142    0.1%
 1024     5   100       136     0.274    0.2%
 1024     6   100     135.9     0.494    0.3%
 1024     7   100       136     0.227    0.1%
 1024     8   100     136.2     0.371    0.2%
 1024     9   100     136.7     0.246    0.1%
 1024    10   100     136.8     0.224    0.1%
 1024    11   100     137.1     0.305    0.2%
 1024    12   100       137     0.214    0.1%
 1024    13   100     137.6     0.272    0.1%
 1024    14   100     137.5     0.196    0.1%
 1024    15   100     137.4     0.431    0.3%
 1024    16   100     137.9      0.26    0.1%
 1024    17   100     137.8     0.233    0.1%
 1024    18   100     138.4     0.323    0.2%
 1024    19   100     138.6     0.393    0.2%
 1024    20   100     138.2      0.36    0.2%
 1024    21   100     139.2     0.331    0.2%
 1024    22   100     139.2     0.277    0.1%
 1024    23   100     139.5     0.403    0.2%
 1024    24   100       140     0.427    0.3%
 1024    25   100     139.9     0.253    0.1%
 1024    26   100     139.5      0.27    0.1%
 1024    27   100     140.5     0.339    0.2%
 1024    28   100     140.6     0.374    0.2%
 1024    29   100     140.1     0.147    0.1%
 1024    30   100     141.3     0.253    0.1%
 1024    31   100     140.8     0.231    0.1%
 1024    32   100     140.6     0.176    0.1%
 1024    33   100     141.4     0.444    0.3%
 1024    34   100     142.9     0.542    0.3%
 1024    35   100     142.6     0.271    0.1%
 1024    36   100     142.9     0.318    0.2%
 1024    37   100     143.9     0.309    0.2%
 1024    38   100     143.3     0.342    0.2%
 1024    39   100     144.3     0.312    0.2%
 1024    40   100     143.8     0.351    0.2%
 1024    41   100     145.1     0.759    0.5%
 1024    42   100     145.2     0.517    0.3%
 1024    43   100     145.7     1.886    1.2%
 1024    44   100       145      0.38    0.2%
 1024    45   100     145.4     0.354    0.2%
 1024    46   100     144.8     0.245    0.1%
 1024    47   100     145.7     0.377    0.2%
 1024    48   100       146     0.331    0.2%
 1024    49   100     146.3     0.207    0.1%
 1024    50   100     146.3     0.272    0.1%
 1024    51   100     146.9     0.271    0.1%
 1024    52   100     147.7     0.764    0.5%
 1024    53   100     147.9     0.876    0.5%
 1024    54   100       149     1.902    1.2%
 1024    55   100     151.2     1.817    1.2%
 1024    56   100     147.9     0.248    0.1%
 1024    57   100     147.7     0.361    0.2%
 1024    58   100     148.1     0.196    0.1%
 1024    59   100     148.6     0.389    0.2%
 1024    60   100     149.6     0.213    0.1%
 1024    61   100     149.2     0.317    0.2%
 1024    62   100     149.6     0.218    0.1%
 1024    63   100     149.3     0.307    0.2%
 1024    64   100     149.7     0.219    0.1%
 1024    65   100     149.2     0.339    0.2%
 1024    66   100     149.5     0.254    0.1%
 1024    67   100     149.9     0.251    0.1%
 1024    68   100       150     0.261    0.1%
 1024    69   100     150.1     0.331    0.2%
 1024    70   100     149.9     0.145    0.0%
 1024    71   100     150.3     0.325    0.2%
 1024    72   100     151.1     0.268    0.1%
 1024    73   100     150.7     0.211    0.1%
 1024    74   100     150.8     0.218    0.1%
 1024    75   100     151.3     0.386    0.2%
 1024    76   100     150.9      0.08    0.0%
 1024    77   100     151.6     0.265    0.1%
 1024    78   100     151.8     0.458    0.3%
 1024    79   100     151.7     0.343    0.2%
 1024    80   100     152.4     0.374    0.2%
 1024    81   100     152.3     0.296    0.1%
 1024    82   100     152.6     0.425    0.2%
 1024    83   100     152.8     0.252    0.1%
 1024    84   100     153.8     0.557    0.3%
 1024    85   100     153.1     0.255    0.1%
 1024    86   100     153.6     0.212    0.1%
 1024    87   100     152.6     0.215    0.1%
 1024    88   100     153.7     0.382    0.2%
 1024    89   100     154.1     0.207    0.1%
 1024    90   100     154.5     0.208    0.1%
 1024    91   100     154.4     0.274    0.1%
 1024    92   100     154.2     0.282    0.1%
 1024    93   100     154.7       0.3    0.1%
 1024    94   100     154.7     0.347    0.2%
 1024    95   100     159.1      0.51    0.3%
 1024    96   100     156.3     0.439    0.2%
 1024    97   100     156.2     0.388    0.2%
 1024    98   100     156.1     0.327    0.2%
 1024    99   100     156.1     0.383    0.2%
 1024   100     1       105     0.251    0.2%
 1024   100     2     107.8     0.176    0.1%
 1024   100     3     108.5     0.141    0.1%
 1024   100     4     109.2     0.151    0.1%
 1024   100     5     110.1     0.189    0.1%
 1024   100     6     110.9     0.163    0.1%
 1024   100     7     112.2     0.079    0.0%
 1024   100     8     113.3     0.284    0.2%
 1024   100     9     112.9     0.251    0.2%
 1024   100    10     113.5     0.177    0.1%
 1024   100    11     114.7     0.168    0.1%
 1024   100    12     116.2     0.172    0.1%
 1024   100    13     115.9     0.345    0.2%
 1024   100    14     118.1     0.245    0.2%
 1024   100    15     118.7     0.114    0.0%
 1024   100    16     117.5     0.286    0.2%
 1024   100    17       119     0.149    0.1%
 1024   100    18     120.8     0.253    0.2%
 1024   100    19     119.7     0.206    0.1%
 1024   100    20     121.7     0.192    0.1%
 1024   100    21     122.9     0.254    0.2%
 1024   100    22     123.2     0.214    0.1%
 1024   100    23     123.6     0.169    0.1%
 1024   100    24     124.7     0.328    0.2%
 1024   100    25     124.8      0.08    0.0%
 1024   100    26     124.8     0.145    0.1%
 1024   100    27     125.9      0.31    0.2%
 1024   100    28     126.9     0.176    0.1%
 1024   100    29     126.1     0.167    0.1%
 1024   100    30     128.2     0.323    0.2%
 1024   100    31     129.9     0.325    0.2%
 1024   100    32     129.5     0.226    0.1%
 1024   100    33     130.6     0.133    0.1%
 1024   100    34     131.3      0.19    0.1%
 1024   100    35     131.8     0.327    0.2%
 1024   100    36     132.6     0.356    0.2%
 1024   100    37     133.1     0.304    0.2%
 1024   100    38     133.9     0.256    0.1%
 1024   100    39     135.4      0.23    0.1%
 1024   100    40     136.3     0.462    0.3%
 1024   100    41     137.3     0.311    0.2%
 1024   100    42       136      0.28    0.2%
 1024   100    43     137.8     0.163    0.1%
 1024   100    44       138     0.236    0.1%
 1024   100    45     138.2     0.253    0.1%
 1024   100    46     138.6     0.334    0.2%
 1024   100    47     139.5      0.42    0.3%
 1024   100    48     139.9     0.224    0.1%
 1024   100    49       141     0.282    0.1%
 1024   100    50     141.1     0.282    0.1%
 1024   100    51     142.9     0.219    0.1%
 1024   100    52     142.5     0.295    0.2%
 1024   100    53       143     0.291    0.2%
 1024   100    54       142     0.254    0.1%
 1024   100    55     144.9     0.217    0.1%
 1024   100    56     145.1     0.172    0.1%
 1024   100    57     144.5     0.296    0.2%
 1024   100    58     145.1     0.304    0.2%
 1024   100    59     146.3     0.313    0.2%
 1024   100    60     147.3     0.369    0.2%
 1024   100    61     146.8     0.189    0.1%
 1024   100    62     147.6     0.149    0.1%
 1024   100    63     148.6      0.29    0.1%
 1024   100    64     148.8     0.456    0.3%
 1024   100    65     149.7      0.41    0.2%
 1024   100    66     150.5     0.421    0.2%
 1024   100    67     150.7     0.323    0.2%
 1024   100    68     151.2     0.266    0.1%
 1024   100    69     152.2     0.353    0.2%
 1024   100    70     151.8     0.472    0.3%
 1024   100    71     153.1      0.36    0.2%
 1024   100    72     154.1     0.266    0.1%
 1024   100    73     154.2     0.248    0.1%
 1024   100    74     154.5     0.426    0.2%
 1024   100    75     155.7     0.219    0.1%
 1024   100    76     155.5     0.302    0.1%
 1024   100    77     156.9     0.273    0.1%
 1024   100    78     157.3     0.322    0.2%
 1024   100    79     157.7     0.294    0.1%
 1024   100    80     158.3     0.303    0.1%
 1024   100    81     160.3     0.467    0.2%
 1024   100    82     158.7     0.259    0.1%
 1024   100    83     159.4     0.241    0.1%
 1024   100    84     160.9     0.372    0.2%
 1024   100    85     161.1     0.345    0.2%
 1024   100    86     162.3     0.457    0.2%
 1024   100    87     162.2     0.547    0.3%
 1024   100    88     163.5     0.473    0.2%
 1024   100    89     163.2     0.323    0.1%
 1024   100    90     163.1     0.145    0.0%
 1024   100    91     163.5     0.331    0.2%
 1024   100    92       163     3.042    1.8%
 1024   100    93     161.9     4.534    2.7%
 1024   100    94       154     0.303    0.1%
 1024   100    95     155.1     0.279    0.1%
 1024   100    96     154.9     0.173    0.1%
 1024   100    97     157.1     0.367    0.2%
 1024   100    98     157.4     0.386    0.2%
 1024   100    99     157.8     0.947    0.6%
 1024   100   100     156.9     0.391    0.2%

Quality and confidence:
param     error
b             0
m         0.003
p         0.002

Model:
Time ~=    87.89
    + b        0
    + m    0.301
    + p    0.487
              µs

Reads = 6 + (0 * b) + (0 * m) + (0 * p)
Writes = 3 + (0 * b) + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""disapprove_proposal"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.06
    + p    0.581
              µs

Reads = 1 + (0 * p)
Writes = 3 + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    p   mean µs  sigma µs       %
    1     27.77     0.107    0.3%
    2      29.2     0.096    0.3%
    3     30.04     0.093    0.3%
    4     30.62     0.084    0.2%
    5     31.36     0.107    0.3%
    6     32.18      0.09    0.2%
    7     32.82     0.086    0.2%
    8     33.33      0.09    0.2%
    9     34.04     0.067    0.1%
   10     34.86     0.082    0.2%
   11     35.44      0.08    0.2%
   12     36.45     0.061    0.1%
   13     36.92       0.1    0.2%
   14     37.91     0.078    0.2%
   15      38.3     0.095    0.2%
   16     39.36     0.095    0.2%
   17     40.23     0.173    0.4%
   18     40.34     0.079    0.1%
   19     41.14     0.094    0.2%
   20     41.86     0.122    0.2%
   21     42.16      0.15    0.3%
   22     42.82     0.047    0.1%
   23      43.5     0.088    0.2%
   24     44.06     0.088    0.1%
   25     44.84     0.161    0.3%
   26     45.33     0.097    0.2%
   27     45.76     0.137    0.2%
   28     46.07     0.112    0.2%
   29     46.93     0.133    0.2%
   30     47.59     0.088    0.1%
   31     48.37     0.158    0.3%
   32     49.14     0.171    0.3%
   33     50.03     0.071    0.1%
   34     50.93     0.072    0.1%
   35     51.24     0.065    0.1%
   36     52.05      0.04    0.0%
   37     52.74     0.096    0.1%
   38     53.02     0.072    0.1%
   39     53.61     0.085    0.1%
   40     54.08     0.059    0.1%
   41     54.78     0.045    0.0%
   42      55.5     0.113    0.2%
   43     55.76     0.093    0.1%
   44     56.59     0.144    0.2%
   45     56.89     0.201    0.3%
   46     57.33     0.136    0.2%
   47     58.06     0.155    0.2%
   48     58.32     0.131    0.2%
   49     58.97     0.084    0.1%
   50     59.74     0.112    0.1%
   51      60.2     0.141    0.2%
   52     60.64     0.137    0.2%
   53     61.41     0.216    0.3%
   54     61.99     0.073    0.1%
   55     62.51     0.209    0.3%
   56     63.28     0.106    0.1%
   57      63.4     0.104    0.1%
   58     64.11     0.125    0.1%
   59     64.45     0.176    0.2%
   60     65.09      0.11    0.1%
   61     65.59     0.118    0.1%
   62     66.43     0.273    0.4%
   63     66.79     0.184    0.2%
   64     67.06     0.097    0.1%
   65     68.17     0.244    0.3%
   66     68.79     0.216    0.3%
   67     68.73     0.163    0.2%
   68     69.77     0.166    0.2%
   69     69.98     0.221    0.3%
   70     70.74     0.117    0.1%
   71     71.26      0.18    0.2%
   72     72.36     0.209    0.2%
   73     72.46     0.182    0.2%
   74     72.69     0.105    0.1%
   75      73.7     0.158    0.2%
   76     73.86     0.233    0.3%
   77     74.64     0.164    0.2%
   78      75.4     0.265    0.3%
   79     75.65     0.143    0.1%
   80     76.36     0.245    0.3%
   81     76.72     0.094    0.1%
   82     77.41     0.328    0.4%
   83     77.95     0.133    0.1%
   84     78.38     0.161    0.2%
   85     79.18     0.203    0.2%
   86     79.53     0.188    0.2%
   87     80.32      0.22    0.2%
   88     80.58     0.213    0.2%
   89     81.06     0.105    0.1%
   90     81.69      0.15    0.1%
   91     84.15     1.724    2.0%
   92      83.2     0.436    0.5%
   93     84.06     0.553    0.6%
   94     84.27     0.351    0.4%
   95     84.96     0.321    0.3%
   96     79.44     5.506    6.9%
   97      78.8     5.528    7.0%
   98     76.26     3.193    4.1%
   99     74.69      0.32    0.4%
  100     75.57     0.269    0.3%

Quality and confidence:
param     error
p         0.002

Model:
Time ~=    30.66
    + p    0.559
              µs

Reads = 1 + (0 * p)
Writes = 3 + (0 * p)


 </details>",8522,2021-04-03T19:14:39Z,0
721,shawntabrizi,I think https://github.com/paritytech/substrate/pull/8525 is better,8522,2021-04-03T21:22:03Z,0
722,cla-bot-2021[bot],"User @jakehemmerle, please sign the CLA [here](https://cla.parity.io/sign_cla/8061957/3).",8764,2021-05-08T18:13:46Z,0
723,burdges,"You still have the failing test case?  If I recall, it looked like a case of using the identity as a key, likely zeros do not represent the identity but zebbra pushes them into being the identity or something.  Where was it?",8764,2021-05-10T18:57:14Z,0
724,jakehemmerle,"> You still have the failing test case? If I recall, it looked like a case of using the identity as a key, likely zeros do not represent the identity but zebbra pushes them into being the identity or something. Where was it?

yes it's still failing. Failing case is `batching_works` in `sp-io`.

I didn't realize your identity key matrix message was from reading the code; I thought it was just an example!",8764,2021-05-10T19:40:07Z,0
725,burdges,"There is a multiplication by the cofactor of 8 in https://github.com/ZcashFoundation/ed25519-zebra/blob/main/src/batch.rs#L212 which turns points of small order into the identity, and makes the batch and non-batch verification agree.  I believe a bunch of zeros turns into a curve point of small order, which the multiplication by A_coeffs and R_coeffs preserves, and then zeros in the field turn into zero too.  ",8764,2021-05-11T20:58:43Z,0
726,jakehemmerle,"Tests fixed! Should close #6618 and #8055.

One question: sr25519 (as did ed25519-dalek) throws an error when verifying identity arguments, while ed25519-zebra is fine with verifying identities. I've changed the test to expect this behavior; is this fine or will these differences be an issue in practice?",8764,2021-05-23T20:07:09Z,0
727,burdges,"It depends what you mean by identity.  Ristretto has the same identity as [Ed25519](https://doc.dalek.rs/src/curve25519_dalek/edwards.rs.html#300), but serializes it as `[0u8; 32]`.  I think schnorrkel would verify an identity signature, except `[0u8; 64]` triggers [`SignatureError::NotMarkedSchnorrkel`](https://github.com/w3f/schnorrkel/blob/master/src/sign.rs#L129). 

[Ed25519](https://doc.dalek.rs/src/curve25519_dalek/edwards.rs.html#276) serializes its identity not as `[0u8; 32]`.  Yet, `[0u8; 32]` lies on the curve in the subgroup of order 8, so likely 1 in 8 messages should validate under the zero signature and public key.",8764,2021-05-24T18:23:24Z,0
728,burdges,"As a rule, I would not care too much how we handle public keys consisting of zero bytes, except we avoid some code complexity if single and batch verification agree, which is the point here.",8764,2021-05-24T18:25:24Z,0
729,jakehemmerle,I swapped verifications using zero keys with signatures from another keypair. This should fix the above issues mentioned by Jeff.,8764,2021-05-26T14:20:07Z,0
730,burdges,"I think https://github.com/paritytech/substrate/blob/d717bdb9b432cb2295fddc8505665698e9cd3397/primitives/io/src/lib.rs#L1542 likely fails in deserialization, which works fine, but maybe duplicate it with a test that fails like https://github.com/paritytech/substrate/blob/d717bdb9b432cb2295fddc8505665698e9cd3397/primitives/io/src/lib.rs#L1588 does.  ",8764,2021-05-27T10:20:08Z,0
731,burdges,"LGTM modulo adding one test.  :) 

We'll get someone else from parity to review though. ",8764,2021-05-27T10:21:03Z,0
732,jakehemmerle,Sweet; final test fixed!,8764,2021-05-27T14:04:26Z,0
733,bkchr,@jakehemmerle can you please merge master,8764,2021-06-13T12:11:36Z,0
734,jakehemmerle,@bkchr merged,8764,2021-06-13T19:27:32Z,0
735,bkchr,"Sorry for the late reply, but the CI wasn't happy about your merge.",8764,2021-06-23T08:38:41Z,0
736,jakehemmerle,Looks like the lockfile. Will update shortly,8764,2021-06-23T18:35:42Z,0
737,jakehemmerle,"@bkchr I fixed the lockfile and it's now passing the test-linux-stable-int build, but still failing the test-linux-stable due to a pallet_ui.rs test. I just spend almost two hours trying to understand why it's failing, but I see other test-linux-stable builds passing and I don't have enough context to know where to look to fix the error. I see a new trait_constant_valid_bounds.rs test has been added to pallet_ui by Andrew two weeks ago, but on the surface it looks unrelated. That new test is at https://github.com/paritytech/substrate/blob/master/frame/support/test/tests/pallet_ui.rs#L26 and the only file in the `pass` folder is https://github.com/paritytech/substrate/blob/master/frame/support/test/tests/pallet_ui/pass/trait_constant_valid_bounds.rs which, again, I'm not sure why my PR would cause this to not pass.

test-linux-stable failing at https://gitlab.parity.io/parity/substrate/-/jobs/987864#L988

Do you think you can take a look and point me in the right direction?",8764,2021-06-28T17:57:04Z,0
738,bkchr,@jakehemmerle you just need to merge master.,8764,2021-06-29T10:19:35Z,0
739,bkchr,This should fix your problem,8764,2021-06-29T10:19:47Z,0
740,jakehemmerle,"@bkchr just merged, still having the same issue. I had been rebasing before",8764,2021-06-29T11:51:47Z,0
741,bkchr,"Sorry for all the delays!

@jakehemmerle could you please create a polkadot pr that uses your Substrate branch. I would like to run a burn in (syncing Kusama and Polkadot) to ensure that everything works.",8764,2021-07-08T06:50:24Z,0
742,gilescope,"Sorry to make things harder @jakehemmerle in the short term, but we've switched on using rustfmt so you might want to merge master.",8764,2021-07-30T15:18:24Z,0
743,bkchr,"> Sorry to make things harder @jakehemmerle in the short term, but we've switched on using rustfmt so you might want to merge master.

He already merged these changes as you see with the CI status. ",8764,2021-07-30T20:20:31Z,0
744,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8764,2021-08-29T21:03:25Z,0
745,burdges,We've seemingly never merged this.  Anything problematic crop up?  Can we get this running on one of the testnets?  ,8764,2021-12-26T23:38:32Z,0
746,dependabot[bot],Superseded by #10561.,10546,2021-12-27T09:26:13Z,0
747,dependabot[bot],Superseded by #10564.,10561,2021-12-28T09:23:07Z,0
748,bkchr,And wasmi behaves differently? I assume you test `remark`?,4682,2020-01-20T12:41:24Z,0
749,NikVolf,"I am not sure about wasmi, it is much slower anyway.

I tested transfers, but only between several fixed accounts, so should be not much difference than just remark. ",4682,2020-01-20T12:44:10Z,0
750,bkchr,By growing memory you mean allocating for something inside the runtime or really for some structures inside `wasmtime`?,4682,2020-01-20T12:45:52Z,0
751,NikVolf,"Sorry, I probably gave too little context

https://github.com/bytecodealliance/wasmtime/blob/815576edc5ab00da8c6b67916bf7e9f8af1504d2/crates/runtime/src/instance.rs#L632

Exactly this method takes up to 50% time",4682,2020-01-20T12:55:42Z,0
752,pepyakin,"Yeah, thanks for the filling the issue! It is on my radar already.",4682,2020-01-20T13:38:05Z,0
753,pepyakin,I think the issue should be fixed by now.,4682,2021-12-28T16:43:47Z,0
754,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8153,2021-07-07T21:23:36Z,0
755,KiChjang,bot merge,10565,2021-12-28T23:22:39Z,0
756,rjman-ljm,I could not `add_member` at benchmarking.,10559,2021-12-25T19:03:00Z,0
757,burdges,"Yes.  QUIC would improve our networking significantly.  :)

We previously got hung up on keeping Noise IK via nQUIC = QUIC + Noise vs adopting QUIC with TLS 1.3 by defining some new grandpa TLS certificate for validators, crazier certificates for collators, and maybe others. 

I'm completely happy outsourcing an initial spec for one or both of these.  It's also fine if we do something fast and warn everyone to expect yet another network protocol migration.  It's conversely also possible that @tomaka knows some wish-like of libp2p messes that would be good to bundle in with this big a migration.

I'd expect a ""grandpa TLS certificate"" for validators to consist of a Merkle proof identifying the Ed25519 grandpa session keys, and then a certificate by the session key on the transport key.  We should first migrate storage from our radix 16 hashing, which bloats in a dense Merkle tree, to radix 2 hashing with hash fast forwarding (and radix 16 caching).  We'll want crazy certificates for collators, like VRFs for parachains running Babe and worse for Sassafras in future. 

I've no idea if we properly exploit Noise IK yet anyways, meaning whether nodes initiating connections identify themselves first via something vaguely like this ""grandpa TLS certificate"".  It's annoying if the Merkle proof that shows your actually a validator does not fit into the MTU used for the first datagram, so that 4x space cost of our radix 16 hashing matters here too.

In brief, we need to decide how quickly we want this and what we want to try to rush to merge into such a migration.  We'll surely punt on doing authentication perfectly optimal initially, but we're slowly creating the possibility for better authentication elsewhere so it'll circle back here one day.  :)",9162,2021-06-21T13:20:12Z,0
758,burdges,"I think the simplest would be QUIC with TLS 1.3 and no authentication, but authentication done late inside the stream.  We simultaneously give someone reputable a grant for designing nQUIC properly.  And push our storage folk to fix our radix 16 hashing issue. ",9162,2021-06-21T13:29:29Z,0
759,tomaka,I'd strongly prefer for us to implement something that is already specified (i.e. TLS+QUIC) and not start creating `parity-nquic` that will get abandoned after 6 months.,9162,2021-06-21T13:34:41Z,0
760,kpp,"So far I did a research and implemented:
1) a go tool to generate an x509 certificate with libp2p extension in DER format (the code is mostly a copypasta from https://github.com/libp2p/go-libp2p-tls);
2) a rust tool to parse, inspect and verify the signature according to libp2p docs.

The reason I did it was I wanted to be compatible with the go implementation of libp2p-quic. In the future I want to test our client with their server and vice versa.

https://gist.github.com/kpp/c9c84411e17f4b27dddf0d438b289862

The code is ugly but it's not the point. The point is that the rust tool is binary compatible.

The next step is to prettify the code, implement a certificate serializer and create a PR.

Also I found a tool in the Internets to read DER files which helped me a lot to inspect the certificate: https://lapo.it/asn1js.",9162,2021-07-09T11:53:13Z,0
761,kpp,"So far I:
- updated tool to generate certs: https://gist.github.com/kpp/c9c84411e17f4b27dddf0d438b289862
- implemented verification of certs with rsa-pkc1, ecdsa, ed25519, rsa-pss : https://github.com/kpp/rust-libp2p/pull/4",9162,2021-07-16T12:57:19Z,0
762,kpp,"These two weeks I:
- Worked on https://github.com/kpp/rust-libp2p/pull/6
- Tried to figure out how to work with quinn_proto: https://github.com/kpp/rust-libp2p/issues/8
- As a standalone issue applied a fix to the `libp2p-quic` crate: https://github.com/ipfs-rust/libp2p-quic/pull/6
- Found an issue in the libp2p tls specs: https://github.com/libp2p/specs/pull/357 ",9162,2021-07-30T15:24:38Z,0
763,kpp,"While I was playing with `quinn_proto`, David added TLS support into his `libp2p-quic` crate. We had a chat with Pierre and came to a conclusion the code is a good starting point. There are some issues left but so far it looks pretty good.

Since the last time I worked on multiple issues:
* Made a code review of libp2p-quic
* Fixed libp2p-quic: https://github.com/ipfs-rust/libp2p-quic/pull/6/
* Worked on specs: https://github.com/kpp/rust-libp2p/pull/10, https://github.com/libp2p/specs/pull/358
* Found several issues in the go implementation: https://github.com/libp2p/go-libp2p-tls/issues/87 https://github.com/libp2p/go-libp2p-quic-transport/issues/226
* Improved x509 parser: https://github.com/rusticata/x509-parser/pull/100
* Worked on extracting UDP code into a separate code (https://github.com/quinn-rs/quinn/pull/1180 https://github.com/quinn-rs/quinn/pull/1183) which will help libp2p-quic to reuse the code from quinn.

The current progress is: we are integrating libp2p-quic into rust-libp2p: https://github.com/libp2p/rust-libp2p/pull/2159.",9162,2021-08-23T12:17:40Z,0
764,kpp,"dvc94ch dropped, so I opened my own PR: https://github.com/libp2p/rust-libp2p/pull/2289

* A lot of fixes being made:
* it was requested to remove noise support https://github.com/libp2p/rust-libp2p/pull/2289/commits/25ee1fea8dcd767ab0a23ce0b18ec3dbc171db92
* generic crypto code was removed: https://github.com/libp2p/rust-libp2p/pull/2289/commits/f35fde1c88c74aff520379025650a27bc259b474
* we can dial without PK: https://github.com/libp2p/rust-libp2p/pull/2289/commits/3b1ff348999da1543b7c394f4db9f7364e061508
* I replaced barebones-x509 to deal with X509 certs: https://github.com/libp2p/rust-libp2p/pull/2289/commits/63e4696e83d267fd202583aa88e297bdd20b7c34
* added some basic QUIC support to libp2p-perf: https://github.com/mxinden/libp2p-perf/pull/56

Here are bench results:

<details>
  <summary>Bench results</summary>

```
Local-Local TCP

# Start Rust and Golang servers.

# Rust -> Rust

## Transport security noise
Interval	Transfer	Bandwidth
0 s - 10.00 s	5913 MBytes	4730.32 MBit/s

## Transport security plaintext
Interval	Transfer	Bandwidth
0 s - 10.00 s	9203 MBytes	7362.40 MBit/s

# Rust -> Golang

## Transport security noise
Interval	Transfer	Bandwidth
0 s - 10.00 s	5458 MBytes	4366.22 MBit/s

## Transport security plaintext
Interval	Transfer	Bandwidth
0 s - 10.00 s	10284 MBytes	8227.13 MBit/s

# Golang -> Rust

## Transport security noise
Interval 	Transfer	Bandwidth
0s - 10.00 s 	6880 MBytes	5502.57 MBit/s

## Transport security plaintext
Interval 	Transfer	Bandwidth
0s - 10.00 s 	17534 MBytes	14026.69 MBit/s

# Golang -> Golang

## Transport security noise
Interval 	Transfer	Bandwidth
0s - 10.00 s 	4881 MBytes	3904.79 MBit/s

## Transport security plaintext
Interval 	Transfer	Bandwidth
0s - 10.00 s 	23115 MBytes	18489.50 MBit/s


Local-Local QUIC:

# Start Rust and Golang servers.

# Rust -> Rust

## Transport security noise
Local peer id: PeerId(""12D3KooWAEgNvJB6tXtmpgjf2GDZjMhCneZvtUo2KTR4if4kkoH7"")
Interval	Transfer	Bandwidth
0 s - 10.00 s	361 MBytes	288.72 MBit/s

## Transport security plaintext
Local peer id: PeerId(""12D3KooWHiYCM8HrETLwqDwAwo3ovHWgAo1astGG2bLJ7VdydA95"")
Interval	Transfer	Bandwidth
0 s - 10.00 s	381 MBytes	304.77 MBit/s

# Golang -> Golang

## Transport security noise
2021/12/09 14:35:18 failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size for details.
Interval 	Transfer	Bandwidth
0s - 10.00 s 	725 MBytes	579.98 MBit/s

## Transport security plaintext
2021/12/09 14:35:28 failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size for details.
Interval 	Transfer	Bandwidth
0s - 10.00 s 	724 MBytes	579.09 MBit/s


Local-Server TCP (mixed plaintext/noise):

# Rust -> Rust

## Transport security noise
Interval	Transfer	Bandwidth
0 s - 10.02 s	126 MBytes	100.64 MBit/s

## Transport security plaintext
Interval	Transfer	Bandwidth
0 s - 10.09 s	125 MBytes	99.08 MBit/s


# Rust -> Golang

## Transport security noise
Interval	Transfer	Bandwidth
0 s - 10.21 s	111 MBytes	86.97 MBit/s

# Golang -> Rust

## Transport security noise
Interval 	Transfer	Bandwidth
0s - 10.03 s 	129 MBytes	102.92 MBit/s

## Transport security plaintext
Interval 	Transfer	Bandwidth
0s - 10.01 s 	125 MBytes	99.85 MBit/s

# Golang -> Golang

## Transport security noise
Interval 	Transfer	Bandwidth
0s - 10.15 s 	89 MBytes	70.15 MBit/s



Local-Server QUIC:

# Rust -> Rust

## Transport security noise
Local peer id: PeerId(""12D3KooWR1KRW9UoJd8XXwFLKWdvmC4yTEDgStvXJGUD3ZFnFZDw"")
Interval	Transfer	Bandwidth
0 s - 10.01 s	9 MBytes	7.19 MBit/s

## Transport security plaintext
Local peer id: PeerId(""12D3KooWA7vqQpUV3SxUNTWWeWHiM2N1WEebMPETwhLLtmD6QdnL"")
Interval	Transfer	Bandwidth
0 s - 10.04 s	4 MBytes	3.19 MBit/s


# Golang -> Golang

## Transport security noise
2021/12/09 17:42:04 failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size for details.
Interval 	Transfer	Bandwidth
0s - 10.01 s 	109 MBytes	87.12 MBit/s

## Transport security plaintext
2021/12/09 17:42:14 failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size for details.
Interval 	Transfer	Bandwidth
0s - 10.01 s 	121 MBytes	96.71 MBit/s
```
</details>

Also we still cannot connect to go-libp2p-quic. I am working on it.",9162,2021-12-15T13:18:35Z,0
765,burdges,It's QUIC with QUIC's standard TLS 1.3 then?  Cool we reinvent enough around here anyways.  ;),9162,2021-12-15T16:51:08Z,0
766,kpp,"I discovered that I pollute Swarm threads with StreamMuxer::poll_event with:

```
let span = tracing::span!(tracing::Level::TRACE, ""handle_event"").entered();
while let Poll::Ready(event) = inner.endpoint.poll_channel_events(cx) {
    inner.connection.handle_event(event);
}
drop(span);

let span = tracing::span!(tracing::Level::TRACE, ""send_transmit"").entered();
let max_datagrams = inner.endpoint.max_datagrams();
while let Some(transmit) = inner.connection.poll_transmit(now, max_datagrams) {
    inner.endpoint.send_transmit(transmit);
}
drop(span);
```

And they are responsible for parsing packets and building packets respectively. I believe that's the main issue for poor performance.
[tracing.folded.txt](https://github.com/paritytech/substrate/files/7790435/tracing.folded.txt)
",9162,2021-12-29T20:00:38Z,0
767,dependabot[bot],Superseded by #10569.,10551,2021-12-30T09:11:59Z,0
768,bkchr,https://github.com/paritytech/substrate/blob/master/primitives/core/src/ed25519.rs#L152-L158 here it is used.,10533,2021-12-22T08:49:29Z,0
769,bkchr,Please show your full code.,10533,2021-12-22T08:49:44Z,0
770,Kalanamith,"@bkchr This is the full example https://stackoverflow.com/questions/70429492/how-to-generate-the-public-key-from-polkadot-address-from-substrate-side/70434830?noredirect=1#comment124527508_70434830

Will try this out, thanks ",10533,2021-12-22T09:28:00Z,0
771,bkchr,"Please report back. 

If not try `<ed25519::Public as Ss58Codec>::from_ss58check`",10533,2021-12-22T10:42:10Z,0
772,Kalanamith,"@bkchr  no luck yet, its good to have some test cases around that function, especially public key addresses generated with PolkadotJS as per the stack overflow question ",10533,2021-12-23T02:58:34Z,0
773,bkchr,What you mean by no luck? That it doesn't compile?,10533,2021-12-23T07:50:20Z,0
774,green-jay,"@shawntabrizi hi, opening PR as discussed, can you please have a look?",10529,2021-12-21T15:21:54Z,0
775,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10113,2021-12-12T00:50:31Z,0
776,dependabot[bot],"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",10569,2022-01-02T12:12:25Z,0
777,shawntabrizi,did you manually distinguish things where `2021` -> `2022` versus `2021-2022`?,10573,2022-01-03T02:00:08Z,0
778,crystalin,That's a way to celebrate :),10573,2022-01-03T02:20:43Z,0
779,bkchr,"> did you manually distinguish things where `2021` -> `2022` versus `2021-2022`?

Yes, but I only have done this for the template and the 2 copyright files. Everything else I didn't looked into.",10573,2022-01-03T08:22:07Z,0
780,bkchr,bot merge,10547,2022-01-03T08:46:41Z,0
781,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10547,2022-01-03T08:46:52Z,0
782,jimmychu0807,"@TriplEight 
This is the latest take on the gitlab script and there are only three jobs, `build-rustdoc`, `publish-rustdoc`, and `rm-rustdoc`. 

I have tested the script in my own personal gitlab pipeline, could you manually kickstart the job by:
- Go to [Substrate GitLab pipeline page](https://gitlab.parity.io/parity/substrate/-/pipelines)
- Run a pipeline manually, choose my branch `republish-all-rustdocs`
- Set the following THREE variables:
   - **RESET_INDEX**: **true**
   - **BUILD_RUSTDOC_REF**: **monthly-2021-10**
   - **LATEST**: **monthly-2021-10**

This should deploy a new rustdocs with [Substrate github page](https://paritytech.github.io/substrate) updated.

Thanks",9856,2021-10-21T10:05:21Z,0
783,jimmychu0807,"@TriplEight I have finished re-written the pipeline job for building and removing rustdocs in `gh-pages` and pretty happy with it. 

There is also a [`rustdoc-release.md`](https://github.com/paritytech/substrate/blob/jc%2Frepublish-all-rustdocs/docs/rustdoc-release.md) documentation page on telling docs team how to config it. 

It is tested in [this pipeline run](https://gitlab.parity.io/parity/substrate/-/pipelines/163275) (all passed). And the doc is generated in [this commit to `gh-pages` branch](https://github.com/paritytech/substrate/commit/2f764d202c78a4ed897e79a26e1adfb2a428c4c0).

Let me know if you are okay with this PR.",9856,2021-10-23T10:15:29Z,0
784,jimmychu0807,"@TriplEight I have gotten the latest `master` change and merge to this branch, and checked the rustdocs publication process works ([see this workflow](https://gitlab.parity.io/parity/substrate/-/pipelines/164942), particularly on the [`build-rustdoc`](https://gitlab.parity.io/parity/substrate/-/jobs/1208672) and [`publish-rustdoc`](https://gitlab.parity.io/parity/substrate/-/jobs/1208677) jobs).

If you have time this week, please review and see if the PR is good to merge. So I can then publish the Substrate rustdocs for `monthly-2021-10` and `monthly-2021-11-1` tags. Thanks.",9856,2021-11-08T07:41:24Z,0
785,bkchr,@jimmychu0807 for what do we need this?,9856,2021-11-08T19:50:28Z,0
786,jimmychu0807,"> @jimmychu0807 for what do we need this?

@bkchr This PR makes the repo rustdocs support multiple versions. For [Substrate](https://paritytech.github.io/substrate/), there are multiple versions of rustdoc deployed, and the specific index page linked to is also built as part of this CI workflow.

We can also add or remove a specific rustdoc version by triggering the CI job with the right parameters. Refer to the accompanied docs.",9856,2021-11-09T10:49:28Z,0
787,NukeManDan,"Guys: I think we ***should not*** host anything but master here on the repo. Why? It's BIG in the git size to host them!! https://github.com/substrate-developer-hub/rustdocs/issues/22

Instead we should host all versioned archives in https://github.com/substrate-developer-hub/rustdocs and only maintain the active master here. ",9856,2021-11-11T02:23:30Z,0
788,TriplEight,"@NukeManDan to be fair

```bash
$ git rev-list --disk-usage --objects HEAD..gh-pages
277437609
```

Is **not that** much, but only compared to 7.5 GB.
I assume this PR was done in assumption to store the state of the documentation and host it straight away from the `gh-pages` branch. But for a fatter repo we might re-think this approach.",9856,2021-11-11T13:34:40Z,0
789,jimmychu0807,"I think it is better to host the rustdoc in Substrate repo. It should be less maintenance in the long-run, and it is good the rustdoc sits closing to the src code.",9856,2021-11-12T05:50:08Z,0
790,TriplEight,"@NukeManDan it must be something with your local substrate. Do you keep `./target` in the repo? Or if you have **lots** of branches, run a `git gc --aggressive` and check the weight of `.git` dir.
Substrate is not that heavy: https://api.github.com/repos/paritytech/substrate, check `size`, it's ~424 Mb.
Even if it grows, there will be several ways on how to shrink it. i.e. ask Github team to run maintenance commands on your repo via support tickets (unlike in Gitlab, there's no ""Housekeeping"" controls).

@jimmychu0807 I'm OK with keeping the state of the rustdocs in the branch.",9856,2021-11-12T14:03:34Z,0
791,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9856,2021-12-12T14:54:34Z,0
792,jimmychu0807,"let me think about this, bot.",9856,2021-12-15T04:45:04Z,0
793,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8880,2021-07-21T10:24:12Z,0
794,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8880,2021-08-20T17:20:41Z,0
795,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8880,2021-09-23T08:59:21Z,0
796,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8880,2021-10-31T14:56:05Z,0
797,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8880,2021-11-30T17:21:26Z,0
798,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8880,2022-01-02T16:15:29Z,0
799,athei,"I had a talk with @bkchr and we came to the conclusion that this should be possible. However, what was less clear is **how** that would be implemented in terms of APIs. I gave this some thought and wrote down a proposal on how this could be integrated into substrate. It also has a usage example which shows how I intend to use this from `pallet_contracts`.

Please make sure to also read the doc comments where I put down some additional thoughts:
https://gist.github.com/athei/5df72bc02c44f342338fdb66b2269619",9431,2021-10-06T11:30:51Z,0
800,athei,"After a chat with @gavofyork it became clear that runtime code should never have the power to introduce consensus errors. Allowing the runtime to include custom data into the PoV would introduce this new class of errors the the runtime.

Instead, we should come up with a data structure implemented by the client that achieves our goal of not including all the data accessed by the collator into the PoV.",9431,2022-01-03T12:11:57Z,0
801,bkchr,bot merge,10571,2022-01-03T12:57:48Z,0
802,paritytech-processbot[bot],Waiting for commit status.,10571,2022-01-03T12:57:56Z,0
803,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 01c35c09dc9e11c6c14586d7f7b0b0d84804246e,10571,2022-01-03T13:22:08Z,0
804,bkchr,bot merge,10571,2022-01-03T15:08:30Z,0
805,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10571,2022-01-03T15:08:40Z,0
806,xlc,"the chain spec already includes wasm so as long as a valid chain spec is provided, there is no need to pass wasm blob.

we should just avoid build runtime natively and have a way to build dev chain spec and have it committed to repo so others can still run dev chain out of the box.",8974,2021-06-01T11:33:12Z,0
807,arkpar,`substrate --chain polkadot.json` should work as long as you are not a validator. Although it has been a while since anyone tested it.,8974,2021-06-01T11:56:38Z,0
808,NukeManDan,"I think the [playground](https://github.com/paritytech/substrate-playground) could benefit from this and contribute some ideas towards this effort. One that seems obvious is a containerized flow:
0. (one person) builds and publishes an image for ""shell"" node (with no runtime, or defaulting to a minimal one?)
1. (anyone) pulls image
2. builds rumtime wasm  if needed, or pull from published location
3. passes wasm blob to execute

In the parachain context, integration with https://github.com/paritytech/polkadot-launch would seem like a good fit

This also seems to be highly related to efforts in https://github.com/paritytech/smoldot , yes?",8974,2021-06-02T18:52:50Z,0
809,gilescope,"For native pallet dev, would it be helpful to be able to run in a dev `shell` mode where there was no networking, no forks and no consensus so that there was little to compile - just an uncontended local chain? (I'm guessing that may pull in only half the crates..)",8974,2021-06-28T08:34:12Z,0
810,gilescope,"In fact for projects like the bridge project that just need a shell node, we can avoid compiling substrate client at all and just compile the runtime.",8974,2021-07-12T13:22:03Z,0
811,expenses,"I'm researching this now. First problem: `new_full_client` requires a `NativeExecutionDispatch`, which is created using the `native_executor_instance!` macro. As we're choosing whichever runtime we're using at runtime, we can only execute blocks using a non-native (wasm) executor.",8974,2021-08-02T12:54:05Z,0
812,expenses,"Okay, I've gotten over that bump by using some hacks to use a `WasmExecutor` instead. The branch is up here: https://github.com/paritytech/substrate/compare/ashley-easy-builder.

Now I need to find a way to define `RuntimeApi`. 
",8974,2021-08-02T13:38:14Z,0
813,expenses,"Okay, I've used `cargo expand` to expand out the generated runtime generation code, and have used that to make a basic impl of `RuntimeApi`. The next problem is trying to make a transaction pool.

`FullPool::new_full` requires `Client::Api: sp_transaction_pool::runtime_api::TaggedTransactionQueue<Block>`, and the implementation of that requires `validate_transaction`.

`validate_transaction` in the generated code is implemented using `Executor::validate_transaction`, where:

```rust
/// Executive: handles dispatch to the various modules.
pub type Executive = frame_executive::Executive<
	Runtime,
	Block,
	frame_system::ChainContext<Runtime>,
	Runtime,
	AllPallets,
	(),
>;

/// All pallets included in the runtime as a nested tuple of types.
/// Excludes the System pallet.
pub type AllPallets = ((TransactionStorage , (Uniques , (Gilt , (Lottery , (Mmr , (Assets , (Tips , (Bounties , (Multisig , (Proxy , (Scheduler , (Vesting , (Recovery , (Society , (Identity , (RandomnessCollectiveFlip , (Historical , (Offences , (AuthorityDiscovery , (ImOnline , (Sudo , (Contracts , (Treasury , (Grandpa , (TechnicalMembership , (Elections , (TechnicalCommittee , (Council , (Democracy , (Session , (Staking , (ElectionProviderMultiPhase , (TransactionPayment , (Balances , (Indices , (Authorship , (Timestamp , (Babe , (Utility ,)))))))))))))))))))))))))))))))))))))))) ;
```

I feel like copying this is the wrong move, as we're specifically trying to create a node that _doesn't need to think about runtime pallets_.",8974,2021-08-02T14:35:36Z,0
814,tomaka,"Ah, my bad. We're using `tokio::run` instead of a method that exits immediately once the future passed as parameter has ended.",2977,2019-06-28T21:04:51Z,0
815,tomaka,"The fix is quite easy. Replace `tokio::run` with something like:

```rust
tokio::runtime::Runtime::new()
	.expect(""Failed to initialize tokio"")
	.block_on(fut)
	.expect(""Error while importing blocks"");
```

However the other part of the issue would be to add a CI test.
",2977,2019-06-29T14:40:31Z,0
816,pepyakin,"Hey, thanks for the fix! However, unfortunately, it doesn't work. The symptoms are the same. There is no activity and no results.",2977,2019-07-01T11:56:58Z,0
817,arkpar,"Works for me in master. 
```
Initializing Genesis block/state (state: 0xea93…a60c, header-hash: 0x4830…833c)
2019-07-02 12:18:33 Loaded block-time = 4 seconds from genesis on first-launch
2019-07-02 12:18:33 Loading GRANDPA authority set from genesis on what appears to be first startup.
2019-07-02 12:18:33 Importing 1148 blocks
2019-07-02 12:18:33 #0 blocks were added to the queue
2019-07-02 12:18:33 #1000 blocks were added to the queue
2019-07-02 12:18:46 #1000 blocks were imported (#148 left)
2019-07-02 12:18:48 Imported 1147 blocks. Best: #1148
```",2977,2019-07-02T10:21:34Z,0
818,arkpar,@pepyakin try importing to an empty DB,2977,2019-07-02T10:21:57Z,0
819,pepyakin,"Yes, I did the `purge-chain` before the import.

Just checked with the latest master:

```
./target/release/substrate purge-chain -y --dev  && time ./target/release/substrate factory --dev --mode MasterTo1 --num 500
./target/release/substrate export-blocks --dev blocks.blocks
./target/release/substrate import-blocks --dev blocks.blocks
```

the result is the same. ",2977,2019-07-05T15:55:52Z,0
820,arkpar,"Apparently the root issue here is that `factory` command produces invalid blocks.
```
2019-07-08 12:50:15.113 tokio-runtime-worker-0 TRACE sync  Starting import of 1 blocks  (1)
2019-07-08 12:50:15.113 tokio-runtime-worker-0 TRACE sync  Header 0x0136…3829 has 0 logs
2019-07-08 12:50:20.835 tokio-runtime-worker-0 TRACE sync  Verifying 1(0x0136…3829) failed: Header 0x0136ef67f325fd563f0c42acdaaaab5ba3864a83b6ad4db792d56fd0c0dc3829 is unsealed
```",2977,2019-07-08T10:51:38Z,0
821,pepyakin,"aha! then it is the factory not the import-blocks!

is it expected behavior @cmichi ?",2977,2019-07-08T12:30:08Z,0
822,kianenigma,"After the recent changes to the extrinsic format, I added a reminder for myself to add more tests to factory and subkey code to make sure they generate extrinsic that are correctly constructed and composed. This issue rings a bell now. 

I will try to look into this soonish. Maybe end up seeing what the issue is with the import as well. ",2977,2019-07-29T20:48:32Z,0
823,tomaka,The fact that the operation never stops is probably fixed by #3240 .,2977,2019-07-30T07:46:48Z,0
824,bkchr,What is the problem here? Were the blocks finalized before?,10354,2021-11-24T09:32:54Z,0
825,Irish-bee,"> What is the problem here? Were the blocks finalized before?

I mean, using the './ substrate import block 'command, why would the height of the best block and the final block normally be different",10354,2021-11-25T08:49:33Z,0
826,Irish-bee,"> > What is the problem here? Were the blocks finalized before?
> 
> I mean, using the './ substrate import block 'command, why would the height of the best block and the final block normally be different

And, the data is exported in a normal database using the command './substrate export-blocks --chain main --to 318450 shuju --base-path db1/ --pruning=archive
'",10354,2021-11-25T08:53:11Z,0
827,bkchr,"> Were the blocks finalized before?

Can you please answer this.",10354,2021-11-25T09:26:59Z,0
828,transxask,"> > Were the blocks finalized before?
> 
> Can you please answer this.

Yes, the final block of the chain is higher than the best block above, I just want to export the data that already has the final block in front",10354,2021-11-25T11:54:57Z,0
829,transxask,"The final block of the chain was 318,467 when I exported the data. So the expectation is that the final block here is going to be 318450 as is the best block",10354,2021-11-25T11:58:39Z,0
830,bkchr,"I think there was probably just no justifications for these blocks. I think grandpa only outputs justifications on authority set changes. @andresilva should be able to answer this concretely.

However, I don't see this as such a big problem, the node would finalize when it connects to other nodes.",10354,2021-11-25T12:18:24Z,0
831,Irish-bee,"> I think there was probably just no justifications for these blocks. I think grandpa only outputs justifications on authority set changes. @andresilva should be able to answer this concretely.
> 
> However, I don't see this as such a big problem, the node would finalize when it connects to other nodes.

Yes, it's not a big problem. We just want to completely derive the equal final block and the best block. This is sufficient if the data is exported for a node. Thank you！",10354,2021-11-25T14:39:07Z,0
832,bkchr,Then you need to share the db.,10354,2021-11-26T09:33:48Z,0
833,bkchr,bot merge,10578,2022-01-04T13:18:04Z,0
834,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10578,2022-01-04T13:18:15Z,0
835,bkchr,Hmm maybe a MacOs bug? For me it works :see_no_evil: ,7269,2020-10-06T21:10:20Z,0
836,pepyakin,"sorry, I must've said that it's Linux (the beast) with nightly",7269,2020-10-07T08:38:00Z,0
837,pepyakin,"as was discussed, it doesn't stuck but just takes quite some time to unstuck.",7269,2020-10-15T10:08:04Z,0
838,pepyakin,Do you think that was fixed or just cleaning up?,7269,2022-01-04T14:09:31Z,0
839,bkchr,"Cleaning up. If you think the issue still exists, please retry and reopen. This issue is more than 1 year old.",7269,2022-01-04T15:04:30Z,0
840,pepyakin,"Testing this on a linux/x5950 this works just fine, let's call it solved until anybody comes with counterevidence.",7269,2022-01-04T18:06:47Z,0
841,pepyakin,Any closing words?,9146,2022-01-04T14:09:08Z,0
842,bkchr,"Sorry, I actually thought this was older than last year. However, this was sitting here without anything actionable. I have also not seen any similar report. If you have a way of reproducing, please reopen.",9146,2022-01-04T15:06:28Z,0
843,pepyakin,"Fair! I haven't seen this anymore myself and probably it's fine if we close it for now until next report. 

As an aside: i would be really grateful if you left a message with the reason when closing even if that message is just stale! Thanks in advance",9146,2022-01-04T16:15:40Z,0
844,bkchr,"Yeah sorry for not leaving messages, that was my fault. I will do it better next time.",9146,2022-01-04T19:02:19Z,0
845,bkchr,Yeah I have seen similar things. This seems to be correlated with starting only half of the node and also dropping some stuff that isn't needed.,10583,2022-01-04T19:03:17Z,0
846,rphmeier,"> This method to converting a Backend into a TrieBackend should be removed. Every backend should be a trie backen

How even mighty abstractions fall :)

Originally the idea was to make storage totally generic so we could experiment with 2-tries, and now there are other things like RSA accumulators, verkle tries, etc.",4455,2021-10-23T18:27:29Z,0
847,burdges,"Just curious:  At what point do we populate the cache?  If block production then this only impacts the block producer itself.  If memepool then I'd hope we eventually purge all memepools from polkadoit with later sassafras phases, although that's quite a ways off.",4455,2021-10-24T11:17:03Z,0
848,bkchr,We populate it while building blocks.,4455,2021-10-24T17:48:50Z,0
849,arkpar,Wouldn't it prevent the proof recorder from recording the storage root calculation?,10581,2022-01-04T15:47:27Z,0
850,bkchr,"> Wouldn't it prevent the proof recorder from recording the storage root calculation?

No. The transaction cache is just for collecting the ""transaction"" that is created as result of `storage::root()`, so we don't need to re-execute the block before importing it on the collator.",10581,2022-01-04T15:48:33Z,0
851,burdges,"As an aside not strictly relevant here, we do envision having ""runtime libraries"" eventually, like SPREEs or perhaps large verifier keys ala halo2, which might be implemented in another way like a flat file of data, or if they undergo closer auditing then eBPF or native code loaded via dlopen, or a native generator for a verifier key.  Afaik all node should use identical deployment scheme, so we'd never walk back the consensus improvement described here. ",10579,2022-01-04T11:18:57Z,0
852,bkchr,"Okay, sounds interesting. I always thought that SPREE would be different wasm files that are just linked at runtime? 

Do we really want to native load code? Doesn't this destroy the entire advantage of using wasm? I mean then we could have done that from the beginning and could have distributed the runtime as a native library.",10579,2022-01-04T12:40:56Z,0
853,burdges,"I've too little grasp about what ""wasm files linked at runtime"" means, but the SPREE would require process-like separation from the main PVF, and the SPREE invokes hostcalls that modify the SPREE state, for which the main PVF lacks permission.

At least in my mind that's impossible with ""linked at runtime"" so instead the SPREE exposes some crate linked at build time, but then itself creates new hostcalls or more SPREE-calls available to the whole PVF including its own part. 

Yes, SPREEs could be WASM but maybe 2x matters enough that a common enough SPREE would be native and well audited, or maybe doing those native builds limits our hardware choices too much?  I donno..

> Do we really want to native load code?

I donno, it's plausible we'd never want native code loaded, but much here remains unclear to me, like the performance hit eBPF takes.

I only raised the comment in case anything of this impacts how you remove the native runtime.  :)",10579,2022-01-04T22:46:18Z,0
854,bkchr,"> I've too little grasp about what ""wasm files linked at runtime"" means, but the SPREE would require process-like separation from the main PVF, and the SPREE invokes hostcalls that modify the SPREE state, for which the main PVF lacks permission.

Yeah that makes sense and I did not thought about it, but this could just be a host call to communicate with SPREE and the SPREE could be anything. 

Aka we could have SPREE by default in wasm and could provide native compiled SPREE that ships with the node. If the requested SPREE version would not be supported by the node, we could just run the wasm version. However, I think whatever we do it is orthogonal to removing the native runtime. 


> I only raised the comment in case anything of this impacts how you remove the native runtime. :)

That is always a good idea nevertheless :) ",10579,2022-01-05T08:27:55Z,0
855,dependabot[bot],Superseded by #10586.,10580,2022-01-05T09:15:40Z,0
856,bkchr,"> Why didn't this failed in ci? 🤔

A probably because it isn't used anywhere? ",10556,2021-12-24T17:03:48Z,0
857,xlc,Some additional tests?,10556,2021-12-28T01:39:55Z,0
858,shawntabrizi,bot merge,10556,2021-12-28T23:07:11Z,0
859,paritytech-processbot[bot],Waiting for commit status.,10556,2021-12-28T23:07:20Z,0
860,bkchr,"I like this approach more than the other one.

Having the state version expressed in a different way than bumping the `Core` api would be nice.",9732,2021-09-09T20:08:51Z,0
861,cheme,"> Having the state version expressed in a different way than bumping the `Core` api would be nice.

My first idea was to use a host function, but it would requires instantiating wasm to execute it.
So my second attempt was to add a new field in runtime version, this was fine but:
- require to update all declared runtime_version
- require to change encoding of runtime_version which in turn requires to update core api version (that is the trick that was use on previous change of runtime_version format).
That's where I did consider that just using the core api version was more straight forward.

@bkchr , @arkpar , @ other readers, I am open to other suggestion.",9732,2021-09-10T07:09:51Z,0
862,bkchr,"For now it sort of works as everybody would switch the state version automatically the moment they apply the runtime upgrade.

I'm just thinking of if we need to have a more manual approach for the future if there would be another state version switch. But maybe we should ignore this for now.",9732,2021-09-10T11:43:31Z,0
863,cheme,"@thiolliere notice this PR is not compatible with contract state rent.

The issue is that rebuilding a child trie with same root as the tombstone is not doable after the switch.

Not too sure if any chain uses rent in production. If there is; a mechanism to build a child trie with old trie implementation would be needed.
We could use old storage_root host function for a tagged child trie only, that is a bit cumbersome to implement (needs at least a new externality function to tag the child trie) and after restoring tombstone a migration to new state would be needed.
Also even with this scenario, no tombstone should be created before the full state did migrate to V1: being in a hybrid state we cannot rebuild the trie as we don't know which version is used.

My hope is that such support is currently not needed as this is a lot of work.
Does a chain in production use state rent? CC\ @athei @Robbepop ",9732,2021-09-23T14:39:37Z,0
864,athei,"> My hope is that such support is currently not needed as this is a lot of work.
> Does a chain in production use state rent? CC\ @athei @Robbepop

Tombstones are gone in master. No need to support them.",9732,2021-09-23T15:20:00Z,0
865,cheme,"> Tombstones are gone in master. No need to support them.

I am relieved, but sad at the same time, thanks for the info.",9732,2021-09-23T15:21:49Z,0
866,cheme,"@kianenigma , https://github.com/paritytech/substrate/pull/9732/commits/b0b8a850deebfa4df733980bbd5757a9f0b9a098 is touching bit of your recent code, there is a slight limitation I added in comment, basically if one of the block does a runtime upgrade we may be using the wrong state version (rather unlikely since this will happen once on chain using old trie state only).
(this could be handled by following runtime change digest and extraction state version on update but does not seems worth it).

I also notice that you are extracting runtime version from state, could also be from wasm specific section (if the switch to wasm specific section did not remove versioning in state, extracting from state seems fine to me).",9732,2021-10-01T11:59:34Z,0
867,cheme,"@arkpar , @thiolliere , @bkchr, @kianenigma what do you think of https://github.com/paritytech/substrate/pull/9732/commits/9b4837f0fd8e4504ee80ba1994c4dc207ff0443a : I propose to make the switch to new trie state opt-in by adding feature 'new-state' on sp-io and sp-version.
Could be done the other way (feature to stay on old state), or just revert (applying code patch instead for different release).
",9732,2021-11-05T11:34:44Z,0
868,cheme,"https://github.com/paritytech/substrate/pull/9732/commits/b3d8f6286b27f5dbc9d80772bb47394e5f1512d8 adds option feature on core api version, and is extending the opt in feature this way:
sp-io, sp-version, sp-api: are the three crate that requires the feature on switch
sc-client-api reexports feature for sp-api
sp-runtime reexports feature for sp-io
sp-api include sp-runtime and sp-version feature.
This way switching only require to declare the feature client side for sc-client-api and runtime side for sp-api.

https://github.com/paritytech/substrate/pull/9732/commits/dd20a8d1d667b52f3d47ac495bb37780da216603 switch from checking Core api version to a State api version. Issue with core being that if it takes time to migrate all projects, core api version woud be basically locked (except if applying some complicated patching). I am not sure it is really needed, could use different mechanism.

",9732,2021-11-08T10:49:17Z,0
869,arkpar,"Why do we need a compile time feature? Is there any compelling case to stick to the old format? If there's a chain that does not want to switch, they can still use the old `storage_root` function, can't they?

In any case, IMO the new state format should be the default.",9732,2021-11-10T10:22:48Z,0
870,cheme,"> Why do we need a compile time feature?

If a user wants to delay the switch, it is an alternative to patch their substrate deps with something like https://github.com/cheme/substrate/commit/d35f273b7d67b1b85a9e72973cab13c5c156c1d3 (actually it also need to patch the switch to core version 4).

> Is there any compelling case to stick to the old format?

Staying as short as possible in an hybrid state, and planing migration properly.
One thing that is difficult to check for all project is if they did use child trie root as timestamp or in other way that require root to stay constant. Then migrating will requires additional migration work to keep ref to old child trie root, and maybe lock some stuff during migration.

> If there's a chain that does not want to switch, they can still use the old storage_root function, can't they?

By patching substrate yes, but if we do another core version update then they will need to patch at version minus one and patch forever some code (since actual switch will be at later version for them).

> In any case, IMO the new state format should be the default.

I can switch the changes to an opt-out feature. Then there is the question of using state api version instead of core, here the new state version is only added to the runtime when declared: I can probably force adding it in the impl runtime macro (and have a opt-out for it).

But using a state version api may not be a good idea, it is really useful in case the switch got delayed for external project , if we are confident there will be no fcore version update before all migration ends, it becomes useless. ",9732,2021-11-10T10:47:12Z,0
871,cheme,"@arkpar , I did switch to an opt-out feature (I rewrite the sp-io code).
I also revert to check state version client side with core version update to 4.
My logic is that, if we need to update core version to 5 and some project still haven't migrate, then we could use a new runtime version, with an explicit state_version field (the field could then be remove with next core version update when we are sure old state is not use anymore).",9732,2021-11-11T13:34:20Z,0
872,cheme,"Also I switch the polkadot companion to keep using old state in https://github.com/paritytech/polkadot/pull/4104/commits/0128ae65bd937244c1a0365829f923aa59949bb2, so this PR can be merge without the migration.",9732,2021-11-11T13:35:54Z,0
873,cheme,"@bkchr, @thiolliere , @arkpar, do you think we can merge this PR (with polkadot companion opting out the switch)?
",9732,2021-12-13T20:05:29Z,0
874,bkchr,@cheme could we also please rename the feature `old-state` to `use-state-v0`.,9732,2021-12-16T11:22:59Z,0
875,cheme,"@bkchr , I did put storage version as host function parameter, I am not sure it is better, but it does not cost much. Change is basically here https://github.com/paritytech/substrate/pull/9732/commits/ba00361b1725b94ba8782915c146536ba20fb577 (there is a few fixes in the following commits).
I also create the trie_root host function v2 and observe in the polkadot pr and in the cumulus pr a few new calls (especially in cumulus), so the companions pr did also change quite a bit (especially on cumulus).
",9732,2021-12-16T20:12:14Z,0
876,cheme,"@bkchr , did switch to state_version in runtime, I did not create an enum, but took time to move old runtime logic in sp_runtime.
Companion PRs looks indeed better this way.",9732,2021-12-20T17:37:40Z,0
877,cheme,bot merge,9732,2021-12-24T07:56:15Z,0
878,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4104 is not mergeable,9732,2021-12-24T07:56:22Z,0
879,cheme,bot merge,9732,2021-12-24T08:46:47Z,0
880,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/cumulus/pull/678,9732,2021-12-24T08:46:55Z,0
881,cheme,bot merge,9732,2021-12-24T08:53:50Z,0
882,pepyakin,"Shouldn't this, or the companions, have the `host functions` label?",9732,2021-12-24T14:09:31Z,0
883,cheme,"Yes, there is indeed a new version for host function, thanks @pepyakin ",9732,2021-12-24T14:11:24Z,0
884,apopiak,"A first idea addressing this issue would be introducing an (or several) extra repository that just contains migrations. The migrations could be crates depending on both the version they are migrating *from* as well as the one the are migrating *to*.
Runtimes could then include these crates to perform the migrations necessary.",6482,2020-07-03T13:53:56Z,0
885,apopiak,"#### Original Text:

This issue is meant as a meta / tracking issue for Substrate's migration support.

I currently see several issues with the way we do migrations that it would be great to improve on.

1. I have the impression that we currently work off the assumption that most chains are similar to Kusama and Polkadot in how they migrate.
  a. The migrations included in Substrate only work out-of-the-box for Kusama and Polkadot. It's great that there are comments indicating assumptions (e.g. [here](https://github.com/paritytech/substrate/pull/4662)) but the code is still Kusama/Polkadot specific.
  b. We add and remove migrations regularly. This assumes that downstream chains follow a similar migration time schedule.
  c. Sometimes we add migrations in extra `migration.rs` files, sometimes in the pallet's `lib.rs` themselves. This makes it difficult to add several past migrations together.
2. We assume that migrations don't fail. They are uni-directional and don't allow rollback.
3. There is no tooling to support creating and testing migrations. There are only ad-hoc solutions shared unofficially like grafting state onto a dev chainspec. I think we could use tooling for migration integration tests.",6482,2020-09-03T12:00:32Z,0
886,apopiak,"## 💡Ideas for Improvement

### Processes & Documentation

Ideas for adding and/or improving processes that will make migrations easier for Substrate users.

- Increase clarity and predictability of migrations by
    - mentioning how long they will stay
    - mentioning when they are removed
- Have an up-to-date list of migrations that adds context, guidance and trouble shooting.
  - MVP is [the tagged PR listing](https://github.com/paritytech/substrate/pulls?q=is%3Apr+label%3AD1-runtime-migration)
- Move migrations into a separate repo that can keep historical migrations around.
- Have a migration guide that leads through the process.

### Tooling
- Have a metadata diffing tool to determine what changed between different runtimes. ""Diffing the schema"" so to speak.
  - A quick hacky version of this we can do easily by diffing the json represenation of the metadata.

### Substrate Changes
- Allow faking validators/keys to test consensus changes.",6482,2020-09-03T12:19:10Z,0
887,apopiak,We can use `docker run --network=host jacogr/polkadot-js-tools metadata <ws-old> <ws-new>` (e.g. `docker run --network=host jacogr/polkadot-js-tools metadata wss://rpc.polkadot.io ws://localhost:9944` to compare a local instance with the Polkadot production chain) to determine metadata changes between runtime versions.,6482,2020-10-29T15:18:15Z,0
888,apopiak,Collecting migrations in [this repo](https://github.com/apopiak/substrate-migrations) with notes and examples.,6482,2020-11-12T09:51:22Z,0
889,andresilva,bot merge,10584,2022-01-05T12:08:49Z,0
890,paritytech-processbot[bot],"Bot will approve on the behalf of @andresilva, since they are a team lead, in an attempt to reach the minimum approval count",10584,2022-01-05T12:09:00Z,0
891,jsdw,"I can't quite figure out what to call to dump the metadata to try this out; the following didn't work (in `substrate/bin/node`):

```
cargo run -- metadata dump --dev 
    Finished dev [unoptimized + debuginfo] target(s) in 0.56s
     Running `/Users/james/Work/substrate/target/debug/substrate metadata dump --dev`
Error: Service(Client(StateDatabase(""Expected pruning mode: archive"")))
```",10450,2021-12-10T17:14:35Z,0
892,bkchr,"> I can't quite figure out what to call to dump the metadata to try this out; the following didn't work (in `substrate/bin/node`):
> 
> ```
> cargo run -- metadata dump --dev 
>     Finished dev [unoptimized + debuginfo] target(s) in 0.56s
>      Running `/Users/james/Work/substrate/target/debug/substrate metadata dump --dev`
> Error: Service(Client(StateDatabase(""Expected pruning mode: archive"")))
> ```

Either you purge your base path or you run with `--dev --tmp`",10450,2021-12-10T17:50:35Z,0
893,dvdplm,"> Either you purge your base path or you run with --dev --tmp

Running `cargo run -- metadata dump -o ~/Downloads/meta.scale --dev --tmp` fails with:

```
error: Found argument '--tmp' which wasn't expected, or isn't valid in this context

USAGE:
    substrate metadata dump --dev --output <output>
```

",10450,2021-12-13T15:44:37Z,0
894,shawntabrizi,So this only works if your node is fully synced? (since you need the best block hash and all that),10450,2021-12-13T22:30:37Z,0
895,bkchr,"> So this only works if your node is fully synced? (since you need the best block hash and all that)

If you want to have the metadata of the latest block, yes.",10450,2021-12-13T22:36:38Z,0
896,shawntabrizi,"Sounds like there should be a `--block-number` flag too then. Maybe it fails if you dont hold that data, but at least you can specify, versus here, it gives you a pretty arbitrary block's metadata which you can't really control.",10450,2021-12-14T03:53:39Z,0
897,shawntabrizi,"Might even make more sense to me that this CLI requires a `wasm` file as input, and simply extracts the metadata from that runtime.",10450,2021-12-14T04:03:45Z,0
898,dvdplm,"> Might even make more sense to me that this CLI requires a `wasm` file as input, and simply extracts the metadata from that runtime.

That sounds like a different CLI tool altogether, you don't really need a substrate node at all for that. It's not a bad idea though.",10450,2021-12-14T10:59:25Z,0
899,bkchr,This can already be done by subwasm: https://github.com/chevdor/subwasm,10450,2021-12-14T11:02:10Z,0
900,bkchr,As per: https://github.com/paritytech/substrate/issues/10418#issuecomment-1005667433 I'm closing this.,10450,2022-01-05T13:03:58Z,0
901,bkchr,Why do you need to add a digest in genesis?,10360,2021-11-24T08:30:13Z,0
902,liuchengxu,"@nazar-pc Since you have a better big picture than me,  perhaps you could help explain why we need this feature? :P",10360,2021-11-24T08:37:33Z,0
903,nazar-pc,"Subspace blockchain has proof-of-archival-storage consensus. That means in order to participate in block production farmer needs to prove storing unique [partial] replica of the blockchain history, blockchain itself. Pieces of the blockchain are plotted by farmers as blocks are produced by filling a special buffer. There is a threshold we call `recorded_history_segment_size` (RHSS), once there are at least RHSS bytes worth of the blockchain history, the segment is erasure coded, prepared and plotted by farmers.

Here is the problem: before we have the very first segment, farmers have nothing to plot and thus can't produce blocks. Chicken and egg kind of problem.

We solved that previously with a workaround where we had ""pre-genesis"" seed data prepended to the history of the blockchain that allowed us to bootstrap the network, but it was ugly and awkward to maintain.

In latest iteration we removed ""pre-genesis"" objects and decided to increase genesis block in size instead such that it alone exceeds RHSS, since genesis block is created unconditionally, will not be reverted, so farmers will be able to plot it right away.

The way to achieve that was to create a custom `Block` struct not based on generic one and customize its `fn new` with addition of the digest item: https://github.com/subspace/subspace/blob/5cac7d82e049a8f6ff6b0d47d60b462ff79f977d/crates/subspace-runtime-primitives/src/lib.rs#L119-L132

It would be nice if there was another way to customize genesis block (including digest items), but the lines mentioned in the first comment are buried deep in dependencies and the only way I found to achieve the goal was to customize the `Block` itself.",10360,2021-11-24T13:57:16Z,0
904,bkchr,Can you not just have a special case that ignores genesis? Aka doesn't require that the genesis block has this data?,10360,2021-11-24T14:49:30Z,0
905,nazar-pc,"The issue is the opposite. It doesn't technically mean which data, but genesis block should contain some data that is at least RHSS in size or else farmers have nothing to plot and network can't bootstrap itself due to lack of the blockchain history.",10360,2021-11-24T14:53:29Z,0
906,bkchr,"Not sure what ""farmers"" are, but why can they not do the following:

```
if header.number() == 0 {
    // use constant value
} else {
   // check digest
}
```",10360,2021-11-24T19:09:08Z,0
907,nazar-pc,"Farmer is a separate application, similar to miner in other protocols. It plots SCALE-encoded blocks from the Substrate-based node to disk, plot is then used to solve challenges in order to participate in block production. It should be possible to retrieve blocks from farmer's plot as is and SCALE-decode them back into correct block struct or else we are not archiving the blockchain itself.

Blocks to farmers are opaque blobs, they don't look inside and don't have a direct way to interpret them.",10360,2021-11-24T19:33:32Z,0
908,bkchr,"Okay, but they could use the logic I drafted above?",10360,2021-11-24T21:09:05Z,0
909,nazar-pc,"We can probably hack something like that, but then the block you retrieve from the farmer network wouldn't be the same as from Substrate-based node. To fix that we'd have to pull Substrate types (or their approximation) into the farmer to parse and fix genesis block after the fact, which is a really ugly approach. Also there are potentially different pieces of software that can create or read that archival history and all of them will have to be aware of that weird exception that genesis block is.

We already achieved what we wanted with custom `Block` struct, the request here is primarily to make genesis block customizable in general.",10360,2021-11-24T21:26:00Z,0
910,bkchr,"> into the farmer to parse and fix genesis block after the fact

What? Why? 

I really don't get your flow. Why do you want to modify the block? I'm speaking about a special casing in the one function that does the processing. Nothing more. ",10360,2021-11-25T09:18:24Z,0
911,nazar-pc,"Farmers archive blocks not for the sake of doing so, they do it so that the history of the blockchain can be recovered from plots, that is the point of the proof-of-archival-storage.

Hence the blocks being plotted, including genesis blocks, should be identical in Substrate-based node and in the plot. Since we need the genesis block be at least RHSS in the plot, it must be the same size in the node.

Node produces block -> block is archived and plotted by farmer -> block can be recovered by another node for sync process. Farmer network will replace archival nodes in our protocol. And hopefully not only in our network as [we already archive Kusama and all parachains on our testnet](https://aries-dev-relayer.subspace.network/?rpc=wss://aries-test-rpc-b.subspace.network) too, so with adapter it will be possible to sync those from farmer network of Subspace too.",10360,2021-11-25T17:50:04Z,0
912,liuchengxu,@bkchr Happy to help if you have some ideas on implementing this generally nice-to-have feature. I can only come up with a kind of dirty way which is to extract the `Digest` value from the state using its storage key :(,10360,2021-12-01T13:05:16Z,0
913,bkchr,"Sorry for the late answer. I'm going to hijack this issue now ;)

We should add a new trait:
```
trait BuildGenesisBlock<Block: BlockT> {
    fn build_genesis_block(self) -> Result<Block>;
}
```

The client should then take this trait for building the genesis block. This also means that the following code should be moved into the implementation of this trait: https://github.com/paritytech/substrate/blob/1d8f7bf6de1f447b706a121c83e759da807d3a01/client/service/src/client/client.rs#L335-L339

So we will create some type like:
```
struct BuildGenesisBlockWithStorage<BuildStorage>(BuildStorage);

impl<Block: BlockT, BuildStorage: BuildStorage> BuildGenesisBlock<Block> for BuildGenesisBlockWithStorage<BuildStorage> {
    fn build_genesis_block(self) -> Result<Block> {
        // build linked code above
    }
}
```

@nazar-pc @liuchengxu you will then be able to write your own implementation of `BuildGenesisBlock` that just wraps the one I sketched above.

I will assign this issue to someone in parity and it will be worked on in the next days/weeks.",10360,2022-01-05T13:32:32Z,0
914,crystalin,cc @bkchr for review ,9466,2021-07-30T17:37:10Z,0
915,librelois,@bkchr Can you watch this PR? Or tag a relevant reviewer? Thanks :),9466,2021-08-11T12:24:21Z,0
916,expenses,"> In order not to break the API in this PR, I created a new function `spawn_tasks_with_rpc_middleware`, but it would be nice to switch to the builder pattern for `spawn_tasks` so that we don't need to create a new function for each new parameter. Is this already planned?

If possible I'd prefer if a `OptionalSpawnTasksParams` was added as a field to `SpawnTasksParams` that derives `Default` and has everything as an `Option`.",9466,2021-08-12T15:19:35Z,0
917,librelois,"> If possible I'd prefer if a `OptionalSpawnTasksParams` was added as a field to `SpawnTasksParams` that derives `Default` and has everything as an `Option`.

Yes, it's possible, but then it would become a breakable change? Are you ok with that?",9466,2021-08-12T15:36:06Z,0
918,expenses,"> Yes, it's possible, but then it would become a breakable change? Are you ok with that?

Yep.  Substrate isn't stable yet.",9466,2021-08-13T10:16:31Z,0
919,librelois,"@expenses  I have applied the `OptionalSpawnTasksParams` design, but I see while doing so that it is not suitable, because it forces the user to specify the types of the generic optional fields.
I think the user should only specify what he/she is using. The only solution I see to have a clean API is to turn the function `spawn_tasks` into a ""method"" of a type. Either the `SpawnTasksParams` type, or a new type.
We can also switch to a builder pattern or create a trait, but that would also mean replacing the `spawn_tasks` function by a ""method"", which is the only way to use default generics. See: https://github.com/rust-lang/rust/issues/36887",9466,2021-08-16T10:57:30Z,0
920,expenses,"> @expenses I have applied the `OptionalSpawnTasksParams` design, but I see while doing so that it is not suitable, because it forces the user to specify the types of the generic optional fields.

Oh. I thought that the type defaults would stop this from happening.",9466,2021-08-16T11:19:16Z,0
921,librelois,">  I thought that the type defaults would stop this from happening.

No because it is not possible to define a generic default on a function. And although the default generic is well defined on the type `OptionalSpawnTasksParams`, the compiler does not know how to do type inference in this context. ",9466,2021-08-16T11:44:10Z,0
922,librelois,@bkchr @expenses I finally found a way to expose a clean API by keeping the `spawn_tasks` function. Can you review please?,9466,2021-08-19T11:30:16Z,0
923,librelois,"@bkchr we need this PR for moonbeam, can you take a quick look or tag someone who can? Thanks",9466,2021-09-17T13:06:02Z,0
924,librelois,Instead we are waiting for a solution to customize the logs in jsonrpsee: https://github.com/paritytech/jsonrpsee/issues/487,9466,2021-09-29T14:43:25Z,0
925,gilescope,we are getting there...,9885,2021-10-12T12:10:01Z,0
926,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9885,2021-11-11T13:57:47Z,0
927,gilescope,not dead yet. Gradually jasonrpsee is getting ready for prime time. At that time I think we can re-enable. (unless we just have an exclusion list with a link to related issues).,9885,2021-11-15T10:23:21Z,0
928,TriplEight,"Also, I anticipate that failing on vulnerabilities won't be a desirable thing, right?
Making them just warn is not the best, too. So at some point, we'll create a metric and a matrix alert, or an automatic github issue that would summarize the vulnerabilities.",9885,2021-11-22T10:23:56Z,0
929,TriplEight,"as of now it still fails with a BlueOak license:

```
error[L001]: failed to satisfy license requirements
  ┌─ minicbor 0.8.0 (registry+https://github.com/rust-lang/crates.io-index):4:12
  │
4 │ license = ""BlueOak-1.0.0""
  │            ^^^^^^^^^^^^^
  │            │
  │            license expression retrieved via Cargo.toml `license`
  │            rejected: not explicitly allowed

error[L003]: test-runner-example = 0.1.0 is unlicensed
  ┌─ test-runner-example 0.1.0 (path+file:///home/tripleight/code/github.com/paritytech/substrate/bin/node/test-runner-example):2:9
  │
2 │ name = ""test-runner-example""
  │         ^^^^^^^^^^^^^^^^^^^ a valid license expression could not be retrieved for the crate
3 │ version = ""0.1.0""
4 │ license = """"
  │            - license expression was not specified

error[L001]: failed to satisfy license requirements
  ┌─ minicbor-derive 0.6.2 (registry+https://github.com/rust-lang/crates.io-index):4:12
  │
4 │ license = ""BlueOak-1.0.0""
  │            ^^^^^^^^^^^^^
  │            │
  │            license expression retrieved via Cargo.toml `license`
  │            rejected: not explicitly allowed
```",9885,2021-11-22T13:43:37Z,0
930,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9885,2021-12-22T15:11:56Z,0
931,andresilva,bot merge,10587,2022-01-05T11:18:05Z,0
932,paritytech-processbot[bot],Waiting for commit status.,10587,2022-01-05T11:18:14Z,0
933,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for aadcbecacba3229482e5b9e1b18756930e554f4c,10587,2022-01-05T13:19:53Z,0
934,bkchr,bot merge,10587,2022-01-05T15:31:18Z,0
935,paritytech-processbot[bot],Waiting for commit status.,10587,2022-01-05T15:31:26Z,0
936,tomaka,"The fix needs to involve a transition period where the protocol will have two names. As such, this depends on #6605.",7252,2020-10-25T19:58:01Z,0
937,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",7252,2021-07-07T18:13:06Z,0
938,tomaka,Issue still relevant and important.,7252,2021-07-08T07:20:54Z,0
939,acatangiu,"> 1. It shouldn't contain the word paritytech.

Using a new static `/substrate/grandpa/1` protocol name is easy AFAICT:
just use new protocol name, and add old protocol name (`/paritytech/grandpa/1`) to `fallback_names` in `sc_finality_grandpa::grandpa_peers_set_config()`

> 2. Since the messages exchanged are specific to a certain chain, its name should contain the protocol ID

If we want to customize the grandpa protocol name to have chain-specific ID (e.g. `/polkadot/grandpa/1`), then we'd need the chain ID in places such as `client/finality-grandpa/src/lib.rs::run_grandpa_voter()`.

Where is the _chain ID_ specified, what can be used as a chain-specific ID?",7252,2021-12-09T15:10:10Z,0
940,tomaka,"We have this thing called the `protocolId` in the chain specification. The sync and transaction protocols already use this `protocolId` in their name.

However we have a plan to use the genesis hash instead of the `protocolId`, and it probably makes more to transition Grandpa to use the genesis hash: https://github.com/paritytech/substrate/issues/7746
",7252,2021-12-09T15:49:16Z,0
941,tomaka,"> Using a new static /substrate/grandpa/1 protocol name is easy AFAICT:
just use new protocol name, and add old protocol name (/paritytech/grandpa/1) to fallback_names in sc_finality_grandpa::grandpa_peers_set_config()

Yes",7252,2021-12-09T15:49:47Z,0
942,burdges,"Assuming this is not pressing, we might consider merging this transition with a switch to Rabin-Williams signatures or something else faster than ed25519.   https://github.com/RustCrypto/RSA/issues/118

This is based upon my understanding that grandpa spends a lot of CPU on signature verification. ",7252,2021-12-09T19:14:19Z,0
943,tomaka,We can always transition again from `/blablabla/grandpa/1` to `/blablabla/grandpa/2` in the future.,7252,2021-12-10T06:42:29Z,0
944,shawntabrizi,/benchmark runtime pallet pallet_treasury,8665,2021-04-26T12:42:35Z,0
945,parity-benchapp[bot],"Finished benchmark for branch: **shawntabrizi-treasury-bounded**

Benchmark: **Benchmark Runtime Pallet**

cargo run --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_treasury --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/treasury/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

Pallet: ""pallet_treasury"", Extrinsic: ""propose_spend"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.39
              µs

Reads = 1
Writes = 2
Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.39
              µs

Reads = 1
Writes = 2
Pallet: ""pallet_treasury"", Extrinsic: ""reject_proposal"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    42.79
              µs

Reads = 2
Writes = 2
Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    42.79
              µs

Reads = 2
Writes = 2
Pallet: ""pallet_treasury"", Extrinsic: ""approve_proposal"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    14.03
    + p    0.093
              µs

Reads = 2 + (0 * p)
Writes = 1 + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    p   mean µs  sigma µs       %
    0     11.92     0.079    0.6%
    1     12.65     0.064    0.5%
    2     12.92     0.052    0.4%
    3     13.33     0.043    0.3%
    4      13.4     0.078    0.5%
    5      13.7     0.056    0.4%
    6     14.47     0.049    0.3%
    7     14.17     0.083    0.5%
    8     14.52      0.05    0.3%
    9     15.02     0.053    0.3%
   10     14.68      0.08    0.5%
   11     15.43     0.055    0.3%
   12     15.08     0.142    0.9%
   13     15.27     0.168    1.0%
   14     15.41     0.148    0.9%
   15     15.19     0.143    0.9%
   16     15.81     0.192    1.2%
   17     15.61     0.124    0.7%
   18     16.42     0.086    0.5%
   19     16.37     0.062    0.3%
   20     16.25       0.1    0.6%
   21     16.42     0.179    1.0%
   22     16.98     0.107    0.6%
   23     16.99     0.098    0.5%
   24     16.66     0.106    0.6%
   25     17.42      0.05    0.2%
   26     17.29     0.118    0.6%
   27      17.1     0.197    1.1%
   28     16.84     0.152    0.9%
   29     17.63      0.08    0.4%
   30     17.77     0.102    0.5%
   31     17.45     0.461    2.6%
   32     18.23     0.108    0.5%
   33     18.34     0.065    0.3%
   34     18.61     0.065    0.3%
   35     18.54     0.032    0.1%
   36      18.5     0.285    1.5%
   37     18.41     0.473    2.5%
   38     17.52     0.137    0.7%
   39      17.8      0.08    0.4%
   40     17.77     0.119    0.6%
   41     18.32      0.08    0.4%
   42     18.33     0.112    0.6%
   43     18.57     0.119    0.6%
   44     18.14     0.066    0.3%
   45     18.28     0.089    0.4%
   46     18.26     0.071    0.3%
   47     18.27     0.127    0.6%
   48     16.92     0.082    0.4%
   49     17.04     0.091    0.5%
   50     17.61     0.451    2.5%
   51     17.71     0.887    5.0%
   52     16.95     0.157    0.9%
   53     17.77       0.7    3.9%
   54     18.48     1.278    6.9%
   55     19.64     1.107    5.6%
   56     19.02     0.086    0.4%
   57      19.1     0.103    0.5%
   58     18.91     0.163    0.8%
   59     19.47     0.111    0.5%
   60     19.24     0.111    0.5%
   61     19.44     0.125    0.6%
   62     21.34     0.612    2.8%
   63     19.83     0.103    0.5%
   64      19.6     0.147    0.7%
   65     22.28     0.054    0.2%
   66     21.91     1.025    4.6%
   67     22.43     0.079    0.3%
   68     22.48     0.142    0.6%
   69     22.72     0.102    0.4%
   70      22.8     0.065    0.2%
   71     23.28     0.112    0.4%
   72      23.3     0.111    0.4%
   73     22.97     0.136    0.5%
   74      23.3     0.836    3.5%
   75     22.04     1.462    6.6%
   76     20.38     0.094    0.4%
   77     20.72     0.789    3.8%
   78     21.54     1.228    5.6%
   79     21.15     1.094    5.1%
   80      23.3     1.343    5.7%
   81     23.36     1.359    5.8%
   82     24.33     0.111    0.4%
   83     21.91     1.367    6.2%
   84     22.59      1.47    6.5%
   85      21.5     0.931    4.3%
   86     21.67     0.082    0.3%
   87     21.19     0.091    0.4%
   88      21.8     0.881    4.0%
   89     21.46     0.201    0.9%
   90     21.39     0.058    0.2%
   91     21.43      0.15    0.6%
   92     21.46     0.166    0.7%
   93     21.66     0.135    0.6%
   94      21.5     0.145    0.6%
   95     21.47     0.104    0.4%
   96     21.88     0.116    0.5%
   97     21.76     0.125    0.5%
   98     22.08      0.08    0.3%
   99     21.74      0.07    0.3%

Quality and confidence:
param     error
p         0.001

Model:
Time ~=    14.15
    + p    0.094
              µs

Reads = 2 + (0 * p)
Writes = 1 + (0 * p)
Pallet: ""pallet_treasury"", Extrinsic: ""on_initialize_proposals"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    59.96
    + p    65.48
              µs

Reads = 2 + (3 * p)
Writes = 2 + (3 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    p   mean µs  sigma µs       %
    0     67.32     0.224    0.3%
    2     201.1     0.225    0.1%
    4     327.9     0.276    0.0%
    6     457.5     0.319    0.0%
    8     588.3     0.813    0.1%
   10     717.3     0.898    0.1%
   12     845.6     1.269    0.1%
   14     977.9     1.134    0.1%
   16      1105     1.217    0.1%
   18      1236     1.749    0.1%
   20      1363     1.596    0.1%
   22      1502     1.441    0.0%
   24      1621     1.216    0.0%
   26      1757     1.687    0.0%
   28      1881     2.722    0.1%
   30      2008     2.199    0.1%
   32      2154     5.985    0.2%
   34      2280     1.585    0.0%
   36      2405     2.087    0.0%
   38      2549     2.259    0.0%
   40      2664     3.294    0.1%
   42      2811     7.178    0.2%
   44      2942     8.648    0.2%
   46      3068     7.331    0.2%
   48      3200     2.979    0.0%
   50      3315     4.379    0.1%
   52      3450     3.544    0.1%
   54      3583     3.863    0.1%
   56      3720     6.289    0.1%
   58      3841     8.783    0.2%
   60      3977     6.655    0.1%
   62      4090     8.063    0.1%
   64      4221     4.062    0.0%
   66      4358     7.997    0.1%
   68      4491     10.54    0.2%
   70      4605     4.144    0.0%
   72      4774     9.604    0.2%
   74      5003     5.515    0.1%
   76      5135     3.869    0.0%
   78      5277     2.952    0.0%
   80      5295      11.6    0.2%
   82      5423     5.191    0.0%
   84      5574     8.189    0.1%
   86      5709     12.17    0.2%
   88      5833     7.156    0.1%
   90      5967      4.39    0.0%
   92      6111     7.617    0.1%
   94      6228     7.613    0.1%
   96      6374     13.48    0.2%
   98      6489     3.116    0.0%
  100      6590     7.136    0.1%

Quality and confidence:
param     error
p         0.042

Model:
Time ~=    51.63
    + p     65.7
              µs

Reads = 2 + (3 * p)
Writes = 2 + (3 * p)


 </details>",8665,2021-04-26T12:42:37Z,0
946,shawntabrizi,bot merge,8665,2021-04-26T12:53:16Z,0
947,ghost,Waiting for commit status.,8665,2021-04-26T12:53:20Z,0
948,ghost,Merge aborted: Checks failed for 5728fa890990b78ce20d095e5a0b470405514ae0,8665,2021-04-26T12:57:21Z,0
949,shawntabrizi,bot merge,8665,2021-04-26T14:42:04Z,0
950,ghost,Trying merge.,8665,2021-04-26T14:42:08Z,0
951,cla-bot-2021[bot],"User @georgesdib, please sign the CLA [here](https://cla.parity.io/sign_cla/42518259/3).",9428,2021-07-24T17:19:11Z,0
952,thiolliere,"aura refactoring is also done in this PR https://github.com/paritytech/substrate/pull/9371

Maybe this PR can only do authority_discovery",9428,2021-08-20T10:35:16Z,0
953,georgesdib,"> aura refactoring is also done in this PR #9371
> 
> Maybe this PR can only do authority_discovery

Removed any code change in pallet aura to reflect that fact.",9428,2021-08-22T18:06:16Z,0
954,KiChjang,bot merge,9428,2021-08-30T06:11:55Z,0
955,ghost,Trying merge.,9428,2021-08-30T06:11:58Z,0
956,bkchr,I think it should be possible the create some sort of crate that exposes a function that will then run all of the tests. This can then be put into a test into each repo.,10591,2022-01-05T23:51:31Z,0
957,bkchr,This means you have forgot to forward the enabling of the `runtime-benchmarks` feature.,10548,2021-12-23T11:21:48Z,0
958,herryho,"Yes, you are right. Thanks a lot for the help :)",10548,2022-01-06T08:35:35Z,0
959,dependabot[bot],Superseded by #10598.,10586,2022-01-06T09:20:02Z,0
960,bkchr,bot merge,10564,2022-01-06T09:22:22Z,0
961,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10564,2022-01-06T09:22:34Z,0
962,shawntabrizi,@ggwpez mentioned that some of the tests failed when adding this. Did you try running tests locally?,10593,2022-01-05T17:42:57Z,0
963,emostov,"> @ggwpez mentioned that some of the tests failed when adding this. Did you try running tests locally?

Tests are working locally for me (the mock runtime just needs to be setup slightly different then the default; see `skip_genesis_ids()`) - but currently working on trying to figure out why `cargo run --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=1 --repeat=1 --pallet='pallet-bags-list' --extrinsic='*' --execution=wasm --wasm-execution compiled` is not working",10593,2022-01-05T17:46:29Z,0
964,emostov,/benchmark runtime pallet pallet_bags_list,10593,2022-01-05T19:11:47Z,0
965,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""zeke-fix-bags-list-bench-tests"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_bags_list --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/bags-list/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_bags_list"", Extrinsic: ""rebag_non_terminal"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:0)
Storage: BagsList ListNodes (r:4 w:4)
Storage: BagsList ListBags (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    62.06
              µs

Reads = 7
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    62.06
              µs

Reads = 7
Writes = 5

Pallet: ""pallet_bags_list"", Extrinsic: ""rebag_terminal"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:0)
Storage: BagsList ListNodes (r:3 w:3)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    60.58
              µs

Reads = 7
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    60.58
              µs

Reads = 7
Writes = 5

Pallet: ""pallet_bags_list"", Extrinsic: ""put_in_front_of"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: BagsList ListNodes (r:4 w:4)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:2 w:0)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: BagsList ListBags (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.77
              µs

Reads = 10
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.77
              µs

Reads = 10
Writes = 6


```

</details>",10593,2022-01-05T19:11:49Z,0
966,ggwpez,This fixes my original problem. Thanks!,10593,2022-01-06T09:22:23Z,0
967,bkchr,bot merge,10588,2022-01-06T09:56:59Z,0
968,paritytech-processbot[bot],Waiting for commit status.,10588,2022-01-06T09:57:07Z,0
969,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10588,2022-01-06T10:12:53Z,0
970,kianenigma,TODO: maybe I can add these to `WeakBoundedVec` and `BoundedBTreeMap` as well before merge. ,10590,2022-01-05T13:13:58Z,0
971,shawntabrizi,"Agree about bounded tree map, but probably we should be looking to remove weak bounded vec versus giving it more features. So i would suggest not even adding it right now until we ourselves feel major pain to need it",10590,2022-01-05T13:48:24Z,0
972,kianenigma,"added to btree map and set, but not weak bounded vec.

will wait for one of you to merge or approve again, since the code changed a bit.  ",10590,2022-01-06T09:12:26Z,0
973,kianenigma,bot merge ,10590,2022-01-06T10:55:13Z,0
974,athei,bot merge,10582,2022-01-06T10:35:55Z,0
975,paritytech-processbot[bot],Waiting for commit status.,10582,2022-01-06T10:36:05Z,0
976,bkchr,Substrate itself can not decode the metadata and that would also break when there is a runtime upgrade and the node wasn't upgraded yet.,10418,2021-12-03T12:35:20Z,0
977,dvdplm,"I'd imagine the command would essentially do:

```
		self.block_or_best(block).map_err(client_err).and_then(|block| {
			self.client
				.runtime_api()
				.metadata(&BlockId::Hash(block))
				.map(Into::into)
				.map_err(|e| Error::Client(Box::new(e)))
		})
```

Why wouldn't that work? 		",10418,2021-12-06T14:30:28Z,0
978,bkchr,"You only want the SCALE encoded metadata? I mean that could be fine, but then you also can just call the RPC method.",10418,2021-12-06T15:14:36Z,0
979,dvdplm,"> You only want the SCALE encoded metadata? I mean that could be fine, but then you also can just call the RPC method.

Yep. The context here is writing integration tests for `subxt` and this command would just be a quicker way of getting the metadata used by the tests. 
The assumption is that the startup time would be shorter and we wouldn't have to mess with any network calls or even have an rpc client in the test setup. With a `metadata dump` command we could ensure the right metadata is available in CI rather than using  a `build.rs` step.",10418,2021-12-07T09:56:51Z,0
980,bkchr,"> available in CI rather than using a `build.rs` step.

Can you elaborate this?

About what node do we also actually speak here? The substrate one or Polkadot or what? ",10418,2021-12-07T11:02:45Z,0
981,dvdplm,"> > 
> 
> Can you elaborate this?

The context is [this PR](https://github.com/paritytech/subxt/pull/333) where we add a `test-runtime` crate that queries a `substrate` node for its metadata and writes it to disk. At the moment it's a plain old `--dev --tmp` chain but it could be any type of node against whose metadata we want to run tests.

With a `metadata dump` command we could do the job done in `test-runtime`'s `build.rs` as a single step in CI instead which is a bit cleaner. It might also be handy while developing, just a quick&easy way to get the metadata rather than running the node and then `curl` it for the metadata.

Is your concern here that we add too many commands of dubious usefulness?",10418,2021-12-08T14:06:19Z,0
982,bkchr,"I thought about this again and realized that we already have CLI commands optional. So yeah, we could probably provide such a CLI command and chain implementors then can add this if required. ",10418,2021-12-08T18:58:30Z,0
983,bkchr,"> `--format`/`-f`: accepts `json` or `hex` (default)
> `--strip-docs`: do not include doc strings
> `--output`/`-o`: output to a file at the given path

However, we could not support strip docs, because we can not decode the metadata. For format I'm also not sure what you mean with json?",10418,2021-12-08T19:01:31Z,0
984,dvdplm,"> However, we could not support strip docs, because we can not decode the metadata. For format I'm also not sure what you mean with json?

Yeah that won't work. I think we might want to provide a way to strip docs in some form at some point – they are only useful for dynamic UIs – but right now we can't implement that. :/

As for the format, that's a brain fart on my end. I was thinking about decoding the metadata.",10418,2021-12-08T19:52:26Z,0
985,shawntabrizi,"Given the nature of Metadata potentially changing block to block, this is a very strange CLI command. I hope it doesnt trick people in the ecosystem to start using this in ways it shouldnt be used.",10418,2021-12-14T04:02:54Z,0
986,bkchr,"> Given the nature of Metadata potentially changing block to block

This is something we should prevent. I mean I have removed some of the changing things recently and we should also create a test for this to ensure that metadata doesn't change.",10418,2021-12-14T13:16:18Z,0
987,shawntabrizi,"I mean changing because of runtime upgrades, which could happen all the time depending on the chain.",10418,2021-12-14T18:11:06Z,0
988,bkchr,"I thought about this again and I think this use case should just be done with: https://github.com/chevdor/subwasm

Then you can just point it to a wasm file (instead of a running node) and let it extract metadata from there.",10418,2022-01-05T13:03:25Z,0
989,jsdw,"> I thought about this again and I think this use case should just be done with: https://github.com/chevdor/subwasm
> 
> Then you can just point it to a wasm file (instead of a running node) and let it extract metadata from there.

A use case for this feature request was that, given some `substrate` (or compatible) binary, when testing it is useful to be able to easily acquire the metadata currently in use to generate an interface (in this case via `subxt`), and then run tests against that interface. This replaced a previous approach whereby we hardcoded the metadata used in the tests, which of course could cause test failures against incompatible nodes, and needed manually keeping up to date.

The way we do this currently is to start a substrate node, make the RPC call to acquire metadata and then kill it. This command would simplify that process for us, basically :)",10418,2022-01-06T12:24:30Z,0
990,bkchr,"Yeah I get it, but people would also need to add this cli command to their cli. This stuff isn't coming automatically. But for testing you could also just give it the wasm binary? There isn't that much difference if you provide a node or the runtime directly?",10418,2022-01-06T13:04:04Z,0
991,ShubhamPalriwala,"Hey, so we can have the `DisabledValidators`, `Invulnerables`, and `OffendingValidators` use the BoundedVec.
Apart from that. how are we having an upper limit, is it static or dynamic?
And how do we want to validate it?",9724,2022-01-06T13:06:34Z,0
992,seunlanlege,you beauty 😍 ,10568,2022-01-04T17:26:23Z,0
993,andresilva,bot merge,10568,2022-01-06T13:08:32Z,0
994,paritytech-processbot[bot],Waiting for commit status.,10568,2022-01-06T13:08:43Z,0
995,DamianStraszak,"I'm working with @kostekIV and today we have realized what might be a possible explanation for this.

First of all, here is a visualization of the above situation:
![Screenshot from 2021-12-10 17-06-40](https://user-images.githubusercontent.com/23038619/145604676-f1299aa6-f3a6-4097-9bf3-9479f91be27b.png)

In the depicted situation the import of block D seems to fail, with the cryptic error 
```
Verification failed for block 0x7467e75d032920abda959c28c89ed93c863c304a7000e11483740e14bae09585 received from peer: 12D3KooWD5s2dkifJua69RbLwEREDdJjsNHvavNRGxdCvzhoeaLc, ""Could not fetch authorities at 0xcd92a6d2a064ed96dbe199d5f3ec4d65d4fa65e5c4c1b9e79176d8adb1d826af: InvalidAuthoritiesSet""
```

Now, the point is that in our custom finality gadget (replacement for grandpa) we certainly MUST import this block, and we even request it explicitly via `NetworkService::set_sync_fork_request` -- it still fails.

The diagnosis we currently have, is that there must be some state pruning happening for blocks outside of the finalized branch and that is the reason. Could this be correct? 

In other words: suppose we have a block `D`  that is a fork such that a conflicting block has been already finalized. Is it the expected behavior that **importing such a block should/might fail**? 
",10453,2021-12-10T16:14:30Z,0
996,bkchr,CC @andresilva ,10453,2021-12-11T13:51:31Z,0
997,DamianStraszak,Any hints on that?,10453,2021-12-20T15:22:56Z,0
998,andresilva,"> In other words: suppose we have a block D that is a fork such that a conflicting block has been already finalized. Is it the expected behavior that importing such a block should/might fail?

If you are running with archive mode for state (default mode for validators, no state pruning) then it should be possible to import the block. Otherwise, if pruning is enabled we will automatically prune all states that are not in the finalized chain. I believe we should fallback to importing just the header (since that doesn't require state as the block is not executed), but would have to double check that.",10453,2021-12-20T16:01:18Z,0
999,DamianStraszak,"Thanks for the answer @andresilva!  We run with pruning **disabled**, but there are still issues with importing such blocks...

Is there then any special logic regarding importing such blocks? (=blocks which branch out of the finalized chain, thus cannot be ever finalized) Or any special treatment for such blocks, or their state?",10453,2021-12-20T16:14:13Z,0
1000,andresilva,"Could you try collecting some logs of this happening with `-lsync=trace`? Also, in the example above can you tell whether the remaining blocks of the stale fork were imported and only `D` failed? cc @arkpar ",10453,2021-12-20T16:21:10Z,0
1001,arkpar,">We are currently importing block D which builds on top of C
In the meantime, block B is finalized.

This should not be happening in parallel. Import and finalisation events are serialized. Verification however indeed happens before the import so it my produce such errors. As soon as `B` is finalized `A` is discarded unless you run in archive mode. Pruning history limit only sets how many blocks to keep in the **canonical** chain.",10453,2021-12-20T17:12:58Z,0
1002,DamianStraszak,"Thank you both @andresilva and @arkpar for responses. 

> Could you try collecting some logs of this happening with `-lsync=trace`? Also, in the example above can you tell whether the remaining blocks of the stale fork were imported and only `D` failed? 

Yes, I will deliver such logs, just need some time. In this example, `A` and `C` were imported, and apart from that there were thousands of attempts to import `D`, all with the same error. I don't know if there existed any other blocks beyond `D` in this branch, but certainly they were not imported by this node.

We run with the `--validator` flag (and no other pruning-related flags), which AFAIK disables pruning, correct? 

",10453,2021-12-20T18:00:59Z,0
1003,DamianStraszak,"I have been trying to reproduce the issue and while I could occasionally trigger the `InvalidAuthoritiesSet` error, it was not so frequent and persistent as before... However, I've encountered numerous 

```Err(Other(ClientImport(""Potential long-range attack: block not in finalized chain."")))```
errors. I'm attaching logs -- [long-range.txt](https://github.com/paritytech/substrate/files/7802160/long-range.txt) -- the interesting block is `0x82ecce9196567ef95ef282f31c0832121274c1fd8cd79b591f01e0940e090dd8` 


Now I'm thinking that the `InvalidAuthoritiesSet` is somehow connected to that and while I don't know the exact reason it shows up, it has certainly something to do with importing ""hopeless forks"" (blocks that can never possibly be finalized). In particular, after inspecting the code in `parity/substrate/client/db/src/lib.rs` and few other files I can answer my previous question.

> Is there then any special logic regarding importing such blocks? (=blocks which branch out of the finalized chain, thus cannot be ever finalized) Or any special treatment for such blocks, or their state?

There is special logic for that -- at several places the `NotInFinalizedChain` exception is thrown in such a case. Which essentially makes it impossible to import such blocks upon request. Is that correct?


",10453,2022-01-03T13:44:13Z,0
1004,andresilva,"You are correct, I think https://github.com/paritytech/substrate/blob/master/client/service/src/client/client.rs#L541-L548 is preventing the import of any forked blocks that are behind the latest finalized block. I believe we should still be able to import those blocks but making sure that we don't change the chain head regardless of the block number of the block being imported. @arkpar do you see any reason for not doing this?",10453,2022-01-06T12:09:15Z,0
1005,arkpar,I guess the reason is not to waste computation and storage on such blocks. What would be the reason to include them? Uncle rewards?,10453,2022-01-06T12:30:01Z,0
1006,DamianStraszak,"Now that we learned that this is the intended behavior, we can actually make some changes on our side to circumvent this issue. So, the only question that remains is whether attempts of importing such blocks can cause the `InvalidAuthoritiesSet` error.

Let me also offer a few words of explanation of why is this a problem for us. We use our custom finality-gadget AlephBFT (in place of GRANDPA) and not being able to import such blocks is problematic for our data-availability mechanism. More specifically, the consensus messages in AlephBFT carry block hashes, and whenever such a message is received, we make efforts to fetch the appropriate blocks (because finalizing hashes for which we don't know the underlying data is obviously unsafe). Now, we run into troubles when we get a hash `h`, we don't know the underlying block, and it corresponds to a block like `D` in the picture above (imagine we didn't import `C` either). In such a case we have no idea what `D` is and whether we should attempt fetching it, or conclude it is irrelevant because it will never be finalized. 

That being said, we have already found a fix for that on our side, and the most important thing was to get some confirmation of our understanding on how things work from you guys! Thanks for all the responses!",10453,2022-01-06T14:13:22Z,0
1007,tomaka,Depends on https://github.com/paritytech/substrate/issues/6605,7746,2021-03-09T07:50:21Z,0
1008,tomaka,"Some remark: using just the genesis hash would make it impossible to do a hard fork.
We should use the combination of the genesis hash *and* some optional value found in the chain specs.

Adding an extra field also makes it flexible enough to not run into an issue if a chain transitions from standalone to parachain.
",7746,2021-05-03T12:04:15Z,0
1009,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",7746,2021-07-07T18:13:08Z,0
1010,tomaka,Issue still relevant and important.,7746,2021-07-08T07:20:51Z,0
1011,NukeManDan,"I am [writing](https://github.com/substrate-developer-hub/substrate-docs/pull/250) some [guides](https://github.com/substrate-developer-hub/substrate-docs/pull/256) on parachain configuration, and especially in that context, having unique network protocol IDs _seems_ more important, and as you mention, accounting for the possibility of hard forks and changes in paraID and such.

We have seen solo-chains run into improper discovery & attempted peering  because of this, and my hunch at least is in a common-relay chain context, this will be exacerbated.",7746,2021-10-09T16:21:09Z,0
1012,acatangiu,"At the network level, when looking at scale wouldn't it be expensive to string match against such a long protocol id?

Would `protocolId` + `truncatedGenesisHash` like `/dot/91b171bb1/sync/2` also work?",7746,2021-12-09T16:00:27Z,0
1013,tomaka,There's no need to truncate. We don't care about the performance of comparing strings of 50 bytes.,7746,2021-12-09T16:58:14Z,0
1014,acatangiu,Done in https://github.com/paritytech/substrate/pull/10463,7746,2022-01-05T20:46:56Z,0
1015,tomaka,"This was done for Grandpa/Beefy, but not for the syncing and transactions protocols.",7746,2022-01-06T07:36:44Z,0
1016,shawntabrizi,/benchmark runtime pallet pallet-scheduler,10356,2021-12-10T01:53:56Z,0
1017,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""gav-schedule-by-hash"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet-scheduler --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame//src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
2021-12-10 01:59:45 [0] 💸 generated 1 npos voters, 1 from validators and 0 nominators    
2021-12-10 01:59:52 Running Benchmark:pallet_scheduleron_initialize_named_resolved12/500/1    
2021-12-10 01:59:57 Running Benchmark:pallet_scheduleron_initialize_periodic_resolved28/500/1    
2021-12-10 02:00:02 Running Benchmark:pallet_scheduleron_initialize_resolved42/500/1    
2021-12-10 02:00:07 Running Benchmark:pallet_scheduleron_initialize_periodic_named10/500/1    
2021-12-10 02:00:12 Running Benchmark:pallet_scheduleron_initialize_named36/500/1    
2021-12-10 02:00:17 Running Benchmark:pallet_schedulerschedule_named18/500/1    
Error: Io(Os { code: 2, kind: NotFound, message: ""No such file or directory"" })

```

</details>

ERROR: Unable to commit file ./frame//src/weights.rs",10356,2021-12-10T01:55:24Z,0
1018,shawntabrizi,/benchmark runtime pallet pallet_scheduler,10356,2021-12-10T02:15:01Z,0
1019,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""gav-schedule-by-hash"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_scheduler --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/scheduler/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_periodic_named_resolved"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:2 w:2)
Storage: Preimage PreimageFor (r:1 w:1)
Storage: Preimage StatusFor (r:1 w:1)
Storage: Scheduler Lookup (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     11.9
    + s    34.36
              µs

Reads = 1 + (3 * s)
Writes = 1 + (4 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     49.52     0.146    0.2%
    2     83.83     0.451    0.5%
    3     119.7     0.232    0.1%
    4     154.2     0.695    0.4%
    5     187.9     1.236    0.6%
    6     220.2     1.434    0.6%
    7     251.7      0.53    0.2%
    8     284.8     0.735    0.2%
    9     320.3     0.519    0.1%
   10     353.2     0.438    0.1%
   11     387.2     1.135    0.2%
   12       422     4.329    1.0%
   13       451     0.976    0.2%
   14     486.3     0.515    0.1%
   15     519.8     1.214    0.2%
   16     559.6     9.783    1.7%
   17     592.2     3.278    0.5%
   18     623.4     2.037    0.3%
   19     667.7     7.401    1.1%
   20     697.5     9.023    1.2%
   21     728.3     1.158    0.1%
   22       767     2.731    0.3%
   23     817.9     12.71    1.5%
   24     839.4     12.81    1.5%
   25     886.4     15.47    1.7%
   26     901.4     1.218    0.1%
   27     944.5     14.35    1.5%
   28     966.4     0.851    0.0%
   29      1003     6.268    0.6%
   30      1042     12.15    1.1%
   31      1082     14.51    1.3%
   32      1130     15.39    1.3%
   33      1159     11.03    0.9%
   34      1182     10.73    0.9%
   35      1215     10.92    0.8%
   36      1258     9.505    0.7%
   37      1298     15.28    1.1%
   38      1324     13.71    1.0%
   39      1359      11.9    0.8%
   40      1406     14.93    1.0%
   41      1421     12.96    0.9%
   42      1466     16.06    1.0%
   43      1507     16.28    1.0%
   44      1528     9.584    0.6%
   45      1570     14.65    0.9%
   46      1608     13.77    0.8%
   47      1649     11.38    0.6%
   48      1669     17.23    1.0%
   49      1699     10.23    0.6%
   50      1741     15.92    0.9%

Quality and confidence:
param     error
s         0.036

Model:
Time ~=    8.183
    + s    34.67
              µs

Reads = 1 + (3 * s)
Writes = 1 + (4 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_named_resolved"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:1 w:1)
Storage: Preimage PreimageFor (r:1 w:1)
Storage: Preimage StatusFor (r:1 w:1)
Storage: Scheduler Lookup (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    14.51
    + s    26.21
              µs

Reads = 1 + (2 * s)
Writes = 1 + (3 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     40.66     0.174    0.4%
    2     68.92     0.107    0.1%
    3     95.81     0.218    0.2%
    4     120.8     0.454    0.3%
    5     146.4     0.348    0.2%
    6     171.5     0.356    0.2%
    7     197.5      0.69    0.3%
    8     221.3     0.519    0.2%
    9     248.6     0.734    0.2%
   10     272.4     0.544    0.1%
   11     305.9     6.114    1.9%
   12     324.8     0.595    0.1%
   13     350.5     0.646    0.1%
   14     387.3     2.845    0.7%
   15     410.6     0.731    0.1%
   16       438     2.098    0.4%
   17     467.3     1.251    0.2%
   18     495.8     0.895    0.1%
   19     507.5     0.617    0.1%
   20     533.6     2.938    0.5%
   21     562.3     6.847    1.2%
   22       584     1.951    0.3%
   23     610.7     0.573    0.0%
   24     639.1     1.529    0.2%
   25     660.1     3.014    0.4%
   26     693.4     5.515    0.7%
   27     719.2     9.999    1.3%
   28     746.4     7.423    0.9%
   29     791.7     11.33    1.4%
   30       788     1.729    0.2%
   31       824     9.966    1.2%
   32     845.2      2.71    0.3%
   33       879     11.62    1.3%
   34     904.5     3.333    0.3%
   35     930.2     2.592    0.2%
   36     964.1     11.15    1.1%
   37     984.3     10.15    1.0%
   38      1027     13.71    1.3%
   39      1033     2.018    0.1%
   40      1067     10.62    0.9%
   41      1090     10.14    0.9%
   42      1124     12.49    1.1%
   43      1155        12    1.0%
   44      1176     11.65    0.9%
   45      1204      14.1    1.1%
   46      1237      13.2    1.0%
   47      1251     8.089    0.6%
   48      1277     13.91    1.0%
   49      1301     10.97    0.8%
   50      1337      13.7    1.0%

Quality and confidence:
param     error
s          0.03

Model:
Time ~=    11.52
    + s    26.38
              µs

Reads = 1 + (2 * s)
Writes = 1 + (3 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_periodic_resolved"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:2 w:2)
Storage: Preimage PreimageFor (r:1 w:1)
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    11.21
    + s    28.74
              µs

Reads = 1 + (3 * s)
Writes = 1 + (3 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     43.33     0.119    0.2%
    2     73.75     0.202    0.2%
    3     101.8     0.867    0.8%
    4     129.6     1.503    1.1%
    5     157.4     0.276    0.1%
    6     185.3     0.392    0.2%
    7     210.4     0.368    0.1%
    8     245.6     3.626    1.4%
    9     268.6     0.307    0.1%
   10     296.7     0.587    0.1%
   11     336.1     9.675    2.8%
   12     352.6     0.631    0.1%
   13     380.4     0.621    0.1%
   14     407.1     0.721    0.1%
   15     438.1     10.33    2.3%
   16     461.6     0.885    0.1%
   17     498.2      8.05    1.6%
   18     524.3     1.722    0.3%
   19     551.6     4.973    0.9%
   20     574.3     0.905    0.1%
   21     608.9     7.609    1.2%
   22     642.3     2.474    0.3%
   23     667.8     2.168    0.3%
   24     698.9     4.129    0.5%
   25     734.1     12.05    1.6%
   26     768.9     12.82    1.6%
   27     792.5     8.892    1.1%
   28     814.4     5.421    0.6%
   29       840     10.75    1.2%
   30     872.4     14.22    1.6%
   31       890     1.228    0.1%
   32     931.5     12.08    1.2%
   33     969.8        11    1.1%
   34     987.6     10.28    1.0%
   35      1019     12.21    1.1%
   36      1059     14.89    1.4%
   37      1077     10.45    0.9%
   38      1104      11.1    1.0%
   39      1140     11.23    0.9%
   40      1165     1.811    0.1%
   41      1192     9.436    0.7%
   42      1221     9.318    0.7%
   43      1259      9.92    0.7%
   44      1286     13.09    1.0%
   45      1300     3.003    0.2%
   46      1329     8.219    0.6%
   47      1391     7.728    0.5%
   48      1402     12.39    0.8%
   49      1425     13.38    0.9%
   50      1457     14.37    0.9%

Quality and confidence:
param     error
s         0.033

Model:
Time ~=    8.222
    + s    28.92
              µs

Reads = 1 + (3 * s)
Writes = 1 + (3 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_resolved"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:1 w:1)
Storage: Preimage PreimageFor (r:1 w:1)
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    14.05
    + s    23.67
              µs

Reads = 1 + (2 * s)
Writes = 1 + (2 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1      38.2     0.244    0.6%
    2     64.69     0.246    0.3%
    3      86.9     1.046    1.2%
    4     109.1     1.065    0.9%
    5     135.5       1.4    1.0%
    6     156.9      0.42    0.2%
    7     180.1     0.369    0.2%
    8       202     0.414    0.2%
    9     226.6     0.351    0.1%
   10     249.1      0.48    0.1%
   11     271.6     0.528    0.1%
   12     297.3     0.446    0.1%
   13       324     2.853    0.8%
   14       343     0.942    0.2%
   15     364.8     0.588    0.1%
   16     390.6     0.855    0.2%
   17     415.7     1.519    0.3%
   18     444.5      4.52    1.0%
   19     463.5      1.89    0.4%
   20     486.2     5.569    1.1%
   21     506.6     1.736    0.3%
   22     534.2     5.002    0.9%
   23     556.2     1.665    0.2%
   24     577.9      4.64    0.8%
   25     605.3     6.513    1.0%
   26     631.2     3.131    0.4%
   27     653.8     8.654    1.3%
   28     670.9     1.007    0.1%
   29       703      11.6    1.6%
   30       735     12.23    1.6%
   31     750.5     10.36    1.3%
   32     776.6     9.795    1.2%
   33     803.7     9.915    1.2%
   34     820.6      8.59    1.0%
   35     841.3     1.745    0.2%
   36     864.5     2.011    0.2%
   37     900.5     13.64    1.5%
   38     918.8     5.846    0.6%
   39     941.5     10.57    1.1%
   40     968.9     10.01    1.0%
   41     990.4     8.713    0.8%
   42      1024     13.63    1.3%
   43      1032     4.652    0.4%
   44      1054     3.099    0.2%
   45      1089     12.53    1.1%
   46      1115     12.88    1.1%
   47      1140      14.4    1.2%
   48      1161     15.03    1.2%
   49      1172     14.02    1.1%
   50      1204     9.717    0.8%

Quality and confidence:
param     error
s         0.026

Model:
Time ~=    11.61
    + s    23.85
              µs

Reads = 1 + (2 * s)
Writes = 1 + (2 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_named_aborted"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:2 w:2)
Storage: Preimage PreimageFor (r:1 w:0)
Storage: Scheduler Lookup (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    11.58
    + s    11.67
              µs

Reads = 2 + (1 * s)
Writes = 2 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1        22      0.05    0.2%
    2     35.25     0.082    0.2%
    3     46.94     0.102    0.2%
    4     58.27     0.137    0.2%
    5     70.55     0.673    0.9%
    6     81.75     0.209    0.2%
    7     92.91     0.382    0.4%
    8     104.5     0.547    0.5%
    9     119.7     0.223    0.1%
   10     128.8     0.339    0.2%
   11     140.7     0.389    0.2%
   12     150.3      0.14    0.0%
   13     162.6     0.569    0.3%
   14     174.4     0.356    0.2%
   15     185.4     0.466    0.2%
   16     196.4      0.61    0.3%
   17     212.4     0.552    0.2%
   18     221.8     0.401    0.1%
   19     233.3     0.678    0.2%
   20     244.4     0.601    0.2%
   21     254.3     0.293    0.1%
   22     266.2     0.634    0.2%
   23     278.7     1.031    0.3%
   24     290.2     0.964    0.3%
   25     301.6     1.023    0.3%
   26     311.9     1.023    0.3%
   27     330.4     6.956    2.1%
   28       337     0.625    0.1%
   29     348.8     0.874    0.2%
   30       361      0.57    0.1%
   31       372     0.569    0.1%
   32       384      1.01    0.2%
   33       420     10.96    2.6%
   34     424.4     4.181    0.9%
   35     422.6     1.148    0.2%
   36     435.3     0.887    0.2%
   37     446.8     3.443    0.7%
   38     457.1     0.996    0.2%
   39     466.8      0.84    0.1%
   40     479.6     1.553    0.3%
   41     489.8     1.198    0.2%
   42     501.1     1.804    0.3%
   43     515.1     3.943    0.7%
   44     528.1     5.268    0.9%
   45     537.2     1.864    0.3%
   46     549.9     2.134    0.3%
   47     563.3     5.558    0.9%
   48     571.9     5.141    0.8%
   49     585.4     4.774    0.8%
   50     591.7     3.956    0.6%

Quality and confidence:
param     error
s         0.015

Model:
Time ~=    11.06
    + s    11.72
              µs

Reads = 2 + (1 * s)
Writes = 2 + (1 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_aborted"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:2 w:2)
Storage: Preimage PreimageFor (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    12.88
    + s    6.386
              µs

Reads = 2 + (1 * s)
Writes = 2 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     15.73     0.081    0.5%
    2     23.28     0.111    0.4%
    3     30.63     0.091    0.2%
    4     36.98     0.148    0.4%
    5      44.4     0.147    0.3%
    6      50.4     0.618    1.2%
    7     57.78     0.158    0.2%
    8     62.45     0.352    0.5%
    9     71.92     0.336    0.4%
   10      78.2     0.124    0.1%
   11     82.88     0.123    0.1%
   12     90.79     0.285    0.3%
   13     95.82     0.188    0.1%
   14     103.6     0.199    0.1%
   15     108.9      0.91    0.8%
   16     114.4     0.309    0.2%
   17     123.4     0.212    0.1%
   18     129.4     0.209    0.1%
   19     135.9      0.39    0.2%
   20     140.6     0.293    0.2%
   21     146.9     0.314    0.2%
   22       153     0.997    0.6%
   23     159.2     0.305    0.1%
   24     165.8     0.655    0.3%
   25     173.9     0.303    0.1%
   26     179.6     0.442    0.2%
   27     186.1     0.152    0.0%
   28     191.8     0.499    0.2%
   29     198.3     0.348    0.1%
   30     203.4     0.298    0.1%
   31     215.2     0.687    0.3%
   32       216     0.378    0.1%
   33     224.4     1.165    0.5%
   34     232.4     0.354    0.1%
   35     238.3     0.413    0.1%
   36     245.3     0.716    0.2%
   37       250      0.54    0.2%
   38     256.6      2.01    0.7%
   39     262.6     0.634    0.2%
   40     267.2     0.365    0.1%
   41     273.4     0.684    0.2%
   42     280.7     0.233    0.0%
   43     286.4     0.658    0.2%
   44     292.5     0.438    0.1%
   45     300.7     0.636    0.2%
   46     305.5      1.19    0.3%
   47     308.8     0.865    0.2%
   48     317.9     0.567    0.1%
   49     323.7     0.868    0.2%
   50     328.7     0.934    0.2%

Quality and confidence:
param     error
s         0.005

Model:
Time ~=    13.04
    + s    6.378
              µs

Reads = 2 + (1 * s)
Writes = 2 + (0 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_periodic_named"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:2 w:2)
Storage: Scheduler Lookup (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    16.84
    + s    17.72
              µs

Reads = 1 + (1 * s)
Writes = 1 + (2 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     33.17     0.163    0.4%
    2     53.17     0.183    0.3%
    3     71.37      0.16    0.2%
    4     89.09     0.434    0.4%
    5     108.6     0.194    0.1%
    6     123.4      0.19    0.1%
    7     140.7     0.198    0.1%
    8     161.1     0.456    0.2%
    9     183.4     4.002    2.1%
   10     194.4     0.332    0.1%
   11     212.5     0.694    0.3%
   12     229.5     0.434    0.1%
   13     246.6     0.331    0.1%
   14     263.8     0.587    0.2%
   15       280     0.706    0.2%
   16     297.6     0.303    0.1%
   17     318.7      0.76    0.2%
   18     335.2     0.607    0.1%
   19     350.6     0.289    0.0%
   20     370.7     2.449    0.6%
   21     390.6      8.35    2.1%
   22     402.8     0.679    0.1%
   23     427.8     5.156    1.2%
   24     439.4     2.303    0.5%
   25     457.3     2.224    0.4%
   26     472.5     0.455    0.0%
   27       491     0.755    0.1%
   28     510.1     2.165    0.4%
   29     531.6     2.702    0.5%
   30     541.8     0.758    0.1%
   31       564     10.97    1.9%
   32     588.1     12.73    2.1%
   33     596.6     0.575    0.0%
   34     621.2     7.306    1.1%
   35       645     16.35    2.5%
   36     654.5     8.839    1.3%
   37     669.2     3.595    0.5%
   38     695.3      2.42    0.3%
   39     708.3     3.559    0.5%
   40     733.8     10.77    1.4%
   41     742.5     3.243    0.4%
   42     762.8     1.851    0.2%
   43       785     13.03    1.6%
   44     805.8      8.32    1.0%
   45     819.7     7.361    0.8%
   46       849     14.41    1.6%
   47     853.5     5.978    0.7%
   48     870.8     7.975    0.9%
   49     899.1     10.85    1.2%
   50       943     9.751    1.0%

Quality and confidence:
param     error
s         0.027

Model:
Time ~=    13.49
    + s    17.93
              µs

Reads = 1 + (1 * s)
Writes = 1 + (2 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_periodic"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17.97
    + s     11.9
              µs

Reads = 1 + (1 * s)
Writes = 1 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     27.08     0.133    0.4%
    2     40.99     0.366    0.8%
    3     54.07     1.446    2.6%
    4     64.97     0.349    0.5%
    5     78.01      0.48    0.6%
    6     89.66     0.409    0.4%
    7     101.9     1.542    1.5%
    8     112.6     0.246    0.2%
    9     127.2     0.391    0.3%
   10     140.7     0.781    0.5%
   11     152.9     0.529    0.3%
   12     168.8     2.904    1.7%
   13     175.4     0.205    0.1%
   14     182.2     0.305    0.1%
   15     194.7     0.641    0.3%
   16     205.9     0.755    0.3%
   17     220.6     0.367    0.1%
   18     232.4     0.211    0.0%
   19     243.5     0.341    0.1%
   20     256.3     0.679    0.2%
   21     268.8     0.352    0.1%
   22     278.8     0.375    0.1%
   23     295.8     1.463    0.4%
   24     301.5       0.4    0.1%
   25     314.7      0.44    0.1%
   26     326.4     0.718    0.2%
   27     337.6     0.608    0.1%
   28     354.7      3.49    0.9%
   29     360.7     2.029    0.5%
   30     372.5     0.326    0.0%
   31     383.3     0.616    0.1%
   32     403.9     3.039    0.7%
   33     413.9     0.879    0.2%
   34     423.8     0.598    0.1%
   35     434.1     0.686    0.1%
   36     445.5     0.596    0.1%
   37     459.2     1.044    0.2%
   38     470.3     3.522    0.7%
   39     485.3     7.399    1.5%
   40     494.6     6.485    1.3%
   41     503.8     3.373    0.6%
   42     513.9     0.835    0.1%
   43     529.9     10.85    2.0%
   44     538.8     1.282    0.2%
   45       557     12.09    2.1%
   46     570.4     4.709    0.8%
   47       589     8.768    1.4%
   48       594     4.042    0.6%
   49     616.6     13.61    2.2%
   50     619.9     6.499    1.0%

Quality and confidence:
param     error
s         0.016

Model:
Time ~=    17.07
    + s    11.98
              µs

Reads = 1 + (1 * s)
Writes = 1 + (1 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize_named"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:1 w:1)
Storage: Scheduler Lookup (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    18.65
    + s    9.904
              µs

Reads = 1 + (0 * s)
Writes = 1 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     25.26     0.093    0.3%
    2     36.95     0.185    0.5%
    3     46.99     0.192    0.4%
    4     57.33     0.163    0.2%
    5     68.57     0.191    0.2%
    6     78.39     0.176    0.2%
    7     87.85     0.134    0.1%
    8     96.53       0.9    0.9%
    9     110.7     0.447    0.4%
   10     118.8     1.212    1.0%
   11     127.6     0.415    0.3%
   12     137.2     0.315    0.2%
   13       149     1.272    0.8%
   14     156.8     0.232    0.1%
   15     166.1     0.264    0.1%
   16       176     0.337    0.1%
   17     192.9     1.339    0.6%
   18     198.8     0.286    0.1%
   19     208.1     0.415    0.1%
   20     217.1     0.457    0.2%
   21     227.5     0.579    0.2%
   22     236.5     0.241    0.1%
   23     246.6     0.287    0.1%
   24     256.5     0.211    0.0%
   25     266.2     2.697    1.0%
   26     275.4     0.387    0.1%
   27     285.5     0.642    0.2%
   28     294.5     0.244    0.0%
   29     303.9     0.623    0.2%
   30     313.8     0.274    0.0%
   31     324.6     3.083    0.9%
   32     333.2     0.584    0.1%
   33       351     5.586    1.5%
   34     358.4     0.584    0.1%
   35     372.9     8.755    2.3%
   36     377.2     0.435    0.1%
   37     386.8     0.863    0.2%
   38     396.3      0.59    0.1%
   39     406.3     1.036    0.2%
   40       416     0.956    0.2%
   41     422.7     0.773    0.1%
   42       433     0.635    0.1%
   43     444.6     4.149    0.9%
   44     457.2      8.08    1.7%
   45     462.2     0.998    0.2%
   46     469.8     0.524    0.1%
   47     480.5     0.315    0.0%
   48     490.7     1.033    0.2%
   49     504.3     0.591    0.1%
   50     517.3     7.694    1.4%

Quality and confidence:
param     error
s          0.01

Model:
Time ~=    18.73
    + s    9.909
              µs

Reads = 1 + (0 * s)
Writes = 1 + (1 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     18.1
    + s    7.707
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     22.33     0.129    0.5%
    2     31.35     0.092    0.2%
    3      40.3      0.11    0.2%
    4     47.76     0.129    0.2%
    5     56.49     0.156    0.2%
    6     64.68     0.191    0.2%
    7     72.22       0.1    0.1%
    8      79.8     0.177    0.2%
    9     88.23      0.76    0.8%
   10     94.53     0.284    0.3%
   11     102.1     0.356    0.3%
   12     110.2      1.16    1.0%
   13     119.5     0.628    0.5%
   14     126.9     0.146    0.1%
   15     135.1     0.275    0.2%
   16     142.3     0.195    0.1%
   17     149.6     0.234    0.1%
   18     156.9     0.171    0.1%
   19       168     1.037    0.6%
   20     174.5     1.973    1.1%
   21     179.3     0.328    0.1%
   22     188.4     2.098    1.1%
   23     194.3     0.203    0.1%
   24     202.9     1.708    0.8%
   25     211.4     2.056    0.9%
   26       221     0.178    0.0%
   27     223.7     0.257    0.1%
   28     231.3     0.339    0.1%
   29     238.8     0.388    0.1%
   30     245.5     0.318    0.1%
   31     258.7     0.369    0.1%
   32     260.6     0.306    0.1%
   33     276.9     4.107    1.4%
   34     281.9     0.351    0.1%
   35     289.1     2.658    0.9%
   36     295.7     0.261    0.0%
   37     303.3     0.272    0.0%
   38     311.3     0.548    0.1%
   39     319.3     0.711    0.2%
   40     327.6     2.759    0.8%
   41     337.2     7.482    2.2%
   42     344.1     4.126    1.1%
   43     348.9     0.497    0.1%
   44     357.1     3.507    0.9%
   45     369.2     3.977    1.0%
   46     370.1     0.908    0.2%
   47     377.1     1.192    0.3%
   48     387.5       3.9    1.0%
   49     391.8     0.917    0.2%
   50     405.4     6.709    1.6%

Quality and confidence:
param     error
s         0.009

Model:
Time ~=    17.84
    + s    7.719
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""schedule"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    23.48
    + s    0.081
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0      21.6      0.13    0.6%
    1     22.44     0.075    0.3%
    2      23.1     0.161    0.6%
    3     23.51     0.114    0.4%
    4     23.26     0.124    0.5%
    5     23.74     0.105    0.4%
    6     23.98     0.193    0.8%
    7     24.23     0.111    0.4%
    8     24.05     0.118    0.4%
    9     24.18     0.125    0.5%
   10     24.29     0.181    0.7%
   11     24.66     0.078    0.3%
   12     24.93     0.129    0.5%
   13     24.84     0.137    0.5%
   14     24.83     0.314    1.2%
   15     25.06      0.23    0.9%
   16     24.69     0.074    0.2%
   17     25.29     0.158    0.6%
   18     25.58     0.075    0.2%
   19     24.88     0.152    0.6%
   20     25.13     0.052    0.2%
   21     24.76     0.088    0.3%
   22     25.83     0.174    0.6%
   23     25.68     0.154    0.5%
   24     25.51     0.118    0.4%
   25     25.54     0.108    0.4%
   26     25.56     0.212    0.8%
   27     25.69     0.112    0.4%
   28     25.76     0.168    0.6%
   29     25.84     0.175    0.6%
   30     26.09      0.18    0.6%
   31     25.88     0.144    0.5%
   32     26.19     0.119    0.4%
   33     25.25     0.123    0.4%
   34      25.3     0.103    0.4%
   35     26.05     0.212    0.8%
   36     26.24      0.13    0.4%
   37     26.68     0.084    0.3%
   38     26.03     0.144    0.5%
   39     26.82     0.051    0.1%
   40     27.57      0.11    0.3%
   41      27.2     0.126    0.4%
   42     27.15     0.258    0.9%
   43     27.09     0.262    0.9%
   44     27.23     0.366    1.3%
   45     27.63     0.356    1.2%
   46      26.4     0.158    0.5%
   47     26.77     0.119    0.4%
   48      27.2     0.396    1.4%
   49     26.57      0.12    0.4%
   50     26.51      0.14    0.5%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    23.36
    + s    0.082
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""cancel"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Agenda (r:1 w:1)
Storage: Scheduler Lookup (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.41
    + s    1.217
              µs

Reads = 1 + (0 * s)
Writes = 2 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     22.16     0.093    0.4%
    2     24.05     0.132    0.5%
    3     25.32     0.096    0.3%
    4     26.34     0.155    0.5%
    5     28.23     0.106    0.3%
    6     29.64     0.139    0.4%
    7     30.81     0.081    0.2%
    8     31.92     0.165    0.5%
    9     34.17     0.044    0.1%
   10     34.57     0.105    0.3%
   11     36.21     0.414    1.1%
   12      37.7      0.35    0.9%
   13     38.81     0.272    0.7%
   14     39.21     0.102    0.2%
   15     40.21     0.137    0.3%
   16     41.18     0.096    0.2%
   17     44.05     0.113    0.2%
   18     45.33     0.275    0.6%
   19     46.07     0.118    0.2%
   20     47.52     0.131    0.2%
   21     49.39     0.378    0.7%
   22     49.44     0.157    0.3%
   23     50.99     0.335    0.6%
   24     51.85     0.152    0.2%
   25      52.7      0.15    0.2%
   26     53.68     0.097    0.1%
   27     55.31     0.125    0.2%
   28     55.99      0.49    0.8%
   29     58.26     0.124    0.2%
   30     59.35     0.123    0.2%
   31     60.16     0.114    0.1%
   32     61.33     0.158    0.2%
   33     61.67     0.235    0.3%
   34     63.24     0.151    0.2%
   35     64.19     0.114    0.1%
   36     65.71     0.169    0.2%
   37     66.14     0.237    0.3%
   38     69.11     0.205    0.2%
   39      71.4     0.625    0.8%
   40     72.13     0.118    0.1%
   41     72.02      0.32    0.4%
   42     74.09     0.175    0.2%
   43     74.69     0.301    0.4%
   44     75.68     0.427    0.5%
   45     76.64      0.35    0.4%
   46     77.94      0.23    0.2%
   47     79.31     0.079    0.0%
   48     80.86     0.397    0.4%
   49     81.46      0.29    0.3%
   50     83.41     0.188    0.2%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    22.35
    + s    1.219
              µs

Reads = 1 + (0 * s)
Writes = 2 + (0 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""schedule_named"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Lookup (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.58
    + s    0.097
              µs

Reads = 2 + (0 * s)
Writes = 2 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     26.78     0.132    0.4%
    1     28.07     0.112    0.3%
    2     28.45      0.06    0.2%
    3     28.82     0.088    0.3%
    4     28.88     0.093    0.3%
    5     28.89     0.072    0.2%
    6     29.37     0.097    0.3%
    7     29.07     0.275    0.9%
    8     29.52     0.135    0.4%
    9     29.02     0.171    0.5%
   10      29.7     0.253    0.8%
   11     30.09     0.135    0.4%
   12     29.74     0.076    0.2%
   13     30.74     0.161    0.5%
   14     30.26     0.217    0.7%
   15     30.84     0.267    0.8%
   16     30.33     0.239    0.7%
   17     30.62     0.399    1.3%
   18     30.66     0.156    0.5%
   19     30.03     0.161    0.5%
   20     30.49     0.087    0.2%
   21     31.28      0.25    0.7%
   22     30.51     0.147    0.4%
   23     31.05     0.129    0.4%
   24     31.07     0.164    0.5%
   25     30.88     0.196    0.6%
   26     31.53     0.101    0.3%
   27     31.23     0.096    0.3%
   28     31.44     0.094    0.2%
   29     31.08     0.106    0.3%
   30     31.83     0.098    0.3%
   31     31.15     0.138    0.4%
   32     30.58       0.2    0.6%
   33     31.14     0.321    1.0%
   34     31.05     0.146    0.4%
   35     31.29     0.165    0.5%
   36     32.29     0.109    0.3%
   37     32.19     0.077    0.2%
   38     32.44     0.097    0.2%
   39     31.22     0.115    0.3%
   40     32.01     0.295    0.9%
   41     32.06     0.111    0.3%
   42     33.44     0.308    0.9%
   43      32.7     0.366    1.1%
   44      33.1     0.161    0.4%
   45     32.73     0.181    0.5%
   46     33.55       0.1    0.2%
   47     33.32      0.11    0.3%
   48     32.62      0.25    0.7%
   49     33.74     0.307    0.9%
   50     33.74     0.241    0.7%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    28.49
    + s    0.098
              µs

Reads = 2 + (0 * s)
Writes = 2 + (0 * s)

Pallet: ""pallet_scheduler"", Extrinsic: ""cancel_named"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Lookup (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.17
    + s    1.218
              µs

Reads = 2 + (0 * s)
Writes = 2 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     24.15       0.1    0.4%
    2     25.98     0.059    0.2%
    3     27.91     0.228    0.8%
    4      28.7     0.143    0.4%
    5     30.94     0.091    0.2%
    6     32.04     0.252    0.7%
    7     33.58     0.091    0.2%
    8     34.72      0.18    0.5%
    9     36.62     0.116    0.3%
   10     38.03      0.11    0.2%
   11     39.36      0.16    0.4%
   12     40.55     0.285    0.7%
   13     41.52     0.296    0.7%
   14     41.92     0.102    0.2%
   15     43.76     0.168    0.3%
   16     44.69     0.312    0.6%
   17     46.95     0.147    0.3%
   18     47.86     0.119    0.2%
   19     48.92     0.066    0.1%
   20     49.98     0.169    0.3%
   21      51.1     0.175    0.3%
   22     52.16     0.112    0.2%
   23     53.69     0.126    0.2%
   24     54.26      0.09    0.1%
   25     55.41     0.118    0.2%
   26      56.8     0.067    0.1%
   27     57.54     0.097    0.1%
   28     58.76     0.126    0.2%
   29      61.1     0.158    0.2%
   30     62.43     0.097    0.1%
   31     63.02      0.22    0.3%
   32     64.42      0.19    0.2%
   33     65.12     0.081    0.1%
   34      65.6     0.107    0.1%
   35     67.46     0.139    0.2%
   36     68.56     0.098    0.1%
   37     69.92     0.155    0.2%
   38     73.43     0.821    1.1%
   39     72.84     0.504    0.6%
   40     74.09     0.086    0.1%
   41     74.66     0.165    0.2%
   42     76.18      0.21    0.2%
   43     77.17     0.463    0.5%
   44     78.05     0.223    0.2%
   45      79.9     0.139    0.1%
   46      80.8     0.174    0.2%
   47     82.01     0.138    0.1%
   48     83.34     0.378    0.4%
   49     85.83     0.253    0.2%
   50     85.25     0.182    0.2%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    24.99
    + s    1.223
              µs

Reads = 2 + (0 * s)
Writes = 2 + (0 * s)


```

</details>",10356,2021-12-10T02:15:03Z,0
1020,shawntabrizi,/benchmark runtime pallet pallet_preimage,10356,2021-12-10T02:20:11Z,0
1021,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""gav-schedule-by-hash"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_preimage --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/preimage/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_preimage"", Extrinsic: ""note_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage PreimageFor (r:1 w:1)
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + s    0.002
              µs

Reads = 2 + (0 * s)
Writes = 2 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     40.01     0.111    0.2%
83886     212.9      2.04    0.9%
167772       383     0.746    0.1%
251658     554.4     4.294    0.7%
335544     735.2     13.18    1.7%
419430     905.3     14.17    1.5%
503316      1072     12.48    1.1%
587202      1243     13.53    1.0%
671088      1430     10.42    0.7%
754974      1593      14.1    0.8%
838860      1767     14.88    0.8%
922746      1941     15.79    0.8%
1006632      2106      15.6    0.7%
1090518      2301     12.87    0.5%
1174404      2483     14.75    0.5%
1258290      2673     23.89    0.8%
1342176      2819     11.36    0.4%
1426062      3011     19.43    0.6%
1509948      3186     17.79    0.5%
1593834      3354     12.57    0.3%
1677720      3544     12.78    0.3%
1761606      3726     24.85    0.6%
1845492      3921     15.04    0.3%
1929378      4105     21.61    0.5%
2013264      4282     12.55    0.2%
2097150      4469     15.22    0.3%
2181036      4634     6.133    0.1%
2264922      4892     7.659    0.1%
2348808      5002      13.8    0.2%
2432694      5172     20.58    0.3%
2516580      5372     20.92    0.3%
2600466      5541     16.97    0.3%
2684352      5714        17    0.2%
2768238      5920     25.26    0.4%
2852124      6107     11.98    0.1%
2936010      6282     11.46    0.1%
3019896      6476     17.43    0.2%
3103782      6647      15.2    0.2%
3187668      6813     16.38    0.2%
3271554      7001     25.77    0.3%
3355440      7178     9.671    0.1%
3439326      7379     17.22    0.2%
3523212      7548     10.51    0.1%
3607098      7737     16.34    0.2%
3690984      7909     23.55    0.2%
3774870      8095     13.59    0.1%
3858756      8287     9.703    0.1%
3942642      8514     30.77    0.3%
4026528      8678     31.42    0.3%
4110414      8840     12.48    0.1%
4194300      9011     22.73    0.2%

Quality and confidence:
param     error
s             0

Model:
Time ~=        0
    + s    0.002
              µs

Reads = 2 + (0 * s)
Writes = 2 + (0 * s)

Pallet: ""pallet_preimage"", Extrinsic: ""note_requested_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage PreimageFor (r:1 w:1)
Storage: Preimage StatusFor (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + s    0.002
              µs

Reads = 2 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     23.15      0.15    0.6%
83886     194.3     0.463    0.2%
167772       365      0.32    0.0%
251658     535.4     0.777    0.1%
335544     709.3     10.71    1.5%
419430     892.1      9.92    1.1%
503316      1048     8.952    0.8%
587202      1219     12.14    0.9%
671088      1415     1.401    0.0%
754974      1572     16.05    1.0%
838860      1737     16.02    0.9%
922746      1933     11.14    0.5%
1006632      2084     12.28    0.5%
1090518      2265     12.28    0.5%
1174404      2453     7.727    0.3%
1258290      2646     14.39    0.5%
1342176      2802     9.566    0.3%
1426062      2983     8.137    0.2%
1509948      3158     9.053    0.2%
1593834      3338     9.365    0.2%
1677720      3516     17.22    0.4%
1761606      3708     15.86    0.4%
1845492      3886     11.88    0.3%
1929378      4063      12.4    0.3%
2013264      4252     12.79    0.3%
2097150      4409     12.42    0.2%
2181036      4626     17.63    0.3%
2264922      4804      14.1    0.2%
2348808      4974     13.61    0.2%
2432694      5163     16.04    0.3%
2516580      5338     18.73    0.3%
2600466      5515     17.71    0.3%
2684352      5697     17.66    0.3%
2768238      5871     12.92    0.2%
2852124      6079     15.35    0.2%
2936010      6237     12.05    0.1%
3019896      6431     26.43    0.4%
3103782      6623     38.17    0.5%
3187668      6788     16.38    0.2%
3271554      6957     11.16    0.1%
3355440      7196     56.95    0.7%
3439326      7356     24.09    0.3%
3523212      7557     17.79    0.2%
3607098      7700     18.12    0.2%
3690984      7915     22.56    0.2%
3774870      8063     19.42    0.2%
3858756      8246       8.4    0.1%
3942642      8427     10.36    0.1%
4026528      8631     14.63    0.1%
4110414      8826     24.48    0.2%
4194300      8986     17.78    0.1%

Quality and confidence:
param     error
s             0

Model:
Time ~=        0
    + s    0.002
              µs

Reads = 2 + (0 * s)
Writes = 1 + (0 * s)

Pallet: ""pallet_preimage"", Extrinsic: ""note_no_deposit_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage PreimageFor (r:1 w:1)
Storage: Preimage StatusFor (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + s    0.002
              µs

Reads = 2 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     21.74     0.132    0.6%
83886     192.8     0.824    0.4%
167772     374.4     6.562    1.7%
251658       547      1.51    0.2%
335544     718.8     0.778    0.1%
419430       882     12.82    1.4%
503316      1044     1.111    0.1%
587202      1227     14.27    1.1%
671088      1399     14.81    1.0%
754974      1562     10.78    0.6%
838860      1748     17.02    0.9%
922746      1918     16.35    0.8%
1006632      2091     19.25    0.9%
1090518      2275     14.25    0.6%
1174404      2458     19.72    0.8%
1258290      2640     13.53    0.5%
1342176      2812     13.62    0.4%
1426062      2978     16.25    0.5%
1509948      3182     11.32    0.3%
1593834      3335     7.342    0.2%
1677720      3535     13.99    0.3%
1761606      3728     11.42    0.3%
1845492      3899      11.7    0.3%
1929378      4101     17.85    0.4%
2013264      4255     12.67    0.2%
2097150      4407     13.61    0.3%
2181036      4623     15.17    0.3%
2264922      4803     20.31    0.4%
2348808      5003     15.54    0.3%
2432694      5155     12.57    0.2%
2516580      5333     18.77    0.3%
2600466      5505     11.53    0.2%
2684352      5687     9.854    0.1%
2768238      5869     19.06    0.3%
2852124      6071     15.68    0.2%
2936010      6247     17.92    0.2%
3019896      6437     22.03    0.3%
3103782      6605     20.58    0.3%
3187668      6817     14.81    0.2%
3271554      6972     13.81    0.1%
3355440      7131     10.66    0.1%
3439326      7335     13.82    0.1%
3523212      7517     19.09    0.2%
3607098      7697     17.08    0.2%
3690984      7874     15.43    0.1%
3774870      8070     15.14    0.1%
3858756      8258     24.98    0.3%
3942642      8445     18.97    0.2%
4026528      8619     10.71    0.1%
4110414      8794     18.86    0.2%
4194300      9018     23.58    0.2%

Quality and confidence:
param     error
s             0

Model:
Time ~=        0
    + s    0.002
              µs

Reads = 2 + (0 * s)
Writes = 1 + (0 * s)

Pallet: ""pallet_preimage"", Extrinsic: ""unnote_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)
Storage: Preimage PreimageFor (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    60.56
              µs

Reads = 1
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    60.56
              µs

Reads = 1
Writes = 2

Pallet: ""pallet_preimage"", Extrinsic: ""unnote_no_deposit_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)
Storage: Preimage PreimageFor (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.57
              µs

Reads = 1
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.57
              µs

Reads = 1
Writes = 2

Pallet: ""pallet_preimage"", Extrinsic: ""request_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.86
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.86
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_preimage"", Extrinsic: ""request_no_deposit_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.05
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.05
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_preimage"", Extrinsic: ""request_unnoted_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     21.5
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     21.5
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_preimage"", Extrinsic: ""request_requested_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    7.798
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    7.798
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_preimage"", Extrinsic: ""unrequest_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)
Storage: Preimage PreimageFor (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.77
              µs

Reads = 1
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.77
              µs

Reads = 1
Writes = 2

Pallet: ""pallet_preimage"", Extrinsic: ""unrequest_unnoted_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)
Storage: Preimage PreimageFor (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.91
              µs

Reads = 1
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.91
              µs

Reads = 1
Writes = 2

Pallet: ""pallet_preimage"", Extrinsic: ""unrequest_multi_referenced_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    7.608
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    7.608
              µs

Reads = 1
Writes = 1


```

</details>",10356,2021-12-10T02:20:13Z,0
1022,bkchr,bot merge,10081,2021-11-01T08:21:50Z,0
1023,paritytech-processbot[bot],Waiting for commit status.,10081,2021-11-01T08:21:58Z,0
1024,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10081,2021-11-01T08:46:31Z,0
1025,MOZGIII,"Why wasn't `strip_control_codes` shared? If there's no good rationale - I'd create a PR to share it into yet another primitive create.

We need this for a custom panic handler - and copy-pasting cross-repos doesn't seem like a good idea.",10081,2022-01-06T17:09:53Z,0
1026,bkchr,"Because we don't wanted to create a crate for just one function and no, there is no other crate where this really fits into.",10081,2022-01-06T18:43:06Z,0
1027,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10157,2021-12-24T02:07:42Z,0
1028,bkchr,"> ```rust
> #[frame_support::use_default_config_for(Call)]
> impl pallet::Config for Runtime {}
> ```

But this still means that the user needs to know what kind of fields a trait has to add them there? So, the only thing that is taken away from the user is the passing of the value? But even here we just assume that ""Call"" exists, which is true, but also rather shitty experience if that isn't true.",9916,2021-10-04T10:28:29Z,0
1029,KiChjang,"Yes, you'd still need to specify the names of the associated type items that you'd want to use the default for. I suppose I could also make an attribute macro or a new syntax that allows you to use the default types for all associated types in a Config impl, perhaps it's just `#[frame_support::use_default_config]` or `impl_default_config_for!(path::to::Config)`.

Either way, the problem that you describe (i.e. default type being `Call` but it isn't actually defined during runtime construction) can possibly be solved by more documentation on the config associated type items, detailing what the default is and what is expected to exist. I suppose we could also try creating a special mechanism for types that are defined by `construct_runtime!`...",9916,2021-10-05T01:58:33Z,0
1030,xlc,"I am not sure how much code this is saving.

An alternative approach is instead of use associated type, replace as much of them as possible to methods with default implementation. Something similar to

https://github.com/paritytech/frontier/blob/7e6ab0ca9ffc074ebba4329606ecb90cfc27ec72/frame/evm/src/lib.rs#L146-L148

So this 

https://github.com/paritytech/substrate/blob/8f5b446ee4c1cff407a2888985178cf692166428/frame/system/src/lib.rs#L171-L173

can become this

```rust
/// The maximum length of a block (in bytes). 
 #[pallet::constant] 
 fn block_length() -> limits::BlockLength> { 10000 }
```

But this is going to be another major breaking change and changes the macro syntax.",9916,2021-10-05T08:31:28Z,0
1031,kianenigma,"@xlc's idea is interesting. The downside would be lack of enforcing const, but I think it is a worthwhile approach. I think we can and should retire all these `type`s and move to a combination of `fn` and `const`. ",9916,2021-10-31T19:56:54Z,0
1032,shawntabrizi,"I think XLC's idea is one we should follow anyway. Sounds like it would simplify a lot of the definitions, and practically speaking provides the same functionality.",9916,2021-11-24T05:57:34Z,0
1033,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9916,2021-12-24T07:24:43Z,0
1034,arkpar,cc @andresilva ,8692,2021-04-28T15:54:59Z,0
1035,bkchr,"> `stale_heads` would include the latest block of each of these forks, all stale fork blocks could then be found by traversing these heads back until reaching the finalized chain.

Aren't we directly prune these stale forks? Aka you can not iterate them anymore? We would need to include the entire fork to iterate them. ",10605,2022-01-07T15:31:55Z,0
1036,andresilva,"Good point. AFAIR the blocks themselves are not pruned from the disk, instead we only prune the stale head hashes from the `LeafSet`. But it needs to be checked as I am not sure.",10605,2022-01-07T17:01:03Z,0
1037,emostov,bot merge,10606,2022-01-07T18:40:51Z,0
1038,paritytech-processbot[bot]," Error: 
Error: When trying to meet the ""Project Owners"" approval requirements: this pull request does not belong to a project defined in Process.json.

Approval by ""Project Owners"" is only attempted if other means defined in the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge) are not satisfied first.

The following errors **might** have affected the outcome of this attempt:
- 'Client' does not match any projects in substrate's Process.json
- 'Benchmarking and Weights' does not match any projects in substrate's Process.json

Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are members of substrateteamleads or core-devs.
",10606,2022-01-07T18:41:00Z,0
1039,emostov,bot merge,10606,2022-01-07T19:33:44Z,0
1040,bkchr,EIther use master or downgrade to a rustc version that isn't failing because of this. (Try some stable of when 3.0 was released),10609,2022-01-07T19:36:56Z,0
1041,athei,/benchmark runtime pallet pallet_contracts,10497,2021-12-15T16:45:31Z,0
1042,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-contract-storage"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.529
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.529
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.223
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0      67.7     0.536    0.7%
   20     56.94     0.556    0.9%
   40     92.85     0.698    0.7%
   60     128.8     1.146    0.8%
   80     162.2     0.595    0.3%
  100     200.6     1.608    0.8%
  120     238.2     1.375    0.5%
  140     296.3     5.563    1.8%
  160     320.9     2.065    0.6%
  180     365.4     1.952    0.5%
  200     411.6      5.83    1.4%
  220     451.7     1.801    0.3%
  240     495.6     2.433    0.4%
  260     539.3     4.224    0.7%
  280     585.3     4.021    0.6%
  300     624.8     2.838    0.4%
  320     675.8     10.48    1.5%
  340     714.8     3.228    0.4%
  360     760.5     2.869    0.3%
  380       807     9.603    1.1%
  400     857.7     9.272    1.0%
  420     906.3     12.65    1.3%
  440     946.7      6.12    0.6%
  460     982.4     5.732    0.5%
  480      1036     8.571    0.8%
  500      1090     11.91    1.0%
  520      1124     10.65    0.9%
  540      1185      14.7    1.2%
  560      1227      11.2    0.9%
  580      1292     16.86    1.3%
  600      1325     8.622    0.6%
  620      1371     8.466    0.6%
  640      1414     9.598    0.6%
  660      1474     14.51    0.9%
  680      1497     19.96    1.3%
  700      1551     6.951    0.4%
  720      1594     9.246    0.5%
  740      1622     14.66    0.9%
  760      1686     16.63    0.9%
  780      1740     8.582    0.4%
  800      1745     13.19    0.7%
  820      1807     16.32    0.9%
  840      1864     12.85    0.6%
  860      1916     17.39    0.9%
  880      1931     14.96    0.7%
  900      1972     15.65    0.7%
  920      2033     12.89    0.6%
  940      2071     17.46    0.8%
  960      2115     9.153    0.4%
  980      2151     10.92    0.5%
 1000      2191      10.2    0.4%
 1020      2281     24.83    1.0%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.228
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    103.1
    + q    0.233
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.502     0.022    0.8%
   20      84.9     0.838    0.9%
   40     95.97     1.516    1.5%
   60     103.7     0.699    0.6%
   80     113.1     1.277    1.1%
  100     120.4     1.706    1.4%
  120     128.2     1.096    0.8%
  140       135     0.771    0.5%
  160     149.7     4.896    3.2%
  180     152.5     1.829    1.1%
  200     158.4     0.486    0.3%
  220     166.7     1.824    1.0%
  240     174.2     1.217    0.6%
  260     181.8     1.793    0.9%
  280     190.7     1.586    0.8%
  300       187     1.833    0.9%
  320       194     1.048    0.5%
  340     205.3     5.424    2.6%
  360     211.1     1.683    0.7%
  380     216.2     0.869    0.4%
  400       195     4.817    2.4%
  420     202.7     10.33    5.0%
  440     235.4     1.333    0.5%
  460     206.7      0.99    0.4%
  480     212.3     1.678    0.7%
  500     216.2     1.106    0.5%
  520     217.8     0.868    0.3%
  540     229.7      3.29    1.4%
  560     230.4     2.396    1.0%
  580     235.4     1.585    0.6%
  600     244.3     1.727    0.7%
  620     244.6     1.486    0.6%
  640     250.6     1.656    0.6%
  660     259.6     3.223    1.2%
  680     272.7     9.536    3.4%
  700       267     2.083    0.7%
  720     273.1     2.132    0.7%
  740     274.1     1.399    0.5%
  760     284.4       0.8    0.2%
  780     285.5      1.15    0.4%
  800     291.1     1.603    0.5%
  820     295.6     1.993    0.6%
  840     299.6     2.287    0.7%
  860       303     1.392    0.4%
  880     307.9      0.91    0.2%
  900     310.3     0.553    0.1%
  920     315.9     2.315    0.7%
  940     319.3     2.641    0.8%
  960     322.3     1.033    0.3%
  980     327.3     1.502    0.4%
 1000     332.8     7.967    2.3%
 1020     334.9     1.536    0.4%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    100.2
    + q     0.24
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.58
    + c    95.76
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     47.73     0.154    0.3%
    2     242.3     1.598    0.6%
    4     431.3     4.464    1.0%
    6     607.4     9.977    1.6%
    8     804.2     8.122    1.0%
   10     992.4     12.73    1.2%
   12      1163      13.8    1.1%
   14      1392     15.69    1.1%
   16      1563     13.14    0.8%
   18      1757     13.01    0.7%
   20      1934     13.73    0.7%
   22      2113     12.03    0.5%
   24      2284     11.23    0.4%
   26      2559     14.83    0.5%
   28      2750     16.64    0.6%
   30      2898     14.13    0.4%
   32      3078      18.6    0.6%
   34      3309     5.378    0.1%
   36      3486     10.34    0.2%
   38      3654      9.01    0.2%
   40      3817     8.323    0.2%
   42      4001     11.28    0.2%
   44      4168     9.298    0.2%
   46      4357     12.01    0.2%
   48      4515     12.36    0.2%
   50      4906     5.206    0.1%
   52      5084     16.63    0.3%
   54      5248     9.995    0.1%
   56      5431     16.61    0.3%
   58      5607     9.304    0.1%
   60      5778     11.63    0.2%
   62      5948     15.75    0.2%
   64      6133     22.23    0.3%
   66      6400     13.84    0.2%
   68      6567     31.66    0.4%
   70      6737     15.38    0.2%
   72      6936     31.71    0.4%
   74      7095     12.08    0.1%
   76      7264     15.09    0.2%
   78      7439      16.6    0.2%
   80      7679     92.04    1.1%
   82      7774     13.72    0.1%
   84      7960     21.87    0.2%
   86      8239     24.97    0.3%
   88      8321     31.73    0.3%
   90      8488     24.35    0.2%
   92      8641     18.76    0.2%
   94      8822     16.69    0.1%
   96      9023     21.42    0.2%
   98      9610     18.69    0.1%
  100      9779     24.75    0.2%
  102      9960     18.82    0.1%
  104     10120     10.89    0.1%
  106     10280     10.26    0.0%
  108     10470     18.99    0.1%
  110     10740     60.64    0.5%
  112     10840     47.69    0.4%
  114     11020     19.66    0.1%
  116     11150     11.88    0.1%
  118     11340     30.55    0.2%
  120     11520     26.21    0.2%
  122     11720     18.14    0.1%
  124     11870     22.29    0.1%
  126     12080     20.18    0.1%
  128     12240     28.52    0.2%

Quality and confidence:
param     error
c         0.089

Model:
Time ~=    18.93
    + c    95.92
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    401.4
    + c    81.25
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     422.4     0.364    0.0%
    2     567.5     1.978    0.3%
    4     739.2     0.414    0.0%
    6     884.3     7.748    0.8%
    8      1060     7.978    0.7%
   10      1196     4.395    0.3%
   12      1352     14.61    1.0%
   14      1568      14.9    0.9%
   16      1704     11.76    0.6%
   18      1858     13.51    0.7%
   20      1993     15.52    0.7%
   22      2145     12.85    0.5%
   24      2282     12.51    0.5%
   26      2570      15.3    0.5%
   28      2716     14.26    0.5%
   30      2858     13.08    0.4%
   32      2998     10.91    0.3%
   34      3179     10.97    0.3%
   36      3287     15.86    0.4%
   38      3439     12.96    0.3%
   40      3590     11.79    0.3%
   42      3717     13.66    0.3%
   44      3845     12.88    0.3%
   46      4001     17.74    0.4%
   48      4133      14.3    0.3%
   50      4587     12.63    0.2%
   52      4727     10.48    0.2%
   54      4868     16.49    0.3%
   56      4997     8.036    0.1%
   58      5156     15.72    0.3%
   60      5279     7.543    0.1%
   62      5425     13.04    0.2%
   64      5575     22.92    0.4%
   66      5752     11.29    0.1%
   68      5889     14.89    0.2%
   70      6043     20.45    0.3%
   72      6185     15.47    0.2%
   74      6309     9.755    0.1%
   76      6458      13.9    0.2%
   78      6603     13.11    0.1%
   80      6729     13.61    0.2%
   82      6875     21.83    0.3%
   84      7019     8.617    0.1%
   86      7149     15.78    0.2%
   88      7284     11.14    0.1%
   90      7501     58.56    0.7%
   92      7563     18.74    0.2%
   94      7725     20.63    0.2%
   96      7866     16.58    0.2%
   98      8657     35.26    0.4%
  100      8781     19.25    0.2%
  102      8934     27.46    0.3%
  104      9066     20.61    0.2%
  106      9199     18.61    0.2%
  108      9345     29.26    0.3%
  110      9485        19    0.2%
  112      9641     7.808    0.0%
  114      9773     22.23    0.2%
  116      9924        20    0.2%
  118     10030     14.67    0.1%
  120     10200     21.57    0.2%
  122     10330     25.59    0.2%
  124     10480      18.4    0.1%
  126     10610     30.53    0.2%
  128     10780     20.97    0.1%

Quality and confidence:
param     error
c         0.139

Model:
Time ~=      364
    + c    81.56
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    560.1
    + c    203.7
    + s    1.997
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2589     12.62    0.4%
    1  1024      2820     19.53    0.6%
    2  1024      3016     11.91    0.3%
    3  1024      3206     12.68    0.3%
    4  1024      3409     13.18    0.3%
    5  1024      3623     12.31    0.3%
    6  1024      3793     10.84    0.2%
    7  1024      4031     16.29    0.4%
    8  1024      4203     10.55    0.2%
    9  1024      4449      17.4    0.3%
   10  1024      4642     18.68    0.4%
   11  1024      4817     12.35    0.2%
   12  1024      4981     12.07    0.2%
   13  1024      5261     12.38    0.2%
   14  1024      5437     14.49    0.2%
   15  1024      5616     18.22    0.3%
   16  1024      5797     15.99    0.2%
   17  1024      6124     17.25    0.2%
   18  1024      6318     8.871    0.1%
   19  1024      6502     20.29    0.3%
   20  1024      6692     18.17    0.2%
   21  1024      6859     25.34    0.3%
   22  1024      7038      14.7    0.2%
   23  1024      7220     17.99    0.2%
   24  1024      7430      24.1    0.3%
   25  1024      7762     19.86    0.2%
   26  1024      7944     23.79    0.2%
   27  1024      8119     20.73    0.2%
   28  1024      8305     19.22    0.2%
   29  1024      8479     26.15    0.3%
   30  1024      8663     10.49    0.1%
   31  1024      8841     28.82    0.3%
   32  1024      9034     19.29    0.2%
   33  1024      9498     21.93    0.2%
   34  1024      9690     31.95    0.3%
   35  1024      9843     10.69    0.1%
   36  1024     10050     23.03    0.2%
   37  1024     10230     24.38    0.2%
   38  1024     10410     33.75    0.3%
   39  1024     10600     19.32    0.1%
   40  1024     10780     22.12    0.2%
   41  1024     10950     31.83    0.2%
   42  1024     11140     22.82    0.2%
   43  1024     11320     25.77    0.2%
   44  1024     11490     24.24    0.2%
   45  1024     11670     11.08    0.0%
   46  1024     11920      28.5    0.2%
   47  1024     12060        21    0.1%
   48  1024     12210     13.28    0.1%
   49  1024     12760     31.46    0.2%
   50  1024     12930     19.36    0.1%
   51  1024     13110     35.54    0.2%
   52  1024     13290     18.34    0.1%
   53  1024     13490     15.17    0.1%
   54  1024     13660     19.51    0.1%
   55  1024     13830     15.21    0.1%
   56  1024     14030     47.15    0.3%
   57  1024     14210     30.37    0.2%
   58  1024     14390     40.53    0.2%
   59  1024     14580      33.1    0.2%
   60  1024     14970     82.38    0.5%
   61  1024     14920     22.35    0.1%
   62  1024     15100     53.11    0.3%
   63  1024     15280     28.27    0.1%
   64     0     13380     34.95    0.2%
   64    20     13440     32.32    0.2%
   64    40     13480     48.86    0.3%
   64    60     13480     32.89    0.2%
   64    80     13520     26.63    0.1%
   64   100     13570     29.09    0.2%
   64   120     13600     34.31    0.2%
   64   140     13800     83.98    0.6%
   64   160     13690     38.23    0.2%
   64   180     13720     40.63    0.2%
   64   200     13770     26.83    0.1%
   64   220     13840     39.16    0.2%
   64   240     13840     34.06    0.2%
   64   260     13900     35.12    0.2%
   64   280     13950     49.17    0.3%
   64   300     13960      20.6    0.1%
   64   320     14030     23.68    0.1%
   64   340     14050     22.32    0.1%
   64   360     14060     23.55    0.1%
   64   380     14130     39.91    0.2%
   64   400     14170     24.64    0.1%
   64   420     14230     16.59    0.1%
   64   440     14260     22.61    0.1%
   64   460     14260     37.83    0.2%
   64   480     14330     24.36    0.1%
   64   500     14370     23.35    0.1%
   64   520     14380     27.18    0.1%
   64   540     14420     18.12    0.1%
   64   560     14490     18.48    0.1%
   64   580     14530     23.88    0.1%
   64   600     14560     35.83    0.2%
   64   620     14610     35.41    0.2%
   64   640     14640      36.5    0.2%
   64   660     14670     25.81    0.1%
   64   680     14720     27.32    0.1%
   64   700     14780     49.47    0.3%
   64   720     14800     45.12    0.3%
   64   740     14830     31.03    0.2%
   64   760     14900        44    0.2%
   64   780     15000     37.09    0.2%
   64   800     14950     35.09    0.2%
   64   820     15020     57.27    0.3%
   64   840     15030     24.36    0.1%
   64   860     15100     36.02    0.2%
   64   880     15140     40.22    0.2%
   64   900     15140     21.82    0.1%
   64   920     15210     34.02    0.2%
   64   940     15240     43.71    0.2%
   64   960     15330     41.57    0.2%
   64   980     15350     32.68    0.2%
   64  1000     15380     29.86    0.1%
   64  1020     15440     32.54    0.2%
   64  1024     15510     36.49    0.2%

Quality and confidence:
param     error
c          0.15
s         0.009

Model:
Time ~=    432.1
    + c    201.4
    + s    2.169
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    189.6
    + s    1.987
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     201.7     0.171    0.0%
   20     227.9     0.373    0.1%
   40     268.6     0.397    0.1%
   60     308.2     0.556    0.1%
   80     348.9     0.932    0.2%
  100     395.3     13.55    3.4%
  120     427.3     1.075    0.2%
  140     467.8     1.025    0.2%
  160     506.8     0.711    0.1%
  180     549.8     8.934    1.6%
  200     586.4     0.818    0.1%
  220     629.4     9.141    1.4%
  240     680.7      15.5    2.2%
  260     708.6     8.538    1.2%
  280     754.9     14.35    1.9%
  300     790.6     13.28    1.6%
  320     833.4      11.6    1.3%
  340     872.2      12.6    1.4%
  360     906.8     8.083    0.8%
  380     949.4     12.39    1.3%
  400     998.8     15.95    1.5%
  420      1037     16.56    1.5%
  440      1073     15.23    1.4%
  460      1121     15.67    1.3%
  480      1159     15.46    1.3%
  500      1199     17.17    1.4%
  520      1236     14.83    1.2%
  540      1266     10.14    0.8%
  560      1307     11.49    0.8%
  580      1348     13.95    1.0%
  600      1392     13.92    0.9%
  620      1434     13.12    0.9%
  640      1473     16.26    1.1%
  660      1509      14.9    0.9%
  680      1556     15.91    1.0%
  700      1592     14.77    0.9%
  720      1628     12.75    0.7%
  740      1671     14.24    0.8%
  760      1716     14.64    0.8%
  780      1757     16.21    0.9%
  800      1795     14.55    0.8%
  820      1834     16.97    0.9%
  840      1867     14.12    0.7%
  860      1920     12.08    0.6%
  880      1950      12.9    0.6%
  900      2007     4.116    0.2%
  920      2037     13.27    0.6%
  940      2061     10.53    0.5%
  960      2113     16.39    0.7%
  980      2157      16.3    0.7%
 1000      2210     21.08    0.9%
 1020      2234     16.18    0.7%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    190.2
    + s    2.006
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    141.7
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    141.7
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    76.51
    + c    95.39
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     76.62     0.132    0.1%
    1     174.4      0.26    0.1%
    2     268.4     0.359    0.1%
    3     355.8     0.643    0.1%
    4     456.9     0.884    0.1%
    5     556.5      15.8    2.8%
    6     633.9     8.599    1.3%
    7     751.4     14.19    1.8%
    8     834.2      12.9    1.5%
    9       933     16.87    1.8%
   10      1017     15.09    1.4%
   11      1114     17.66    1.5%
   12      1191     15.29    1.2%
   13      1334     17.17    1.2%
   14      1426     15.17    1.0%
   15      1510     13.43    0.8%
   16      1598     15.33    0.9%
   17      1712     22.88    1.3%
   18      1796     12.22    0.6%
   19      1882     13.68    0.7%
   20      1969     12.87    0.6%
   21      2049     13.69    0.6%
   22      2132     14.13    0.6%
   23      2231     16.52    0.7%
   24      2310     11.06    0.4%
   25      2509     13.68    0.5%
   26      2593     16.35    0.6%
   27      2680     9.465    0.3%
   28      2771     12.41    0.4%
   29      2868     10.79    0.3%
   30      2940     12.95    0.4%
   31      3037     14.44    0.4%
   32      3112     12.64    0.4%
   33      3238     18.36    0.5%
   34      3332     10.08    0.3%
   35      3427     6.537    0.1%
   36      3511     11.61    0.3%
   37      3583     15.21    0.4%
   38      3681     14.96    0.4%
   39      3761     7.705    0.2%
   40      3844     21.54    0.5%
   41      3932     14.17    0.3%
   42      4015     13.36    0.3%
   43      4107      20.3    0.4%
   44      4210     15.07    0.3%
   45      4292     23.47    0.5%
   46      4391      14.5    0.3%
   47      4455     5.742    0.1%
   48      4546      15.1    0.3%
   49      4861     13.13    0.2%
   50      4947     13.25    0.2%
   51      5034     21.02    0.4%
   52      5110     13.31    0.2%
   53      5204     20.87    0.4%
   54      5281     13.04    0.2%
   55      5366     13.21    0.2%
   56      5461     19.36    0.3%
   57      5542      15.7    0.2%
   58      5635      13.7    0.2%
   59      5729     19.15    0.3%
   60      5809     21.11    0.3%
   61      5898     26.48    0.4%
   62      5966     12.67    0.2%
   63      6069     10.19    0.1%
   64      6142     23.36    0.3%

Quality and confidence:
param     error
c         0.096

Model:
Time ~=    67.84
    + c    95.58
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.32
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.32
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.3
    + r    81.31
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     396.8      4.49    1.1%
    1     493.4     3.684    0.7%
    2     576.4     4.584    0.7%
    3     653.8     1.688    0.2%
    4     738.5     1.835    0.2%
    5     831.7     8.304    0.9%
    6     902.3     9.596    1.0%
    7     990.7     11.22    1.1%
    8      1066     11.62    1.0%
    9      1140     8.125    0.7%
   10      1224     13.01    1.0%
   11      1302     13.15    1.0%
   12      1380     13.88    1.0%
   13      1458     14.21    0.9%
   14      1578     12.51    0.7%
   15      1647     12.56    0.7%
   16      1723     12.91    0.7%
   17      1797     11.42    0.6%
   18      1872      10.6    0.5%
   19      1963     14.84    0.7%
   20      2049     9.829    0.4%

Quality and confidence:
param     error
r         0.157

Model:
Time ~=    409.7
    + r    81.83
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    410.6
    + r    82.43
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     394.4     0.259    0.0%
    1       499     5.374    1.0%
    2     579.6     5.762    0.9%
    3     658.7     9.597    1.4%
    4     746.9     11.78    1.5%
    5     821.3     5.766    0.7%
    6     899.2     3.383    0.3%
    7     994.4     11.37    1.1%
    8      1070     12.88    1.2%
    9      1156     12.96    1.1%
   10      1231     13.49    1.0%
   11      1308     14.32    1.0%
   12      1403     13.35    0.9%
   13      1468     14.15    0.9%
   14      1576     14.16    0.8%
   15      1663     15.53    0.9%
   16      1739     13.89    0.7%
   17      1813     13.88    0.7%
   18      1902     12.78    0.6%
   19      1988     11.43    0.5%
   20      2058      16.5    0.8%

Quality and confidence:
param     error
r         0.162

Model:
Time ~=      408
    + r    82.89
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    411.4
    + r     80.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     396.3     2.544    0.6%
    1     492.6     1.379    0.2%
    2     573.5      0.27    0.0%
    3     654.5     9.813    1.4%
    4     738.1     6.689    0.9%
    5     815.5     10.33    1.2%
    6     888.9     1.122    0.1%
    7     985.4     12.97    1.3%
    8      1053     1.514    0.1%
    9      1142     13.26    1.1%
   10      1214     12.25    1.0%
   11      1304     17.91    1.3%
   12      1376     15.39    1.1%
   13      1451     15.23    1.0%
   14      1560     10.95    0.7%
   15      1637     13.04    0.7%
   16      1718     12.85    0.7%
   17      1792     11.31    0.6%
   18      1868     11.36    0.6%
   19      1959     9.783    0.4%
   20      2017     6.455    0.3%

Quality and confidence:
param     error
r         0.152

Model:
Time ~=    407.8
    + r    81.33
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    417.6
    + r    224.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     394.2     0.088    0.0%
    1     647.1     12.04    1.8%
    2     867.5     3.903    0.4%
    3      1095     11.75    1.0%
    4      1327     13.97    1.0%
    5      1547     13.29    0.8%
    6      1776     12.51    0.7%
    7      2004     11.74    0.5%
    8      2213     7.282    0.3%
    9      2446     7.419    0.3%
   10      2671     15.12    0.5%
   11      2897     7.821    0.2%
   12      3114     8.087    0.2%
   13      3311     10.14    0.3%
   14      3565     11.07    0.3%
   15      3793     10.37    0.2%
   16      4025     14.06    0.3%
   17      4250     20.03    0.4%
   18      4473     19.95    0.4%
   19      4694     11.97    0.2%
   20      4892     11.16    0.2%

Quality and confidence:
param     error
r         0.189

Model:
Time ~=    419.1
    + r    224.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    406.4
    + r    82.03
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.7     4.252    1.0%
    1     500.9      7.83    1.5%
    2     562.6     0.395    0.0%
    3       641     0.784    0.1%
    4     726.5     0.693    0.0%
    5     811.1     11.35    1.3%
    6     885.8       5.8    0.6%
    7     992.4     12.64    1.2%
    8      1055     9.832    0.9%
    9      1135     10.24    0.9%
   10      1216      12.8    1.0%
   11      1299     14.33    1.1%
   12      1372     12.77    0.9%
   13      1453      15.9    1.0%
   14      1567     10.41    0.6%
   15      1654     13.98    0.8%
   16      1729     14.95    0.8%
   17      1809     15.57    0.8%
   18      1894     11.46    0.6%
   19      1963     11.81    0.6%
   20      2047     13.05    0.6%

Quality and confidence:
param     error
r         0.176

Model:
Time ~=    400.4
    + r    82.47
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    402.1
    + r    81.59
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.1     0.261    0.0%
    1     493.5     0.178    0.0%
    2     560.6     0.507    0.0%
    3     643.3     9.192    1.4%
    4     722.7     1.291    0.1%
    5     801.1     1.523    0.1%
    6     878.7     1.528    0.1%
    7     968.4     10.35    1.0%
    8      1052     12.67    1.2%
    9      1127     12.48    1.1%
   10      1206      14.6    1.2%
   11      1282     11.87    0.9%
   12      1363     14.78    1.0%
   13      1436     12.55    0.8%
   14      1562      12.1    0.7%
   15      1649     12.78    0.7%
   16      1727     11.42    0.6%
   17      1796      13.7    0.7%
   18      1882     9.102    0.4%
   19      1959     19.09    0.9%
   20      2046     4.818    0.2%

Quality and confidence:
param     error
r         0.185

Model:
Time ~=      394
    + r    82.35
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    406.7
    + r    80.64
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       407     0.241    0.0%
    1     507.8     14.57    2.8%
    2     560.6     0.633    0.1%
    3     639.6     2.238    0.3%
    4     734.2     13.14    1.7%
    5     802.2     9.084    1.1%
    6     885.8     13.81    1.5%
    7     971.2     13.38    1.3%
    8      1043     8.723    0.8%
    9      1127      13.7    1.2%
   10      1196     7.949    0.6%
   11      1283     15.03    1.1%
   12      1362     13.89    1.0%
   13      1443     14.09    0.9%
   14      1543      4.18    0.2%
   15      1634     14.13    0.8%
   16      1712     12.81    0.7%
   17      1784     12.46    0.6%
   18      1859     11.53    0.6%
   19      1952     14.86    0.7%
   20      2014     8.467    0.4%

Quality and confidence:
param     error
r         0.175

Model:
Time ~=    402.8
    + r    80.99
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    405.9
    + r    81.17
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     395.8     4.508    1.1%
    1     477.6     0.341    0.0%
    2     565.7     5.657    0.9%
    3     641.7     9.959    1.5%
    4     735.1     1.374    0.1%
    5     812.6     1.954    0.2%
    6     895.9     10.96    1.2%
    7     984.7     12.32    1.2%
    8      1051     1.345    0.1%
    9      1135     9.933    0.8%
   10      1224     11.08    0.9%
   11      1296      12.4    0.9%
   12      1375     12.73    0.9%
   13      1444      14.2    0.9%
   14      1574     10.59    0.6%
   15      1639     14.27    0.8%
   16      1720     13.09    0.7%
   17      1796     14.83    0.8%
   18      1864     13.21    0.7%
   19      1941     12.28    0.6%
   20      2011     15.08    0.7%

Quality and confidence:
param     error
r         0.178

Model:
Time ~=    403.3
    + r    81.51
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    408.3
    + r    217.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.9     0.198    0.0%
    1     621.8     9.293    1.4%
    2     839.9     8.391    0.9%
    3      1062      11.6    1.0%
    4      1294     13.53    1.0%
    5      1511     7.149    0.4%
    6      1713     11.54    0.6%
    7      1925     11.94    0.6%
    8      2134     9.541    0.4%
    9      2362     11.29    0.4%
   10      2579     5.827    0.2%
   11      2831     3.825    0.1%
   12      3050     15.12    0.4%
   13      3245     10.47    0.3%
   14      3461     12.09    0.3%
   15      3683     7.172    0.1%
   16      3890      13.7    0.3%
   17      4128     18.27    0.4%
   18      4331     8.998    0.2%
   19      4549       9.3    0.2%
   20      4761     18.16    0.3%

Quality and confidence:
param     error
r         0.179

Model:
Time ~=    408.4
    + r    218.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    140.7
    + r    39.45
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     136.8     0.168    0.1%
    1     179.7     0.179    0.0%
    2     218.7      0.25    0.1%
    3     259.5     0.409    0.1%
    4     297.3     0.359    0.1%
    5     336.9     0.258    0.0%
    6     380.7     0.521    0.1%
    7       419     0.953    0.2%
    8     455.4     0.572    0.1%
    9     493.2      0.72    0.1%
   10     531.3      0.65    0.1%
   11     588.7      12.2    2.0%
   12       628     10.97    1.7%
   13     659.7     2.434    0.3%
   14     699.3     5.445    0.7%
   15     734.9     4.743    0.6%
   16     772.4     2.996    0.3%
   17     811.9     10.25    1.2%
   18     854.8     12.21    1.4%
   19     891.1      10.2    1.1%
   20     921.2      1.29    0.1%

Quality and confidence:
param     error
r         0.088

Model:
Time ~=    140.8
    + r    39.58
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    411.8
    + r     74.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     394.3     0.144    0.0%
    1     488.5     4.802    0.9%
    2     562.3      0.42    0.0%
    3     633.7     0.759    0.1%
    4     711.1     1.965    0.2%
    5     788.4     9.747    1.2%
    6     867.2     14.37    1.6%
    7       936     0.864    0.0%
    8      1019     15.31    1.5%
    9      1087     12.61    1.1%
   10      1161     13.59    1.1%
   11      1230      11.8    0.9%
   12      1297     11.87    0.9%
   13      1379     14.05    1.0%
   14      1473     14.95    1.0%
   15      1560     10.75    0.6%
   16      1616     14.13    0.8%
   17      1677     7.707    0.4%
   18      1761     15.15    0.8%
   19      1820     9.067    0.4%
   20      1900     10.97    0.5%

Quality and confidence:
param     error
r         0.163

Model:
Time ~=      411
    + r    74.93
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    522.3
    + n       38
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     486.5     0.454    0.0%
   20      1248      1.44    0.1%
   40      2036     17.22    0.8%
   60      2803     7.308    0.2%
   80      3557     3.705    0.1%
  100      4310     9.782    0.2%
  120      5082     12.48    0.2%
  140      5852      21.2    0.3%
  160      6599     14.08    0.2%
  180      7367     15.32    0.2%
  200      8123     24.88    0.3%
  220      8888     20.28    0.2%
  240      9692     33.88    0.3%
  260     10410     26.73    0.2%
  280     11190     24.19    0.2%
  300     11910      20.8    0.1%
  320     12870     29.48    0.2%
  340     13440     25.87    0.1%
  360     14210     32.22    0.2%
  380     14980     38.62    0.2%
  400     15720     41.42    0.2%
  420     16500     27.44    0.1%
  440     17230     39.42    0.2%
  460     18020     47.03    0.2%
  480     18760     40.72    0.2%
  500     19540     53.11    0.2%
  520     20270      45.4    0.2%
  540     21180     133.8    0.6%
  560     21800     19.67    0.0%
  580     22590     36.94    0.1%
  600     23290     30.25    0.1%
  620     24110     48.44    0.2%
  640     24850     39.92    0.1%
  660     25600     39.01    0.1%
  680     26370     32.34    0.1%
  700     27110     22.41    0.0%
  720     27890     41.59    0.1%
  740     28650     48.02    0.1%
  760     29380     23.56    0.0%
  780     30100     34.21    0.1%
  800     30910     57.68    0.1%
  820     31680     52.23    0.1%
  840     32380     37.44    0.1%
  860     33180     29.65    0.0%
  880     33920     27.09    0.0%
  900     34830     119.6    0.3%
  920     35450     27.42    0.0%
  940     36270     38.46    0.1%
  960     37010     33.95    0.0%
  980     37800     40.15    0.1%
 1000     38550     40.01    0.1%
 1020     39320     26.48    0.0%

Quality and confidence:
param     error
n         0.008

Model:
Time ~=    530.1
    + n       38
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    404.9
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     404.4     11.64    2.8%
    1     393.4     3.596    0.9%

Quality and confidence:
param     error
r         4.061

Model:
Time ~=    404.4
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    400.8
    + n    0.623
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     402.7     4.474    1.1%
   20     418.2     8.698    2.0%
   40     430.3     8.927    2.0%
   60     438.4     0.237    0.0%
   80     450.2     0.257    0.0%
  100     462.8     0.119    0.0%
  120     475.2     0.237    0.0%
  140       492     8.718    1.7%
  160     503.9      8.16    1.6%
  180     513.2     0.367    0.0%
  200     525.9     0.408    0.0%
  220     537.8      0.17    0.0%
  240     551.9     4.661    0.8%
  260     562.9     0.337    0.0%
  280     579.9     6.532    1.1%
  300     596.2     12.36    2.0%
  320     601.8     4.703    0.7%
  340       613     0.423    0.0%
  360     631.1     11.37    1.8%
  380     645.8     12.04    1.8%
  400     653.7     9.848    1.5%
  420     663.2     0.436    0.0%
  440     678.9     8.836    1.3%
  460     687.9     0.312    0.0%
  480     716.8     16.78    2.3%
  500     722.3     12.93    1.7%
  520     731.5      10.5    1.4%
  540       737      0.37    0.0%
  560     749.6     0.418    0.0%
  580       777     11.96    1.5%
  600     782.4     11.97    1.5%
  620     788.8     5.656    0.7%
  640     810.1     7.144    0.8%
  660     812.8     5.513    0.6%
  680     826.9     11.22    1.3%
  700     843.4     13.08    1.5%
  720     860.7     15.99    1.8%
  740     869.9     11.31    1.3%
  760     885.7     13.68    1.5%
  780     896.8     14.85    1.6%
  800     909.4      10.9    1.1%
  820     917.8     10.26    1.1%
  840     943.2     11.36    1.2%
  860     943.1     9.949    1.0%
  880     958.2     11.05    1.1%
  900     970.8      11.6    1.1%
  920     983.4     11.21    1.1%
  940      1001     11.54    1.1%
  960      1001     4.962    0.4%
  980      1019     11.48    1.1%
 1000      1026     6.163    0.6%
 1020      1047     10.95    1.0%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    401.7
    + n    0.632
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    406.8
    + r    57.47
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.8     0.389    0.0%
    1     464.4     0.273    0.0%

Quality and confidence:
param     error
r         0.158

Model:
Time ~=    406.8
    + r    57.55
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.1
    + r    257.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     396.4     4.267    1.0%
    1     670.1     1.387    0.2%
    2     926.8     8.224    0.8%
    3      1187     9.135    0.7%
    4      1449     12.91    0.8%
    5      1706     11.25    0.6%
    6      1969     14.42    0.7%
    7      2216     12.95    0.5%
    8      2477     8.498    0.3%
    9      2745     14.11    0.5%
   10      2993     6.038    0.2%
   11      3266     15.66    0.4%
   12      3499     10.95    0.3%
   13      3745      11.2    0.2%
   14      4015      13.1    0.3%
   15      4265     12.63    0.2%
   16      4525     15.18    0.3%
   17      4824     12.75    0.2%
   18      5078     19.26    0.3%
   19      5326     17.32    0.3%
   20      5565     12.06    0.2%

Quality and confidence:
param     error
r         0.199

Model:
Time ~=    410.4
    + r    258.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    411.5
    + r    435.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     385.6     0.638    0.1%
    1     851.7     10.55    1.2%
    2      1286     14.05    1.0%
    3      1732     11.29    0.6%
    4      2150     12.65    0.5%
    5      2605     10.29    0.3%
    6      3030     17.45    0.5%
    7      3454     6.192    0.1%
    8      3891     15.43    0.3%
    9      4336     9.338    0.2%
   10      4769      7.17    0.1%
   11      5197     8.629    0.1%
   12      5664     20.72    0.3%
   13      6059     12.06    0.1%
   14      6489      19.4    0.2%
   15      6911     15.85    0.2%
   16      7358     18.09    0.2%
   17      7847     13.67    0.1%
   18      8268     16.81    0.2%
   19      8717     21.95    0.2%
   20      9116     15.86    0.1%

Quality and confidence:
param     error
r         0.257

Model:
Time ~=    409.6
    + r    435.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    890.4
    + t    394.4
    + n    163.6
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3460     6.326    0.1%
    1    16      3928     9.099    0.2%
    2    16      4323     17.48    0.4%
    3    16      4712     8.609    0.1%
    4     0      2464     11.64    0.4%
    4     1      2638     12.71    0.4%
    4     2      2784     11.35    0.4%
    4     3      2920     16.55    0.5%
    4     4      3073     12.43    0.4%
    4     5      3256     18.74    0.5%
    4     6      3408     16.82    0.4%
    4     7      3554     10.36    0.2%
    4     8      3732     14.11    0.3%
    4     9      3872     14.52    0.3%
    4    10      4095      13.1    0.3%
    4    11      4232      22.9    0.5%
    4    12      4388        11    0.2%
    4    13      4585     12.86    0.2%
    4    14      4732     17.65    0.3%
    4    15      4962      29.7    0.5%
    4    16      5063     14.25    0.2%

Quality and confidence:
param     error
t         2.265
n         0.446

Model:
Time ~=    869.9
    + t    391.1
    + n    164.8
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    161.8
    + r    59.87
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     156.7     0.277    0.1%
    1     220.2     0.109    0.0%
    2     284.9     7.913    2.7%
    3     344.5     0.478    0.1%
    4     390.4     7.816    2.0%
    5     457.5     0.353    0.0%
    6     528.8     0.604    0.1%
    7     588.6     6.399    1.0%
    8     643.4     0.584    0.0%
    9     701.5     4.727    0.6%
   10     753.9     1.221    0.1%
   11     837.7      10.9    1.3%
   12     885.1     8.129    0.9%
   13     937.8       4.4    0.4%
   14      1005     14.97    1.4%
   15      1060     13.42    1.2%
   16      1113     9.496    0.8%
   17      1183     6.725    0.5%
   18      1246     11.92    0.9%
   19      1304     13.58    1.0%
   20      1362     12.91    0.9%

Quality and confidence:
param     error
r         0.116

Model:
Time ~=    160.9
    + r    60.12
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    473.8
    + r    338.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.7     0.336    0.0%
    1     881.8     12.07    1.3%
    2      1182     14.93    1.2%
    3      1500     6.318    0.4%
    4      1825     15.53    0.8%
    5      2155     8.248    0.3%
    6      2474     12.31    0.4%
    7      2803     18.62    0.6%
    8      3118     12.04    0.3%
    9      3567     13.25    0.3%
   10      3867     12.12    0.3%
   11      4219      11.4    0.2%
   12      4537     23.36    0.5%
   13      4843     20.39    0.4%
   14      5153     9.251    0.1%
   15      5492     37.11    0.6%
   16      5850     30.61    0.5%
   17      6165      15.8    0.2%
   18      6659     23.15    0.3%
   19      6981     20.97    0.3%
   20      7292     15.94    0.2%

Quality and confidence:
param     error
r         0.589

Model:
Time ~=    461.8
    + r    339.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    737.1
    + n    72.95
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     733.3     12.69    1.7%
    1       811     4.755    0.5%
    2     887.4     2.571    0.2%
    3     965.9     15.74    1.6%
    4      1033     8.591    0.8%
    5      1098     2.995    0.2%
    6      1164     2.346    0.2%
    7      1241     2.689    0.2%
    8      1326     14.83    1.1%
    9      1392      14.8    1.0%
   10      1463     12.43    0.8%
   11      1563     11.64    0.7%
   12      1620     8.974    0.5%
   13      1679     11.03    0.6%
   14      1767     17.12    0.9%
   15      1836     13.55    0.7%
   16      1908     10.45    0.5%

Quality and confidence:
param     error
n         0.211

Model:
Time ~=    736.6
    + n    73.32
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    162.5
    + r    800.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.1     0.348    0.0%
    1      1144     5.819    0.5%
    2      1870     12.02    0.6%
    3      2600     11.45    0.4%
    4      3356     11.41    0.3%
    5      4131     22.68    0.5%
    6      4917     12.99    0.2%
    7      5648     23.39    0.4%
    8      6451     14.68    0.2%
    9      7264     23.36    0.3%
   10      8108     28.02    0.3%
   11      8864     24.45    0.2%
   12      9713     38.51    0.3%
   13     10510     30.27    0.2%
   14     11290      20.5    0.1%
   15     12130      12.1    0.0%
   16     12970     35.75    0.2%
   17     13780      71.9    0.5%
   18     14840      81.7    0.5%
   19     15660     55.05    0.3%
   20     16530     32.83    0.1%

Quality and confidence:
param     error
r         1.669

Model:
Time ~=    149.7
    + r    805.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    313.7
    + r    435.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     395.3     0.303    0.0%
    1     808.2     11.57    1.4%
    2      1210     9.583    0.7%
    3      1616     4.008    0.2%
    4      2026     11.64    0.5%
    5      2476     8.181    0.3%
    6      2873     9.887    0.3%
    7      3333     26.34    0.7%
    8      3729     21.48    0.5%
    9      4225     16.87    0.3%
   10      4633     24.73    0.5%
   11      5079     25.83    0.5%
   12      5541     14.23    0.2%
   13      5895     22.59    0.3%
   14      6344     32.23    0.5%
   15      6812     38.53    0.5%
   16      7241     36.95    0.5%
   17      7732     27.24    0.3%
   18      8313     47.98    0.5%
   19      8674     34.34    0.3%
   20      9121     26.41    0.2%

Quality and confidence:
param     error
r         0.746

Model:
Time ~=    297.7
    + r    437.3
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    628.1
    + n      111
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     617.3     4.912    0.7%
    1       736     3.167    0.4%
    2     862.9     12.47    1.4%
    3     967.3     10.27    1.0%
    4      1075     4.379    0.4%
    5      1181     2.455    0.2%
    6      1304     15.53    1.1%
    7      1407     8.776    0.6%
    8      1509     1.979    0.1%
    9      1623     9.569    0.5%
   10      1746     14.13    0.8%
   11      1863     15.55    0.8%
   12      1955     9.651    0.4%
   13      2089     15.52    0.7%
   14      2207     13.05    0.5%
   15      2276     12.06    0.5%
   16      2413     11.93    0.4%

Quality and confidence:
param     error
n         0.234

Model:
Time ~=    627.7
    + n    111.5
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    266.9
    + r    544.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     409.4     0.243    0.0%
    1     920.1     2.948    0.3%
    2      1404     4.375    0.3%
    3      1939     13.75    0.7%
    4      2422     14.68    0.6%
    5      2970     10.92    0.3%
    6      3504     11.65    0.3%
    7      3982     18.21    0.4%
    8      4518     13.24    0.2%
    9      5163     19.85    0.3%
   10      5668        22    0.3%
   11      6246     13.12    0.2%
   12      6814     17.24    0.2%
   13      7291     15.58    0.2%
   14      7843     20.82    0.2%
   15      8375     23.18    0.2%
   16      8963     14.41    0.1%
   17      9545     30.72    0.3%
   18     10230     8.974    0.0%
   19     10800     35.55    0.3%
   20     11390     49.04    0.4%

Quality and confidence:
param     error
r         1.057

Model:
Time ~=    254.7
    + r    547.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    644.9
    + n    1.371
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       645     1.603    0.2%
    1     645.8     1.858    0.2%
    2     649.4     2.263    0.3%
    3       650      1.62    0.2%
    4     656.3     9.167    1.3%
    5       653     2.885    0.4%
    6     651.6     0.804    0.1%
    7     655.8     3.728    0.5%
    8       658     3.455    0.5%
    9     658.1     2.002    0.3%
   10     660.8     5.995    0.9%
   11     660.9     2.986    0.4%
   12     660.3     2.198    0.3%
   13     661.6     1.754    0.2%
   14     667.1     6.578    0.9%
   15     665.4     1.811    0.2%
   16     668.6     3.344    0.5%

Quality and confidence:
param     error
n         0.066

Model:
Time ~=    646.1
    + n     1.35
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    335.3
    + r     2590
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.2     4.775    1.1%
    1      2977     7.086    0.2%
    2      5538     14.35    0.2%
    3      8127      14.1    0.1%
    4     10680     29.53    0.2%
    5     13190     29.49    0.2%
    6     15800     41.19    0.2%
    7     18390     30.31    0.1%
    8     20960     55.19    0.2%
    9     23520     26.24    0.1%
   10     26270     73.74    0.2%
   11     28700     61.94    0.2%
   12     31370     70.31    0.2%
   13     33960     38.24    0.1%
   14     36460     46.97    0.1%
   15     39260     41.71    0.1%
   16     41790     25.41    0.0%
   17     44250     52.82    0.1%
   18     46890     100.6    0.2%
   19     49740     67.12    0.1%
   20     52440     46.07    0.0%

Quality and confidence:
param     error
r         1.327

Model:
Time ~=    288.9
    + r     2593
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    38120
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     399.8     0.325    0.0%
    1     38340     40.66    0.1%
    2     73610      70.9    0.0%
    3    110200     77.29    0.0%
    4    146800     76.04    0.0%
    5    183300     70.69    0.0%
    6    219800     57.08    0.0%
    7    256700     139.1    0.0%
    8    293100       146    0.0%
    9    330100     142.5    0.0%
   10    366900     224.8    0.0%
   11    403500     156.6    0.0%
   12    457100     275.2    0.0%
   13    494900     127.9    0.0%
   14    532800     200.7    0.0%
   15    571200     183.6    0.0%
   16    608800     130.2    0.0%
   17    646900     387.7    0.0%
   18    685000     238.4    0.0%
   19    723200     147.9    0.0%
   20    761500     340.1    0.0%

Quality and confidence:
param     error
r         58.48

Model:
Time ~=        0
    + r    38310
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37740
    + t     2450
    + i    64.04
    + o    100.8
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    200100      97.8    0.0%
    1     0   960    137100     90.66    0.0%
    1    20   960    138500     129.5    0.0%
    1    40   960    139700        6<truncated>...
```

</details>",10497,2021-12-15T18:07:25Z,0
1043,athei,/benchmark runtime pallet pallet_contracts,10497,2021-12-16T13:24:05Z,0
1044,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-contract-storage"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.333
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.333
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.205
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     66.68     0.574    0.8%
   20     56.73     0.389    0.6%
   40     93.18     0.651    0.6%
   60       129     0.483    0.3%
   80     165.2     1.165    0.7%
  100       203     1.575    0.7%
  120       243     1.685    0.6%
  140     286.2     0.689    0.2%
  160     327.6     1.846    0.5%
  180     369.8      1.67    0.4%
  200       414     1.817    0.4%
  220     457.7      1.23    0.2%
  240     500.6     2.737    0.5%
  260     541.2     2.433    0.4%
  280     588.1     6.546    1.1%
  300       639     6.633    1.0%
  320     679.2     4.594    0.6%
  340     725.3     4.283    0.5%
  360     770.7     4.224    0.5%
  380     828.8     10.25    1.2%
  400     867.5     7.186    0.8%
  420     906.5     4.129    0.4%
  440     951.2     3.023    0.3%
  460     991.8     5.201    0.5%
  480      1036     8.246    0.7%
  500      1084     4.774    0.4%
  520      1135     12.49    1.1%
  540      1179      9.68    0.8%
  560      1233     15.26    1.2%
  580      1268     9.904    0.7%
  600      1300     7.124    0.5%
  620      1353     5.975    0.4%
  640      1402     14.54    1.0%
  660      1456     21.34    1.4%
  680      1485     12.22    0.8%
  700      1545     14.51    0.9%
  720      1589     16.62    1.0%
  740      1630      13.4    0.8%
  760      1665     12.83    0.7%
  780      1702     10.06    0.5%
  800      1747      7.42    0.4%
  820      1801     13.81    0.7%
  840      1843     20.12    1.0%
  860      1899     11.91    0.6%
  880      1907     15.47    0.8%
  900      1992     14.03    0.7%
  920      2035     9.404    0.4%
  940      2068      14.4    0.6%
  960      2115     15.58    0.7%
  980      2133     17.68    0.8%
 1000      2210      20.4    0.9%
 1020      2215     16.47    0.7%

Quality and confidence:
param     error
k         0.002

Model:
Time ~=        0
    + k    2.207
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    103.1
    + q    0.241
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.354     0.019    0.8%
   20     81.75     1.503    1.8%
   40     91.98     0.757    0.8%
   60     101.6     0.815    0.8%
   80     111.1     0.797    0.7%
  100     122.6      3.27    2.6%
  120     128.2     0.772    0.6%
  140     136.6     1.678    1.2%
  160     145.9     0.865    0.5%
  180     153.4     0.918    0.5%
  200       162     1.781    1.0%
  220     166.5     1.217    0.7%
  240     179.2     5.693    3.1%
  260     181.8     1.536    0.8%
  280       188      1.44    0.7%
  300     187.9      1.77    0.9%
  320     193.8     1.438    0.7%
  340     200.5     1.423    0.7%
  360     210.7     1.139    0.5%
  380     217.1     0.894    0.4%
  400     225.2     2.216    0.9%
  420     230.9     1.029    0.4%
  440     245.5     8.652    3.5%
  460     206.6     1.825    0.8%
  480     211.5     1.781    0.8%
  500     215.8     0.939    0.4%
  520     222.9     1.301    0.5%
  540     229.4     1.819    0.7%
  560       235     1.616    0.6%
  580     238.6     1.956    0.8%
  600     246.6     3.769    1.5%
  620     250.5     1.552    0.6%
  640       256     0.937    0.3%
  660     263.5     1.944    0.7%
  680     265.6     1.493    0.5%
  700     271.4      1.22    0.4%
  720     278.3     2.904    1.0%
  740       282     1.761    0.6%
  760     291.1     1.542    0.5%
  780       294     2.007    0.6%
  800     297.5     0.688    0.2%
  820     300.9     1.238    0.4%
  840     307.6     2.288    0.7%
  860     309.5     1.247    0.4%
  880     315.5      1.61    0.5%
  900     318.1     0.634    0.1%
  920     323.8     1.667    0.5%
  940     327.2     1.415    0.4%
  960     330.3      1.85    0.5%
  980     333.5     0.899    0.2%
 1000     337.6     1.241    0.3%
 1020     339.6     0.686    0.2%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    99.78
    + q    0.248
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    42.91
    + c    91.44
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     47.12     0.155    0.3%
    2     228.9     0.547    0.2%
    4     408.3     0.456    0.1%
    6     573.5     0.496    0.0%
    8     770.4      10.9    1.4%
   10     936.6     8.627    0.9%
   12      1103     10.24    0.9%
   14      1334     11.54    0.8%
   16      1496     13.81    0.9%
   18      1686     15.58    0.9%
   20      1854     12.24    0.6%
   22      2010     14.95    0.7%
   24      2195     7.688    0.3%
   26      2456     9.516    0.3%
   28      2618     12.04    0.4%
   30      2795     11.78    0.4%
   32      2944     10.59    0.3%
   34      3160     8.673    0.2%
   36      3333     9.366    0.2%
   38      3504     12.23    0.3%
   40      3650     9.239    0.2%
   42      3811     9.693    0.2%
   44      4031     35.26    0.8%
   46      4266     4.372    0.1%
   48      4447     2.762    0.0%
   50      4716     16.45    0.3%
   52      4853     8.846    0.1%
   54      5028     13.34    0.2%
   56      5214     25.57    0.4%
   58      5356     11.67    0.2%
   60      5524     12.85    0.2%
   62      5660     12.17    0.2%
   64      5867     6.758    0.1%
   66      6120     17.64    0.2%
   68      6279     17.35    0.2%
   70      6451     23.68    0.3%
   72      6629     25.19    0.3%
   74      6796     35.34    0.5%
   76      6929     17.63    0.2%
   78      7092     11.67    0.1%
   80      7255     16.17    0.2%
   82      7429     16.54    0.2%
   84      7609     22.75    0.2%
   86      7773     12.81    0.1%
   88      7935     24.83    0.3%
   90      8095     16.69    0.2%
   92      8253     8.744    0.1%
   94      8529     46.19    0.5%
   96      8582     18.95    0.2%
   98      9200     27.35    0.2%
  100      9365     23.22    0.2%
  102      9527     18.61    0.1%
  104      9681     9.574    0.0%
  106      9871     29.08    0.2%
  108     10010     19.35    0.1%
  110     10180     24.93    0.2%
  112     10340     16.99    0.1%
  114     10500     14.58    0.1%
  116     10700     22.37    0.2%
  118     10840     17.62    0.1%
  120     11010     15.12    0.1%
  122     11170     17.55    0.1%
  124     11360     24.94    0.2%
  126     11490     17.47    0.1%
  128     11690     22.14    0.1%

Quality and confidence:
param     error
c         0.087

Model:
Time ~=    28.85
    + c    91.53
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    402.7
    + c     78.8
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     420.8     0.469    0.1%
    2     569.1      10.8    1.8%
    4     746.6     15.71    2.1%
    6     870.2     9.719    1.1%
    8      1044     11.33    1.0%
   10      1173     0.962    0.0%
   12      1312     8.619    0.6%
   14      1540     12.09    0.7%
   16      1663     10.18    0.6%
   18      1837     13.86    0.7%
   20      1951     12.84    0.6%
   22      2082     9.919    0.4%
   24      2218     11.04    0.4%
   26      2518     7.802    0.3%
   28      2666     20.11    0.7%
   30      2768     9.461    0.3%
   32      2926     12.84    0.4%
   34      3080     15.53    0.5%
   36      3212     17.16    0.5%
   38      3352     8.992    0.2%
   40      3509     17.76    0.5%
   42      3601     8.682    0.2%
   44      3764     6.739    0.1%
   46      3894     12.32    0.3%
   48      4030     7.294    0.1%
   50      4482     11.88    0.2%
   52      4606     12.45    0.2%
   54      4747     17.15    0.3%
   56      4868     7.015    0.1%
   58      5008     14.82    0.2%
   60      5140     14.59    0.2%
   62      5285     15.65    0.2%
   64      5427     7.957    0.1%
   66      5606     25.07    0.4%
   68      5742     10.84    0.1%
   70      5872     12.98    0.2%
   72      6034      5.97    0.0%
   74      6148     12.43    0.2%
   76      6279     20.17    0.3%
   78      6424     22.76    0.3%
   80      6561     19.54    0.2%
   82      6704     16.12    0.2%
   84      6826     17.78    0.2%
   86      6949     23.89    0.3%
   88      7115     22.22    0.3%
   90      7248     19.49    0.2%
   92      7374     12.15    0.1%
   94      7505     13.76    0.1%
   96      7647     14.04    0.1%
   98      8439     19.92    0.2%
  100      8561     19.99    0.2%
  102      8681     20.85    0.2%
  104      8822     24.45    0.2%
  106      8969     29.87    0.3%
  108      9096     17.82    0.1%
  110      9238     21.07    0.2%
  112      9381     18.49    0.1%
  114      9545     29.73    0.3%
  116      9657     25.95    0.2%
  118      9774      14.6    0.1%
  120      9899     21.85    0.2%
  122     10040     13.02    0.1%
  124     10170     22.02    0.2%
  126     10320     18.92    0.1%
  128     10450     24.98    0.2%

Quality and confidence:
param     error
c         0.139

Model:
Time ~=    367.5
    + c    79.21
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    543.2
    + c    198.1
    + s    2.016
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2606     14.83    0.5%
    1  1024      2793     15.93    0.5%
    2  1024      2991     10.34    0.3%
    3  1024      3173     16.15    0.5%
    4  1024      3372      10.3    0.3%
    5  1024      3589     3.309    0.0%
    6  1024      3767     12.42    0.3%
    7  1024      3978     8.258    0.2%
    8  1024      4197        26    0.6%
    9  1024      4397     11.36    0.2%
   10  1024      4570     16.88    0.3%
   11  1024      4744     13.84    0.2%
   12  1024      4913      12.3    0.2%
   13  1024      5169     7.797    0.1%
   14  1024      5469     11.03    0.2%
   15  1024      5522     9.662    0.1%
   16  1024      5718     16.07    0.2%
   17  1024      6040     20.11    0.3%
   18  1024      6214     19.75    0.3%
   19  1024      6390     12.58    0.1%
   20  1024      6579     23.73    0.3%
   21  1024      6739     20.42    0.3%
   22  1024      6920      20.1    0.2%
   23  1024      7096     10.44    0.1%
   24  1024      7274     15.14    0.2%
   25  1024      7646     18.98    0.2%
   26  1024      7803      17.6    0.2%
   27  1024      7998     21.95    0.2%
   28  1024      8174     16.46    0.2%
   29  1024      8342     27.47    0.3%
   30  1024      8508     11.49    0.1%
   31  1024      8738     63.03    0.7%
   32  1024      8861     23.22    0.2%
   33  1024      9327     17.72    0.1%
   34  1024      9507     25.13    0.2%
   35  1024      9695     22.04    0.2%
   36  1024      9846     16.55    0.1%
   37  1024     10030     24.85    0.2%
   38  1024     10200     14.51    0.1%
   39  1024     10380     19.44    0.1%
   40  1024     10540     17.53    0.1%
   41  1024     10740     24.66    0.2%
   42  1024     10910     21.96    0.2%
   43  1024     11070     19.54    0.1%
   44  1024     11240     17.27    0.1%
   45  1024     11450      17.6    0.1%
   46  1024     11630     19.29    0.1%
   47  1024     11800        33    0.2%
   48  1024     11950     31.07    0.2%
   49  1024     12490     30.67    0.2%
   50  1024     12680     43.29    0.3%
   51  1024     12840     24.81    0.1%
   52  1024     12990     25.43    0.1%
   53  1024     13210     37.07    0.2%
   54  1024     13370     32.95    0.2%
   55  1024     13540     42.71    0.3%
   56  1024     13710     15.37    0.1%
   57  1024     13920      41.7    0.2%
   58  1024     14070     25.08    0.1%
   59  1024     14250     45.73    0.3%
   60  1024     14390     30.23    0.2%
   61  1024     14600      25.1    0.1%
   62  1024     14810      36.2    0.2%
   63  1024     14940     14.52    0.0%
   64     0     13020     27.07    0.2%
   64    20     13140      48.5    0.3%
   64    40     13120     27.21    0.2%
   64    60     13170     38.08    0.2%
   64    80     13170     23.46    0.1%
   64   100     13230      37.8    0.2%
   64   120     13250      21.9    0.1%
   64   140     13280     13.51    0.1%
   64   160     13390        51    0.3%
   64   180     13400     29.44    0.2%
   64   200     13440     40.64    0.3%
   64   220     13470     43.49    0.3%
   64   240     13520     48.16    0.3%
   64   260     13540     16.01    0.1%
   64   280     13580     44.17    0.3%
   64   300     13620      35.2    0.2%
   64   320     13650     35.62    0.2%
   64   340     13720     40.98    0.2%
   64   360     13760      34.8    0.2%
   64   380     13790     30.42    0.2%
   64   400     13860     44.47    0.3%
   64   420     13870     25.65    0.1%
   64   440     13910     27.12    0.1%
   64   460     13950     33.29    0.2%
   64   480     14010     35.09    0.2%
   64   500     14050      53.6    0.3%
   64   520     14090     42.18    0.2%
   64   540     14120        44    0.3%
   64   560     14180     46.36    0.3%
   64   580     14180     34.12    0.2%
   64   600     14230     38.03    0.2%
   64   620     14290     29.85    0.2%
   64   640     14300     20.46    0.1%
   64   660     14330     37.03    0.2%
   64   680     14380     35.31    0.2%
   64   700     14420     34.27    0.2%
   64   720     14500     34.08    0.2%
   64   740     14510     45.61    0.3%
   64   760     14550     32.48    0.2%
   64   780     14610     27.02    0.1%
   64   800     14650     26.92    0.1%
   64   820     14690      31.4    0.2%
   64   840     14730     33.68    0.2%
   64   860     14750     33.84    0.2%
   64   880     14780      30.9    0.2%
   64   900     14840     33.98    0.2%
   64   920     14910     56.95    0.3%
   64   940     14920     35.33    0.2%
   64   960     14960     33.61    0.2%
   64   980     15010     29.99    0.1%
   64  1000     15080     39.15    0.2%
   64  1020     15110     36.87    0.2%
   64  1024     15130      17.4    0.1%

Quality and confidence:
param     error
c         0.141
s         0.009

Model:
Time ~=    435.2
    + c    196.1
    + s    2.166
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    188.4
    + s    1.985
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     199.3     0.389    0.1%
   20     225.4     0.569    0.2%
   40     271.9     0.427    0.1%
   60     306.4     0.752    0.2%
   80     346.3     0.925    0.2%
  100     385.4     0.968    0.2%
  120     424.9     0.919    0.2%
  140     467.1     3.426    0.7%
  160     511.8     11.26    2.2%
  180     547.5     8.481    1.5%
  200     584.4     1.181    0.2%
  220     623.6     0.514    0.0%
  240     672.7     15.05    2.2%
  260     706.5     9.049    1.2%
  280     745.2     7.061    0.9%
  300     781.5     0.736    0.0%
  320       822     1.183    0.1%
  340     866.8     11.61    1.3%
  360     915.4     13.19    1.4%
  380     953.1     11.75    1.2%
  400     982.8      8.25    0.8%
  420      1028     11.58    1.1%
  440      1061     9.345    0.8%
  460      1105     13.18    1.1%
  480      1153     16.26    1.4%
  500      1189     14.82    1.2%
  520      1239     13.06    1.0%
  540      1267      14.7    1.1%
  560      1308     16.12    1.2%
  580      1353     17.06    1.2%
  600      1396     15.47    1.1%
  620      1421     12.47    0.8%
  640      1473     16.07    1.0%
  660      1508     16.07    1.0%
  680      1554     16.27    1.0%
  700      1592     13.81    0.8%
  720      1628     15.29    0.9%
  740      1704     8.372    0.4%
  760      1712     15.88    0.9%
  780      1746     14.69    0.8%
  800      1792     15.07    0.8%
  820      1836     11.71    0.6%
  840      1875     13.55    0.7%
  860      1908     14.67    0.7%
  880      1939     14.71    0.7%
  900      1976     14.38    0.7%
  920      2040     16.82    0.8%
  940      2096     11.15    0.5%
  960      2101     13.46    0.6%
  980      2166     10.57    0.4%
 1000      2191     15.89    0.7%
 1020      2228     17.82    0.7%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    186.3
    + s    2.008
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    140.2
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    140.2
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    75.94
    + c    90.97
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     76.46     0.282    0.3%
    1     170.6     0.417    0.2%
    2     260.4     0.308    0.1%
    3     343.1     0.304    0.0%
    4     441.2       0.5    0.1%
    5     527.4      0.64    0.1%
    6     602.5     0.454    0.0%
    7     722.4     14.44    2.0%
    8     806.1     16.39    2.0%
    9     891.6     15.91    1.7%
   10     964.5     6.466    0.6%
   11      1052     13.52    1.2%
   12      1138     15.53    1.3%
   13      1272     14.51    1.1%
   14      1354     15.83    1.1%
   15      1447      12.4    0.8%
   16      1528      15.1    0.9%
   17      1621     15.86    0.9%
   18      1711     15.42    0.9%
   19      1790      17.3    0.9%
   20      1873     18.84    1.0%
   21      1962     17.14    0.8%
   22      2041     15.72    0.7%
   23      2120     14.52    0.6%
   24      2211     8.012    0.3%
   25      2391     13.53    0.5%
   26      2499     3.875    0.1%
   27      2561     3.659    0.1%
   28      2643     10.32    0.3%
   29      2715     17.64    0.6%
   30      2806     10.56    0.3%
   31      2876     19.45    0.6%
   32      2962     11.91    0.4%
   33      3079      14.3    0.4%
   34      3187     15.54    0.4%
   35      3270     9.082    0.2%
   36      3338     11.83    0.3%
   37      3417     16.95    0.4%
   38      3514     12.71    0.3%
   39      3613     22.61    0.6%
   40      3682     14.96    0.4%
   41      3755     4.968    0.1%
   42      3873     13.97    0.3%
   43      3926     12.93    0.3%
   44      4010     21.69    0.5%
   45      4093     10.66    0.2%
   46      4163     12.36    0.2%
   47      4279     3.087    0.0%
   48      4345     24.33    0.5%
   49      4623     4.824    0.1%
   50      4712     13.43    0.2%
   51      4806      20.3    0.4%
   52      4887     12.99    0.2%
   53      4957      13.1    0.2%
   54      5031     14.38    0.2%
   55      5127      15.8    0.3%
   56      5200     13.89    0.2%
   57      5281     12.22    0.2%
   58      5361      13.9    0.2%
   59      5458     13.19    0.2%
   60      5532     15.55    0.2%
   61      5655     27.96    0.4%
   62      5704     15.82    0.2%
   63      5781     13.31    0.2%
   64      5863     12.59    0.2%

Quality and confidence:
param     error
c         0.088

Model:
Time ~=    65.35
    + c    91.19
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.72
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.72
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    409.5
    + r    79.27
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     393.2     0.165    0.0%
    1     491.9     7.544    1.5%
    2     568.2     0.472    0.0%
    3     644.4     0.701    0.1%
    4     731.2      9.63    1.3%
    5     822.1     11.59    1.4%
    6     883.2     8.936    1.0%
    7     974.1     10.89    1.1%
    8      1056     13.74    1.3%
    9      1126     11.33    1.0%
   10      1212     14.48    1.1%
   11      1277     6.616    0.5%
   12      1358     13.94    1.0%
   13      1445     13.02    0.9%
   14      1549     11.61    0.7%
   15      1617     14.93    0.9%
   16      1678     12.47    0.7%
   17      1754     10.38    0.5%
   18      1838     14.29    0.7%
   19      1923      14.8    0.7%
   20      1995     10.84    0.5%

Quality and confidence:
param     error
r         0.164

Model:
Time ~=    410.2
    + r    79.65
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    410.6
    + r    80.33
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     393.5     0.985    0.2%
    1     493.7      6.17    1.2%
    2     569.6     0.497    0.0%
    3     647.7     0.648    0.1%
    4     742.1     10.69    1.4%
    5     812.9     8.509    1.0%
    6     891.5     8.713    0.9%
    7     987.7     10.54    1.0%
    8      1065     12.21    1.1%
    9      1138     11.99    1.0%
   10      1217        10    0.8%
   11      1305     11.16    0.8%
   12      1386     10.34    0.7%
   13      1447     8.208    0.5%
   14      1548      12.9    0.8%
   15      1618     9.435    0.5%
   16      1699     9.307    0.5%
   17      1775     12.42    0.6%
   18      1861     11.58    0.6%
   19      1939     15.91    0.8%
   20      2016     15.65    0.7%

Quality and confidence:
param     error
r         0.144

Model:
Time ~=    411.1
    + r    80.61
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    409.8
    + r    78.34
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     393.3     0.197    0.0%
    1     487.8     0.434    0.0%
    2     567.4     0.771    0.1%
    3     653.9     12.48    1.9%
    4     725.4     6.794    0.9%
    5     809.7     12.08    1.4%
    6     879.5     11.63    1.3%
    7     959.8     0.756    0.0%
    8      1049     14.78    1.4%
    9      1116     11.63    1.0%
   10      1199     14.03    1.1%
   11      1276     12.49    0.9%
   12      1335     2.379    0.1%
   13      1428     12.99    0.9%
   14      1516     11.47    0.7%
   15      1605     13.37    0.8%
   16      1670     11.93    0.7%
   17      1746     14.59    0.8%
   18      1823     12.16    0.6%
   19      1891      9.36    0.4%
   20      1972      12.8    0.6%

Quality and confidence:
param     error
r         0.154

Model:
Time ~=    410.5
    + r    78.51
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    413.6
    + r      215
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     393.1      0.19    0.0%
    1     626.5     0.425    0.0%
    2     850.1     9.664    1.1%
    3      1059      12.9    1.2%
    4      1276     11.33    0.8%
    5      1500      9.48    0.6%
    6      1716     10.75    0.6%
    7      1929     9.616    0.4%
    8      2136     13.11    0.6%
    9      2347     10.49    0.4%
   10      2557     10.82    0.4%
   11      2824     3.429    0.1%
   12      2991     9.997    0.3%
   13      3200     11.71    0.3%
   14      3435     15.08    0.4%
   15      3656     18.05    0.4%
   16      3865      7.75    0.2%
   17      4072     11.07    0.2%
   18      4269     8.627    0.2%
   19      4493     13.96    0.3%
   20      4706     11.02    0.2%

Quality and confidence:
param     error
r         0.196

Model:
Time ~=    416.7
    + r      215
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    405.3
    + r     79.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     405.4     0.178    0.0%
    1     492.5     4.682    0.9%
    2       569     16.29    2.8%
    3     632.2     1.522    0.2%
    4     719.7     11.02    1.5%
    5     788.7     1.013    0.1%
    6     870.2     11.51    1.3%
    7     976.9     9.898    1.0%
    8      1033     12.06    1.1%
    9      1106     7.918    0.7%
   10      1190     14.11    1.1%
   11      1271     14.99    1.1%
   12      1345     14.98    1.1%
   13      1419     13.15    0.9%
   14      1532     15.26    0.9%
   15      1606     12.89    0.8%
   16      1674     7.767    0.4%
   17      1764     15.61    0.8%
   18      1846     12.18    0.6%
   19      1918     14.25    0.7%
   20      1983     10.68    0.5%

Quality and confidence:
param     error
r         0.177

Model:
Time ~=    400.9
    + r    79.66
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    406.2
    + r    78.37
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.4     1.798    0.4%
    1     489.2     0.614    0.1%
    2     560.2     9.166    1.6%
    3     634.5     4.961    0.7%
    4     716.6     8.583    1.1%
    5     798.1      15.4    1.9%
    6     877.7     15.26    1.7%
    7     954.3     8.364    0.8%
    8      1030     9.763    0.9%
    9      1105     11.99    1.0%
   10      1184     14.43    1.2%
   11      1264     12.53    0.9%
   12      1334     15.75    1.1%
   13      1409     11.53    0.8%
   14      1522     13.93    0.9%
   15      1592     10.29    0.6%
   16      1673     13.07    0.7%
   17      1740     6.096    0.3%
   18      1818     12.67    0.6%
   19      1904     12.88    0.6%
   20      1977     12.08    0.6%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    402.2
    + r    78.79
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    403.8
    + r    78.19
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.8     4.497    1.1%
    1     488.6      0.37    0.0%
    2     553.3     0.992    0.1%
    3     637.9     14.04    2.2%
    4       709     2.148    0.3%
    5       789     14.69    1.8%
    6     865.3     12.93    1.4%
    7     945.2     1.425    0.1%
    8      1022     8.576    0.8%
    9      1099     12.69    1.1%
   10      1178     12.95    1.0%
   11      1246     8.778    0.7%
   12      1331      14.9    1.1%
   13      1407      11.1    0.7%
   14      1518     14.42    0.9%
   15      1588     13.09    0.8%
   16      1680     10.46    0.6%
   17      1747     8.781    0.5%
   18      1821     12.37    0.6%
   19      1890     14.55    0.7%
   20      1969     13.87    0.7%

Quality and confidence:
param     error
r         0.171

Model:
Time ~=    396.6
    + r    78.89
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    404.1
    + r    78.64
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       393      0.13    0.0%
    1     473.9     0.371    0.0%
    2     567.7     12.97    2.2%
    3     628.3     0.775    0.1%
    4     723.1     1.877    0.2%
    5     798.1     1.099    0.1%
    6     884.2     13.84    1.5%
    7     970.5     13.08    1.3%
    8      1038     8.314    0.8%
    9      1111     1.904    0.1%
   10      1193     13.36    1.1%
   11      1272     15.34    1.2%
   12      1349     15.28    1.1%
   13      1419     11.08    0.7%
   14      1515      14.7    0.9%
   15      1585      9.35    0.5%
   16      1668     16.23    0.9%
   17      1751     14.97    0.8%
   18      1810     10.94    0.6%
   19      1903     12.82    0.6%
   20      1969     12.96    0.6%

Quality and confidence:
param     error
r         0.154

Model:
Time ~=    403.5
    + r    78.82
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    406.6
    + r    215.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.9      2.07    0.5%
    1     615.2     1.797    0.2%
    2     829.3     1.991    0.2%
    3      1043     2.234    0.2%
    4      1278     11.61    0.9%
    5      1475     12.82    0.8%
    6      1697     10.17    0.5%
    7      1906      13.8    0.7%
    8      2129     11.63    0.5%
    9      2325     11.78    0.5%
   10      2548     15.35    0.6%
   11      2796     11.92    0.4%
   12      3008     7.549    0.2%
   13      3225     12.27    0.3%
   14      3433     13.07    0.3%
   15      3637      13.6    0.3%
   16      3856        11    0.2%
   17      4072     8.053    0.1%
   18      4279     13.41    0.3%
   19      4495     12.84    0.2%
   20      4709        10    0.2%

Quality and confidence:
param     error
r         0.169

Model:
Time ~=    402.5
    + r    215.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    140.2
    + r    38.16
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     135.8     0.175    0.1%
    1     177.2     0.207    0.1%
    2     214.9     1.152    0.5%
    3     254.7     0.338    0.1%
    4     291.8     0.314    0.1%
    5     333.7     4.151    1.2%
    6     370.2     0.624    0.1%
    7     410.5     4.159    1.0%
    8     442.6     1.032    0.2%
    9     479.5     0.859    0.1%
   10       517      2.03    0.3%
   11     565.5     1.532    0.2%
   12     602.1     1.969    0.3%
   13     642.3     7.464    1.1%
   14     675.8     2.115    0.3%
   15     714.4     6.286    0.8%
   16     750.6     2.394    0.3%
   17     784.9     4.021    0.5%
   18     829.7     10.83    1.3%
   19     864.3     7.194    0.8%
   20     897.8     6.679    0.7%

Quality and confidence:
param     error
r         0.062

Model:
Time ~=    139.7
    + r    38.19
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    410.4
    + r    72.54
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     393.6     2.043    0.5%
    1     482.7     0.544    0.1%
    2     556.6     0.684    0.1%
    3     626.2     1.494    0.2%
    4       701     0.786    0.1%
    5     777.3     8.736    1.1%
    6     842.9     9.045    1.0%
    7     921.2     1.517    0.1%
    8     996.6     11.63    1.1%
    9      1061      2.57    0.2%
   10      1135     7.547    0.6%
   11      1210     14.01    1.1%
   12      1279     11.14    0.8%
   13      1344     11.36    0.8%
   14      1450     13.22    0.9%
   15      1510     13.25    0.8%
   16      1586     12.34    0.7%
   17      1649     11.18    0.6%
   18      1728     12.47    0.7%
   19      1788     14.72    0.8%
   20      1857     13.37    0.7%

Quality and confidence:
param     error
r         0.141

Model:
Time ~=    406.7
    + r    73.13
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    514.7
    + n    38.02
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     481.8     0.397    0.0%
   20      1250     10.44    0.8%
   40      2025     13.64    0.6%
   60      2787     12.93    0.4%
   80      3553     4.501    0.1%
  100      4325     10.85    0.2%
  120      5073     13.67    0.2%
  140      5835      18.4    0.3%
  160      6605     16.53    0.2%
  180      7363     18.32    0.2%
  200      8125     18.52    0.2%
  220      8913     25.78    0.2%
  240      9654     19.77    0.2%
  260     10390     23.48    0.2%
  280     11150      15.9    0.1%
  300     11940     23.15    0.1%
  320     12690     19.84    0.1%
  340     13480     38.22    0.2%
  360     14190     22.19    0.1%
  380     14960     24.58    0.1%
  400     15750     30.33    0.1%
  420     16470     26.05    0.1%
  440     17230     29.78    0.1%
  460     18010     26.72    0.1%
  480     18750     35.06    0.1%
  500     19580     43.68    0.2%
  520     20280      19.8    0.0%
  540     21030      34.6    0.1%
  560     21780     49.02    0.2%
  580     22550     37.69    0.1%
  600     23320     27.08    0.1%
  620     24080     35.56    0.1%
  640     24840     30.24    0.1%
  660     25660     54.06    0.2%
  680     26330     49.13    0.1%
  700     27150     51.03    0.1%
  720     27850     33.97    0.1%
  740     28670     51.92    0.1%
  760     29450     43.38    0.1%
  780     30180     27.73    0.0%
  800     30940     41.01    0.1%
  820     31700     48.52    0.1%
  840     32430     31.54    0.0%
  860     33190     24.13    0.0%
  880     34030     69.07    0.2%
  900     34740     32.66    0.0%
  920     35480     32.83    0.0%
  940     36230     21.55    0.0%
  960     37020     51.94    0.1%
  980     37850     115.9    0.3%
 1000     38540      57.7    0.1%
 1020     39290     35.97    0.0%

Quality and confidence:
param     error
n         0.006

Model:
Time ~=    512.6
    + n    38.03
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    397.2
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     400.2      5.71    1.4%
    1     386.2     0.373    0.0%

Quality and confidence:
param     error
r         1.907

Model:
Time ~=    400.2
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    400.4
    + n    0.623
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     399.6     0.242    0.0%
   20     412.5     0.335    0.0%
   40     426.8      4.14    0.9%
   60     437.8     0.396    0.0%
   80     450.3     0.207    0.0%
  100     462.7     0.307    0.0%
  120     474.9     0.232    0.0%
  140       489     3.827    0.7%
  160     499.8     0.312    0.0%
  180     521.8     8.784    1.6%
  200     525.2      0.26    0.0%
  220     537.1     0.353    0.0%
  240       550     0.386    0.0%
  260     566.2     8.883    1.5%
  280     577.5     8.472    1.4%
  300     587.4     0.338    0.0%
  320     602.9     6.037    1.0%
  340     612.1     0.159    0.0%
  360       626     4.234    0.6%
  380     642.9     10.52    1.6%
  400     649.8     0.233    0.0%
  420       665     8.815    1.3%
  440     676.4     3.696    0.5%
  460     690.1     8.283    1.2%
  480     699.7     0.332    0.0%
  500     712.4     0.277    0.0%
  520     726.2     4.248    0.5%
  540     748.5     14.39    1.9%
  560     758.6     15.29    2.0%
  580     773.7     15.49    2.0%
  600     774.2     0.691    0.0%
  620     788.1     4.947    0.6%
  640     803.8     9.264    1.1%
  660     813.6       5.4    0.6%
  680     832.1     11.65    1.4%
  700     842.5     11.48    1.3%
  720     853.3     8.835    1.0%
  740     864.6     4.166    0.4%
  760     873.7     0.319    0.0%
  780     891.3     10.99    1.2%
  800     902.4     8.233    0.9%
  820     921.7     10.91    1.1%
  840     926.3     7.205    0.7%
  860     939.4     7.193    0.7%
  880     955.9     11.86    1.2%
  900     968.7     12.38    1.2%
  920     985.4     15.65    1.5%
  940     990.3     7.905    0.7%
  960      1010     15.24    1.5%
  980      1016     10.93    1.0%
 1000      1034     11.34    1.0%
 1020      1041     10.94    1.0%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    400.2
    + n    0.631
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    406.2
    + r     55.7
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.3     0.172    0.0%
    1     461.9      0.23    0.0%

Quality and confidence:
param     error
r         0.095

Model:
Time ~=    406.3
    + r    55.61
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    408.9
    + r    246.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     392.9      0.11    0.0%
    1     656.4     0.545    0.0%
    2     903.9     10.46    1.1%
    3      1156     16.34    1.4%
    4      1394     12.71    0.9%
    5      1655     12.16    0.7%
    6      1902     7.302    0.3%
    7      2124     9.552    0.4%
    8      2374     12.07    0.5%
    9      2646      12.8    0.4%
   10      2877     10.03    0.3%
   11      3128     10.82    0.3%
   12      3361     13.43    0.3%
   13      3600      11.9    0.3%
   14      3856     10.79    0.2%
   15      4077     13.27    0.3%
   16      4333     7.412    0.1%
   17      4625     21.52    0.4%
   18      4875     19.97    0.4%
   19      5124     13.67    0.2%
   20      5347      21.5    0.4%

Quality and confidence:
param     error
r          0.23

Model:
Time ~=    406.1
    + r      247
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    413.8
    + r      411
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     388.1     3.988    1.0%
    1     821.9     2.331    0.2%
    2      1243      13.1    1.0%
    3      1667     8.577    0.5%
    4      2064     10.72    0.5%
    5      2480      8.24    0.3%
    6      2893     12.42    0.4%
    7      3291     9.015    0.2%
    8      3691     6.548    0.1%
    9      4115     12.21    0.2%
   10      4534      16.6    0.3%
   11      4954     16.99    0.3%
   12      5327      7.09    0.1%
   13      5747     19.76    0.3%
   14      6157     24.76    0.4%
   15      6564     20.41    0.3%
   16      6938     15.73    0.2%
   17      7445     21.04    0.2%
   18      7842     21.78    0.2%
   19      8251     42.89    0.5%
   20      8632     14.54    0.1%

Quality and confidence:
param     error
r         0.308

Model:
Time ~=    412.7
    + r    411.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    876.7
    + t    395.1
    + n    162.4
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3435     9.457    0.2%
    1    16      3899     10.32    0.2%
    2    16      4287     16.46    0.3%
    3    16      4667      7.66    0.1%
    4     0      2438     8.625    0.3%
    4     1      2610     16.31    0.6%
    4     2      2737     14.32    0.5%
    4     3      2917     8.593    0.2%
    4     4      3075     17.02    0.5%
    4     5      3235     14.51    0.4%
    4     6      3384     16.77    0.4%
    4     7      3522     7.865    0.2%
    4     8      3708     7.863    0.2%
    4     9      3838     19.38    0.5%
    4    10      4041     21.59    0.5%
    4    11      4187     13.16    0.3%
    4    12      4347     9.857    0.2%
    4    13      4545     14.29    0.3%
    4    14      4703     13.35    0.2%
    4    15      4851     12.85    0.2%
    4    16      5044     10.17    0.2%

Quality and confidence:
param     error
t         1.961
n         0.386

Model:
Time ~=    873.1
    + t    385.7
    + n      163
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    160.4
    + r    56.98
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     153.7     0.219    0.1%
    1     215.2     0.412    0.1%
    2     273.8     0.222    0.0%
    3     332.9     0.385    0.1%
    4     373.4     0.597    0.1%
    5     441.2     0.503    0.1%
    6     509.1     0.756    0.1%
    7     564.1     1.977    0.3%
    8     620.5      8.48    1.3%
    9     674.5     2.694    0.3%
   10     731.5     8.466    1.1%
   11       797     10.32    1.2%
   12     851.6     7.621    0.8%
   13     905.7     9.668    1.0%
   14     957.8     4.209    0.4%
   15      1014     9.314    0.9%
   16      1073     10.76    1.0%
   17      1133     12.82    1.1%
   18      1181     10.14    0.8%
   19      1233     11.21    0.9%
   20      1295     14.56    1.1%

Quality and confidence:
param     error
r          0.11

Model:
Time ~=    159.8
    + r    57.03
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    473.7
    + r    330.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.9     8.688    2.1%
    1     843.6     1.836    0.2%
    2      1159     13.05    1.1%
    3      1482     15.61    1.0%
    4      1788     13.48    0.7%
    5      2128      11.3    0.5%
    6      2440     12.95    0.5%
    7      2751     16.46    0.5%
    8      3070     23.43    0.7%
    9      3444     16.21    0.4%
   10      3783     14.63    0.3%
   11      4111     8.417    0.2%
   12      4438     15.99    0.3%
   13      4783      31.6    0.6%
   14      5041     13.29    0.2%
   15      5353     10.29    0.1%
   16      5680     18.27    0.3%
   17      6067      19.2    0.3%
   18      6507     25.14    0.3%
   19      6808     16.19    0.2%
   20      7140      18.4    0.2%

Quality and confidence:
param     error
r          0.53

Model:
Time ~=    458.5
    + r    331.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    729.2
    + n    72.76
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     717.4     12.51    1.7%
    1       803       4.7    0.5%
    2     880.4     9.569    1.0%
    3     948.5     6.104    0.6%
    4      1017     4.304    0.4%
    5      1114     12.15    1.0%
    6      1158     3.973    0.3%
    7      1234     1.419    0.1%
    8      1297     9.922    0.7%
    9      1387     14.49    1.0%
   10      1456     17.57    1.2%
   11      1538     14.12    0.9%
   12      1598     13.47    0.8%
   13      1680     6.278    0.3%
   14      1762     11.02    0.6%
   15      1833     15.28    0.8%
   16      1892     16.31    0.8%

Quality and confidence:
param     error
n          0.22

Model:
Time ~=    726.6
    + n    73.29
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    185.5
    + r    788.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.5     2.263    0.5%
    1      1146     18.05    1.5%
    2      1836     10.94    0.5%
    3      2563     15.47    0.6%
    4      3319     9.679    0.2%
    5      4095     30.78    0.7%
    6      4890     18.43    0.3%
    7      5595     12.58    0.2%
    8      6373     28.66    0.4%
    9      7199     18.25    0.2%
   10      7990     20.44    0.2%
   11      8790     30.76    0.3%
   12      9565     43.68    0.4%
   13     10310     31.51    0.3%
   14     11220     27.84    0.2%
   15     11950     36.04    0.3%
   16     12770     37.05    0.2%
   17     13620     81.52    0.5%
   18     14640     31.37    0.2%
   19     15470     45.06    0.2%
   20     16230     67.95    0.4%

Quality and confidence:
param     error
r         1.569

Model:
Time ~=    166.4
    + r      793
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    297.7
    + r    442.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.3     0.555    0.1%
    1     810.7     11.29    1.3%
    2      1194     5.779    0.4%
    3      1645      14.7    0.8%
    4      2033     13.46    0.6%
    5      2489     13.08    0.5%
    6      2923     10.89    0.3%
    7      3339     22.37    0.6%
    8      3767     9.376    0.2%
    9      4249     18.22    0.4%
   10      4704     17.08    0.3%
   11      5155     32.13    0.6%
   12      5607     33.64    0.5%
   13      6037     29.38    0.4%
   14      6447     32.38    0.5%
   15      6879     24.33    0.3%
   16      7334     17.05    0.2%
   17      7840     24.16    0.3%
   18      8379      48.7    0.5%
   19      8804     25.91    0.2%
   20      9285     36.46    0.3%

Quality and confidence:
param     error
r         0.743

Model:
Time ~=      288
    + r    444.2
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    620.3
    + n    111.1
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     606.5     1.154    0.1%
    1     725.9     1.991    0.2%
    2     849.3     1.991    0.2%
    3     957.9     10.31    1.0%
    4      1067     2.702    0.2%
    5      1170     0.948    0.0%
    6      1286     1.618    0.1%
    7      1403     6.744    0.4%
    8      1517     12.93    0.8%
    9      1618     12.25    0.7%
   10      1728     15.28    0.8%
   11      1847     10.51    0.5%
   12      1945     12.33    0.6%
   13      2055      14.9    0.7%
   14      2177      12.2    0.5%
   15      2292      14.7    0.6%
   16      2420     10.53    0.4%

Quality and confidence:
param     error
n         0.197

Model:
Time ~=    616.5
    + n    111.6
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    281.2
    + r    541.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     397.6     0.096    0.0%
    1     911.9     4.374    0.4%
    2      1411     9.816    0.6%
    3      1945     11.02    0.5%
    4      2431     12.21    0.5%
    5      2981     17.67    0.5%
    6      3488     14.48    0.4%
    7      3987     23.53    0.5%
    8      4491     16.02    0.3%
    9      5132     13.71    0.2%
   10      5650     19.89    0.3%
   11      6227     26.03    0.4%
   12      6768     28.22    0.4%
   13      7290     17.48    0.2%
   14      7810     25.57    0.3%
   15      8385     29.02    0.3%
   16      8886     38.15    0.4%
   17      9484     24.34    0.2%
   18     10200     43.57    0.4%
   19     10760      36.6    0.3%
   20     11340     35.24    0.3%

Quality and confidence:
param     error
r         1.049

Model:
Time ~=    261.6
    + r    545.2
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    984.7
    + n    123.2
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     920.5     9.611    1.0%
    1      1106     14.98    1.3%
    2      1243     11.68    0.9%
    3      1367     9.997    0.7%
    4      1477     2.799    0.1%
    5      1619     15.24    0.9%
    6      1729     13.47    0.7%
    7      1848     14.21    0.7%
    8      1965     14.24    0.7%
    9      2082     14.38    0.6%
   10      2197      9.51    0.4%
   11      2332     14.53    0.6%
   12      2425     3.793    0.1%
   13      2575     11.59    0.4%
   14      2709     14.33    0.5%
   15      2863     10.87    0.3%
   16      2963     17.51    0.5%

Quality and confidence:
param     error
n         0.385

Model:
Time ~=    974.8
    + n    123.9
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    369.9
    + r     2509
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.6     1.976    0.4%
    1      2884        11    0.3%
    2      5491     26.33    0.4%
    3      7881      16.6    0.2%
    4     10390      36.5    0.3%
    5     12790     23.76    0.1%
    6     15370     33.47    0.2%
    7     17850     44.94    0.2%
    8     20370     41.78    0.2%
    9     22840     29.29    0.1%
   10     25550     37.94    0.1%
   11     27870      32.8    0.1%
   12     30480     27.47    0.0%
   13     33020     74.06    0.2%
   14     35470     52.78    0.1%
   15     37880     35.76    0.0%
   16     40550     24.87    0.0%
   17     42820     48.19    0.1%
   18     45580     70.42    0.1%
   19     48090     57.12    0.1%
   20     50800     77.38    0.1%

Quality and confidence:
param     error
r         1.193

Model:
Time ~=    338.2
    + r     2511
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    38150
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     401.5     9.539    2.3%
    1     38290     38.77    0.1%
    2     73430     136.4    0.1%
    3    109700     76.05    0.0%
    4    146300     68.75    0.0%
    5    182800     72.37    0.0%
    6    219300     135.9    0.0%
    7    255700       144    0.0%
    8    292400     78.26    0.0%
    9    329100     173.4    0.0%
   10    365500     108.3    0.0%
   11    402100       194    0.0%
   12    454900     208.2    0.0%
   13    492200     163.2    0.0%
   14    531600     83.92    0.0%
   15    569700     201.6    0.0%
   16    607600       216    0.0%
   17    644500     75.28    0.0%
   18    683200     237.3    0.0%
   19    722500     193.9    0.0%
   20    760700       306    0.0%

Quality and confidence:
param     error
r         59.25

Model:
Time ~=        0
    + r    38230
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37480
    + t     2620
    + i    64.12
    + o    100.7
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    199900     156.2    0.0%
    1     0   960    137000     70.62    0.0%
    1    20   960    138200     83.66    0.0%
    1    40   960    139500       183    0.1%
    1    60   960    140700     95.18    0.0%
    1    80   960    142100     103.6    0.0%
    1   100   960    143600     111.9    0.0%
    1   120   960    144700     73.02    0.0%
    1   14<truncated>...
```

</details>",10497,2021-12-16T13:24:07Z,0
1045,athei,/benchmark runtime pallet pallet_contracts,10497,2021-12-20T10:57:32Z,0
1046,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-contract-storage"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.449
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.449
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.215
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     67.99     0.438    0.6%
   20     56.66     0.462    0.8%
   40     94.04     0.954    1.0%
   60     128.5     1.478    1.1%
   80     160.4      1.63    1.0%
  100       205     1.999    0.9%
  120     243.9     2.984    1.2%
  140     281.9     2.248    0.7%
  160     324.1     2.604    0.8%
  180     375.6     5.083    1.3%
  200     413.1     1.432    0.3%
  220     457.7     6.462    1.4%
  240     507.2     4.252    0.8%
  260     549.6     6.575    1.1%
  280     579.4     3.602    0.6%
  300     626.8     4.152    0.6%
  320     676.5     10.93    1.6%
  340     707.4     3.443    0.4%
  360     752.2     2.026    0.2%
  380     810.1     10.97    1.3%
  400     850.4     7.764    0.9%
  420     888.2     4.229    0.4%
  440     929.9     3.992    0.4%
  460     998.3     14.56    1.4%
  480      1028     10.38    1.0%
  500      1074     15.21    1.4%
  520      1125     6.083    0.5%
  540      1166     4.722    0.4%
  560      1225     11.69    0.9%
  580      1250      9.39    0.7%
  600      1299     7.733    0.5%
  620      1351     18.48    1.3%
  640      1390     11.89    0.8%
  660      1451     19.32    1.3%
  680      1486     6.868    0.4%
  700      1535     19.29    1.2%
  720      1581     11.88    0.7%
  740      1618     15.27    0.9%
  760      1664     13.55    0.8%
  780      1710     13.77    0.8%
  800      1766     10.61    0.6%
  820      1805     13.19    0.7%
  840      1844     4.815    0.2%
  860      1892     12.09    0.6%
  880      1939     11.75    0.6%
  900      1974     5.778    0.2%
  920      2036     11.22    0.5%
  940      2031     14.31    0.7%
  960      2121     14.74    0.6%
  980      2158     17.01    0.7%
 1000      2213     13.66    0.6%
 1020      2249     13.49    0.5%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.214
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    100.6
    + q    0.246
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.391     0.034    1.4%
   20     83.44     0.669    0.8%
   40     93.77      0.61    0.6%
   60     102.8     1.143    1.1%
   80     109.6     0.926    0.8%
  100     120.6     1.398    1.1%
  120     126.6     0.836    0.6%
  140     134.2     1.058    0.7%
  160     142.2     1.929    1.3%
  180     149.7      1.07    0.7%
  200     160.1     1.128    0.7%
  220     166.1     2.197    1.3%
  240     173.5      1.91    1.1%
  260     180.5     1.646    0.9%
  280     196.2     8.887    4.5%
  300     188.4     2.142    1.1%
  320       195      1.62    0.8%
  340     202.8     1.847    0.9%
  360     183.8     1.229    0.6%
  380     219.2      1.99    0.9%
  400     194.2     1.666    0.8%
  420     204.2     3.838    1.8%
  440     238.3     1.624    0.6%
  460     210.9     4.483    2.1%
  480     213.6     1.052    0.4%
  500       222     1.736    0.7%
  520       225     1.235    0.5%
  540     229.4     1.616    0.7%
  560       240     3.928    1.6%
  580     242.7     2.031    0.8%
  600     247.4     0.972    0.3%
  620     255.9     5.198    2.0%
  640       258      1.95    0.7%
  660     267.1     2.792    1.0%
  680     269.8     1.019    0.3%
  700     276.3     2.025    0.7%
  720     281.6     1.733    0.6%
  740     283.4     2.459    0.8%
  760     290.4     2.353    0.8%
  780     295.6     1.708    0.5%
  800     300.7     1.132    0.3%
  820     303.1     0.894    0.2%
  840     308.4     1.355    0.4%
  860     312.1     1.815    0.5%
  880       317     1.874    0.5%
  900     318.7     0.923    0.2%
  920     323.7     1.273    0.3%
  940     327.3     1.773    0.5%
  960     328.8     0.786    0.2%
  980     334.5      0.69    0.2%
 1000     338.3      0.68    0.2%
 1020     341.7     1.026    0.3%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    96.67
    + q    0.253
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     32.9
    + c       92
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     47.59     0.071    0.1%
    2     233.6      1.72    0.7%
    4       414     4.715    1.1%
    6     580.7     8.656    1.4%
    8     767.2     0.733    0.0%
   10     944.3     11.21    1.1%
   12      1114      14.5    1.3%
   14      1327      11.6    0.8%
   16      1492     12.72    0.8%
   18      1690     15.99    0.9%
   20      1872      10.7    0.5%
   22      2024     13.93    0.6%
   24      2197      4.17    0.1%
   26      2452     14.85    0.6%
   28      2637     17.38    0.6%
   30      2799      11.6    0.4%
   32      2979     13.25    0.4%
   34      3188     19.91    0.6%
   36      3348      4.46    0.1%
   38      3519      12.3    0.3%
   40      3684     23.34    0.6%
   42      3846     23.34    0.6%
   44      4029     17.45    0.4%
   46      4177     13.11    0.3%
   48      4348     15.38    0.3%
   50      4719     15.21    0.3%
   52      4889      12.4    0.2%
   54      5035     18.42    0.3%
   56      5203     12.16    0.2%
   58      5369     16.73    0.3%
   60      5525     22.35    0.4%
   62      5722     8.659    0.1%
   64      5895     6.486    0.1%
   66      6132     17.08    0.2%
   68      6308     13.97    0.2%
   70      6482     21.46    0.3%
   72      6632     14.45    0.2%
   74      6803     18.02    0.2%
   76      6971     17.24    0.2%
   78      7125     16.28    0.2%
   80      7305     19.73    0.2%
   82      7470     23.68    0.3%
   84      7634     22.46    0.2%
   86      7793     14.12    0.1%
   88      8002     53.58    0.6%
   90      8164     23.15    0.2%
   92      8291     27.69    0.3%
   94      8461     30.45    0.3%
   96      8639     17.21    0.1%
   98      9241        26    0.2%
  100      9423      18.5    0.1%
  102      9708     52.36    0.5%
  104      9756     29.19    0.2%
  106      9897     20.58    0.2%
  108     10080     27.15    0.2%
  110     10240     23.48    0.2%
  112     10390     28.37    0.2%
  114     10570     20.71    0.1%
  116     10740     26.69    0.2%
  118     10920     38.84    0.3%
  120     11070     14.78    0.1%
  122     11260      33.6    0.2%
  124     11530     72.87    0.6%
  126     11580     14.04    0.1%
  128     11770     22.16    0.1%

Quality and confidence:
param     error
c         0.097

Model:
Time ~=    13.15
    + c    92.22
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    401.7
    + c    78.43
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     407.7     0.245    0.0%
    2     579.2     9.436    1.6%
    4     744.4     10.91    1.4%
    6     872.1     8.943    1.0%
    8      1035     2.624    0.2%
   10      1175     10.52    0.8%
   12      1327     10.96    0.8%
   14      1535      12.2    0.7%
   16      1664     13.75    0.8%
   18      1799     8.037    0.4%
   20      1948     14.48    0.7%
   22      2076     14.35    0.6%
   24      2210     14.27    0.6%
   26      2496      12.1    0.4%
   28      2635     13.42    0.5%
   30      2766     15.37    0.5%
   32      2886     16.16    0.5%
   34      3068     21.71    0.7%
   36      3205     13.65    0.4%
   38      3342     7.815    0.2%
   40      3472     21.81    0.6%
   42      3617     8.938    0.2%
   44      3740     16.84    0.4%
   46      3877     13.82    0.3%
   48      4014     4.159    0.1%
   50      4462     24.26    0.5%
   52      4589     9.763    0.2%
   54      4708     10.83    0.2%
   56      4862     12.96    0.2%
   58      4989     8.229    0.1%
   60      5118     16.41    0.3%
   62      5260     8.163    0.1%
   64      5404     17.74    0.3%
   66      5589     13.74    0.2%
   68      5728     13.09    0.2%
   70      5865     15.39    0.2%
   72      5992     18.87    0.3%
   74      6131     16.85    0.2%
   76      6275     22.46    0.3%
   78      6391     9.618    0.1%
   80      6543     15.87    0.2%
   82      6660     9.552    0.1%
   84      6821     40.09    0.5%
   86      7033      46.8    0.6%
   88      7089     20.72    0.2%
   90      7222     16.91    0.2%
   92      7351     20.36    0.2%
   94      7487      16.9    0.2%
   96      7617     7.478    0.0%
   98      8359     21.04    0.2%
  100      8503     11.31    0.1%
  102      8637     24.01    0.2%
  104      8824     62.72    0.7%
  106      8910     15.35    0.1%
  108      9042     19.15    0.2%
  110      9180     15.59    0.1%
  112      9332     10.89    0.1%
  114      9450     15.59    0.1%
  116      9590     33.48    0.3%
  118      9737     28.82    0.2%
  120      9845     12.56    0.1%
  122      9996     40.34    0.4%
  124     10130     22.22    0.2%
  126     10250     18.85    0.1%
  128     10390     12.88    0.1%

Quality and confidence:
param     error
c         0.131

Model:
Time ~=    369.7
    + c    78.81
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    502.4
    + c    200.3
    + s    2.047
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2576     13.27    0.5%
    1  1024      2822     10.79    0.3%
    2  1024      2982     12.44    0.4%
    3  1024      3202     11.51    0.3%
    4  1024      3392     7.132    0.2%
    5  1024      3581      11.5    0.3%
    6  1024      3763     13.93    0.3%
    7  1024      3998     17.34    0.4%
    8  1024      4167     24.09    0.5%
    9  1024      4432     21.21    0.4%
   10  1024      4589     19.64    0.4%
   11  1024      4773     10.63    0.2%
   12  1024      4959     27.09    0.5%
   13  1024      5201     16.08    0.3%
   14  1024      5400     18.34    0.3%
   15  1024      5594     30.45    0.5%
   16  1024      5735      15.6    0.2%
   17  1024      6119     18.14    0.2%
   18  1024      6233     28.39    0.4%
   19  1024      6427     23.91    0.3%
   20  1024      6572     13.41    0.2%
   21  1024      6748     14.05    0.2%
   22  1024      6923     14.65    0.2%
   23  1024      7156     35.47    0.4%
   24  1024      7373     35.74    0.4%
   25  1024      7669      18.4    0.2%
   26  1024      7814     23.39    0.2%
   27  1024      7998     15.15    0.1%
   28  1024      8287     28.45    0.3%
   29  1024      8343     21.52    0.2%
   30  1024      8561      20.1    0.2%
   31  1024      8706     26.16    0.3%
   32  1024      8899     20.46    0.2%
   33  1024      9382     23.22    0.2%
   34  1024      9548     11.17    0.1%
   35  1024      9721     12.95    0.1%
   36  1024      9893     19.48    0.1%
   37  1024     10100     31.92    0.3%
   38  1024     10250     21.34    0.2%
   39  1024     10620     53.38    0.5%
   40  1024     10630     20.36    0.1%
   41  1024     10810     25.39    0.2%
   42  1024     10980     25.14    0.2%
   43  1024     11190     34.99    0.3%
   44  1024     11360     47.44    0.4%
   45  1024     11540     29.98    0.2%
   46  1024     11750     45.42    0.3%
   47  1024     11900     50.89    0.4%
   48  1024     12080     15.57    0.1%
   49  1024     12540     22.06    0.1%
   50  1024     12770     27.48    0.2%
   51  1024     13170     25.19    0.1%
   52  1024     13100     27.74    0.2%
   53  1024     13280     24.22    0.1%
   54  1024     13680     31.11    0.2%
   55  1024     13640     19.08    0.1%
   56  1024     13790      28.1    0.2%
   57  1024     14110     43.39    0.3%
   58  1024     14200     22.29    0.1%
   59  1024     14350     26.32    0.1%
   60  1024     14540     31.08    0.2%
   61  1024     14760     43.66    0.2%
   62  1024     14880     22.49    0.1%
   63  1024     15060     35.34    0.2%
   64     0     13080     40.92    0.3%
   64    20     13190     28.98    0.2%
   64    40     13230     44.85    0.3%
   64    60     13250     28.73    0.2%
   64    80     13320     37.89    0.2%
   64   100     13390     62.64    0.4%
   64   120     13460     76.96    0.5%
   64   140     13410     31.36    0.2%
   64   160     13520     76.65    0.5%
   64   180     13500     40.56    0.3%
   64   200     13550     31.23    0.2%
   64   220     13640     32.66    0.2%
   64   240     13620     31.02    0.2%
   64   260     13670     26.07    0.1%
   64   280     13750     57.63    0.4%
   64   300     13740     24.74    0.1%
   64   320     13780     27.89    0.2%
   64   340     13840     29.02    0.2%
   64   360     13880     31.05    0.2%
   64   380     13960     45.47    0.3%
   64   400     13940     22.27    0.1%
   64   420     14010     33.66    0.2%
   64   440     14280      29.1    0.2%
   64   460     14030     27.82    0.1%
   64   480     14090     43.97    0.3%
   64   500     14110     23.46    0.1%
   64   520     14220     24.92    0.1%
   64   540     14240     29.35    0.2%
   64   560     14280        29    0.2%
   64   580     14320     36.94    0.2%
   64   600     14350     35.79    0.2%
   64   620     14380     53.23    0.3%
   64   640     14430     26.63    0.1%
   64   660     15170     57.74    0.3%
   64   680     14530     59.94    0.4%
   64   700     14550     35.23    0.2%
   64   720     14580     26.67    0.1%
   64   740     14610     23.38    0.1%
   64   760     14700     37.12    0.2%
   64   780     14680     26.16    0.1%
   64   800     14740      32.6    0.2%
   64   820     14770     36.72    0.2%
   64   840     14820     69.06    0.4%
   64   860     15130     50.85    0.3%
   64   880     15160     29.25    0.1%
   64   900     14950      44.7    0.2%
   64   920     14990     50.19    0.3%
   64   940     15070     43.61    0.2%
   64   960     15270     87.39    0.5%
   64   980     15150     39.42    0.2%
   64  1000     15190     28.43    0.1%
   64  1020     15200     47.24    0.3%
   64  1024     15250     20.98    0.1%

Quality and confidence:
param     error
c         0.198
s         0.012

Model:
Time ~=      373
    + c    198.9
    + s    2.204
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    188.4
    + s    1.987
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     186.8     0.216    0.1%
   20     227.1     0.294    0.1%
   40     268.2     0.261    0.0%
   60     307.4     0.242    0.0%
   80     347.3     0.251    0.0%
  100     389.2     4.192    1.0%
  120     426.2     0.403    0.0%
  140     465.6     0.438    0.0%
  160     505.7     0.255    0.0%
  180       548     4.784    0.8%
  200       588      4.39    0.7%
  220     626.6     1.453    0.2%
  240     679.2     17.93    2.6%
  260     705.2     0.286    0.0%
  280     759.8     16.65    2.1%
  300     788.5     11.12    1.4%
  320     826.2      10.8    1.3%
  340       871     13.77    1.5%
  360     917.2     17.07    1.8%
  380       950     14.35    1.5%
  400     998.1      17.2    1.7%
  420      1022      1.43    0.1%
  440      1071     14.18    1.3%
  460      1111     13.22    1.1%
  480      1140     1.561    0.1%
  500      1190     14.82    1.2%
  520      1236      17.3    1.3%
  540      1276     17.48    1.3%
  560      1314     15.94    1.2%
  580      1354     14.72    1.0%
  600      1387     11.87    0.8%
  620      1433     14.57    1.0%
  640      1475     14.97    1.0%
  660      1510     11.71    0.7%
  680      1552     14.08    0.9%
  700      1609      3.83    0.2%
  720      1625     12.59    0.7%
  740      1670     16.58    0.9%
  760      1701     8.771    0.5%
  780      1759     17.69    1.0%
  800      1788     14.47    0.8%
  820      1837      15.9    0.8%
  840      1871     12.36    0.6%
  860      1901     14.27    0.7%
  880      1942     13.57    0.6%
  900      1976     9.597    0.4%
  920      2035      15.1    0.7%
  940      2070     17.19    0.8%
  960      2114     14.26    0.6%
  980      2164     18.61    0.8%
 1000      2203     15.76    0.7%
 1020      2233     12.74    0.5%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=      188
    + s    2.005
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    141.7
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    141.7
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    78.42
    + c    90.14
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0      78.7     0.248    0.3%
    1     172.9      1.51    0.8%
    2       264     0.285    0.1%
    3     340.8      0.94    0.2%
    4     439.2     0.606    0.1%
    5     519.5     4.302    0.8%
    6       598     0.362    0.0%
    7       714     13.12    1.8%
    8     796.9     15.78    1.9%
    9     886.7     13.33    1.5%
   10     975.5     15.52    1.5%
   11      1053     15.13    1.4%
   12      1133     13.29    1.1%
   13      1263     9.825    0.7%
   14      1349     17.15    1.2%
   15      1430     16.03    1.1%
   16      1525     14.79    0.9%
   17      1618     14.78    0.9%
   18      1713     12.49    0.7%
   19      1775     15.51    0.8%
   20      1862     17.27    0.9%
   21      1941     16.82    0.8%
   22      2023     15.07    0.7%
   23      2106      14.8    0.7%
   24      2187     14.14    0.6%
   25      2374     13.59    0.5%
   26      2459     15.43    0.6%
   27      2549     18.64    0.7%
   28      2625     5.391    0.2%
   29      2705     14.39    0.5%
   30      2775     13.37    0.4%
   31      2873      24.8    0.8%
   32      2950     12.71    0.4%
   33      3079     16.12    0.5%
   34      3157     6.224    0.1%
   35      3241     16.67    0.5%
   36      3325     7.312    0.2%
   37      3405     8.407    0.2%
   38      3495     18.31    0.5%
   39      3557     13.67    0.3%
   40      3637     15.36    0.4%
   41      3735     14.07    0.3%
   42      3802     17.05    0.4%
   43      3890     19.44    0.4%
   44      3976     13.27    0.3%
   45      4044     19.54    0.4%
   46      4140     11.57    0.2%
   47      4214     6.747    0.1%
   48      4288     10.74    0.2%
   49      4597     17.97    0.3%
   50      4681     12.63    0.2%
   51      4761     10.46    0.2%
   52      4831     3.416    0.0%
   53      4919      13.2    0.2%
   54      5007     13.82    0.2%
   55      5102     18.68    0.3%
   56      5166     12.16    0.2%
   57      5239     22.65    0.4%
   58      5322     14.79    0.2%
   59      5408     11.57    0.2%
   60      5485     14.96    0.2%
   61      5579     18.51    0.3%
   62      5665     28.96    0.5%
   63      5721     9.649    0.1%
   64      5818     14.17    0.2%

Quality and confidence:
param     error
c         0.094

Model:
Time ~=    69.58
    + c    90.31
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     32.2
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     32.2
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.7
    + r    79.57
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.2     7.482    1.8%
    1     490.9     0.228    0.0%
    2     574.1     5.431    0.9%
    3     648.3     0.937    0.1%
    4     746.6      10.9    1.4%
    5     815.2     8.806    1.0%
    6     887.4     1.934    0.2%
    7     979.8     14.52    1.4%
    8      1047     4.875    0.4%
    9      1130     13.52    1.1%
   10      1206     13.34    1.1%
   11      1287     14.13    1.0%
   12      1362     13.91    1.0%
   13      1437     12.93    0.8%
   14      1542     13.24    0.8%
   15      1625     11.72    0.7%
   16      1698     16.03    0.9%
   17      1775     11.11    0.6%
   18      1853      12.2    0.6%
   19      1924     11.65    0.6%
   20      2023     16.61    0.8%

Quality and confidence:
param     error
r         0.156

Model:
Time ~=    411.6
    + r    80.12
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    413.5
    + r    79.82
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.2     0.984    0.2%
    1     493.1     3.128    0.6%
    2     582.7     15.22    2.6%
    3     653.1     6.169    0.9%
    4     739.4      8.49    1.1%
    5     813.7      5.55    0.6%
    6     892.1     5.462    0.6%
    7     973.4     1.218    0.1%
    8      1063      16.1    1.5%
    9      1133     14.69    1.2%
   10      1211      12.7    1.0%
   11      1293     14.73    1.1%
   12      1358     4.412    0.3%
   13      1442     12.81    0.8%
   14      1544     11.84    0.7%
   15      1623     12.83    0.7%
   16      1703     13.12    0.7%
   17      1781     13.37    0.7%
   18      1869     14.51    0.7%
   19      1941     14.27    0.7%
   20      2004     8.862    0.4%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    413.2
    + r    80.22
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.7
    + r    78.41
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.9     0.269    0.0%
    1     490.3      0.18    0.0%
    2     569.7     0.161    0.0%
    3     644.8     0.485    0.0%
    4     730.1     5.523    0.7%
    5     814.3     13.29    1.6%
    6     885.4     10.88    1.2%
    7     967.5     8.359    0.8%
    8      1051     13.06    1.2%
    9      1125      12.5    1.1%
   10      1192     8.321    0.6%
   11      1277     14.52    1.1%
   12      1357     16.26    1.1%
   13      1417     9.039    0.6%
   14      1525      14.6    0.9%
   15      1597     9.896    0.6%
   16      1675     13.52    0.8%
   17      1748     9.369    0.5%
   18      1832     18.06    0.9%
   19      1901     8.951    0.4%
   20      1995     7.093    0.3%

Quality and confidence:
param     error
r         0.142

Model:
Time ~=    412.4
    + r    78.79
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      416
    + r    221.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.3     0.217    0.0%
    1     636.9     0.585    0.0%
    2     860.2     5.792    0.6%
    3      1085     11.68    1.0%
    4      1314     9.178    0.6%
    5      1527     5.342    0.3%
    6      1746     10.24    0.5%
    7      1971     6.745    0.3%
    8      2191     7.005    0.3%
    9      2399     10.04    0.4%
   10      2631     12.93    0.4%
   11      2841     13.26    0.4%
   12      3059     8.451    0.2%
   13      3280     8.034    0.2%
   14      3528     9.435    0.2%
   15      3761     13.45    0.3%
   16      3971     8.685    0.2%
   17      4194     10.52    0.2%
   18      4401     11.01    0.2%
   19      4637      12.2    0.2%
   20      4853     14.77    0.3%

Quality and confidence:
param     error
r         0.156

Model:
Time ~=      414
    + r    221.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    406.8
    + r    80.36
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.2     0.364    0.0%
    1     478.1     3.587    0.7%
    2     571.9     17.77    3.1%
    3     633.8     1.891    0.2%
    4     716.7     1.989    0.2%
    5     793.7     3.069    0.3%
    6     872.2     9.068    1.0%
    7     986.4     14.69    1.4%
    8      1067     2.467    0.2%
    9      1151     0.618    0.0%
   10      1220     12.57    1.0%
   11      1274     11.38    0.8%
   12      1352     13.42    0.9%
   13      1427     11.65    0.8%
   14      1537     8.949    0.5%
   15      1630     12.63    0.7%
   16      1687     2.401    0.1%
   17      1776      14.6    0.8%
   18      1869     6.175    0.3%
   19      1942     12.69    0.6%
   20      2002     8.538    0.4%

Quality and confidence:
param     error
r         0.193

Model:
Time ~=    401.8
    + r    80.76
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    399.2
    + r    80.09
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.2     0.132    0.0%
    1     476.8     0.433    0.0%
    2     561.3     10.12    1.8%
    3     631.5     0.593    0.0%
    4     714.8     1.833    0.2%
    5     791.1      0.91    0.1%
    6     871.6       9.7    1.1%
    7     966.2     5.417    0.5%
    8      1042     8.199    0.7%
    9      1120     12.41    1.1%
   10      1193     10.26    0.8%
   11      1274     13.48    1.0%
   12      1345     10.37    0.7%
   13      1421     13.88    0.9%
   14      1547     14.81    0.9%
   15      1626     13.33    0.8%
   16      1687     11.91    0.7%
   17      1766     10.91    0.6%
   18      1846     12.66    0.6%
   19      1927      15.1    0.7%
   20      2000     10.09    0.5%

Quality and confidence:
param     error
r         0.168

Model:
Time ~=      395
    + r    80.58
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    401.6
    + r    79.54
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.2     0.168    0.0%
    1     476.3     0.284    0.0%
    2     557.4      5.19    0.9%
    3     633.8     7.917    1.2%
    4     723.4     9.244    1.2%
    5     792.9     6.645    0.8%
    6     873.2     12.95    1.4%
    7     960.7     1.675    0.1%
    8      1041      12.8    1.2%
    9      1127     14.62    1.2%
   10      1187     4.357    0.3%
   11      1266     11.78    0.9%
   12      1351     13.32    0.9%
   13      1423     15.22    1.0%
   14      1535     13.75    0.8%
   15      1606     10.91    0.6%
   16      1700     13.66    0.8%
   17      1765     13.98    0.7%
   18      1838     17.73    0.9%
   19      1907     8.587    0.4%
   20      1988     16.61    0.8%

Quality and confidence:
param     error
r          0.17

Model:
Time ~=    398.5
    + r    79.97
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    408.2
    + r    79.34
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       394     0.181    0.0%
    1     477.8      2.98    0.6%
    2       578     13.43    2.3%
    3     645.4     0.483    0.0%
    4     731.1     4.483    0.6%
    5     805.7     1.961    0.2%
    6     884.7     5.498    0.6%
    7     972.3     13.32    1.3%
    8      1041     7.961    0.7%
    9      1114     3.986    0.3%
   10      1204     15.27    1.2%
   11      1277     13.61    1.0%
   12      1348     13.22    0.9%
   13      1421     11.42    0.8%
   14      1538     14.13    0.9%
   15      1609      12.3    0.7%
   16      1685     9.629    0.5%
   17      1752     2.605    0.1%
   18      1836     11.42    0.6%
   19      1929     10.09    0.5%
   20      1990     12.77    0.6%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    405.4
    + r    79.64
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    422.6
    + r    208.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.2     8.646    2.1%
    1     619.7     13.98    2.2%
    2     834.5     8.035    0.9%
    3      1038     13.14    1.2%
    4      1258     12.11    0.9%
    5      1438     9.604    0.6%
    6      1668     10.05    0.6%
    7      1871     6.255    0.3%
    8      2087     9.446    0.4%
    9      2301     8.684    0.3%
   10      2510     6.823    0.2%
   11      2735      9.97    0.3%
   12      2932     6.274    0.2%
   13      3139     6.502    0.2%
   14      3353     7.795    0.2%
   15      3554     14.08    0.3%
   16      3768     8.577    0.2%
   17      3951     15.12    0.3%
   18      4152     12.51    0.3%
   19      4353     5.888    0.1%
   20      4557     6.658    0.1%

Quality and confidence:
param     error
r         0.196

Model:
Time ~=      420
    + r    208.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    144.9
    + r    37.15
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     136.5     0.216    0.1%
    1     178.2     0.263    0.1%
    2     217.4      1.83    0.8%
    3     256.1     0.474    0.1%
    4     293.1     0.757    0.2%
    5     316.9     0.883    0.2%
    6       374     1.975    0.5%
    7     408.2     0.769    0.1%
    8     444.5     1.073    0.2%
    9       482     1.597    0.3%
   10     516.7     1.169    0.2%
   11     553.2     2.041    0.3%
   12     590.4       2.6    0.4%
   13       630     3.603    0.5%
   14     664.4     2.421    0.3%
   15     707.7     11.29    1.5%
   16     739.8     6.327    0.8%
   17     777.2      8.08    1.0%
   18     815.6     10.26    1.2%
   19     845.3     4.352    0.5%
   20     881.6     3.398    0.3%

Quality and confidence:
param     error
r         0.072

Model:
Time ~=    142.8
    + r    37.29
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      415
    + r    72.23
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.2     1.044    0.2%
    1     488.6     8.518    1.7%
    2     564.9      11.4    2.0%
    3     634.7     7.028    1.1%
    4     704.7     0.706    0.1%
    5       775     0.792    0.1%
    6     845.8     1.439    0.1%
    7     941.7      17.5    1.8%
    8     996.5     8.955    0.8%
    9      1065     8.264    0.7%
   10      1151     12.65    1.0%
   11      1210     13.02    1.0%
   12      1278     13.36    1.0%
   13      1351     13.15    0.9%
   14      1440     13.38    0.9%
   15      1513     13.93    0.9%
   16      1588     11.38    0.7%
   17      1644     7.762    0.4%
   18      1729     15.52    0.8%
   19      1786      9.65    0.5%
   20      1870     17.65    0.9%

Quality and confidence:
param     error
r         0.152

Model:
Time ~=    415.2
    + r    72.71
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    519.9
    + n       38
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     483.1     0.267    0.0%
   20      1245     2.292    0.1%
   40      2033     16.14    0.7%
   60      2788     22.19    0.7%
   80      3559     13.11    0.3%
  100      4307     16.14    0.3%
  120      5090     11.86    0.2%
  140      5841     18.96    0.3%
  160      6625     23.36    0.3%
  180      7361     15.51    0.2%
  200      8126     11.07    0.1%
  220      8878     19.22    0.2%
  240      9640     26.94    0.2%
  260     10400     20.95    0.2%
  280     11150     26.26    0.2%
  300     11940     30.03    0.2%
  320     12690     20.84    0.1%
  340     13440     34.55    0.2%
  360     14230     27.18    0.1%
  380     14960     24.86    0.1%
  400     15780      63.1    0.3%
  420     16510      42.6    0.2%
  440     17270     44.42    0.2%
  460     18000     35.63    0.1%
  480     18770     65.17    0.3%
  500     19520     46.52    0.2%
  520     20310     53.18    0.2%
  540     21020     49.08    0.2%
  560     22090     163.6    0.7%
  580     22570     37.42    0.1%
  600     23320      43.1    0.1%
  620     24110     31.04    0.1%
  640     24830     41.54    0.1%
  660     25620      46.2    0.1%
  680     26350     50.81    0.1%
  700     27100     39.81    0.1%
  720     27910     43.18    0.1%
  740     28640     52.32    0.1%
  760     29410     55.57    0.1%
  780     30150     43.39    0.1%
  800     30900      38.4    0.1%
  820     31700     71.71    0.2%
  840     32450     48.24    0.1%
  860     33190     48.17    0.1%
  880     33920     24.53    0.0%
  900     34690     45.99    0.1%
  920     35460     50.52    0.1%
  940     36250     41.43    0.1%
  960     36960     50.27    0.1%
  980     37720     42.65    0.1%
 1000     38530     39.73    0.1%
 1020     39330     45.34    0.1%

Quality and confidence:
param     error
n         0.009

Model:
Time ~=    528.1
    + n       38
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    398.2
    + r    2.632
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     398.2     0.216    0.0%
    1     400.7     0.226    0.0%

Quality and confidence:
param     error
r         0.104

Model:
Time ~=    398.2
    + r    2.553
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      401
    + n    0.623
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     402.4     2.819    0.7%
   20     414.7     3.729    0.8%
   40       426     0.301    0.0%
   60     438.6     0.386    0.0%
   80     450.9     0.242    0.0%
  100     462.9     0.212    0.0%
  120     477.8     4.642    0.9%
  140     496.4     9.387    1.8%
  160     500.6     0.332    0.0%
  180     513.2     0.336    0.0%
  200     525.7     0.264    0.0%
  220     541.5     9.783    1.8%
  240     553.1     8.323    1.5%
  260     564.8      5.31    0.9%
  280     577.3     4.869    0.8%
  300     594.7     8.355    1.4%
  320     603.8     6.933    1.1%
  340     616.4     9.718    1.5%
  360     625.6     0.413    0.0%
  380     644.3     13.15    2.0%
  400     650.9      0.52    0.0%
  420     665.8     9.824    1.4%
  440     679.9     9.918    1.4%
  460       689      3.94    0.5%
  480     715.7     15.93    2.2%
  500     713.1     0.329    0.0%
  520     727.9      6.67    0.9%
  540     738.1     0.696    0.0%
  560     751.1     6.719    0.8%
  580     762.5     0.252    0.0%
  600     776.4     4.375    0.5%
  620     792.7      9.61    1.2%
  640     802.2     5.912    0.7%
  660     817.8      14.5    1.7%
  680     827.3     6.462    0.7%
  700     839.7     8.164    0.9%
  720       855     8.288    0.9%
  740     863.1     0.971    0.1%
  760     881.4     9.747    1.1%
  780     894.7     9.591    1.0%
  800     905.9     9.483    1.0%
  820     912.2     0.701    0.0%
  840       928     9.173    0.9%
  860     938.8      4.68    0.4%
  880     956.5     9.285    0.9%
  900     967.8     9.093    0.9%
  920     989.6     13.13    1.3%
  940     994.4     10.98    1.1%
  960      1004     8.189    0.8%
  980      1020     11.86    1.1%
 1000      1032      11.7    1.1%
 1020      1041     6.481    0.6%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    401.8
    + n    0.629
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.2
    + r    56.41
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.2     0.154    0.0%
    1     465.7     6.424    1.3%

Quality and confidence:
param     error
r         2.142

Model:
Time ~=    407.2
    + r    58.52
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    419.5
    + r    248.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       408     0.233    0.0%
    1     661.5     1.665    0.2%
    2     920.6     13.59    1.4%
    3      1166     11.51    0.9%
    4      1410     8.415    0.5%
    5      1673     13.58    0.8%
    6      1910     10.43    0.5%
    7      2155     12.69    0.5%
    8      2391     7.898    0.3%
    9      2663     10.37    0.3%
   10      2911      5.94    0.2%
   11      3150     6.567    0.2%
   12      3400     9.888    0.2%
   13      3648     9.131    0.2%
   14      3885     10.63    0.2%
   15      4121     12.15    0.2%
   16      4363     16.43    0.3%
   17      4662     15.05    0.3%
   18      4902     10.06    0.2%
   19      5134     16.37    0.3%
   20      5391     11.91    0.2%

Quality and confidence:
param     error
r         0.183

Model:
Time ~=    417.8
    + r    248.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    416.4
    + r    420.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       399     0.289    0.0%
    1     835.1     12.35    1.4%
    2      1278     1.543    0.1%
    3      1689     14.33    0.8%
    4      2103     9.489    0.4%
    5      2536     13.85    0.5%
    6      2950     8.195    0.2%
    7      3360     17.04    0.5%
    8      3768     13.76    0.3%
    9      4206     11.46    0.2%
   10      4621     9.704    0.2%
   11      5055     22.17    0.4%
   12      5467     21.58    0.3%
   13      5871      8.13    0.1%
   14      6296     16.63    0.2%
   15      6707     18.12    0.2%
   16      7137     17.95    0.2%
   17      7613     26.02    0.3%
   18      7997     11.34    0.1%
   19      8431     18.51    0.2%
   20      8844     24.89    0.2%

Quality and confidence:
param     error
r         0.248

Model:
Time ~=    415.8
    + r    421.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    890.6
    + t    381.9
    + n      165
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3456     16.48    0.4%
    1    16      4014     13.07    0.3%
    2    16      4301     9.267    0.2%
    3    16      4687     20.83    0.4%
    4     0      2422     12.79    0.5%
    4     1      2610     10.01    0.3%
    4     2      2701     12.64    0.4%
    4     3      2883     14.55    0.5%
    4     4      3034     11.45    0.3%
    4     5      3199     20.31    0.6%
    4     6      3382     19.04    0.5%
    4     7      3526      17.7    0.5%
    4     8      3689     14.85    0.4%
    4     9      3888     19.68    0.5%
    4    10      4051     7.078    0.1%
    4    11      4190     11.93    0.2%
    4    12      4365     11.72    0.2%
    4    13      4554     15.06    0.3%
    4    14      4697     24.73    0.5%
    4    15      4876     11.98    0.2%
    4    16      5054     18.15    0.3%

Quality and confidence:
param     error
t         2.671
n         0.526

Model:
Time ~=    885.8
    + t    375.9
    + n    165.8
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    157.1
    + r    57.34
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     156.1     0.212    0.1%
    1     217.8     0.185    0.0%
    2     262.9     0.339    0.1%
    3     336.4       0.4    0.1%
    4     376.8     0.446    0.1%
    5     445.2     1.132    0.2%
    6     510.7     15.99    3.1%
    7     553.4      1.14    0.2%
    8     608.5     2.834    0.4%
    9     664.1     1.609    0.2%
   10     720.2     7.557    1.0%
   11     801.9     11.73    1.4%
   12     858.6     11.53    1.3%
   13     906.5     5.032    0.5%
   14     971.2     12.74    1.3%
   15      1031     14.32    1.3%
   16      1075     9.568    0.8%
   17      1134      7.59    0.6%
   18      1190     10.24    0.8%
   19      1243     7.266    0.5%
   20      1297     8.569    0.6%

Quality and confidence:
param     error
r         0.129

Model:
Time ~=    156.1
    + r    57.54
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    466.3
    + r    330.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.7     0.256    0.0%
    1     872.2      12.7    1.4%
    2      1151     4.334    0.3%
    3      1482     11.56    0.7%
    4      1770     16.62    0.9%
    5      2135     11.44    0.5%
    6      2426     11.75    0.4%
    7      2741     9.725    0.3%
    8      3039     9.228    0.3%
    9      3465     15.58    0.4%
   10      3794      6.48    0.1%
   11      4111     14.88    0.3%
   12      4415     12.93    0.2%
   13      4714     18.29    0.3%
   14      5017     11.81    0.2%
   15      5340     11.86    0.2%
   16      5697      26.8    0.4%
   17      6115     33.18    0.5%
   18      6533     14.19    0.2%
   19      6808     20.21    0.2%
   20      7140     13.22    0.1%

Quality and confidence:
param     error
r         0.632

Model:
Time ~=    452.5
    + r    331.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    733.2
    + n    72.24
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     714.7     5.591    0.7%
    1     805.9     8.592    1.0%
    2     889.2     13.13    1.4%
    3     951.8     4.776    0.5%
    4      1020      3.15    0.3%
    5      1092     6.468    0.5%
    6      1179     14.84    1.2%
    7      1243     12.85    1.0%
    8      1305     12.53    0.9%
    9      1380     13.27    0.9%
   10      1461     12.42    0.8%
   11      1538     8.707    0.5%
   12      1616     14.24    0.8%
   13      1662     12.08    0.7%
   14      1761     14.87    0.8%
   15      1825     18.15    0.9%
   16      1863     12.45    0.6%

Quality and confidence:
param     error
n         0.257

Model:
Time ~=    733.3
    + n    72.38
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      160
    + r    801.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     399.2       9.5    2.3%
    1      1147     2.721    0.2%
    2      1870     12.89    0.6%
    3      2608     12.85    0.4%
    4      3368     11.48    0.3%
    5      4124     14.33    0.3%
    6      4914     19.26    0.3%
    7      5659     20.88    0.3%
    8      6467     21.49    0.3%
    9      7311      32.6    0.4%
   10      8078     32.76    0.4%
   11      8897     25.58    0.2%
   12      9717     29.38    0.3%
   13     10530     34.28    0.3%
   14     11340     38.69    0.3%
   15     12200     47.62    0.3%
   16     13000     25.62    0.1%
   17     13760     53.32    0.3%
   18     14840     35.47    0.2%
   19     15650      49.8    0.3%
   20     16510     70.25    0.4%

Quality and confidence:
param     error
r         1.555

Model:
Time ~=    155.6
    + r    805.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    296.1
    + r    439.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.9     0.346    0.0%
    1     809.3     10.15    1.2%
    2      1190     10.39    0.8%
    3      1637      16.7    1.0%
    4      2036     18.61    0.9%
    5      2454     12.28    0.5%
    6      2924     23.46    0.8%
    7      3322     16.58    0.4%
    8      3718      21.8    0.5%
    9      4242     22.95    0.5%
   10      4624     31.31    0.6%
   11      5085     32.77    0.6%
   12      5554     22.53    0.4%
   13      5973      30.4    0.5%
   14      6431     27.84    0.4%
   15      6907     26.34    0.3%
   16      7289      46.6    0.6%
   17      7773     24.03    0.3%
   18      8336     27.38    0.3%
   19      8788     45.16    0.5%
   20      9321      59.2    0.6%

Quality and confidence:
param     error
r         0.922

Model:
Time ~=    273.8
    + r    443.2
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    634.5
    + n    110.3
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     609.4     1.553    0.2%
    1     728.7     1.708    0.2%
    2       870     2.956    0.3%
    3     963.8     6.252    0.6%
    4      1103     10.97    0.9%
    5      1210     5.869    0.4%
    6      1302     11.42    0.8%
    7      1406     3.336    0.2%
    8      1525     13.66    0.8%
    9      1626     12.93    0.7%
   10      1729     12.59    0.7%
   11      1838     12.22    0.6%
   12      1947     12.08    0.6%
   13      2064     11.71    0.5%
   14      2197     8.586    0.3%
   15      2278     3.388    0.1%
   16      2408     7.975    0.3%

Quality and confidence:
param     error
n         0.265

Model:
Time ~=    635.1
    + n    110.3
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    279.1
    + r    547.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     418.3     8.451    2.0%
    1     920.4     3.679    0.3%
    2      1424     7.455    0.5%
    3      1973     14.52    0.7%
    4      2434     6.752    0.2%
    5      2990     15.19    0.5%
    6      3519     15.06    0.4%
    7      4033     14.84    0.3%
    8      4537     12.33    0.2%
    9      5196     11.58    0.2%
   10      5712     21.49    0.3%
   11      6249      13.3    0.2%
   12      6829     21.07    0.3%
   13      7381     27.64    0.3%
   14      7885     33.68    0.4%
   15      8463     28.65    0.3%
   16      8986     44.81    0.4%
   17      9610     26.68    0.2%
   18     10290     25.21    0.2%
   19     10870     32.73    0.3%
   20     11420     30.85    0.2%

Quality and confidence:
param     error
r         1.027

Model:
Time ~=    264.8
    + r    550.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    990.8
    + n    123.9
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     938.1     11.35    1.2%
    1      1108     4.463    0.4%
    2      1254     4.627    0.3%
    3      1380     6.922    0.5%
    4      1501     6.292    0.4%
    5      1607     3.268    0.2%
    6      1739     10.22    0.5%
    7      1854      11.1    0.5%
    8      1971     11.47    0.5%
    9      2103     7.942    0.3%
   10      2213     14.78    0.6%
   11      2351     14.46    0.6%
   12      2475     8.039    0.3%
   13      2576     8.458    0.3%
   14      2728     13.12    0.4%
   15      2871     13.62    0.4%
   16      2972     12.02    0.4%

Quality and confidence:
param     error
n         0.314

Model:
Time ~=    984.1
    + n    124.4
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    387.9
    + r     2540
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.6     0.332    0.0%
    1      2937     14.77    0.5%
    2      5477     7.317    0.1%
    3      7987     19.32    0.2%
    4     10510     17.75    0.1%
    5     13060     57.55    0.4%
    6     15840     176.4    1.1%
    7     18110     59.13    0.3%
    8     20730     40.43    0.1%
    9     23090      39.1    0.1%
   10     25820     45.88    0.1%
   11     28230     34.46    0.1%
   12     30780     38.36    0.1%
   13     33460     58.31    0.1%
   14     35860     38.33    0.1%
   15     38440     71.76    0.1%
   16     40940     92.93    0.2%
   17     43400     74.24    0.1%
   18     46180     79.25    0.1%
   19     48700     39.61    0.0%
   20     51520     66.16    0.1%

Quality and confidence:
param     error
r         1.467

Model:
Time ~=    366.7
    + r     2542
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    38050
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.9     0.299    0.0%
    1     36940     46.42    0.1%
    2     73480     70.18    0.0%
    3    110100     123.5    0.1%
    4    152000     47.92    0.0%
    5    189900       125    0.0%
    6    228200     128.3    0.0%
    7    266000     168.4    0.0%
    8    304000     236.4    0.0%
    9    342600     229.6    0.0%
   10    380400     207.9    0.0%
   11    417600     192.8    0.0%
   12    455900     318.6    0.0%
   13    493400     158.8    0.0%
   14    531300     177.4    0.0%
   15    569800     265.4    0.0%
   16    608300       211    0.0%
   17    646800     240.8    0.0%
   18    684400     284.6    0.0%
   19    722600     278.8    0.0%
   20    760300     331.7    0.0%

Quality and confidence:
param     error
r         11.11

Model:
Time ~=        0
    + r    38080
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    36790
    + t     2714
    + i    63.18
    + o    101.3
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    198700     106.1    0.0%
    1     0   960    136600     67.43    0.0%
    1    20   960    137900     102.6    0.0%
    1    40   960    139200     54.88    0.0%
    1    60   960    140600     70.79    0.0%
    1    80   960    141800     80.23    0.0%
    1   100   960    143000     73.39    0.0%
    1   120   960    144600     124.4    0.0%
    1   14<truncated>...
```

</details>",10497,2021-12-20T11:05:30Z,0
1047,athei,/benchmark runtime pallet pallet_contracts,10497,2021-12-20T13:39:31Z,0
1048,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-contract-storage"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.286
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.286
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.204
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     67.44     0.455    0.6%
   20     54.47     0.247    0.4%
   40     91.71     0.557    0.6%
   60     127.4     0.707    0.5%
   80     162.5      1.02    0.6%
  100     200.5     2.035    1.0%
  120     241.3     1.975    0.8%
  140     277.4      1.49    0.5%
  160     325.4     3.156    0.9%
  180       365      2.36    0.6%
  200     409.3      7.17    1.7%
  220     448.4     4.101    0.9%
  240     486.7     2.486    0.5%
  260     530.9     3.087    0.5%
  280     575.2     3.451    0.5%
  300     627.4     10.41    1.6%
  320     668.1      6.26    0.9%
  340     709.6     3.361    0.4%
  360     755.2      9.11    1.2%
  380     798.9     6.154    0.7%
  400     846.1     5.813    0.6%
  420     887.8     9.633    1.0%
  440     946.4     9.287    0.9%
  460     985.4     10.21    1.0%
  480      1027     13.78    1.3%
  500      1063     8.725    0.8%
  520      1115      12.5    1.1%
  540      1163     17.14    1.4%
  560      1189     6.344    0.5%
  580      1250     11.64    0.9%
  600      1298      12.4    0.9%
  620      1346     9.247    0.6%
  640      1368     12.43    0.9%
  660      1453     13.02    0.8%
  680      1480     12.82    0.8%
  700      1498     9.656    0.6%
  720      1571     7.668    0.4%
  740      1609     13.34    0.8%
  760      1655     17.89    1.0%
  780      1681     12.64    0.7%
  800      1722     14.28    0.8%
  820      1843     17.08    0.9%
  840      1871     13.24    0.7%
  860      1896     8.849    0.4%
  880      1959     10.87    0.5%
  900      1985     10.48    0.5%
  920      2035      17.6    0.8%
  940      2090     29.11    1.3%
  960      2093     13.69    0.6%
  980      2153     16.41    0.7%
 1000      2205     18.54    0.8%
 1020      2237     11.15    0.4%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.219
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    98.95
    + q    0.235
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.313     0.036    1.5%
   20     82.23     1.116    1.3%
   40     92.53     0.835    0.9%
   60     101.1      0.82    0.8%
   80     111.2     0.812    0.7%
  100     119.1     1.034    0.8%
  120     125.6     1.592    1.2%
  140     132.2     1.187    0.8%
  160     142.5      2.08    1.4%
  180     150.4      1.13    0.7%
  200     158.8     0.883    0.5%
  220     164.9     0.618    0.3%
  240     174.8     4.334    2.4%
  260     179.5     0.747    0.4%
  280     188.5     1.294    0.6%
  300       190     5.734    3.0%
  320     192.7     1.129    0.5%
  340     173.2     1.719    0.9%
  360     179.2     1.183    0.6%
  380       184     1.067    0.5%
  400     191.2      1.11    0.5%
  420     205.3     12.69    6.1%
  440     235.2     2.259    0.9%
  460       205     1.345    0.6%
  480       211     3.105    1.4%
  500     220.2     2.358    1.0%
  520       219     1.518    0.6%
  540     222.3     1.236    0.5%
  560     230.2     3.551    1.5%
  580     234.5     1.662    0.7%
  600     244.2      5.34    2.1%
  620     247.5     1.784    0.7%
  640     250.3      1.43    0.5%
  660     258.4     4.111    1.5%
  680     258.8     1.153    0.4%
  700     265.2     1.442    0.5%
  720     270.4     1.251    0.4%
  740     273.4      0.93    0.3%
  760     282.7     0.721    0.2%
  780     284.4      1.11    0.3%
  800     289.6     1.452    0.5%
  820     292.3     0.829    0.2%
  840     297.8     1.277    0.4%
  860     300.4     0.922    0.3%
  880     305.5     1.653    0.5%
  900       309     0.935    0.3%
  920     311.8     1.093    0.3%
  940     318.9     2.183    0.6%
  960     319.8     0.938    0.2%
  980     324.7     1.145    0.3%
 1000     328.3     1.458    0.4%
 1020     330.5     1.162    0.3%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    95.62
    + q    0.242
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.57
    + c     88.7
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     47.22     0.114    0.2%
    2     223.5     0.434    0.1%
    4     396.6     0.322    0.0%
    6     556.7     0.456    0.0%
    8       752     16.39    2.1%
   10       916     15.64    1.7%
   12      1081     15.39    1.4%
   14      1279     9.936    0.7%
   16      1459     12.74    0.8%
   18      1640     15.94    0.9%
   20      1789     14.56    0.8%
   22      1963     10.11    0.5%
   24      2103     13.96    0.6%
   26      2384     11.63    0.4%
   28      2540      14.3    0.5%
   30      2708     24.28    0.8%
   32      2861      1.71    0.0%
   34      3071      14.8    0.4%
   36      3223      13.8    0.4%
   38      3384     23.37    0.6%
   40      3549     25.17    0.7%
   42      3697     11.34    0.3%
   44      3870     11.84    0.3%
   46      4023     11.55    0.2%
   48      4183     17.64    0.4%
   50      4565     10.73    0.2%
   52      4714     13.17    0.2%
   54      4874     13.67    0.2%
   56      5025     15.06    0.2%
   58      5192     10.33    0.1%
   60      5346     18.17    0.3%
   62      5510     15.13    0.2%
   64      5637     10.72    0.1%
   66      5922     19.88    0.3%
   68      6085     12.66    0.2%
   70      6365     12.63    0.1%
   72      6401     12.03    0.1%
   74      6564        21    0.3%
   76      6729     26.21    0.3%
   78      6889     30.53    0.4%
   80      7043     19.22    0.2%
   82      7218     44.07    0.6%
   84      7357     21.13    0.2%
   86      7518     17.26    0.2%
   88      7669     17.25    0.2%
   90      7840     15.83    0.2%
   92      7984     14.92    0.1%
   94      8163     19.76    0.2%
   96      8310     14.69    0.1%
   98      8934     14.99    0.1%
  100      9103     22.28    0.2%
  102      9265     46.43    0.5%
  104      9403      20.1    0.2%
  106      9566     13.61    0.1%
  108      9732     21.91    0.2%
  110      9887     16.17    0.1%
  112     10050     22.12    0.2%
  114     10220     24.47    0.2%
  116     10380      26.6    0.2%
  118     10550     37.45    0.3%
  120     10710     34.71    0.3%
  122     10840     11.91    0.1%
  124     11000     21.31    0.1%
  126     11190     29.32    0.2%
  128     11300     15.67    0.1%

Quality and confidence:
param     error
c         0.098

Model:
Time ~=    17.03
    + c    88.87
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    387.2
    + c    80.65
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0       407     0.155    0.0%
    2     579.8     4.209    0.7%
    4     736.8     3.173    0.4%
    6     879.4     11.48    1.3%
    8      1049     2.363    0.2%
   10      1195     11.63    0.9%
   12      1330     11.42    0.8%
   14      1528     3.335    0.2%
   16      1679     15.31    0.9%
   18      1817     7.017    0.3%
   20      1971     15.38    0.7%
   22      2098     9.293    0.4%
   24      2249     14.74    0.6%
   26      2528     11.67    0.4%
   28      2673     15.51    0.5%
   30      2821     12.96    0.4%
   32      2955     12.71    0.4%
   34      3128     10.87    0.3%
   36      3258     18.98    0.5%
   38      3398      17.1    0.5%
   40      3524     11.48    0.3%
   42      3668     16.95    0.4%
   44      3797     12.25    0.3%
   46      3946      9.12    0.2%
   48      4096     7.223    0.1%
   50      4545     18.95    0.4%
   52      4675     16.91    0.3%
   54      4829     13.66    0.2%
   56      4965     19.01    0.3%
   58      5096      12.5    0.2%
   60      5238     11.44    0.2%
   62      5382     13.17    0.2%
   64      5519     15.33    0.2%
   66      5719     18.88    0.3%
   68      5856      14.9    0.2%
   70      5992     20.32    0.3%
   72      6127     21.11    0.3%
   74      6266     18.21    0.2%
   76      6408     23.03    0.3%
   78      6535      14.1    0.2%
   80      6677     20.72    0.3%
   82      6826     15.62    0.2%
   84      7091     17.87    0.2%
   86      7080     8.641    0.1%
   88      7242     16.82    0.2%
   90      7362     25.47    0.3%
   92      7500     24.27    0.3%
   94      7867     33.49    0.4%
   96      7782     14.64    0.1%
   98      8588     24.07    0.2%
  100      8731     14.91    0.1%
  102      8885     34.08    0.3%
  104      8986     12.08    0.1%
  106      9128     28.07    0.3%
  108      9270     14.01    0.1%
  110      9441     21.11    0.2%
  112      9547     14.04    0.1%
  114      9704        17    0.1%
  116      9829      15.7    0.1%
  118      9970     25.47    0.2%
  120     10090     15.21    0.1%
  122     10260     18.86    0.1%
  124     10390     17.24    0.1%
  126     10530     22.01    0.2%
  128     10660      20.4    0.1%

Quality and confidence:
param     error
c         0.136

Model:
Time ~=    348.1
    + c    81.08
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    516.7
    + c    200.2
    + s     2.04
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2586     22.08    0.8%
    1  1024      2802     15.28    0.5%
    2  1024      2988     8.968    0.3%
    3  1024      3195     17.81    0.5%
    4  1024      3379     16.64    0.4%
    5  1024      3579      18.3    0.5%
    6  1024      3759        14    0.3%
    7  1024      4002     16.96    0.4%
    8  1024      4168     15.76    0.3%
    9  1024      4413     14.64    0.3%
   10  1024      4603     12.53    0.2%
   11  1024      4781     12.54    0.2%
   12  1024      4953     15.78    0.3%
   13  1024      5207     10.57    0.2%
   14  1024      5387     13.73    0.2%
   15  1024      5578     16.56    0.2%
   16  1024      5739     20.03    0.3%
   17  1024      6073     20.51    0.3%
   18  1024      6247     15.79    0.2%
   19  1024      6427     25.81    0.4%
   20  1024      6748     5.587    0.0%
   21  1024      6779     18.88    0.2%
   22  1024      6956     13.19    0.1%
   23  1024      7134     8.554    0.1%
   24  1024      7375     41.83    0.5%
   25  1024      7671     15.06    0.1%
   26  1024      7844     26.19    0.3%
   27  1024      8042     17.11    0.2%
   28  1024      8193     13.26    0.1%
   29  1024      8418     27.26    0.3%
   30  1024      8544     23.22    0.2%
   31  1024      8877     3.991    0.0%
   32  1024      8912     20.11    0.2%
   33  1024      9392     30.57    0.3%
   34  1024      9564     17.96    0.1%
   35  1024      9758     39.72    0.4%
   36  1024      9913     20.37    0.2%
   37  1024     10080     24.19    0.2%
   38  1024     10300     31.52    0.3%
   39  1024     10450     22.15    0.2%
   40  1024     10630     28.91    0.2%
   41  1024     10810     23.69    0.2%
   42  1024     11000     26.06    0.2%
   43  1024     11200     43.59    0.3%
   44  1024     11350     21.04    0.1%
   45  1024     11520     26.53    0.2%
   46  1024     11710     38.92    0.3%
   47  1024     11900     46.03    0.3%
   48  1024     12070        39    0.3%
   49  1024     12580     24.25    0.1%
   50  1024     12780     44.31    0.3%
   51  1024     12940     31.44    0.2%
   52  1024     13130     50.81    0.3%
   53  1024     13310     30.63    0.2%
   54  1024     13460     37.68    0.2%
   55  1024     13680     13.53    0.0%
   56  1024     13810     26.36    0.1%
   57  1024     14000     18.18    0.1%
   58  1024     14170     18.23    0.1%
   59  1024     14380     30.69    0.2%
   60  1024     14540     14.84    0.1%
   61  1024     14720     21.26    0.1%
   62  1024     14900     21.48    0.1%
   63  1024     15070     19.35    0.1%
   64     0     13130     19.72    0.1%
   64    20     13190     29.19    0.2%
   64    40     13230     23.82    0.1%
   64    60     13240     17.71    0.1%
   64    80     13330     42.27    0.3%
   64   100     13350     13.78    0.1%
   64   120     13410     29.78    0.2%
   64   140     13470     61.15    0.4%
   64   160     13490     40.04    0.2%
   64   180     13510     36.52    0.2%
   64   200     13600     42.01    0.3%
   64   220     13590     31.23    0.2%
   64   240     13660     27.81    0.2%
   64   260     13670     33.07    0.2%
   64   280     13700     25.86    0.1%
   64   300     13760     32.66    0.2%
   64   320     13810     28.42    0.2%
   64   340     13810      26.4    0.1%
   64   360     13870     19.33    0.1%
   64   380     13920      32.8    0.2%
   64   400     13960     38.57    0.2%
   64   420     14000     30.65    0.2%
   64   440     14080     42.06    0.2%
   64   460     14080     28.74    0.2%
   64   480     14120     36.99    0.2%
   64   500     14180     56.81    0.4%
   64   520     14200      33.5    0.2%
   64   540     14260     8.093    0.0%
   64   560     14300     27.49    0.1%
   64   580     14310     28.23    0.1%
   64   600     14360     20.54    0.1%
   64   620     14410     36.44    0.2%
   64   640     14460     15.89    0.1%
   64   660     14490      42.7    0.2%
   64   680     14550     48.87    0.3%
   64   700     14570     43.48    0.2%
   64   720     14640     41.55    0.2%
   64   740     14680     23.02    0.1%
   64   760     14680     31.86    0.2%
   64   780     14720     30.09    0.2%
   64   800     14800     31.89    0.2%
   64   820     14800     19.63    0.1%
   64   840     14850     29.09    0.1%
   64   860     14900     28.36    0.1%
   64   880     14930     21.52    0.1%
   64   900     14970     29.85    0.1%
   64   920     15000     23.69    0.1%
   64   940     15160     75.76    0.4%
   64   960     15100     27.17    0.1%
   64   980     15130     30.18    0.1%
   64  1000     15180     55.13    0.3%
   64  1020     15250     36.99    0.2%
   64  1024     15300     38.22    0.2%

Quality and confidence:
param     error
c         0.137
s         0.008

Model:
Time ~=    414.9
    + c    198.3
    + s     2.18
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    201.9
    + s    1.981
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     186.5     0.378    0.2%
   20     239.9     1.416    0.5%
   40     280.7     0.216    0.0%
   60     320.3       0.3    0.0%
   80     361.8     4.673    1.2%
  100     403.7     9.351    2.3%
  120     439.5     0.374    0.0%
  140     478.6     0.923    0.1%
  160     519.4     0.555    0.1%
  180     565.5     12.29    2.1%
  200     600.5     5.576    0.9%
  220     644.3     7.072    1.0%
  240       678     0.337    0.0%
  260     724.5      13.5    1.8%
  280     762.4     13.11    1.7%
  300     800.1     10.09    1.2%
  320     839.5     8.747    1.0%
  340     883.5     13.21    1.4%
  360     918.9     6.923    0.7%
  380     969.9     15.31    1.5%
  400      1027     11.69    1.1%
  420      1036     9.451    0.9%
  440      1086     17.15    1.5%
  460      1122     12.82    1.1%
  480      1162     14.02    1.2%
  500      1207     13.34    1.1%
  520      1224     11.82    0.9%
  540      1268     12.14    0.9%
  560      1305     11.79    0.9%
  580      1342     10.08    0.7%
  600      1384     13.06    0.9%
  620      1435     14.98    1.0%
  640      1463     12.66    0.8%
  660      1514     16.05    1.0%
  680      1551     15.33    0.9%
  700      1582     9.976    0.6%
  720      1633     14.81    0.9%
  740      1679     16.97    1.0%
  760      1707     12.46    0.7%
  780      1759     17.45    0.9%
  800      1791     13.89    0.7%
  820      1825     14.23    0.7%
  840      1873      13.4    0.7%
  860      1927     11.22    0.5%
  880      1966     10.26    0.5%
  900      2005     12.53    0.6%
  920      2051     12.32    0.6%
  940      2076     16.17    0.7%
  960      2102      10.1    0.4%
  980      2160     16.06    0.7%
 1000      2195     12.36    0.5%
 1020      2230     12.55    0.5%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    201.4
    + s    1.993
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    154.1
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    154.1
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    77.76
    + c    89.77
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     78.64     0.159    0.2%
    1     173.1     0.358    0.2%
    2     257.4     0.316    0.1%
    3     340.4     0.959    0.2%
    4     439.8     12.02    2.7%
    5     519.9     9.314    1.7%
    6     599.8     5.454    0.9%
    7     712.4     13.09    1.8%
    8     792.4     11.92    1.5%
    9     877.2     11.37    1.2%
   10     967.4     15.15    1.5%
   11      1047     15.91    1.5%
   12      1129      14.9    1.3%
   13      1270     12.62    0.9%
   14      1338     13.08    0.9%
   15      1430     14.46    1.0%
   16      1492     9.016    0.6%
   17      1612     12.42    0.7%
   18      1687      16.9    1.0%
   19      1776     17.17    0.9%
   20      1861      13.2    0.7%
   21      1946     11.33    0.5%
   22      2030      5.31    0.2%
   23      2092     15.18    0.7%
   24      2178     15.47    0.7%
   25      2366     12.19    0.5%
   26      2457     3.003    0.1%
   27      2523      15.2    0.6%
   28      2643      19.1    0.7%
   29      2702     11.36    0.4%
   30      2778     16.42    0.5%
   31      2847     15.69    0.5%
   32      2949     15.06    0.5%
   33      3064     10.79    0.3%
   34      3147     4.855    0.1%
   35      3224     15.23    0.4%
   36      3312     16.44    0.4%
   37      3384     8.445    0.2%
   38      3462     10.08    0.2%
   39      3552     19.41    0.5%
   40      3627     13.37    0.3%
   41      3715     12.27    0.3%
   42      3799     11.39    0.2%
   43      3881     15.14    0.3%
   44      3955     10.01    0.2%
   45      4048     15.26    0.3%
   46      4115     14.88    0.3%
   47      4197     10.17    0.2%
   48      4269     19.31    0.4%
   49      4574     16.84    0.3%
   50      4656     14.37    0.3%
   51      4752     17.84    0.3%
   52      4832     6.367    0.1%
   53      4910     14.79    0.3%
   54      4975     14.96    0.3%
   55      5063     15.43    0.3%
   56      5143      13.9    0.2%
   57      5222     10.27    0.1%
   58      5299     13.18    0.2%
   59      5392     16.92    0.3%
   60      5471     20.63    0.3%
   61      5553     12.54    0.2%
   62      5631     15.16    0.2%
   63      5710     13.28    0.2%
   64      5788      12.4    0.2%

Quality and confidence:
param     error
c         0.093

Model:
Time ~=    69.64
    + c    89.96
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.56
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.56
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    408.8
    + r    79.24
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.7      0.15    0.0%
    1     489.6     2.236    0.4%
    2     583.5     14.36    2.4%
    3     653.3     10.28    1.5%
    4     722.5     8.182    1.1%
    5     792.9     0.699    0.0%
    6     872.7       4.8    0.5%
    7     959.5     2.026    0.2%
    8      1044     13.89    1.3%
    9      1123     13.04    1.1%
   10      1195     13.31    1.1%
   11      1266     3.273    0.2%
   12      1354     12.32    0.9%
   13      1444     15.19    1.0%
   14      1534     13.87    0.9%
   15      1627     13.61    0.8%
   16      1692     11.48    0.6%
   17      1752     8.217    0.4%
   18      1835     12.44    0.6%
   19      1924     12.45    0.6%
   20      2008     7.125    0.3%

Quality and confidence:
param     error
r         0.167

Model:
Time ~=    405.3
    + r    79.86
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    409.7
    + r    79.03
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.7     0.354    0.0%
    1     488.9      0.32    0.0%
    2     571.5     0.842    0.1%
    3     648.9     0.504    0.0%
    4     716.7     0.777    0.1%
    5     796.2      7.33    0.9%
    6     885.7     14.57    1.6%
    7     967.6     13.17    1.3%
    8      1042     12.81    1.2%
    9      1124     14.61    1.3%
   10      1197     13.92    1.1%
   11      1266     2.535    0.2%
   12      1345     9.297    0.6%
   13      1427     12.13    0.8%
   14      1530      9.04    0.5%
   15      1603     12.71    0.7%
   16      1683     13.45    0.7%
   17      1765     14.02    0.7%
   18      1844     13.55    0.7%
   19      1922     15.59    0.8%
   20      1992     16.65    0.8%

Quality and confidence:
param     error
r         0.152

Model:
Time ~=    405.1
    + r    79.61
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      410
    + r    77.66
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.9     1.413    0.3%
    1     487.6     0.262    0.0%
    2     568.4     1.452    0.2%
    3     644.8     2.876    0.4%
    4     712.2     2.623    0.3%
    5     786.9     1.849    0.2%
    6     870.2     11.83    1.3%
    7       966     15.93    1.6%
    8      1032     11.88    1.1%
    9      1105     8.588    0.7%
   10      1185     13.55    1.1%
   11      1270     15.08    1.1%
   12      1328     8.065    0.6%
   13      1415      17.1    1.2%
   14      1500     3.266    0.2%
   15      1592     11.69    0.7%
   16      1665     16.04    0.9%
   17      1730     12.14    0.7%
   18      1819     9.166    0.5%
   19      1887     12.96    0.6%
   20      1965     14.45    0.7%

Quality and confidence:
param     error
r         0.148

Model:
Time ~=    406.5
    + r    78.12
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    416.2
    + r    218.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.2     0.177    0.0%
    1     641.3     13.36    2.0%
    2     860.9     10.07    1.1%
    3      1076     10.13    0.9%
    4      1291     11.65    0.9%
    5      1507     14.05    0.9%
    6      1728     8.789    0.5%
    7      1950     8.659    0.4%
    8      2164     9.009    0.4%
    9      2374     9.442    0.3%
   10      2583     8.814    0.3%
   11      2818     9.677    0.3%
   12      3032      3.71    0.1%
   13      3234     5.694    0.1%
   14      3493     4.589    0.1%
   15      3699      12.2    0.3%
   16      3905     9.843    0.2%
   17      4127     10.11    0.2%
   18      4349     13.15    0.3%
   19      4584     25.11    0.5%
   20      4775     8.449    0.1%

Quality and confidence:
param     error
r         0.165

Model:
Time ~=    416.2
    + r    218.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      409
    + r    79.36
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     393.5     0.208    0.0%
    1     475.3     0.234    0.0%
    2     580.6     13.05    2.2%
    3     647.9     5.325    0.8%
    4     728.8     2.443    0.3%
    5     817.8     13.38    1.6%
    6     885.4     9.734    1.0%
    7     967.7     3.562    0.3%
    8      1053     14.01    1.3%
    9      1123     10.69    0.9%
   10      1196     8.331    0.6%
   11      1288      10.9    0.8%
   12      1358     14.43    1.0%
   13      1431     13.21    0.9%
   14      1530     12.26    0.8%
   15      1608     13.01    0.8%
   16      1679     11.25    0.6%
   17      1764     12.66    0.7%
   18      1830     13.79    0.7%
   19      1918     16.07    0.8%
   20      1998     12.56    0.6%

Quality and confidence:
param     error
r         0.154

Model:
Time ~=    408.2
    + r    79.56
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    410.1
    + r    78.64
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     393.5     0.184    0.0%
    1     478.9     4.695    0.9%
    2     576.3     12.82    2.2%
    3     650.9     11.48    1.7%
    4     729.8     9.061    1.2%
    5       804     4.743    0.5%
    6     877.9     2.603    0.2%
    7     965.5     10.64    1.1%
    8      1043     11.33    1.0%
    9      1117     11.36    1.0%
   10      1198     11.17    0.9%
   11      1264     2.524    0.1%
   12      1363     11.95    0.8%
   13      1432     11.21    0.7%
   14      1523     11.83    0.7%
   15      1605     12.45    0.7%
   16      1672     13.53    0.8%
   17      1759     12.82    0.7%
   18      1827     10.12    0.5%
   19      1910     12.62    0.6%
   20      1970     12.09    0.6%

Quality and confidence:
param     error
r         0.149

Model:
Time ~=    408.1
    + r    79.03
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      408
    + r    78.62
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     393.8     0.377    0.0%
    1     475.4     1.639    0.3%
    2     581.4     15.51    2.6%
    3     652.4     13.44    2.0%
    4     726.5     2.145    0.2%
    5     803.2     8.187    1.0%
    6     875.9     1.424    0.1%
    7     964.5     7.667    0.7%
    8      1037     2.793    0.2%
    9      1119     13.74    1.2%
   10      1191      9.29    0.7%
   11      1264     8.304    0.6%
   12      1346     12.79    0.9%
   13      1426     12.26    0.8%
   14      1518     12.67    0.8%
   15      1599     12.02    0.7%
   16      1672     13.06    0.7%
   17      1737     3.234    0.1%
   18      1831     13.53    0.7%
   19      1911     13.67    0.7%
   20      1985     17.87    0.9%

Quality and confidence:
param     error
r          0.15

Model:
Time ~=    406.1
    + r    78.99
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    416.9
    + r    77.53
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     408.1     1.238    0.3%
    1     490.8     4.483    0.9%
    2     578.6     14.24    2.4%
    3     643.8     0.942    0.1%
    4     733.5     12.03    1.6%
    5     801.3     0.994    0.1%
    6     881.4     11.15    1.2%
    7     983.9     14.89    1.5%
    8      1046     12.28    1.1%
    9      1126     12.02    1.0%
   10      1198     11.02    0.9%
   11      1270     8.711    0.6%
   12      1355      13.9    1.0%
   13      1429     14.61    1.0%
   14      1507     11.46    0.7%
   15      1592     13.18    0.8%
   16      1666     14.85    0.8%
   17      1741     14.74    0.8%
   18      1820     13.71    0.7%
   19      1896     10.01    0.5%
   20      1963     13.64    0.6%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    418.1
    + r     77.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.8
    + r    205.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     395.2     3.893    0.9%
    1     617.7     0.326    0.0%
    2     824.5     8.236    0.9%
    3      1037     10.01    0.9%
    4      1243        14    1.1%
    5      1439      11.4    0.7%
    6      1655     12.37    0.7%
    7      1859     9.038    0.4%
    8      2052     13.36    0.6%
    9      2250     9.291    0.4%
   10      2463     8.119    0.3%
   11      2677     14.38    0.5%
   12      2878     12.82    0.4%
   13      3093     13.19    0.4%
   14      3287     10.67    0.3%
   15      3513     22.69    0.6%
   16      3699     7.275    0.1%
   17      3919     11.23    0.2%
   18      4120     15.62    0.3%
   19      4329     11.94    0.2%
   20      4507     15.68    0.3%

Quality and confidence:
param     error
r         0.173

Model:
Time ~=    411.6
    + r    205.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    134.7
    + r    38.02
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     136.7     0.341    0.2%
    1     177.2     0.198    0.1%
    2     216.3     0.207    0.0%
    3     244.3     0.327    0.1%
    4     281.3     0.589    0.2%
    5     316.4     0.294    0.0%
    6     359.4     0.458    0.1%
    7     395.7     0.801    0.2%
    8     432.2     0.232    0.0%
    9     468.5      0.71    0.1%
   10     505.3      0.94    0.1%
   11     559.5     5.784    1.0%
   12       594     0.613    0.1%
   13     637.3     7.592    1.1%
   14     668.7     1.525    0.2%
   15     704.8      0.92    0.1%
   16     748.3     7.361    0.9%
   17     785.1      10.5    1.3%
   18     822.6     10.36    1.2%
   19     857.3     12.54    1.4%
   20     892.9     6.251    0.7%

Quality and confidence:
param     error
r         0.084

Model:
Time ~=    132.1
    + r    38.23
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    410.1
    + r    72.29
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     407.5     1.075    0.2%
    1       483      0.41    0.0%
    2     557.6     0.729    0.1%
    3     629.7     8.491    1.3%
    4     692.3     6.145    0.8%
    5     760.1      1.02    0.1%
    6     844.2     10.49    1.2%
    7     911.8     1.092    0.1%
    8     982.3     1.444    0.1%
    9      1063     13.47    1.2%
   10      1134     10.29    0.9%
   11      1197       8.6    0.7%
   12      1271     12.33    0.9%
   13      1339     10.48    0.7%
   14      1439      15.1    1.0%
   15      1514     15.23    1.0%
   16      1577     12.07    0.7%
   17      1644     11.48    0.6%
   18      1715     13.59    0.7%
   19      1786     14.03    0.7%
   20      1858      12.7    0.6%

Quality and confidence:
param     error
r         0.142

Model:
Time ~=    405.6
    + r    72.82
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    491.8
    + n    38.05
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       470     0.435    0.0%
   20      1232     4.325    0.3%
   40      2017     19.24    0.9%
   60      2761     14.31    0.5%
   80      3536     2.793    0.0%
  100      4293     10.88    0.2%
  120      5058     13.46    0.2%
  140      5827     16.57    0.2%
  160      6578      14.7    0.2%
  180      7341     18.15    0.2%
  200      8120     27.39    0.3%
  220      8877     23.28    0.2%
  240      9652      26.2    0.2%
  260     10380     24.53    0.2%
  280     11120     25.59    0.2%
  300     11900     18.23    0.1%
  320     12660     37.19    0.2%
  340     13440      28.3    0.2%
  360     14210      44.2    0.3%
  380     14940     22.49    0.1%
  400     15710     30.98    0.1%
  420     16470     27.37    0.1%
  440     17230     35.64    0.2%
  460     17980     20.27    0.1%
  480     18740     28.69    0.1%
  500     19510     23.85    0.1%
  520     20290     33.41    0.1%
  540     21110     62.54    0.2%
  560     21800     37.46    0.1%
  580     22570     20.84    0.0%
  600     23330     31.31    0.1%
  620     24110     44.49    0.1%
  640     24890     34.55    0.1%
  660     25590     27.11    0.1%
  680     26390     63.55    0.2%
  700     27110     31.96    0.1%
  720     27900     30.03    0.1%
  740     28600     32.12    0.1%
  760     29430     39.01    0.1%
  780     30180     38.77    0.1%
  800     30930     25.72    0.0%
  820     31740     41.85    0.1%
  840     32450     40.82    0.1%
  860     33210     33.25    0.1%
  880     34050       120    0.3%
  900     34860     166.7    0.4%
  920     35480     36.54    0.1%
  940     36250     52.72    0.1%
  960     37040     37.96    0.1%
  980     37760     31.35    0.0%
 1000     38500     30.54    0.0%
 1020     39280     45.71    0.1%

Quality and confidence:
param     error
n         0.007

Model:
Time ~=    490.3
    + n    38.07
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    384.5
    + r    15.67
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     384.5     0.107    0.0%
    1     400.3     0.297    0.0%

Quality and confidence:
param     error
r         0.105

Model:
Time ~=    384.5
    + r    15.79
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    400.2
    + n    0.624
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       400     0.297    0.0%
   20     414.6     4.178    1.0%
   40     426.5     3.548    0.8%
   60     439.3     3.817    0.8%
   80     450.1     0.495    0.1%
  100     462.4      0.23    0.0%
  120     476.9     4.595    0.9%
  140     487.5     0.235    0.0%
  160     500.1     0.228    0.0%
  180     513.1      0.36    0.0%
  200     525.8     1.493    0.2%
  220     537.6     0.386    0.0%
  240       553     8.643    1.5%
  260     562.6     0.133    0.0%
  280     575.8     1.371    0.2%
  300     588.9     4.038    0.6%
  320     603.7     9.185    1.5%
  340     615.5      8.25    1.3%
  360     630.9     11.61    1.8%
  380     637.3     0.295    0.0%
  400     650.3     0.197    0.0%
  420     662.2     0.234    0.0%
  440     674.9     0.176    0.0%
  460     687.1     0.288    0.0%
  480     701.9     7.621    1.0%
  500     712.5     0.188    0.0%
  520     743.3     15.51    2.0%
  540     746.4     14.48    1.9%
  560     759.2     13.52    1.7%
  580       766      8.96    1.1%
  600     774.9     0.441    0.0%
  620       799     15.93    1.9%
  640     806.5     13.46    1.6%
  660       823     13.43    1.6%
  680     831.1     12.05    1.4%
  700     849.1     14.53    1.7%
  720     863.2     15.91    1.8%
  740       866     8.852    1.0%
  760     889.8     14.66    1.6%
  780     892.3     9.267    1.0%
  800     907.2     12.04    1.3%
  820     926.1     14.27    1.5%
  840     937.9     16.13    1.7%
  860     943.7     13.12    1.3%
  880     955.9     11.89    1.2%
  900     968.7     10.48    1.0%
  920     980.6     12.12    1.2%
  940     994.4     11.31    1.1%
  960      1017      18.4    1.8%
  980      1025     14.61    1.4%
 1000      1035      13.2    1.2%
 1020      1043     10.77    1.0%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    399.2
    + n    0.637
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    393.4
    + r    82.47
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     396.3     9.054    2.2%
    1     476.1      0.56    0.1%

Quality and confidence:
param     error
r         3.023

Model:
Time ~=    396.3
    + r    79.79
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    397.6
    + r    244.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.3     8.519    2.0%
    1     648.4     11.23    1.7%
    2     887.6     11.18    1.2%
    3      1136      13.4    1.1%
    4      1373     13.42    0.9%
    5      1619     11.85    0.7%
    6      1860     13.38    0.7%
    7      2103     12.27    0.5%
    8      2330     14.82    0.6%
    9      2624     9.436    0.3%
   10      2843     8.651    0.3%
   11      3088     5.974    0.1%
   12      3330      8.31    0.2%
   13      3561     10.59    0.2%
   14      3807     11.41    0.2%
   15      4029     17.02    0.4%
   16      4287     10.53    0.2%
   17      4599     18.49    0.4%
   18      4841     17.19    0.3%
   19      5090     16.61    0.3%
   20      5331     16.82    0.3%

Quality and confidence:
param     error
r          0.29

Model:
Time ~=    390.5
    + r    245.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    411.2
    + r    405.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     398.5     1.226    0.3%
    1     819.4     7.741    0.9%
    2      1225     12.77    1.0%
    3      1646     15.54    0.9%
    4      2027     12.51    0.6%
    5      2447      17.3    0.7%
    6      2852     9.854    0.3%
    7      3243     10.96    0.3%
    8      3648      13.8    0.3%
    9      4092     15.01    0.3%
   10      4466     10.56    0.2%
   11      4870     11.81    0.2%
   12      5258     11.75    0.2%
   13      5702     33.92    0.5%
   14      6076     11.27    0.1%
   15      6494     12.26    0.1%
   16      6902     16.02    0.2%
   17      7367     21.96    0.2%
   18      7738     34.44    0.4%
   19      8126     18.15    0.2%
   20      8532     23.63    0.2%

Quality and confidence:
param     error
r         0.273

Model:
Time ~=      408
    + r    406.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    916.4
    + t    378.7
    + n    161.6
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3436      8.55    0.2%
    1    16      3907     12.46    0.3%
    2    16      4295     12.99    0.3%
    3    16      4649      12.5    0.2%
    4     0      2409      14.7    0.6%
    4     1      2643     17.31    0.6%
    4     2      2759     13.52    0.4%
    4     3      2900     16.12    0.5%
    4     4      3065      17.6    0.5%
    4     5      3224     12.71    0.3%
    4     6      3393     15.84    0.4%
    4     7      3549      15.4    0.4%
    4     8      3700        10    0.2%
    4     9      3849     6.669    0.1%
    4    10      4021     11.64    0.2%
    4    11      4200     15.45    0.3%
    4    12      4388     14.91    0.3%
    4    13      4538      4.68    0.1%
    4    14      4723     11.42    0.2%
    4    15      4868     17.66    0.3%
    4    16      5001     13.23    0.2%

Quality and confidence:
param     error
t         2.072
n         0.408

Model:
Time ~=    890.7
    + t    382.9
    + n    162.3
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    155.7
    + r    58.84
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       159     5.681    3.5%
    1     211.3     3.861    1.8%
    2     269.2     1.236    0.4%
    3     333.2     1.211    0.3%
    4     406.1     1.773    0.4%
    5     443.1     2.223    0.5%
    6     508.6     4.882    0.9%
    7     558.5     0.521    0.0%
    8     616.2     4.616    0.7%
    9     668.7     4.331    0.6%
   10     722.3     1.769    0.2%
   11     815.2     1.431    0.1%
   12     870.4     2.478    0.2%
   13       928     9.605    1.0%
   14     983.9      5.72    0.5%
   15      1042     9.743    0.9%
   16      1098     12.07    1.0%
   17      1170     15.92    1.3%
   18      1216     10.49    0.8%
   19      1277     14.88    1.1%
   20      1323     11.11    0.8%

Quality and confidence:
param     error
r         0.137

Model:
Time ~=    153.1
    + r    59.08
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    468.1
    + r    329.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     406.9     0.225    0.0%
    1     871.9     3.238    0.3%
    2      1147     11.58    1.0%
    3      1464     5.016    0.3%
    4      1765     10.22    0.5%
    5      2123     11.76    0.5%
    6      2458     12.75    0.5%
    7      2743      8.08    0.2%
    8      3049     12.99    0.4%
    9      3466      14.1    0.4%
   10      3800      16.3    0.4%
   11      4088     13.32    0.3%
   12      4397     17.55    0.3%
   13      4709     19.56    0.4%
   14      5016     14.66    0.2%
   15      5348     18.94    0.3%
   16      5690     11.61    0.2%
   17      6041     15.63    0.2%
   18      6499      13.9    0.2%
   19      6774     10.78    0.1%
   20      7121     24.33    0.3%

Quality and confidence:
param     error
r          0.56

Model:
Time ~=    459.3
    + r    330.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    725.8
    + n    73.09
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     717.8     8.508    1.1%
    1     798.4     9.426    1.1%
    2     873.5     1.821    0.2%
    3     965.3     16.64    1.7%
    4      1017      2.22    0.2%
    5      1081     2.141    0.1%
    6      1186     6.005    0.5%
    7      1221     2.917    0.2%
    8      1315     9.376    0.7%
    9      1386     8.399    0.6%
   10      1459     16.39    1.1%
   11      1549     12.82    0.8%
   12      1616     10.97    0.6%
   13      1682     13.02    0.7%
   14      1765     16.87    0.9%
   15      1815     13.98    0.7%
   16      1887     16.71    0.8%

Quality and confidence:
param     error
n         0.247

Model:
Time ~=    727.3
    + n    73.35
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    170.7
    + r    795.2
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     394.2     0.249    0.0%
    1      1133     14.52    1.2%
    2      1862     15.59    0.8%
    3      2589     17.97    0.6%
    4      3357     12.91    0.3%
    5      4108     20.18    0.4%
    6      4885     14.96    0.3%
    7      5651     11.21    0.1%
    8      6420     8.932    0.1%
    9      7263     28.67    0.3%
   10      8058     14.37    0.1%
   11      8825     31.46    0.3%
   12      9658     36.94    0.3%
   13     10420     30.91    0.2%
   14     11260     11.78    0.1%
   15     12110      60.3    0.4%
   16     12880     41.09    0.3%
   17     13690     43.78    0.3%
   18     14650     56.36    0.3%
   19     15580      39.2    0.2%
   20     16400     30.05    0.1%

Quality and confidence:
param     error
r         1.492

Model:
Time ~=    163.2
    + r      799
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    308.7
    + r    432.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     402.8     8.802    2.1%
    1     804.6     4.635    0.5%
    2      1187     4.566    0.3%
    3      1607     10.12    0.6%
    4      2007     9.553    0.4%
    5      2453      10.9    0.4%
    6      2871     10.23    0.3%
    7      3275     16.15    0.4%
    8      3667      15.8    0.4%
    9      4196     17.51    0.4%
   10      4579     20.75    0.4%
   11      5031     14.71    0.2%
   12      5481     26.49    0.4%
   13      5916     22.94    0.3%
   14      6351     31.89    0.5%
   15      6759      31.7    0.4%
   16      7169     35.14    0.4%
   17      7665     36.82    0.4%
   18      8193     13.49    0.1%
   19      8648     55.45    0.6%
   20      9095     33.96    0.3%

Quality and confidence:
param     error
r         0.752

Model:
Time ~=    288.7
    + r    434.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    223.3
    + r      677
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       397     8.849    2.2%
    1      1006     10.81    1.0%
    2      1628     15.12    0.9%
    3      2244     10.51    0.4%
    4      2920     17.99    0.6%
    5      3583     14.53    0.4%
    6      4287     20.48    0.4%
    7      4865     19.57    0.4%
    8      5534     19.18    0.3%
    9      6282     32.43    0.5%
   10      6926     17.43    0.2%
   11      7601     19.01    0.2%
   12      8347     51.46    0.6%
   13      8976     25.89    0.2%
   14      9632     32.36    0.3%
   15     10380     47.95    0.4%
   16     11080     45.84    0.4%
   17     11690     32.87    0.2%
   18     12570     48.85    0.3%
   19     13280     42.32    0.3%
   20     13980      52.6    0.3%

Quality and confidence:
param     error
r         1.137

Model:
Time ~=    209.6
    + r    680.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    619.4
    + n    110.5
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     605.9     1.897    0.3%
    1     726.8     1.891    0.2%
    2     851.1     11.52    1.3%
    3     957.4     2.111    0.2%
    4      1067     5.218    0.4%
    5      1168     1.347    0.1%
    6      1282     3.018    0.2%
    7      1395     2.533    0.1%
    8      1517     16.31    1.0%
    9      1618     11.76    0.7%
   10      1728     13.51    0.7%
   11      1858     15.83    0.8%
   12      1954      12.6    0.6%
   13      2062     10.73    0.5%
   14      2164     9.495    0.4%
   15      2298     7.363    0.3%
   16      2376     9.918    0.4%

Quality and confidence:
param     error
n         0.207

Model:
Time ~=    619.6
    + n      111
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    288.1
    + r    539.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.6       0.2    0.0%
    1     925.4     3.875    0.4%
    2      1408     14.36    1.0%
    3      1945     11.06    0.5%
    4      2416     12.46    0.5%
    5      2956     17.27    0.5%
    6      3502     10.24    0.2%
    7      3983     17.01    0.4%
    8      4531     12.37    0.2%
    9      5126     18.11    0.3%
   10      5647     21.94    0.3%
   11      6209      31.1    0.5%
   12      6752      19.3    0.2%
   13      7257     14.67    0.2%
   14      7800     22.31    0.2%
   15      8320     18.65    0.2%
   16      8896     18.99    0.2%
   17      9465      28.1    0.2%
   18     10210     21.91    0.2%
   19     10670     17.64    0.1%
   20     11230     22.57    0.2%

Quality and confidence:
param     error
r         0.932

Model:
Time ~=    279.5
    + r    541.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    992.7
    + n    122.7
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     929.8     6.945    0.7%
    1      1110     5.032    0.4%
    2      1260     15.07    1.1%
    3      1373      10.2    0.7%
    4      1509     12.28    0.8%
    5      1609     11.62    0.7%
    6      1771      7.52    0.4%
    7      1840      9.67    0.5%
    8      1958     9.611    0.4%
    9      2071      11.1    0.5%
   10      2202     15.13    0.6%
   11      2325     17.49    0.7%
   12      2432     13.96    0.5%
   13      2580     16.22    0.6%
   14      2713     16.41    0.6%
   15      2861      20.2    0.7%
   16      2974     12.87    0.4%

Quality and confidence:
param     error
n         0.446

Model:
Time ~=    985.7
    + n    123.2
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    336.8
    + r     2522
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     398.1     0.258    0.0%
    1      2896     18.66    0.6%
    2      5395     13.91    0.2%
    3      7915     18.34    0.2%
    4     10410     22.06    0.2%
    5     12890     30.86    0.2%
    6     15410        33    0.2%
    7     17890     21.76    0.1%
    8     20460     61.73    0.3%
    9     23010     37.59    0.1%
   10     25570     32.93    0.1%
   11     27950     50.41    0.1%
   12     30500     38.29    0.1%
   13     33100     48.67    0.1%
   14     35500     42.92    0.1%
   15     38270      90.2    0.2%
   16     40700      45.1    0.1%
   17     43000     50.76    0.1%
   18     45860     58.47    0.1%
   19     48350     51.19    0.1%
   20     51200     60.03    0.1%

Quality and confidence:
param     error
r         1.479

Model:
Time ~=    284.7
    + r     2527
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.31
    + r    37980
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.8      0.14    0.0%
    1     38310      48.8    0.1%
    2     76070     31.76    0.0%
    3    114000     57.56    0.0%
    4    151800     115.1    0.0%
    5    189900     115.2    0.0%
    6    227300     80.04    0.0%
    7    265200     155.5    0.0%
    8    303400     164.9    0.0%
    9    341600     224.9    0.0%
   10    379100     203.2    0.0%
   11    417000       163    0.0%
   12    456900     398.3    0.0%
   13    493400     221.9    0.0%
   14    531800     179.8    0.0%
   15    569900     182.5    0.0%
   16    607500     180.4    0.0%
   17    646000     397.8    0.<truncated>...
```

</details>",10497,2021-12-20T13:39:33Z,0
1049,athei,bot merge,10497,2022-01-08T12:19:15Z,0
1050,kianenigma,bot merge,10612,2022-01-08T16:13:45Z,0
1051,ECJ222,@bkchr @kianenigma ,10616,2022-01-08T19:51:53Z,0
1052,bkchr,Please stop opening the same pr multiple times. ,10616,2022-01-08T20:09:51Z,0
1053,gilescope,can we derive PartialOrd here?,10615,2022-01-08T15:41:24Z,0
1054,bkchr,bot merge ,10615,2022-01-08T19:53:44Z,0
1055,paritytech-processbot[bot],Waiting for commit status.,10615,2022-01-08T19:53:52Z,0
1056,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for bd2772b09ce740cf50863a10b947c845d15d6096,10615,2022-01-08T20:01:13Z,0
1057,bkchr,bot merge ,10615,2022-01-09T07:56:28Z,0
1058,paritytech-processbot[bot],Waiting for commit status.,10615,2022-01-09T07:56:36Z,0
1059,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10615,2022-01-09T09:03:20Z,0
1060,tomaka,"This is still not ideal, because if there's a code substitute at block 10, and a light client warp syncs to block 15, it will have to download the runtime at block 10, the runtime at block 15, compare them, and if they're equal then do the substitution.

Basically the problem is that the client has no way to know whether the substitute is still relevant.
If there's a code substitute at block 100 and we warp sync to block 9000000, even though it's likely that there's been a runtime upgrade in between, the light client has no way to know and will still have to download the runtime of block 100 to check whether it is the same.
",10600,2022-01-06T13:04:20Z,0
1061,bkchr,"> This is still not ideal, because if there's a code substitute at block 10, and a light client warp syncs to block 15, it will have to download the runtime at block 10, the runtime at block 15, compare them, and if they're equal then do the substitution.

We already had discussed this once :D You don't need to download the runtime at 10, because you should use the wasm binary provided in the chain spec. You could, as we are doing it, check the spec_version on startup and then you will just need to compare them against the spec_version of 15.



> Basically the problem is that the client has no way to know whether the substitute is still relevant.
> If there's a code substitute at block 100 and we warp sync to block 9000000, even though it's likely that there's been a runtime upgrade in between, the light client has no way to know and will still have to download the runtime of block 100 to check whether it is the same.

Same as above, you have the binary in the chain spec. You don't need to download it, because if you download it you will also not get the correct one. (You will get the one from on chain, while you want the one that is present in the chain spec)",10600,2022-01-06T13:08:41Z,0
1062,bkchr,bot merge,10600,2022-01-09T19:41:00Z,0
1063,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4667,10600,2022-01-09T19:41:08Z,0
1064,bkchr,"You only need one block per epoch/session to prevent BABE from stalling.
",10610,2022-01-07T19:50:43Z,0
1065,c-geek,"I don't get it. The problem is the same to me whether the block is the first of an epoch, the second or the last.

Don't we have a stalling if no next block is proposed?",10610,2022-01-07T20:32:03Z,0
1066,bkchr,What you mean? When no block is produced anymore? Why should there be no  block be produced anymore? ,10610,2022-01-07T22:48:46Z,0
1067,c-geek,"Because of VRF leading to no primary block (no validator matching), same for secondary VRF, and same for secondary plain because, as I understand it, only one validator is selected per slot and he might be faulty.",10610,2022-01-08T06:34:16Z,0
1068,bkchr,There is no problem if one slot is skipped.,10610,2022-01-09T19:06:26Z,0
1069,c-geek,That was my blind spot. Thanks.,10610,2022-01-09T21:26:47Z,0
1070,kianenigma,where does `api-noteworthy` goes? does it also mean it goes in the release notes @thiolliere? I am sure `runtime-noteworthy` stuff will go to the `Runtime` version of the release notes. ,10434,2021-12-07T09:36:57Z,0
1071,thiolliere,"I see, considering we suggest ppl to use polkadot release as a standard substrate release I think the API notes should be there, but I don't know if it is the case.

The thing is that the polkadot runtime will not change, only the substrate API of pallets and FRAME",10434,2021-12-07T09:38:36Z,0
1072,apopiak,"@thiolliere Can I throw one wrench in here?
This takes away people's ability to define (the equivalent of) `on_pallet_initialization` functions. They currently depend on using `on_runtime_upgrade` to set pallet genesis config values in case the pallet is added via runtime upgrade.
Do you expect people to do this via custom migration?
While I agree that people should mostly opt for custom/runtime-level migrations, I'm somewhat hesitant to just remove the feature wholesale.
I assume you considered and rejected marking it as deprecated and/or dangerous?",10434,2021-12-07T09:57:36Z,0
1073,kianenigma,"> This PR doesn't remove the execution of pallet's on_runtime_upgrade, it only remove the ability to implemented from the macros: pallet and decl_module.


Why not remove this as well? Or ideally emit a warning about it for now. Ideally no one should depend on `AllPallets as OnRuntimeUpgrade` anymore. Because currently even if you don't haave the macros you could still implement it manually for `Pallet<T>`. ",10434,2021-12-07T09:58:16Z,0
1074,thiolliere,"> > This PR doesn't remove the execution of pallet's on_runtime_upgrade, it only remove the ability to implemented from the macros: pallet and decl_module.
> 
> Why not remove this as well? Or ideally emit a warning about it for now. Ideally no one should depend on `AllPallets as OnRuntimeUpgrade` anymore. Because currently even if you don't haave the macros you could still implement it manually for `Pallet<T>`.

No the macro implements it with no-op so user cannot reimplement it. It would be double implementation of trait on type.

The reason I was thinking is that we can check the storage version match the latest one in `post_upgrade` automatically for example. Or other similar stuff.

But we can do in a follow-up if people here prefer so.",10434,2021-12-07T12:26:32Z,0
1075,athei,"> This PR doesn't remove the execution of pallet's on_runtime_upgrade, it only remove the ability to implemented from the macros: pallet and decl_module.

How would I execute it from the pallet when not using the macro?",10434,2021-12-07T12:29:44Z,0
1076,thiolliere,"> @thiolliere Can I throw one wrench in here? This takes away people's ability to define (the equivalent of) `on_pallet_initialization` functions. They currently depend on using `on_runtime_upgrade` to set pallet genesis config values in case the pallet is added via runtime upgrade. Do you expect people to do this via custom migration? While I agree that people should mostly opt for custom/runtime-level migrations, I'm somewhat hesitant to just remove the feature wholesale. I assume you considered and rejected marking it as deprecated and/or dangerous?

I don't really know how to mark it as deprecated easily, also nobody should be blocked because they are removed. It is not difficult to call the migration at the runtime level.

For the purpose of ""initialization"" of new pallet in runtime, I understand the usecase, I also think that for such usecase we would actually want something more complete, like genesis config allow to define a type to have information about what to put at initialisation, there is no similar type for runtime upgrade.

I'm personally not completely opposed to keep them. Maybe our mistake is to not benchmark the runtime upgrade properly. If the runtime upgrade is correctly benchmarked then it should as safe as a regular on_initialize. ",10434,2021-12-07T12:34:43Z,0
1077,thiolliere,"> > This PR doesn't remove the execution of pallet's on_runtime_upgrade, it only remove the ability to implemented from the macros: pallet and decl_module.
> 
> How would I execute it from the pallet when not using the macro?

The idea of the PR is to remove this ability, the only way to define it is to declare the pallet without using the FRAME macros.
Also we might remove it from executive as well https://github.com/paritytech/substrate/pull/10434#issuecomment-987757040

EDIT: this said if there is no consensus on this removal, we should keep them. and maybe do proper benchmark of on_runtime_upgrade",10434,2021-12-07T12:36:13Z,0
1078,bkchr,"> @thiolliere Can I throw one wrench in here? This takes away people's ability to define (the equivalent of) `on_pallet_initialization` functions. They currently depend on using `on_runtime_upgrade` to set pallet genesis config values in case the pallet is added via runtime upgrade. Do you expect people to do this via custom migration? 

Yes, setting genesis values by using `on_runtime_upgrade` is also not a good idea. What would the genesis values be? How can the user configure them? This is just wrong.",10434,2021-12-08T08:31:07Z,0
1079,bkchr,"While I'm for removing the `on_runtime_upgrade` in the pallet. We had last week a discussion where we came up with one legitimate example of using `on_runtime_upgrade` in a pallet. This is when we bump the transaction version, pallets should be made aware of this to may remove stored calls as they may could fail to decode or may to decode to something broken. However, maybe we could move that into a new hook `on_transaction_version` bumped or something similar and remove `on_runtime_upgrade`.",10434,2021-12-08T08:34:16Z,0
1080,thiolliere,if we consider that some on_transaction_version hook are useful I think we should keep `on_runtime_upgrade` and just not use it for big migration and always have a precise estimation of weight.,10434,2021-12-10T05:54:41Z,0
1081,kianenigma,"given the new input, I suppose we can just remove the current `on_runtime_upgrades` implementations from our code base to set an example for others to follow, but keep the functionality in the code, for now.  ",10434,2021-12-11T10:21:16Z,0
1082,thiolliere,"I agree with Kian.
I think our usage of on_runtime_upgrade is not the best when it do migration which are not correctly benchmark and which can cost a lot of weight.
In the future we should avoid such automatic migration in our pallet.
But on_runtime_upgrade still seems useful to execute some small and correctly benchmarked stuff.

For this reason I'll close the PR.
Removing the individual on_runtime_upgrade for pallets can be done in separate PR when it makes sense.",10434,2022-01-10T05:09:48Z,0
1083,expenses,bot merge,9562,2021-08-16T15:06:47Z,0
1084,ghost,Trying merge.,9562,2021-08-16T15:06:51Z,0
1085,shawntabrizi,How do you identify these? Some tool/script?,9450,2021-07-29T17:50:29Z,0
1086,gilescope,"Yup, cargo metadata on the workspace, then cargo edit's cargo rm on each dep and cargo check --all-targets to see if it built afterwards. record good results to a file and then git reset --hard and try a different dep.

It ran all night but it seemed to not do too bad a job.... The down side is I don't have enough color to know if there's any reason we can't remove these dependencies. This is where I need your help to point out anything deeply suspicious - ""surely that crate's used by x"" etc.

I'm going to have a follow up PR that does the same but for dev-dependencies but I want to land them separately.
(We can brush up the function into something nice and put it into cargo unleashed if it is useful to people - there's already a subcommand in cargo-unleash that does something in this direction but isn't quite as brute force.)",9450,2021-07-29T18:20:04Z,0
1087,gilescope,"Both good questions. I did build a couple of pallets - is there a
Cargo.toml with all the no_std crates in as a workspace? Or will all frame
& pallets cover it? I was assuming CI tested release mode as well as wasm -
there were certainly some wasm ci errors initially.

Will run a few more checks and will report back here.

On Fri, 30 Jul 2021 at 09:36, Benjamin Kampmann ***@***.***>
wrote:

> ***@***.**** approved this pull request.
>
> Neat. Nothing too suspicious coming up glancing over them, there's a good
> chance these are indeed not needed (anymore).
>
> But two questions on your process, just to make sure we don't accidentally
> dropped one too many:
>
>    1. did you build in release-mode(, too)?
>    2. have the frame/pallets been build for wasm/no_std?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/paritytech/substrate/pull/9450#pullrequestreview-718851482>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAGEJCGG5OOUTRM2O7MWZMTT2JQBPANCNFSM5BDZUL5Q>
> .
>
",9450,2021-07-30T16:52:29Z,0
1088,gilescope,Release build is clean. I'm unclear at the moment how to build just the wasm for the whole workspace.,9450,2021-08-02T09:24:10Z,0
1089,thiolliere,The pallet/frame crate should be good if a release build of node-runtime is done.,9450,2021-08-04T08:58:40Z,0
1090,gilescope,`self_destruct_works` test failure is a bit of a problem. If I do `rm Cargo.lock; rm ../../Cargo.lock; cargo clean; cargo test self_destruct` from frame/contracts I can reproduce this test failure on master and master a couple of months back. Possibly what's happening is a change in the Cargo.lock changes the dependencies and a different rent is applied? It doesn't seem to have anything to do with this branch.,9450,2021-08-10T18:36:51Z,0
1091,gilescope,Ok test failure was just due to later wat crate being included in Cargo.lock leading to slight increase in wasm size leading to increased rent leading to test failure. ,9450,2021-08-11T16:32:57Z,0
1092,athei,"> Yup, cargo metadata on the workspace, then cargo edit's cargo rm on each dep and cargo check --all-targets to see if it built afterwards. record good results to a file and then git reset --hard and try a different dep.

Did you try [cargo-udeps](https://crates.io/crates/cargo-udeps)?",9450,2021-08-11T20:19:03Z,0
1093,gilescope,I did try udeps but it wasn't that helpful for me. I coded up something that was very dumb (and inefficent) but was reasonably effective because it didn't try and do anything fancy. ,9450,2021-08-11T21:13:34Z,0
1094,gilescope,"(There's some auto-formatting of the toml files going on here which is nice, though unclear how vscode is managing this?)",9450,2021-08-12T09:54:58Z,0
1095,gilescope,Aside from the above no other `.rs` has been changed - the others are just cargo fmt. (Potentially we should pin the compiler via a `rust-toolchain.toml` so that we manage when we take these rustfmt changes),9450,2021-08-12T11:16:34Z,0
1096,Mr-Leshiy,"@kianenigma , Unfortunately it is not possible to implement `From` or `Into`, we have the similar situation as described here https://users.rust-lang.org/t/conflicting-implementations-for-trait-core-convert-from/3149.

So ok, will rename it to `into_other`.
",10614,2022-01-08T16:00:05Z,0
1097,gilescope,The PR now includes no clippy annotations (and in fact removes one). @bkchr does the PR now address all your concerns?,10570,2022-01-04T11:13:49Z,0
1098,gilescope,bot merge,10570,2022-01-05T14:35:20Z,0
1099,bkchr,bot merge ,10596,2022-01-05T22:35:56Z,0
1100,paritytech-processbot[bot],Waiting for commit status.,10596,2022-01-05T22:36:06Z,0
1101,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10596,2022-01-05T23:08:35Z,0
1102,tomaka,"I think that the `protocolId` should **not** be re-purposed as a ""hard fork identifier"". We should instead introduce a new optional field in the chain spec and deprecate `protocolId`.

The reasons are:

- We've written documentation and guides about this `protocolId`, and the new role of this hard fork identifier is different enough that it would just be confusing ([example](https://docs.substrate.io/how-to-guides/v3/parachains/pre-launch/#1-set-a-unique-protocolid))

- Most chains will never encounter any hard fork, and I don't see why you'd need to use both the genesis hash plus an arbitrary string, rather than just the genesis hash. So the default value for this new hard fork identifier should be `None`, meaning it's not used. And we would like all existing chains (assuming they're not a hard fork) to switch to a value of `None` rather than keep their existing `protocolId`.
",10463,2021-12-10T13:39:03Z,0
1103,tomaka,"A minor unrelated point is that I think it should be `/<hash>/<id>` and not `/<id>/<hash>`
It is possible to have multiple `id`s with the same `hash`, but (normally) never multiple `hash`es with the same `id`.
",10463,2021-12-10T13:40:26Z,0
1104,acatangiu,@tomaka were you thinking something like this: https://github.com/paritytech/substrate/pull/10463/commits/d4b616a95c0715f5021334ea086255ad6808fc47 ?,10463,2021-12-13T12:21:02Z,0
1105,tomaka,Yes!,10463,2021-12-13T12:29:05Z,0
1106,tomaka,Could you please not force push? :pray: I was in the middle of reviewing and this ruins reviews in progress.,10463,2021-12-13T16:02:13Z,0
1107,tomaka,":+1: This looks good to me from a networking perspective, but I don't know what others think of the changes in `bin/*` and in Grandpa & Beefy.",10463,2021-12-14T10:48:12Z,0
1108,acatangiu,"> +1 This looks good to me from a networking perspective, but I don't know what others think of the changes in `bin/*` and in Grandpa & Beefy.

pinging @andresilva and @tomusdrw for grandpa and beefy respectively",10463,2021-12-14T10:56:38Z,0
1109,acatangiu,@tomaka you have a stale `change requested` status/blocker on this PR. Please re-review.,10463,2022-01-04T10:06:18Z,0
1110,acatangiu,bot merge,10463,2022-01-04T10:37:30Z,0
1111,paritytech-processbot[bot]," Error: 
Error: When trying to meet the ""Project Owners"" approval requirements: this pull request does not belong to a project defined in Process.json.

Approval by ""Project Owners"" is only attempted if other means defined in the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge) are not satisfied first.

The following errors **might** have affected the outcome of this attempt:
- 'Batch: Availability and Validity' does not match any projects in polkadot's Process.json
- 'Batch: Codebase Restructure' does not match any projects in polkadot's Process.json

Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are members of substrateteamleads or core-devs.
",10463,2022-01-04T10:37:40Z,0
1112,tomaka,bot merge,10463,2022-01-04T11:51:33Z,0
1113,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4519 is not mergeable,10463,2022-01-04T11:51:39Z,0
1114,bkchr,bot merge,10463,2022-01-05T15:32:05Z,0
1115,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4519,10463,2022-01-05T15:32:14Z,0
1116,bkchr,bot merge,10463,2022-01-05T15:35:55Z,0
1117,paritytech-processbot[bot]," Error: Response error (status 404 Not Found): <pre><code>{&quot;documentation_url&quot;:&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;rest&#x2F;reference&#x2F;pulls#get-a-pull-request&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code></pre>",10463,2022-01-05T15:36:06Z,0
1118,joao-paulo-parity,bot merge,10463,2022-01-05T17:01:29Z,0
1119,xlc,"Anything parachain teams needs to be aware of about this? Will this cause any compatibility issues?
Looks like this only touches Grandpa/Beefy which only exists on relaychain so there should be no effect on parachain? 
It does introduce a fork id but it should be fully backward compatible if we just leave it to none?",10463,2022-01-05T21:53:25Z,0
1120,bkchr,"> Anything parachain teams needs to be aware of about this? Will this cause any compatibility issues? Looks like this only touches Grandpa/Beefy which only exists on relaychain so there should be no effect on parachain? It does introduce a fork id but it should be fully backward compatible if we just leave it to none?

Nothing changes for parachains. You just use `None` for `fork_id`. 

And the code is also backwards compatible for the relay chain.",10463,2022-01-05T23:50:03Z,0
1121,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10427,2022-01-08T16:37:35Z,0
1122,seunlanlege,this needs some labels and restarting polkadot ci,10503,2021-12-21T17:10:38Z,0
1123,seunlanlege,here's the substrate pr @ordian ,10503,2021-12-22T07:40:03Z,0
1124,seunlanlege,@kianenigma @bkchr @ordian ,10503,2022-01-07T09:38:38Z,0
1125,ordian,"```
error: useless use of `format!`
   --> client/consensus/manual-seal/src/consensus/timestamp.rs:110:20
    |
110 |                 .ok_or_else(|| format!(""best header not found in the db!""))?;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `""best header not found in the db!"".to_string()`
    |
    = note: `-D clippy::useless-format` implied by `-D clippy::complexity`
```",10503,2022-01-09T10:07:21Z,0
1126,ordian,bot merge,10503,2022-01-10T12:47:19Z,0
1127,paritytech-processbot[bot]," Error: Github API says ""Allow edits from maintainers"" is not enabled for https://github.com/paritytech/polkadot/pull/4574. The bot would use that permission to push the lockfile update after merging this PR. Please check https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork.",10503,2022-01-10T12:47:25Z,0
1128,ordian,"@seunlanlege could you reopen the companion from a personal fork, not an org?",10503,2022-01-10T12:48:14Z,0
1129,seunlanlege,"Aii, will do that shortly",10503,2022-01-10T13:02:22Z,0
1130,seunlanlege,ok done: https://github.com/paritytech/polkadot/pull/4680,10503,2022-01-10T13:40:31Z,0
1131,ordian,bot merge,10503,2022-01-10T14:14:29Z,0
1132,paritytech-processbot[bot], Error: It's not possible to meet the minimal approval count of 1 in https://github.com/paritytech/polkadot/pull/4680,10503,2022-01-10T14:14:38Z,0
1133,ordian,bot merge,10503,2022-01-10T14:38:54Z,0
1134,shawntabrizi,bot merge,10627,2022-01-11T03:18:21Z,0
1135,dependabot[bot],Superseded by #10633.,10598,2022-01-11T09:12:32Z,0
1136,rcny,"> What is about the gha job?

Done.",10628,2022-01-10T22:04:41Z,0
1137,cla-bot-2021[bot],"User @Cupnfish, please sign the CLA [here](https://cla.parity.io/sign_cla/40173605/3).",10631,2022-01-11T05:31:19Z,0
1138,bkchr,"You don't need to construct this type?

This type is just some helper type that implements a trait that doesn't take any reference to the object, aka it doesn't need to be constructed.",10631,2022-01-11T11:27:13Z,0
1139,cla-bot-2021[bot],"User @fzzr-, please sign the CLA [here](https://cla.parity.io/sign_cla/888526/3).",10436,2021-12-07T13:36:08Z,0
1140,fzzr-,@cla-bot-2021 already signed,10436,2021-12-07T13:40:25Z,0
1141,bkchr,What is an unnecessary cast in the generated file?,10436,2021-12-08T08:29:05Z,0
1142,fzzr-,"@bkchr, there `{{cr.name}} as Weight`. It _can_ be unnecessary.
In our case it is really unnecessary. See [clippy annotations here](https://github.com/pontem-network/pontem/actions/runs/1532475853).
<img width=""916"" alt=""Screenshot 2021-12-09 at 13 23 12"" src=""https://user-images.githubusercontent.com/888526/145378862-a3200d05-4b71-478e-af6d-aba421fb9fce.png"">

",10436,2021-12-09T10:19:46Z,0
1143,thiolliere,I think it would be better to fix the template so that there is not cast. why do we cast number to `Weight` we should just remove `as Weight` everywhere in the template.,10436,2021-12-16T07:56:05Z,0
1144,bkchr,"> I think it would be better to fix the template so that there is not cast. why do we cast number to `Weight` we should just remove `as Weight` everywhere in the template.

That is also the solution I would prefer!",10436,2021-12-16T09:20:22Z,0
1145,shawntabrizi,"There are also a weight templates here:

* https://github.com/paritytech/substrate/blob/master/.maintain/frame-weight-template.hbs
* https://github.com/paritytech/polkadot/blob/master/xcm/pallet-xcm-benchmarks/template.hbs
* https://github.com/paritytech/polkadot/blob/master/bridges/.maintain/rialto-weight-template.hbs
* https://github.com/paritytech/polkadot/blob/master/bridges/.maintain/millau-weight-template.hbs

I am pretty open to any suggested changes here as long as the templates continue to function.",10436,2021-12-16T10:54:01Z,0
1146,shawntabrizi,@ggwpez ,10436,2022-01-11T15:50:46Z,0
1147,shawntabrizi,"Lottery pallet is not deployed to any production runtimes, so it should be fine to merge this without any worries about migrations.",10594,2022-01-05T17:24:46Z,0
1148,shawntabrizi,/benchmark runtime pallet pallet_lottery,10594,2022-01-07T17:14:46Z,0
1149,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""lottery-bounded-len"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_lottery --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/lottery/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_lottery"", Extrinsic: ""buy_ticket"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Lottery Lottery (r:1 w:0)
Storage: Lottery CallIndices (r:1 w:0)
Storage: Lottery TicketsCount (r:1 w:1)
Storage: Lottery Participants (r:1 w:1)
Storage: Lottery LotteryIndex (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Lottery Tickets (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.06
              µs

Reads = 6
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.06
              µs

Reads = 6
Writes = 4

Pallet: ""pallet_lottery"", Extrinsic: ""set_calls"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Lottery CallIndices (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.32
    + n    0.387
              µs

Reads = 0 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     12.56      0.09    0.7%
    1     13.84     0.149    1.0%
    2     14.21     0.117    0.8%
    3     15.17     0.362    2.3%
    4     14.84     0.166    1.1%
    5     15.35     0.165    1.0%
    6     15.57     0.127    0.8%
    7     15.81     0.125    0.7%
    8     16.26     0.144    0.8%
    9     16.94     0.186    1.0%
   10     17.29     0.185    1.0%

Quality and confidence:
param     error
n         0.011

Model:
Time ~=    13.25
    + n    0.402
              µs

Reads = 0 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_lottery"", Extrinsic: ""start_lottery"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Lottery Lottery (r:1 w:1)
Storage: Lottery LotteryIndex (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.04
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.04
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_lottery"", Extrinsic: ""stop_repeat"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Lottery Lottery (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    5.732
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    5.732
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_lottery"", Extrinsic: ""on_initialize_end"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
Storage: Lottery Lottery (r:1 w:1)
Storage: System Account (r:2 w:2)
Storage: Lottery TicketsCount (r:1 w:1)
Storage: Lottery Tickets (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.89
              µs

Reads = 6
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.89
              µs

Reads = 6
Writes = 4

Pallet: ""pallet_lottery"", Extrinsic: ""on_initialize_repeat"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
Storage: Lottery Lottery (r:1 w:1)
Storage: System Account (r:2 w:2)
Storage: Lottery TicketsCount (r:1 w:1)
Storage: Lottery Tickets (r:1 w:0)
Storage: Lottery LotteryIndex (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    77.32
              µs

Reads = 7
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    77.32
              µs

Reads = 7
Writes = 5


```

</details>

ERROR: Unable to push ./frame/lottery/src/weights.rs",10594,2022-01-07T17:14:47Z,0
1150,ggwpez,bot merge,10594,2022-01-11T14:22:19Z,0
1151,bkchr,"That should be doable with https://github.com/paritytech/substrate/pull/9732. 

At least from the proof side, but this will still require some code path to only include the hash and not the data.

@cheme can correct me if I'm wrong. I think it should work and it should also work the way you want it for `:code`, but only ""by accident"". The point is that some data could be stored inside a node (because it isn't that big), but then we don't have the hash of the data in the trie. But since #9732 we are putting big data (bigger than the size of a hash) into its own ""bucket"" under the hash of the data. As the data in our case `:code` is probably always bigger than the size of a hash, it should work the way you want it to have.",10623,2022-01-10T14:52:34Z,0
1152,cheme,":+1: yes this is only doable if working on a migrated #9732 state (not on old/current state).

There is no specific api to query the hash of the value directly, but just producing the proof is the same as running one iteration of the key iterator for prefix ':code'.

If data is less than 33 byte, we would still have a proof of its hash (by hashing the value), but to read the proof a new `get_value_hash` function on the trie would be cleaner (then the function could also be use to create the proof).

",10623,2022-01-10T19:56:18Z,0
1153,bkchr,"> If data is less than 33 byte, we would still have a proof of its hash (by hashing the value)

Ahh you mean we would have a proof with the data in it, but we can then just request the hash of this that is being found in the proof?",10623,2022-01-11T12:37:10Z,0
1154,cheme,"> > If data is less than 33 byte, we would still have a proof of its hash (by hashing the value)
> 
> Ahh you mean we would have a proof with the data in it, but we can then just request the hash of this that is being found in the proof?

yes.

Also I remember that without #9732, we can also use a trie proof as implemented in https://github.com/paritytech/trie/tree/master/trie-db/src/proof : basically we remove the value from the proof and pass it as a parameter during verification (so it is more costly to check (need to hash the wasm big trie node)).
If verification succeeds we know value did not change, if it fails we know it did probably change (could also be change of node structure).",10623,2022-01-11T17:49:27Z,0
1155,ggwpez,/benchmark runtime pallet pallet_lottery,10637,2022-01-11T17:25:20Z,0
1156,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""oty-lottery-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_lottery --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/lottery/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_lottery"", Extrinsic: ""buy_ticket"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Lottery Lottery (r:1 w:0)
Storage: Lottery CallIndices (r:1 w:0)
Storage: Lottery TicketsCount (r:1 w:1)
Storage: Lottery Participants (r:1 w:1)
Storage: Lottery LotteryIndex (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Lottery Tickets (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.21
              µs

Reads = 6
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.21
              µs

Reads = 6
Writes = 4

Pallet: ""pallet_lottery"", Extrinsic: ""set_calls"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Lottery CallIndices (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.33
    + n    0.365
              µs

Reads = 0 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     12.77      0.16    1.2%
    1     13.79     0.101    0.7%
    2     14.22     0.085    0.5%
    3     14.35     0.085    0.5%
    4     14.88     0.135    0.9%
    5     15.37     0.151    0.9%
    6     15.61     0.071    0.4%
    7     15.69     0.098    0.6%
    8     16.23     0.098    0.6%
    9     16.66     0.097    0.5%
   10      16.9     0.132    0.7%

Quality and confidence:
param     error
n         0.007

Model:
Time ~=    13.24
    + n    0.378
              µs

Reads = 0 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_lottery"", Extrinsic: ""start_lottery"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Lottery Lottery (r:1 w:1)
Storage: Lottery LotteryIndex (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    44.63
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    44.63
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_lottery"", Extrinsic: ""stop_repeat"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Lottery Lottery (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    5.654
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    5.654
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_lottery"", Extrinsic: ""on_initialize_end"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
Storage: Lottery Lottery (r:1 w:1)
Storage: System Account (r:2 w:2)
Storage: Lottery TicketsCount (r:1 w:1)
Storage: Lottery Tickets (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.99
              µs

Reads = 6
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.99
              µs

Reads = 6
Writes = 4

Pallet: ""pallet_lottery"", Extrinsic: ""on_initialize_repeat"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
Storage: Lottery Lottery (r:1 w:1)
Storage: System Account (r:2 w:2)
Storage: Lottery TicketsCount (r:1 w:1)
Storage: Lottery Tickets (r:1 w:0)
Storage: Lottery LotteryIndex (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    75.32
              µs

Reads = 7
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    75.32
              µs

Reads = 7
Writes = 5


```

</details>",10637,2022-01-11T17:25:21Z,0
1157,ggwpez,bot merge,10637,2022-01-11T17:58:26Z,0
1158,paritytech-processbot[bot]," Error: Approval criteria was not satisfied.

The following errors **might** have affected the outcome of this attempt:


Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are team members of substrateteamleads or core-devs.",10637,2022-01-11T17:58:35Z,0
1159,KiChjang,bot merge,10637,2022-01-11T18:12:57Z,0
1160,bkchr,Cc @dvdplm @niklasad1 ,9811,2021-09-19T12:26:11Z,0
1161,niklasad1,"It's really hard to debug this without logs from `jsonrpc server` but my hunch is that `max_payload_size` was exceeded and the `jsonrpc server` terminated the connection.

@ianhe8x is it possible to get the `jsonrpc logs` from the kusama node that you ran to test this?",9811,2021-09-19T18:37:57Z,0
1162,ianhe8x,"Sure thing, @niklasad1 Can you advice the `-l` args to enable these logs?",9811,2021-09-20T05:16:44Z,0
1163,niklasad1,"> Sure thing, @niklasad1 Can you advice the -l args to enable these logs?

`-l =""rpc=debug""` should be sufficient
",9811,2021-09-20T06:14:53Z,0
1164,ianhe8x,"Nothing useful, no error messages. After I excluded logs with `event.loop0 rpc: Response:` there wasn't much left.",9811,2021-09-21T03:43:55Z,0
1165,ianhe8x,"To reproduce the issue. 
```
git clone https://github.com/subquery/subql-starter
cd subql-starter
yarn
yarn codegen
yarn build
docker-compose pull
docker-compose up
```

Change project.yaml to use different endpoints.",9811,2021-09-21T04:25:31Z,0
1166,ianhe8x,"![image](https://user-images.githubusercontent.com/39037239/134116364-aa42c771-af10-4a65-b38a-eb27418155ce.png)
",9811,2021-09-21T05:31:17Z,0
1167,niklasad1,"@ianhe8x 

Thanks, for the re-produce instructions why does the log above indicate that you connected `wss://rpc.polkadot.io`?
",9811,2021-09-21T07:59:10Z,0
1168,ianhe8x,I just demonstrate it's not related to a specific endpoint.,9811,2021-09-21T22:33:33Z,0
1169,alanchang124,This problem occurs frequently in recent days. Especially when downloading a certain block containing a plenty of extrinsic.,9811,2022-01-11T22:00:15Z,0
1170,georgesdib,"> Looks very much like a _hard_ step, in the absolute _right_ direction.
> 
> The code will be a bit verbose, but that's a fair cost.
> 
> https://github.com/paritytech/substrate/pull/9864/files#r716153434 is the only serious issue with it, otherwise I have some other minor feedback that could be fixed.
> 
> Thanks for the contribution!

Please let me know if anything else is needed, otherwise, if the changes are good, can you please also check the polkadot companion?",9864,2021-10-02T22:10:42Z,0
1171,georgesdib,"@kianenigma does the PR look good to you? Also if possible, if you can please check the polkadot companion and add the needed tags as I don't have the permission to do so. I think that is the reason for the failed check.",9864,2021-11-19T15:29:52Z,0
1172,kianenigma,"@georgesdib I personally really like this PR and have tried reviewing it in the past, but it is quite a big one and it touches some very sensitive code. Unfortunately, I can't promise when I will get the chance to do a full review, but I intend to do so. 

One possibility is that after doing another review, I might ask to strip down this PR to something slightly simpler so that we can review and merge it in smaller chunks. 

Thanks for your contribution so far. Hopefully we can push it to the finish line, and propose an onchain tip for your work.  ",9864,2021-11-19T16:18:10Z,0
1173,georgesdib,"> @georgesdib I personally really like this PR and have tried reviewing it in the past, but it is quite a big one and it touches some very sensitive code. Unfortunately, I can't promise when I will get the chance to do a full review, but I intend to do so.
> 
> One possibility is that after doing another review, I might ask to strip down this PR to something slightly simpler so that we can review and merge it in smaller chunks.
> 
> Thanks for your contribution so far. Hopefully we can push it to the finish line, and propose an onchain tip for your work.

Thank you!",9864,2021-11-19T19:46:39Z,0
1174,kianenigma,"@georgesdib unfortunately as it stands now, the scope of this PR is too big and too sensitive (staking being one of the most critical components of any network) to be reviewed and merged in a timely manner. This PR has already been open for far too long and I rather close it for now so we can move forward, but propose the following follow-ups: 

1. Please put your Polkadot/Kusama address in the PR description, and I will make sure a tip is opened for your work in the corresponding network. 
2. I already started making pallet-staking bounded in smaller bike-size pieces (see the PR that linked to this recently), and I would like to invite you to DM me if you feel like helping further with that. I don't have a set of issues written down now, but I can probably come up with a list that you can work on.

Sorry for the inconvenience, and one last time, thanks for your contribution to Substrate! ",9864,2022-01-11T18:57:56Z,0
1175,shawntabrizi,/tip medium,9864,2022-01-11T22:58:37Z,0
1176,shawntabrizi,/tip medium,9864,2022-01-12T00:25:08Z,0
1177,substrate-tip-bot[bot],"A medium tip was successfully submitted for georgesdib (EawudhGYQCeKvpjUiXxRdn2bmSWUxkA1dndMHoYFVmQvRmi on kusama). 

 https://polkadot.js.org/apps/#/treasury/tips",9864,2022-01-12T00:25:13Z,0
1178,bkchr,@dependabot rebase,10575,2022-01-03T09:54:10Z,0
1179,bkchr,"The idea would be to move these lines of code:
https://github.com/paritytech/substrate/blob/master/frame/system/src/lib.rs#L1323-L1327

That is currently being called here:
https://github.com/paritytech/substrate/blob/master/frame/executive/src/lib.rs#L301-L306

Above these lines here:
https://github.com/paritytech/substrate/blob/master/frame/executive/src/lib.rs#L298-L300

I think the best would probably be to create a special `clear_events` functions this would then be called inside `Executive`. We should then also be able to drop the `InitKind` enum because we can control from the outside when the events are being cleared.",10603,2022-01-07T09:45:13Z,0
1180,joao-paulo-parity,"Sorry for the unrelated proposal but `$PIPELINE_SCRIPTS_TAG` should be removed because it's not being used; the variable is set in the Gitlab settings instead, effectively overriding the value in `.gitlab-ci.yml`. Having it linger there might confuse someone reading the code.

https://github.com/paritytech/substrate/blob/2cfd23559933eaf495fca4b8024cfaf5a98b7cd6/.gitlab-ci.yml#L45

I thought I'd suggest the change since this PR is pretty small and you could include it here, but otherwise feel free to create a new PR for this.",10624,2022-01-11T00:47:11Z,0
1181,bkchr,"This is about creating a signed extension that passes the metadata hash as additional signed data to the signature creation.

The signed extension should be fairly simple to implement, the problem for now is how to get the metadata hash in an efficient way.",10478,2021-12-13T11:09:30Z,0
1182,kirushik,"In general I like the idea; this would also probably superseed the `transaction_version` field.

What worries me, though, is how is it going to work ""at margins"" for transactions around the runtime upgrade enacted: will we invalidate the whole transaction pool immediately on each minor runtime upgrade?
Will we have a grace period around this, accepting both?
Would we allow issuing transactions for not-yet-accepted runtime in the pool (probably waiting for the relevant upgrade to be enacted)?",10478,2021-12-13T12:54:48Z,0
1183,Slesarew,We could match metadata to block mentioned in mortality for mortal transactions. Not for immortal ones though. Are immortal ones important?,10478,2021-12-13T13:06:44Z,0
1184,bkchr,"> In general I like the idea; this would also probably superseed the `transaction_version` field.

Not really, a runtime upgrade, aka changing metadata doesn't mean the transaction version changed.

> 
> What worries me, though, is how is it going to work ""at margins"" for transactions around the runtime upgrade enacted: will we invalidate the whole transaction pool immediately on each minor runtime upgrade? Will we have a grace period around this, accepting both? Would we allow issuing transactions for not-yet-accepted runtime in the pool (probably waiting for the relevant upgrade to be enacted)?

We are already rejecting all transaction from a previous runtime version. `CheckSpecVersion` is doing that. 
",10478,2021-12-13T14:30:17Z,0
1185,xlc,"The real question is how to have the signer verify the metadata hash trustlessly? It needs to run a light client? But I am not sure if it is possible for air gapped wallet?

We also needs to commit metadata hash to onchain state, which sounds like a complicated task to me. You will want to do it with on_runtime_upgrade instead of a separate tx, so you will need to build a runtime, get metadata hash, and embed it into the runtime.",10478,2021-12-13T21:21:40Z,0
1186,bkchr,"> The real question is how to have the signer verify the metadata hash trustlessly? It needs to run a light client? But I am not sure if it is possible for air gapped wallet?

The point of this being that the signer doesn't need to be able to verify the metadata at all. It will build the tx, based on the metadata that the user provided. The signature will then include the metadata hash, similar as we do it for `spec_version`. The runtime will then also add the metadata hash and if that uses a different hash, the signature verification will fail.

> 
> We also needs to commit metadata hash to onchain state, which sounds like a complicated task to me. You will want to do it with on_runtime_upgrade instead of a separate tx, so you will need to build a runtime, get metadata hash, and embed it into the runtime.

We could just include the metadata hash as part of the build process. Build the runtime once, get the metadata, generate the hash, build the runtime again and include the hash.",10478,2021-12-13T21:34:29Z,0
1187,kianenigma,"I'm kinda inclined to make this happen on the runtime and give a push to the ecosystem (Polkadot and Kusama included) to catch up. I think this will instigate more novel ways to distribute the metadata as well. Seems like a solvable problem, just stuck in a stalemate. ",10478,2022-01-12T08:45:11Z,0
1188,bkchr,It also doesn't compile.,10620,2022-01-10T08:55:57Z,0
1189,bkchr,@xlc we need a companion for this.,10620,2022-01-11T12:32:59Z,0
1190,bkchr,bot merge,10620,2022-01-12T08:22:16Z,0
1191,dvdplm,"I did some tinkering today and it doesn't look like it's the polkadot node that is slow here. I ran 10 connections on 10 threads for 30min against a local, synced, polkadot node, querying `state_getMetadata`:

```
Running 30m test @ http://127.0.0.1:9933
  10 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     5.76ms    1.03ms 117.13ms   89.15%
    Req/Sec   174.34     13.71   250.00     64.19%
  3126835 requests in 30.00m, 1.54TB read
Requests/sec:   1737.02
Transfer/sec:      0.87GB
```

This is http and not ws (which is what polkadot.js uses), but it seems like the node is pretty snappy.

So I'm not convinced we necessarily need to intervene on the substrate node side here, unless we want to make changes to offload the js client; things like doing the decoding on the node side, strip out doc strings, compressing the payload (likely not helping though), or some other filtering of what portion of the metadata to return.",10057,2021-10-19T13:50:42Z,0
1192,tomusdrw,"@dvdplm `state_getMetadata` is performing a `RuntimeApi` call and it's indeed quite fast, but could be even faster (i.e. generating less load on the node, maintaining similar response rates) if stored in some alternative locations (e.g. one state read, or offchain db read)

I believe that the main point here is to split the metadata from the runtime itself, to lower the overall runtime code size, which affects other things beyond raw performance of retrieving the metadata (runtime upgrade transaction size, PoV blocks, etc).",10057,2021-10-20T21:54:02Z,0
1193,bkchr,"For me the main question is still, where to put the metadata? If this question is solved, the rest is easy. How complicated is it to fetch the metadata for example from ipfs @jacogr ?",10057,2021-10-21T06:57:18Z,0
1194,xlc,Substrate node is possible to serve IPFS content right? So one possible solution is have the native client serving the metadata over IPFS.,10057,2021-10-21T07:00:49Z,0
1195,bkchr,And how does the client gets the metadata?,10057,2021-10-21T08:34:50Z,0
1196,xlc,"The runtime includes the metadata multihash, and client just fetch it on IPFS network and hopefully can be served by one of the nodes? Network operators can also pin the metadata to ensure the availability. ",10057,2021-10-21T09:01:59Z,0
1197,bkchr,Not sure about the IPFS status in Substrate.,10057,2021-10-21T09:25:08Z,0
1198,dvdplm,"> @dvdplm `state_getMetadata` is performing a `RuntimeApi` call and it's indeed quite fast, but could be even faster (i.e. generating less load on the node, maintaining similar response rates) if stored in some alternative locations (e.g. one state read, or offchain db read)

@tomusdrw  No doubt there are optimizations to be made here. The point I was trying to make is that on the user side of things, in polkadot.js and sidecar, fetching metadata is ~1000 times slower than getting the raw metdata over the RPC. 
So efforts spent making this fast will have next to no impact on the user experience.

That said there are other good reasons for working on this, as you point out.",10057,2021-10-21T09:37:17Z,0
1199,jacogr,"@bkchr As long as it has a hash, it can make an ipfs retrieval. Worst-case, if available on the node, can also store it ""elsewhere"" and return via a different RPC call that gets it from ""elsewhere"". (Wherever that may be - file system, runtime, offchain DB, ipfs, etc.) The only issue is making sure it is available exactly at the point the upgrade is live, and available to all.

@dvdplm Indeed via the JS API, it is much, much slower. The bottleneck from a JS API perspective is not the node, well, we had some issues with historic metadata at some point, but for latest, it certainly is never an issue. (Also the JS side is even slower if you are fetching a non-recent version of the metadata since there are conversion steps in-between). On my side I don't focus on performance at all, the prime directive with the time I have available is""getting it right"".",10057,2021-10-21T11:29:27Z,0
1200,bkchr,"> @bkchr As long as it has a hash, it can make an ipfs retrieval. Worst-case, if available on the node, can also store it ""elsewhere"" and return via a different RPC call that gets it from ""elsewhere"". (Wherever that may be - file system, runtime, offchain DB, ipfs, etc.) The only issue is making sure it is available exactly at the point the upgrade is live, and available to all.

Okay. Then I would propose that we do the following:

1. Change the metadata trait to:
```
	#[version(2)]
	pub trait Metadata {
		/// Returns the metadata of a runtime.
		#[changed_in(2)]
		fn metadata() -> MetadataOrHash;
		/// Returns the metadata of a runtime.
		fn metadata() -> MetadataOrHash;
	}

	enum MetadataOrHash {
		Metadata(OpaqueMetadata),
		Hash(Hash),
	}
```

2. Introduce a feature for runtime that is not enabled by default, like the `disable-logging` feature. We could call it `metadata-hash` or whatever. When this feature is enabled the runtime api will return the hash. This will be added to the release build, so that this feature is enabled when we are building the on-chain wasm. Otherwise the endpoint returns the opaque metadata. This is especially useful for local testings where you just want to have it working and not want to require the user to somehow get the metadata etc.",10057,2021-10-21T11:58:27Z,0
1201,tomaka,"I'm extremely opposed to adding the metadata on IPFS.

The IPFS protocol is extremely complicated, and you can only access it in three ways:

- Using the Go node from Protocol Labs
- Using an HTTP IPFS gateway
- Creating our own implementation of IPFS

The first solution is problematic. Users that want to access a Substrate chain would have to install two binaries: the Substrate node client and an IPFS client. The IPFS node is also not embeddable in web pages, which makes it a no-go for substrate-connect.

The second solution goes against the idea of decentralization. If the gateway goes down or is blocked, IPFS becomes inaccessible.

The third solution would add thousands of hours of development and create its own problems, and is generally not realistic.",10057,2022-01-12T09:34:16Z,0
1202,olanod,"I thought there was already a lot of progress in Rust implementations of IPFS, would it really be thousands of hours?
The second option is not awful as long as developers don't have to hard-code a specific gateway, substrate-connect could do something like the IPFS browser extension and help resolve `ipfs://`/`ipns://` protocols with preference for a locally deployed node. Maybe the extension can also encourage people to install a native version of the light node that will be IPFS capable in the future?  
I think IPFS is the best bet to persistence and retrieval of arbitrarily sized blobs of data in decentralized set-ups, metadata fits well there imho. It might not be quite there yet ready for primetime but I think we can start paving the way to eventually get the ""dreamed set-up"".  We have a concept runtime called _Valor_ that mounts plugins as HTTP APIs as our bet for **progressive decentralization** which is basically acknowledging that decentralization is not perfect yet but we will totally get there without breaking people's code, it starts as centralized APIs `api-sidecar` style but can eventually run in the browser mocking a server with service workers, the ""Blockchain API"" plugin being a wrapper of our client library _Sube_ that also starts with a less ideal HTTP backend but can transparently be replaceable by a smoldot based one in the future for example. ... All this to say that we don't need to make it perfect the first try but still chose the right tool for the job from the beginning.",10057,2022-01-12T11:30:24Z,0
1203,tomaka,"> It might not be quite there yet ready for primetime

We're talking about replacing _something simple that works well and without any issue_ with something _super complicated and not ready for prime time_. This is not a good trade off.

As a side topic, I also want to point out that Substrate chains already have a DHT with the exact same algorithm as IPFS does. It's used to store the authority discovery records, but storing other things on it is trivial. All the functions are there and are robust.
",10057,2022-01-12T11:41:38Z,0
1204,dharjeezy,"Hello @ggwpez I am interested in picking  this issue up.
I understand when you say the benchmark should not accept a parameter, that means we should remove the `i` parameter since it's not being used yh?

But I don't understand what you mean by ""should have a weight that depends on it""? ",10638,2022-01-11T20:53:11Z,0
1205,ggwpez,"> Hello @ggwpez I am interested in picking this issue up.

Wow nice @dharjeezy !

>I understand when you say the benchmark should not accept a parameter, that means we should remove the `i` parameter since it's not being used yh?

Yes it could just be removed and run with a constant repetition, eg `1_000_000`.

> But I don't understand what you mean by ""should have a weight that depends on it""?

That would just be an alternative approach; instead of removing it you could also fix it so that the weight output uses the `i` parameter.  It currently looks like this:  
```rust
fn addition(_i: u32, ) -> Weight {
	(284_000 as Weight)
}
```
but could look more like this:
```rust
fn addition(i: u32, ) -> Weight {
	(1_000 as Weight)
		.saturating_add((10_000 as Weight).saturating_mul(i as Weight))
}
```

~~IMHO it would be the best to just remove the parameter, makes it simpler to use and understand.~~  
Thinking again: The second approach would guarantee that the compiler does not optimize out the operation. Would be difficult to otherwise verify this.  
I talked about it with @shawntabrizi and I think he has no preference which approach to use. 
So it would be up to you @dharjeezy which way to go.",10638,2022-01-12T10:11:41Z,0
1206,shawntabrizi,">  The benchmarks should be fixed to either not accept a parameter or have a weight that depends on it.

I dont think it is clear that we can ""force the benchmark"" to use the `i` parameter. The `i` parameter not being used is a result of the benchmarking results undergoing linear regression, and the regression not finding any noticeable slope.

But yeah, in any case, it is not actually that important what precisely we are benchmarking, just that the benchmarks are universally consistent, as to tell when changes to the rust compiler or hardware are making an impact to the timing of the weights.",10638,2022-01-12T11:45:42Z,0
1207,ggwpez,"> I dont think it is clear that we can ""force the benchmark"" to use the i parameter. The i parameter not being used is a result of the benchmarking results undergoing linear regression, and the regression not finding any noticeable slope.

We could execute batches of operations, eventually it should show up.  
So `(0..i * 1000)` instead of `(0..i)`.",10638,2022-01-12T12:21:38Z,0
1208,cla-bot-2021[bot],"User @Akagi201, please sign the CLA [here](https://cla.parity.io/sign_cla/1207959/3).",10643,2022-01-12T12:21:21Z,0
1209,bkchr,"We don't disable the default features, aka `std`. So, this is not required.",10643,2022-01-12T13:36:43Z,0
1210,wigy-opensource-developer,"This is my first PR with a companion, so I wanted to test it on CI. It is not ready for review yet, but draft PRs skip running CI.",10514,2022-01-12T13:54:42Z,0
1211,thiolliere,"I can imagine this:

`StorageName child($ChildString): map storage_type => storage_type;`

This storage instead of inserting into top storage it will insert into the child trie with at the place $String.
$ChildString could default to `ModuleName ++ "" "" ++ StorageName`.
But I'm not sure about having a default one, like maybe some modules wants to put two storage into the same child trie and other modules wants to put every storage into a different child trie. Having no default seems better.

Also $ChildString could be hashed but I see no value of it, is there some ?

Does that fits all need ? also if someone doesn't want its stuff to be hashed in the childtrie (because it is already isolated from everything else) then we can introduce Identity Hasher.",3187,2019-07-24T11:29:20Z,0
1212,thiolliere,"Also do we want those child trie to be created in genesis or do we want them to be created on first insert ?
I would say option 1",3187,2019-07-24T11:32:48Z,0
1213,kianenigma,"+1. It was mentioned in some previous conversations that would be good to, exactly as mentioned, allow syntax like: 

`StorageName child($ChildString): map storage_type => storage_type;`

",3187,2019-07-24T11:46:59Z,0
1214,cheme,"I had an experimental branch with full switch to child module.
Current state is 'does not work when running the node' so it will probably require implementing the switch optionally to spot the issues.
https://github.com/cheme/substrate/tree/child_module_storage , I guess it can help starting with this issue.",3187,2019-07-26T09:11:37Z,0
1215,shawntabrizi,"We still need this, but with the new FRAME v2 macros.

Could be a good project for a more advance hiring exercise.",3187,2022-01-12T18:28:02Z,0
1216,dependabot[bot],Superseded by #10651.,10633,2022-01-13T09:07:53Z,0
1217,arkpar,bot merge,10562,2022-01-13T15:25:56Z,0
1218,wigy-opensource-developer,"Rust does not have built-in setup/teardown support for test fixtures. But that does not mean we cannot use something like [`rstest`](https://docs.rs/rstest/latest/rstest/index.html). We seem to be using thread-local-storage for just easier fixture setup in these mocks and we want to use a fresh fixture for every test case, whatever thread they are running in.",10479,2022-01-12T11:49:00Z,0
1219,ggwpez,">We seem to be using thread-local-storage for just easier fixture setup in these mocks and we want to use a fresh fixture for every test case, whatever thread they are running in.

Some of these locals are accessed in callbacks and not just for closure I think, so they need to be accessible in the scope surrounding the `#[test]` functions.  
AFAIU the `rstest` only passes arguments to the test functions, right? @wigy-opensource-developer  

One solution that I would not be particularly proud of:  
Create a `define_thread_locals!` macro to define all thread locals and creates a `clear_thread_locals!` macro to clear all `RefCell` with `RefCell::new(Default::default())`. This could then be called in `new_test_ext().execute_with`.  
PS: Would be the same construction as used in https://github.com/paritytech/substrate/pull/10592",10479,2022-01-12T16:19:48Z,0
1220,shawntabrizi,"@ggwpez but what would be the final outcome we achieved here for additional complexity and work? Does not seem that really anyone executes tests like this anyway, which is why this is the first time it is being reported.",10479,2022-01-12T19:25:34Z,0
1221,wigy-opensource-developer,"> Some of these locals are accessed in callbacks and not just for closure I think, so they need to be accessible in the scope surrounding the `#[test]` functions. AFAIU the `rstest` only passes arguments to the test functions, right?

If we want independent tests, we need to create a fresh fixture for each of them. Because the Rust test runner starts each `#[test]` on a fresh stack, it is only static and thread local state from mock.rs that can make the tests interact with each other making them erratic. (I try to use terms correctly from http://xunitpatterns.com/ )
",10479,2022-01-12T19:54:41Z,0
1222,ggwpez,"> but what would be the final outcome we achieved here for additional complexity and work? Does not seem that really anyone executes tests like this anyway, which is why this is the first time it is being reported.

Well, this is kind of what I meant with

> Please confirm and decide if this should be fixed.

I'm not sure if it is worth it. Might be worth testing on a single threaded system, to see it it happens there as well @shawntabrizi.    
PS: It does not compile with the current Tarpaulin version, but if it turns out not working this could be a reason to fix it.

For example when I look at the tests for [pallet-assets](https://github.com/paritytech/substrate/blob/ded44948e2d5a398abcb4e342b0513cb690961bb/frame/assets/src/mock.rs#L122), I do not see how this could be done with test closures since they would need to be accessible for the `FrozenBalance` balance impl here. @wigy-opensource-developer ",10479,2022-01-13T09:33:14Z,0
1223,wigy-opensource-developer,"Yeah. So because the `FrozenBalance` trait does not take a proper `&self` or `&mut self` parameter on their methods, what can we do but use static state, right? Well, wrong!

The only reasonable way forward is to not treat every type definition in a `#[pallet::config]` a global variable. We hire Rust developers, but this is a completely different, limited language we can use in these macros, causing all kind of gotchas like this.

This should be completely viable for implementing `FrozenBalance`:

```rust
#[derive(Debug, Default)]
pub struct TestFreezer {
	frozen: HashMap<(u32, u64), u64>,
	hooks: Vec<Hook>,
}

impl FrozenBalance<u32, u64, u64> for TestFreezer {
	fn frozen_balance(&self, asset: u32, who: &u64) -> Option<u64> {
		self.frozen.get(&(asset, who.clone())).cloned()
	}

	fn died(&mut self, asset: u32, who: &u64) {
		self.hooks.push(Hook::Died(asset, who.clone()));
	}
}

impl TestFreezer {
	pub(crate) fn set_frozen_balance(&mut self, asset: u32, who: u64, amount: u64) {
		self.frozen.insert((asset, who), amount);
	}
	pub(crate) fn clear_frozen_balance(&mut self, asset: u32, who: u64) {
		self.frozen.remove(&(asset, who));
	}
	pub(crate) fn hooks(&self) -> Vec<Hook> {
		self.hooks.clone()
	}
}
```",10479,2022-01-13T12:18:55Z,0
1224,ggwpez,"I do not want to hold you back from fixing it. Just for me personally the priority of working on it is not be the highest.     
You can open a MR if you want to fix it.  
@wigy-opensource-developer

",10479,2022-01-13T12:35:57Z,0
1225,wigy-opensource-developer,"@shawntabrizi What I understand from the FRAME design is that all state is in the storage, and in order to emphasize the ""statelessness"" (purity) of the block function composed out of all this code, `self` is missing from all these things intentionally. The missing piece is testability, which requires dependency injection. Although this is an article about F#, but writer on several books on the topic, Mark Seemann describes why **just for the sake of testability** we need to allow impurity in the final assembled runtime: https://blog.ploeh.dk/2017/01/30/partial-application-is-dependency-injection/",10479,2022-01-13T12:42:05Z,0
1226,arkpar,"Using TLS for tests looks like an anti-pattern to me. Why not just use the storage? 
Something like this should work:
```rust
pub struct TestFreezer;
impl FrozenBalance<u32, u64, u64> for TestFreezer {
	fn frozen_balance(asset: u32, who: &u64) -> Option<u64> {
		let key: u128 = (asset as u128) << 64 | *who as u128;
		sp_io::storage::get(&key.to_le_bytes()).map(|x| u64::from_le_bytes(x.as_slice().try_into().unwrap()))
	}
}

pub(crate) fn set_frozen_balance(asset: u32, who: u64, amount: u64) {
	let key: u128 = (asset as u128) << 64 | who as u128;
	sp_io::storage::set(&key.to_le_bytes(), &amount.to_le_bytes());
}
pub(crate) fn clear_frozen_balance(asset: u32, who: u64) {
	let key: u128 = (asset as u128) << 64 | who as u128;
	sp_io::storage::clear(&key.to_le_bytes());
}
```

Alternatively `let key = (asset, who).encode()`",10479,2022-01-13T12:42:16Z,0
1227,wigy-opensource-developer,"> Using TLS for tests looks like an anti-pattern to me. Why not just use the storage? Something like this should work

Will you create a fresh storage for each and every test function? Otherwise you end up with the same interacting tests.",10479,2022-01-13T12:43:18Z,0
1228,arkpar,Each test already uses a unique instance of `TestExternalities` which holds the storage. There should be no interference.,10479,2022-01-13T12:47:27Z,0
1229,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9730,2021-10-23T13:52:04Z,0
1230,apopiak,@bkchr @thiolliere What do you think of the rewording?,9730,2021-11-26T16:50:44Z,0
1231,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9730,2021-12-29T11:04:26Z,0
1232,bkchr,@JoshOrndorff what is the status of a test? ,10498,2022-01-08T19:40:37Z,0
1233,bkchr,bot merge,10498,2022-01-10T11:19:02Z,0
1234,paritytech-processbot[bot],Waiting for commit status.,10498,2022-01-10T11:19:10Z,0
1235,JoshOrndorff,Thank you @tgmichel ,10498,2022-01-14T02:08:22Z,0
1236,andresilva,AFAICT this is the current version we use in CI.,10607,2022-01-07T15:20:53Z,0
1237,gilescope,Works on my nix box. I am all for this as it reduces the barriers for external contributors.,10607,2022-01-08T15:51:28Z,0
1238,andresilva,"> So compiles everything with the nightly compiler?
> This is a changing behavior of the current way of building.

Agreed, we probably need to settle on some standard for this. FWIW I'm in favor of just using one toolchain, i.e. either stable with RUSTC_BOOSTRAP hack, or just use nightly for everything.

> This file would also not be automatically changed when we add a new CI image.
> 
> Imo we should find a proper way on how we track the rust version entirely in git, aka dropping the installation of rust in the CI image for example and not start adding more and more locations that are loosely coupled.

Ideally the CI image would just read from this file (or some other file that comes from the repo). As an optimization the CI image could have the latest version already downloaded, but when this file changes it should download it always (until the image gets updated).

I will close this for now.

",10607,2022-01-11T14:53:51Z,0
1239,bkchr,"> Ideally the CI image would just read from this file (or some other file that comes from the repo).

That already worked with your change here.

I think we may could directly remove rust from the image. AFAIK all gha jobs also download rust in every run.",10607,2022-01-11T15:22:11Z,0
1240,xcaptain,"Can substrate build on stable rust? I don't know why wasm-builder require a nightly version.
https://github.com/paritytech/substrate/tree/master/utils/wasm-builder",10607,2022-01-14T03:27:09Z,0
1241,bkchr,See the tracking issue: https://github.com/paritytech/substrate/issues/1252,10607,2022-01-14T07:50:46Z,0
1242,dependabot[bot],"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",10651,2022-01-14T07:51:31Z,0
1243,arkpar,bot merge,10659,2022-01-14T11:02:44Z,0
1244,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8348,2021-07-07T20:23:31Z,0
1245,kianenigma,"We don't run this anymore, but once we have #9081, we can configure the onchain phragmen to use only a small subset of the voters. ",8348,2021-07-08T09:08:21Z,0
1246,kianenigma,"this is now quite possible to do with the bags list, and quote a good one to provide for the Parachains. Essentially, using staking + a new `BoundedOnChainSequentialPhragmen` is safe. 

@emostov Fancy doing this one? I think doing a bit of documentation about it and making sure it is broadcasted to our parachain teams is also a good step. ",8348,2021-12-04T15:20:49Z,0
1247,GopherJ,"This may not only applies to `utility.batch_all` but also all big blocks, is there a way to skip such big blocks?",10658,2022-01-14T08:36:10Z,0
1248,bingryan,"good issue.i did an experiment on this.also have some doubts about this.

first, when I send 100 tasks use `Utility batch`, the parachain is normally ok.
but when this increased to 1000 tasks, the parachain stopped. and get error:

```
aura: [Parachain] ⌛️ Discarding proposal for slot 136845516; block production took too long
```",10658,2022-01-14T08:37:32Z,0
1249,bkchr,"> Hackers can use this to attack parachains

If you don't properly benchmark your chain, this is true. However, there is no need for a `MaxBatchLimit`, because you have a weight assigned to each call and that is respected by the batch weight calculation. If you can construct such a call that the weight says it fits into the block, but the block takes too long to be produced, it means your weights are incorrect.",10658,2022-01-14T09:25:40Z,0
1250,yrong,"@bkchr does that mean if weight correctly calculated, such huge extrinsic will just fail during some check phase without chain stuck? ",10658,2022-01-14T13:01:37Z,0
1251,KiChjang,"> does that mean if weight correctly calculated, such huge extrinsic will just fail during some check phase without chain stuck?

Yes, the [`CheckWeight` signed extension](https://github.com/paritytech/substrate/blob/9eddaec3b8f15eec0c458e7bb3a1c16db91d8199/frame/system/src/extensions/check_weight.rs#L45-L66) will always check whether the extrinsic weight exceeds the configured individual dispatch class extrinsic weight, **and** whether it exceeded the remaining weights available for the block before the extrinsic is applied.

The fact that this issue exists is very concerning, and should not happen under properly configured chains. Did some of you not benchmark your extrinsics in a way that attempts to hit the worst-case complexity for your dispatchable functions? Or did some of you created a runtime that omitted the `CheckWeight` signed extension? Or did some of you misconfigure your maximum weights for each dispatch class?

In any case, as far as I can tell, this isn't an issue that requires code changes on Substrate, unless there are any outstanding issues I missed?",10658,2022-01-14T13:50:56Z,0
1252,shawntabrizi,/benchmark runtime pallet pallet_collective,8525,2021-04-05T14:13:18Z,0
1253,parity-benchapp[bot],"Finished benchmark for branch: **shawntabrizi-collective-to-account**

Benchmark: **Benchmark Runtime Pallet**

cargo run --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_collective --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/collective/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

Pallet: ""pallet_collective"", Extrinsic: ""set_members"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + m    16.44
    + n    0.219
    + p    22.65
              µs

Reads = 2 + (0 * m) + (0 * n) + (1 * p)
Writes = 2 + (0 * m) + (0 * n) + (1 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    m     n     p   mean µs  sigma µs       %
    1   100   100     728.2     10.29    1.4%
    2   100   100     710.9     2.401    0.3%
    3   100   100     717.4     1.446    0.2%
    4   100   100     741.2     10.16    1.3%
    5   100   100     759.9       7.7    1.0%
    6   100   100     788.6     15.88    2.0%
    7   100   100     796.3     11.09    1.3%
    8   100   100       803     3.675    0.4%
    9   100   100     817.2     2.703    0.3%
   10   100   100     854.5     13.72    1.6%
   11   100   100     857.8      3.06    0.3%
   12   100   100       873      2.44    0.2%
   13   100   100     888.4     3.271    0.3%
   14   100   100     898.8     2.444    0.2%
   15   100   100     916.8     3.017    0.3%
   16   100   100     932.3     2.075    0.2%
   17   100   100     947.6     5.547    0.5%
   18   100   100     953.8     2.626    0.2%
   19   100   100     975.9     4.759    0.4%
   20   100   100     999.2     4.593    0.4%
   21   100   100      1002     2.424    0.2%
   22   100   100      1024     4.748    0.4%
   23   100   100      1042     11.52    1.1%
   24   100   100      1060     10.52    0.9%
   25   100   100      1061     10.15    0.9%
   26   100   100      1083     14.08    1.2%
   27   100   100      1087     7.649    0.7%
   28   100   100      1108     5.184    0.4%
   29   100   100      1117     3.326    0.2%
   30   100   100      1138     8.624    0.7%
   31   100   100      1155     9.223    0.7%
   32   100   100      1168     10.13    0.8%
   33   100   100      1205     3.554    0.2%
   34   100   100      1237     8.246    0.6%
   35   100   100      1258     9.574    0.7%
   36   100   100      1265     3.309    0.2%
   37   100   100      1281     3.157    0.2%
   38   100   100      1297     3.842    0.2%
   39   100   100      1315     8.523    0.6%
   40   100   100      1332     8.986    0.6%
   41   100   100      1351     10.65    0.7%
   42   100   100      1361     9.477    0.6%
   43   100   100      1379     3.901    0.2%
   44   100   100      1380     3.059    0.2%
   45   100   100      1403     1.964    0.1%
   46   100   100      1429     8.268    0.5%
   47   100   100      1442      5.73    0.3%
   48   100   100      1448     4.545    0.3%
   49   100   100      1474      8.66    0.5%
   50   100   100      1487      11.3    0.7%
   51   100   100      1503     12.84    0.8%
   52   100   100      1508     9.579    0.6%
   53   100   100      1535     6.876    0.4%
   54   100   100      1555     6.871    0.4%
   55   100   100      1576     10.65    0.6%
   56   100   100      1575     9.625    0.6%
   57   100   100      1594     7.792    0.4%
   58   100   100      1604     2.648    0.1%
   59   100   100      1633      2.95    0.1%
   60   100   100      1647      9.72    0.5%
   61   100   100      1662     8.866    0.5%
   62   100   100      1671     4.979    0.2%
   63   100   100      1687     12.59    0.7%
   64   100   100      1720     10.13    0.5%
   65   100   100      1745     11.84    0.6%
   66   100   100      1743     4.426    0.2%
   67   100   100      1752     9.396    0.5%
   68   100   100      1769     4.296    0.2%
   69   100   100      1785     2.711    0.1%
   70   100   100      1805     7.396    0.4%
   71   100   100      1837     6.993    0.3%
   72   100   100      1836     7.993    0.4%
   73   100   100      1880     5.189    0.2%
   74   100   100      1875     12.35    0.6%
   75   100   100      1902     6.636    0.3%
   76   100   100      1927     10.18    0.5%
   77   100   100      1935     13.03    0.6%
   78   100   100      1965     10.05    0.5%
   79   100   100      1960     8.147    0.4%
   80   100   100      1980     6.643    0.3%
   81   100   100      1990     7.411    0.3%
   82   100   100      2025     5.603    0.2%
   83   100   100      2021     12.16    0.6%
   84   100   100      2046     8.041    0.3%
   85   100   100      2071      7.22    0.3%
   86   100   100      2073     9.974    0.4%
   87   100   100      2099      11.8    0.5%
   88   100   100      2120      15.2    0.7%
   89   100   100      2134     8.287    0.3%
   90   100   100      2162     5.538    0.2%
   91   100   100      2169     6.349    0.2%
   92   100   100      2207      13.4    0.6%
   93   100   100      2195     7.496    0.3%
   94   100   100      2226     11.99    0.5%
   95   100   100      2237     11.58    0.5%
   96   100   100      2274     8.133    0.3%
   97   100   100      2267     7.665    0.3%
   98   100   100      2287     8.092    0.3%
   99   100   100      2323     14.37    0.6%
  100     1   100      2306     9.272    0.4%
  100     2   100      2304     4.457    0.1%
  100     3   100      2327     12.29    0.5%
  100     4   100      2316     12.22    0.5%
  100     5   100      2321     11.41    0.4%
  100     6   100      2307     6.867    0.2%
  100     7   100      2302     2.332    0.1%
  100     8   100      2310     8.318    0.3%
  100     9   100      2321      9.51    0.4%
  100    10   100      2306     5.747    0.2%
  100    11   100      2314     13.85    0.5%
  100    12   100      2323     15.65    0.6%
  100    13   100      2311     10.76    0.4%
  100    14   100      2312      6.72    0.2%
  100    15   100      2323     10.45    0.4%
  100    16   100      2322     9.126    0.3%
  100    17   100      2311     11.26    0.4%
  100    18   100      2316     10.48    0.4%
  100    19   100      2314     8.684    0.3%
  100    20   100      2314     6.818    0.2%
  100    21   100      2312      5.93    0.2%
  100    22   100      2319     11.24    0.4%
  100    23   100      2322     10.82    0.4%
  100    24   100      2305     6.353    0.2%
  100    25   100      2310     6.138    0.2%
  100    26   100      2319     10.07    0.4%
  100    27   100      2314     8.231    0.3%
  100    28   100      2324     13.44    0.5%
  100    29   100      2314     8.755    0.3%
  100    30   100      2320     10.25    0.4%
  100    31   100      2338     8.072    0.3%
  100    32   100      2326     11.84    0.5%
  100    33   100      2323     11.26    0.4%
  100    34   100      2341     7.272    0.3%
  100    35   100      2328     10.76    0.4%
  100    36   100      2340     7.821    0.3%
  100    37   100      2324     12.17    0.5%
  100    38   100      2316     9.553    0.4%
  100    39   100      2318     4.992    0.2%
  100    40   100      2342     8.427    0.3%
  100    41   100      2336     11.83    0.5%
  100    42   100      2313     5.983    0.2%
  100    43   100      2342     9.404    0.4%
  100    44   100      2336     9.441    0.4%
  100    45   100      2320     6.678    0.2%
  100    46   100      2331     11.08    0.4%
  100    47   100      2332     11.58    0.4%
  100    48   100      2335     10.27    0.4%
  100    49   100      2325     14.11    0.6%
  100    50   100      2326     8.286    0.3%
  100    51   100      2337     14.19    0.6%
  100    52   100      2331     15.28    0.6%
  100    53   100      2339     10.28    0.4%
  100    54   100      2325     7.959    0.3%
  100    55   100      2330     9.021    0.3%
  100    56   100      2327     7.095    0.3%
  100    57   100      2319     6.037    0.2%
  100    58   100      2335     10.68    0.4%
  100    59   100      2315      8.09    0.3%
  100    60   100      2328     9.819    0.4%
  100    61   100      2344     8.719    0.3%
  100    62   100      2323       8.8    0.3%
  100    63   100      2325     9.161    0.3%
  100    64   100      2328     13.21    0.5%
  100    65   100      2322     6.138    0.2%
  100    66   100      2327     8.474    0.3%
  100    67   100      2329     9.588    0.4%
  100    68   100      2332     10.61    0.4%
  100    69   100      2325     3.949    0.1%
  100    70   100      2334     11.67    0.5%
  100    71   100      2322     6.305    0.2%
  100    72   100      2338     13.49    0.5%
  100    73   100      2324     10.23    0.4%
  100    74   100      2333     6.436    0.2%
  100    75   100      2324     10.18    0.4%
  100    76   100      2326     8.845    0.3%
  100    77   100      2322     6.036    0.2%
  100    78   100      2320     7.953    0.3%
  100    79   100      2343     13.54    0.5%
  100    80   100      2342     8.044    0.3%
  100    81   100      2333     10.22    0.4%
  100    82   100      2326     9.213    0.3%
  100    83   100      2334     12.29    0.5%
  100    84   100      2328     7.256    0.3%
  100    85   100      2346     12.32    0.5%
  100    86   100      2344      13.8    0.5%
  100    87   100      2329     13.97    0.6%
  100    88   100      2337     19.45    0.8%
  100    89   100      2332     10.92    0.4%
  100    90   100      2328     10.93    0.4%
  100    91   100      2347     10.79    0.4%
  100    92   100      2350      6.76    0.2%
  100    93   100      2333     13.45    0.5%
  100    94   100      2321     4.067    0.1%
  100    95   100      2335     8.003    0.3%
  100    96   100      2328     7.732    0.3%
  100    97   100      2341        11    0.4%
  100    98   100      2328      8.83    0.3%
  100    99   100      2325     9.852    0.4%
  100   100     1     80.43     0.259    0.3%
  100   100     2     105.8     0.169    0.1%
  100   100     3     129.4     0.198    0.1%
  100   100     4     151.8     0.189    0.1%
  100   100     5     173.6     0.531    0.3%
  100   100     6     196.8     0.355    0.1%
  100   100     7     218.9     0.213    0.0%
  100   100     8       241      0.86    0.3%
  100   100     9     264.1     0.498    0.1%
  100   100    10     286.5     0.349    0.1%
  100   100    11     308.2     0.516    0.1%
  100   100    12     330.8     0.555    0.1%
  100   100    13     353.5     1.073    0.3%
  100   100    14     375.6     0.729    0.1%
  100   100    15     398.3     0.779    0.1%
  100   100    16     418.7     0.896    0.2%
  100   100    17     444.3     0.818    0.1%
  100   100    18       465     1.152    0.2%
  100   100    19     489.1     0.781    0.1%
  100   100    20       512     1.194    0.2%
  100   100    21       534     0.851    0.1%
  100   100    22     556.1     0.647    0.1%
  100   100    23     579.8     1.783    0.3%
  100   100    24     599.3     1.575    0.2%
  100   100    25     626.1     1.396    0.2%
  100   100    26     648.5     1.376    0.2%
  100   100    27     671.6     0.554    0.0%
  100   100    28     690.9     1.124    0.1%
  100   100    29     718.6     5.381    0.7%
  100   100    30       736      1.69    0.2%
  100   100    31     759.9     1.471    0.1%
  100   100    32     782.9     1.903    0.2%
  100   100    33     803.9     1.567    0.1%
  100   100    34       832     5.309    0.6%
  100   100    35     858.8     10.27    1.1%
  100   100    36     873.4     1.949    0.2%
  100   100    37     895.3     2.503    0.2%
  100   100    38       918     1.464    0.1%
  100   100    39       943     3.504    0.3%
  100   100    40       963     1.621    0.1%
  100   100    41     987.9     5.749    0.5%
  100   100    42      1008     2.338    0.2%
  100   100    43      1026     1.785    0.1%
  100   100    44      1051     1.084    0.1%
  100   100    45      1074     2.423    0.2%
  100   100    46      1100     7.768    0.7%
  100   100    47      1124     3.967    0.3%
  100   100    48      1142     1.022    0.0%
  100   100    49      1186      9.57    0.8%
  100   100    50      1191     2.396    0.2%
  100   100    51      1218     5.171    0.4%
  100   100    52      1235     1.666    0.1%
  100   100    53      1266     7.556    0.5%
  100   100    54      1280     2.435    0.1%
  100   100    55      1305     2.872    0.2%
  100   100    56      1333     7.884    0.5%
  100   100    57      1354     6.116    0.4%
  100   100    58      1373     2.854    0.2%
  100   100    59      1394       3.9    0.2%
  100   100    60      1413     1.327    0.0%
  100   100    61      1443     8.243    0.5%
  100   100    62      1462     3.668    0.2%
  100   100    63      1482     9.017    0.6%
  100   100    64      1515     9.459    0.6%
  100   100    65      1534     7.619    0.4%
  100   100    66      1555     11.03    0.7%
  100   100    67      1579     6.628    0.4%
  100   100    68      1605     9.807    0.6%
  100   100    69      1628     9.084    0.5%
  100   100    70      1644     9.725    0.5%
  100   100    71      1667     6.132    0.3%
  100   100    72      1690     2.909    0.1%
  100   100    73      1709     2.363    0.1%
  100   100    74      1725     7.208    0.4%
  100   100    75      1763     7.715    0.4%
  100   100    76      1785     12.16    0.6%
  100   100    77      1805     7.895    0.4%
  100   100    78      1834     11.48    0.6%
  100   100    79      1848     8.983    0.4%
  100   100    80      1876     8.149    0.4%
  100   100    81      1894     5.067    0.2%
  100   100    82      1927     12.08    0.6%
  100   100    83      1947     11.12    0.5%
  100   100    84      1964     8.035    0.4%
  100   100    85      1993     10.75    0.5%
  100   100    86      2018     11.36    0.5%
  100   100    87      2037     9.621    0.4%
  100   100    88      2062     6.901    0.3%
  100   100    89      2078     12.31    0.5%
  100   100    90      2100       7.5    0.3%
  100   100    91      2114     3.409    0.1%
  100   100    92      2152     9.601    0.4%
  100   100    93      2176     17.55    0.8%
  100   100    94      2194     11.35    0.5%
  100   100    95      2214      6.62    0.2%
  100   100    96      2236     8.898    0.3%
  100   100    97      2264     7.781    0.3%
  100   100    98      2287     5.893    0.2%
  100   100    99      2302     5.225    0.2%
  100   100   100      2334     10.88    0.4%

Quality and confidence:
param     error
m          0.01
n          0.01
p          0.01

Model:
Time ~=        0
    + m    16.66
    + n    0.065
    + p    22.68
              µs

Reads = 2 + (0 * m) + (0 * n) + (1 * p)
Writes = 2 + (0 * m) + (0 * n) + (1 * p)
Pallet: ""pallet_collective"", Extrinsic: ""execute"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.27
    + b    0.002
    + m    0.115
              µs

Reads = 1 + (0 * b) + (0 * m)
Writes = 0 + (0 * b) + (0 * m)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m   mean µs  sigma µs       %
    1   100     36.38     0.083    0.2%
   21   100     36.89     0.081    0.2%
   41   100     36.86     0.093    0.2%
   61   100     36.84     0.105    0.2%
   81   100     36.92     0.066    0.1%
  101   100     36.98     0.109    0.2%
  121   100     37.11     0.107    0.2%
  141   100     37.42     0.156    0.4%
  161   100     37.41     0.073    0.1%
  181   100     37.37     0.105    0.2%
  201   100     37.46     0.075    0.2%
  221   100      37.5     0.099    0.2%
  241   100     37.56     0.101    0.2%
  261   100      37.7     0.069    0.1%
  281   100     37.83     0.067    0.1%
  301   100     37.93     0.146    0.3%
  321   100     37.72     0.106    0.2%
  341   100     37.72     0.077    0.2%
  361   100     37.89     0.099    0.2%
  381   100     37.92     0.138    0.3%
  401   100     37.95     0.085    0.2%
  421   100     38.05     0.086    0.2%
  441   100     38.04     0.105    0.2%
  461   100     38.27     0.153    0.3%
  481   100      38.3     0.086    0.2%
  501   100     38.19     0.112    0.2%
  521   100     38.49       0.1    0.2%
  541   100     38.65     0.075    0.1%
  561   100     38.74     0.095    0.2%
  581   100     38.72     0.066    0.1%
  601   100     38.58     0.046    0.1%
  621   100     38.69     0.098    0.2%
  641   100     38.92     0.099    0.2%
  661   100     38.99     0.104    0.2%
  681   100     38.97     0.071    0.1%
  701   100     38.98     0.097    0.2%
  721   100      38.9     0.104    0.2%
  741   100     38.95     0.092    0.2%
  761   100     38.88     0.109    0.2%
  781   100     38.97     0.119    0.3%
  801   100     39.24     0.092    0.2%
  821   100     39.23     0.076    0.1%
  841   100     39.21     0.076    0.1%
  861   100      39.2     0.122    0.3%
  881   100     39.31     0.083    0.2%
  901   100     39.34     0.089    0.2%
  921   100     39.73     0.104    0.2%
  941   100     39.62     0.126    0.3%
  961   100     39.56     0.105    0.2%
  981   100     39.76     0.122    0.3%
 1001   100     39.72     0.091    0.2%
 1021   100     39.91     0.084    0.2%
 1024     1     28.92     0.043    0.1%
 1024     2      29.1     0.096    0.3%
 1024     3      29.2     0.045    0.1%
 1024     4     29.48     0.102    0.3%
 1024     5     29.65     0.078    0.2%
 1024     6     29.65     0.058    0.1%
 1024     7     29.95     0.113    0.3%
 1024     8     29.85     0.112    0.3%
 1024     9     30.27     0.032    0.1%
 1024    10     30.26     0.043    0.1%
 1024    11     30.31     0.057    0.1%
 1024    12     30.25     0.094    0.3%
 1024    13      30.5     0.053    0.1%
 1024    14     30.56     0.044    0.1%
 1024    15     30.67     0.045    0.1%
 1024    16     30.56     0.062    0.2%
 1024    17     30.77     0.047    0.1%
 1024    18     30.84     0.105    0.3%
 1024    19     30.97     0.052    0.1%
 1024    20     31.03     0.043    0.1%
 1024    21     31.23     0.082    0.2%
 1024    22     31.28     0.074    0.2%
 1024    23     31.36     0.082    0.2%
 1024    24     31.52     0.091    0.2%
 1024    25     31.79     0.031    0.0%
 1024    26     31.71     0.077    0.2%
 1024    27     32.03     0.086    0.2%
 1024    28     32.21     0.065    0.2%
 1024    29     32.17     0.035    0.1%
 1024    30     32.27     0.138    0.4%
 1024    31     32.29     0.052    0.1%
 1024    32      32.7     0.087    0.2%
 1024    33     33.07     0.069    0.2%
 1024    34     33.45     0.088    0.2%
 1024    35     33.26      0.12    0.3%
 1024    36     33.43     0.138    0.4%
 1024    37     33.44     0.095    0.2%
 1024    38     33.59     0.073    0.2%
 1024    39     33.49     0.086    0.2%
 1024    40     33.81     0.086    0.2%
 1024    41     33.79     0.074    0.2%
 1024    42      33.9     0.091    0.2%
 1024    43     34.22     0.104    0.3%
 1024    44     34.08      0.06    0.1%
 1024    45      34.3     0.062    0.1%
 1024    46     34.24     0.063    0.1%
 1024    47     34.37     0.076    0.2%
 1024    48     34.47     0.067    0.1%
 1024    49     34.27     0.071    0.2%
 1024    50     34.77     0.107    0.3%
 1024    51     35.16     0.087    0.2%
 1024    52      34.7     0.114    0.3%
 1024    53     35.25     0.079    0.2%
 1024    54      35.3     0.091    0.2%
 1024    55      35.3     0.079    0.2%
 1024    56     35.52     0.107    0.3%
 1024    57     35.72     0.075    0.2%
 1024    58      35.7     0.057    0.1%
 1024    59     35.71     0.089    0.2%
 1024    60     35.73      0.09    0.2%
 1024    61     35.99     0.072    0.2%
 1024    62     36.24     0.147    0.4%
 1024    63      36.2     0.099    0.2%
 1024    64     36.63     0.085    0.2%
 1024    65     36.37     0.061    0.1%
 1024    66     36.83     0.138    0.3%
 1024    67     36.66     0.119    0.3%
 1024    68     36.95     0.117    0.3%
 1024    69     37.26     0.102    0.2%
 1024    70     36.96     0.058    0.1%
 1024    71     37.21     0.038    0.1%
 1024    72      37.4     0.051    0.1%
 1024    73     37.54     0.099    0.2%
 1024    74     37.58     0.059    0.1%
 1024    75     37.62     0.108    0.2%
 1024    76     37.63     0.081    0.2%
 1024    77     38.17      0.36    0.9%
 1024    78     38.13     0.093    0.2%
 1024    79     38.19     0.085    0.2%
 1024    80     38.32     0.083    0.2%
 1024    81     38.39     0.118    0.3%
 1024    82     38.39     0.143    0.3%
 1024    83     38.61     0.125    0.3%
 1024    84     38.79     0.115    0.2%
 1024    85     38.61     0.102    0.2%
 1024    86     38.87     0.166    0.4%
 1024    87     39.07     0.065    0.1%
 1024    88      39.1     0.088    0.2%
 1024    89     39.13     0.058    0.1%
 1024    90     39.26     0.095    0.2%
 1024    91     39.54     0.053    0.1%
 1024    92     39.46     0.089    0.2%
 1024    93     39.47     0.133    0.3%
 1024    94     39.62     0.099    0.2%
 1024    95     39.95     0.075    0.1%
 1024    96     40.05     0.123    0.3%
 1024    97     40.14     0.117    0.2%
 1024    98     40.23     0.101    0.2%
 1024    99     39.89     0.106    0.2%
 1024   100     39.89     0.135    0.3%

Quality and confidence:
param     error
b             0
m             0

Model:
Time ~=     25.4
    + b    0.004
    + m    0.112
              µs

Reads = 1 + (0 * b) + (0 * m)
Writes = 0 + (0 * b) + (0 * m)
Pallet: ""pallet_collective"", Extrinsic: ""propose_execute"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.15
    + b    0.003
    + m    0.219
              µs

Reads = 2 + (0 * b) + (0 * m)
Writes = 0 + (0 * b) + (0 * m)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m   mean µs  sigma µs       %
    1   100     51.78     0.069    0.1%
   21   100     52.18     0.119    0.2%
   41   100     52.25     0.077    0.1%
   61   100     52.37     0.095    0.1%
   81   100     52.37     0.085    0.1%
  101   100     52.58      0.15    0.2%
  121   100     52.65     0.159    0.3%
  141   100     52.67     0.117    0.2%
  161   100     52.73     0.127    0.2%
  181   100     52.74     0.062    0.1%
  201   100     52.91     0.136    0.2%
  221   100     52.93     0.146    0.2%
  241   100     52.96     0.098    0.1%
  261   100     53.08     0.107    0.2%
  281   100      53.3     0.124    0.2%
  301   100     53.22     0.072    0.1%
  321   100     53.24     0.143    0.2%
  341   100     53.38     0.092    0.1%
  361   100     53.43     0.097    0.1%
  381   100     53.63     0.094    0.1%
  401   100     53.68     0.102    0.1%
  421   100     53.52     0.067    0.1%
  441   100     53.71     0.134    0.2%
  461   100     53.65     0.112    0.2%
  481   100     53.76     0.123    0.2%
  501   100     53.91      0.06    0.1%
  521   100     53.83     0.075    0.1%
  541   100     53.91     0.078    0.1%
  561   100     54.27     0.109    0.2%
  581   100     54.18     0.123    0.2%
  601   100     54.27     0.074    0.1%
  621   100     54.21      0.15    0.2%
  641   100     54.51     0.133    0.2%
  661   100     54.42     0.097    0.1%
  681   100     54.91     0.407    0.7%
  701   100     55.22     0.481    0.8%
  721   100     54.64     0.082    0.1%
  741   100      54.6     0.174    0.3%
  761   100     54.75     0.073    0.1%
  781   100      54.8     0.101    0.1%
  801   100     55.01     0.131    0.2%
  821   100     55.04      0.13    0.2%
  841   100      55.1      0.16    0.2%
  861   100     55.24     0.118    0.2%
  881   100     55.16     0.114    0.2%
  901   100     55.26     0.098    0.1%
  921   100     55.33     0.083    0.1%
  941   100      55.3     0.104    0.1%
  961   100     55.54     0.142    0.2%
  981   100      55.5     0.113    0.2%
 1001   100     55.69     0.134    0.2%
 1021   100     55.87     0.121    0.2%
 1024     1     34.34     0.116    0.3%
 1024     2     34.64     0.082    0.2%
 1024     3     34.72     0.083    0.2%
 1024     4     35.28     0.133    0.3%
 1024     5     35.62     0.067    0.1%
 1024     6     35.61     0.103    0.2%
 1024     7     36.02      0.09    0.2%
 1024     8     35.92     0.053    0.1%
 1024     9     36.62     0.111    0.3%
 1024    10     36.55     0.058    0.1%
 1024    11     36.92     0.115    0.3%
 1024    12     37.17     0.075    0.2%
 1024    13     37.43     0.107    0.2%
 1024    14     37.54     0.065    0.1%
 1024    15     37.82     0.108    0.2%
 1024    16     37.76     0.069    0.1%
 1024    17     38.19     0.066    0.1%
 1024    18     38.26     0.111    0.2%
 1024    19     38.45      0.08    0.2%
 1024    20     38.48     0.116    0.3%
 1024    21     38.76     0.066    0.1%
 1024    22      38.9     0.071    0.1%
 1024    23     39.06     0.076    0.1%
 1024    24     39.07     0.055    0.1%
 1024    25      39.6     0.045    0.1%
 1024    26     40.38     0.353    0.8%
 1024    27     40.12     0.148    0.3%
 1024    28     40.43     0.081    0.2%
 1024    29     40.67      0.11    0.2%
 1024    30     40.38     0.112    0.2%
 1024    31     40.79     0.102    0.2%
 1024    32     41.31     0.113    0.2%
 1024    33     42.22     0.135    0.3%
 1024    34     42.63     0.066    0.1%
 1024    35     42.53     0.113    0.2%
 1024    36     42.49     0.091    0.2%
 1024    37     42.85     0.075    0.1%
 1024    38     43.23     0.062    0.1%
 1024    39     44.23     0.099    0.2%
 1024    40     44.79     0.187    0.4%
 1024    41     43.53     0.062    0.1%
 1024    42     43.83       0.1    0.2%
 1024    43     44.45     0.118    0.2%
 1024    44     44.19     0.092    0.2%
 1024    45     44.52     0.079    0.1%
 1024    46     45.42     0.503    1.1%
 1024    47     45.05     0.069    0.1%
 1024    48     45.24     0.123    0.2%
 1024    49     45.11     0.106    0.2%
 1024    50     45.52     0.165    0.3%
 1024    51      46.3     0.138    0.2%
 1024    52     45.92     0.108    0.2%
 1024    53     46.61     0.083    0.1%
 1024    54     46.71     0.186    0.3%
 1024    55     47.84     0.143    0.2%
 1024    56     46.98     0.077    0.1%
 1024    57     47.29     0.105    0.2%
 1024    58     47.16     0.086    0.1%
 1024    59     47.29     0.084    0.1%
 1024    60     47.46     0.078    0.1%
 1024    61     48.24     0.076    0.1%
 1024    62     48.48     0.135    0.2%
 1024    63     48.63     0.136    0.2%
 1024    64      48.9     0.096    0.1%
 1024    65     48.88     0.057    0.1%
 1024    66      49.2     0.064    0.1%
 1024    67     49.13     0.067    0.1%
 1024    68     49.72     0.142    0.2%
 1024    69     50.19     0.118    0.2%
 1024    70      49.7     0.074    0.1%
 1024    71     50.13     0.093    0.1%
 1024    72     50.35     0.081    0.1%
 1024    73     50.36     0.106    0.2%
 1024    74     50.66     0.116    0.2%
 1024    75     50.73     0.171    0.3%
 1024    76     51.01     0.092    0.1%
 1024    77     51.33     0.099    0.1%
 1024    78     51.92     0.093    0.1%
 1024    79     51.93      0.12    0.2%
 1024    80     52.29     0.143    0.2%
 1024    81     52.27     0.174    0.3%
 1024    82     52.51     0.031    0.0%
 1024    83     52.95     0.052    0.0%
 1024    84     53.09     0.139    0.2%
 1024    85      53.1      0.14    0.2%
 1024    86     53.24     0.056    0.1%
 1024    87     53.54      0.15    0.2%
 1024    88     53.63     0.103    0.1%
 1024    89     53.88     0.174    0.3%
 1024    90     54.01     0.219    0.4%
 1024    91     54.54     0.141    0.2%
 1024    92     54.47     0.084    0.1%
 1024    93      54.6     0.079    0.1%
 1024    94     54.54     0.097    0.1%
 1024    95     55.14     0.134    0.2%
 1024    96     55.32     0.136    0.2%
 1024    97     55.79     0.113    0.2%
 1024    98     55.51     0.112    0.2%
 1024    99     55.56     0.102    0.1%
 1024   100     55.65     0.071    0.1%

Quality and confidence:
param     error
b             0
m             0

Model:
Time ~=    30.32
    + b    0.004
    + m    0.216
              µs

Reads = 2 + (0 * b) + (0 * m)
Writes = 0 + (0 * b) + (0 * m)
Pallet: ""pallet_collective"", Extrinsic: ""propose_proposed"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.73
    + b    0.007
    + m     0.11
    + p    0.589
              µs

Reads = 4 + (0 * b) + (0 * m) + (0 * p)
Writes = 4 + (0 * b) + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m     p   mean µs  sigma µs       %
    1   100   100     117.3     0.226    0.1%
   21   100   100     117.9     0.213    0.1%
   41   100   100     117.9     0.286    0.2%
   61   100   100     117.8     0.255    0.2%
   81   100   100     118.7     0.165    0.1%
  101   100   100     118.4     0.152    0.1%
  121   100   100     119.1     0.764    0.6%
  141   100   100     118.7      0.23    0.1%
  161   100   100     118.4     0.187    0.1%
  181   100   100     118.7     0.126    0.1%
  201   100   100     118.7     0.198    0.1%
  221   100   100     118.9     0.218    0.1%
  241   100   100     119.1     0.251    0.2%
  261   100   100     119.4     0.271    0.2%
  281   100   100     119.9     0.169    0.1%
  301   100   100     119.7     0.258    0.2%
  321   100   100     119.6     0.134    0.1%
  341   100   100     120.1      0.26    0.2%
  361   100   100     120.2     0.165    0.1%
  381   100   100     120.1     0.313    0.2%
  401   100   100     120.7     0.164    0.1%
  421   100   100     120.5     0.172    0.1%
  441   100   100     120.7     0.297    0.2%
  461   100   100       121     0.268    0.2%
  481   100   100     121.6     0.191    0.1%
  501   100   100     121.7     0.218    0.1%
  521   100   100     120.6     0.118    0.0%
  541   100   100     120.3     0.207    0.1%
  561   100   100     121.6      0.25    0.2%
  581   100   100     122.1     0.266    0.2%
  601   100   100     121.3     0.217    0.1%
  621   100   100     121.9     0.142    0.1%
  641   100   100     122.2     0.211    0.1%
  661   100   100     122.3      0.28    0.2%
  681   100   100     122.6     0.235    0.1%
  701   100   100       123     0.253    0.2%
  721   100   100       123     0.122    0.0%
  741   100   100     123.7     0.197    0.1%
  761   100   100     123.6     0.461    0.3%
  781   100   100     123.7     0.198    0.1%
  801   100   100     125.9     4.277    3.3%
  821   100   100     129.6     5.309    4.0%
  841   100   100       122     1.629    1.3%
  861   100   100     123.4     0.341    0.2%
  881   100   100       124     0.433    0.3%
  901   100   100     123.6     0.321    0.2%
  921   100   100     122.7      2.83    2.3%
  941   100   100     124.8     0.344    0.2%
  961   100   100     122.5      3.33    2.7%
  981   100   100     124.1     0.504    0.4%
 1001   100   100     124.8     0.211    0.1%
 1021   100   100     124.9     0.379    0.3%
 1024     2   100     114.5     0.186    0.1%
 1024     3   100     115.1     0.388    0.3%
 1024     4   100     115.3     0.183    0.1%
 1024     5   100     114.3     0.285    0.2%
 1024     6   100     115.2     0.152    0.1%
 1024     7   100     115.3     0.119    0.1%
 1024     8   100     115.2      0.24    0.2%
 1024     9   100     115.5     0.256    0.2%
 1024    10   100       116     0.229    0.1%
 1024    11   100     114.4     1.185    1.0%
 1024    12   100     114.8     1.256    1.0%
 1024    13   100     115.7     0.234    0.2%
 1024    14   100     115.2     0.411    0.3%
 1024    15   100     116.2     0.203    0.1%
 1024    16   100       115      1.04    0.9%
 1024    17   100       116     0.186    0.1%
 1024    18   100     115.7     0.517    0.4%
 1024    19   100     113.8     1.629    1.4%
 1024    20   100     116.5     0.446    0.3%
 1024    21   100     113.7     1.595    1.4%
 1024    22   100     115.1     1.844    1.6%
 1024    23   100       115     2.036    1.7%
 1024    24   100     114.5     1.667    1.4%
 1024    25   100       115     1.475    1.2%
 1024    26   100     114.3     1.652    1.4%
 1024    27   100     115.1     1.546    1.3%
 1024    28   100     115.6     1.797    1.5%
 1024    29   100     115.3     1.631    1.4%
 1024    30   100     115.2     1.643    1.4%
 1024    31   100       116     1.988    1.7%
 1024    32   100     117.2     0.339    0.2%
 1024    33   100     115.6     1.844    1.5%
 1024    34   100     118.1     1.072    0.9%
 1024    35   100     117.1     1.033    0.8%
 1024    36   100     117.6     1.142    0.9%
 1024    37   100     118.5     0.261    0.2%
 1024    38   100     116.5     1.186    1.0%
 1024    39   100     117.9     1.438    1.2%
 1024    40   100     115.3     1.736    1.5%
 1024    41   100     117.3     1.863    1.5%
 1024    42   100       118     0.983    0.8%
 1024    43   100     118.9     1.202    1.0%
 1024    44   100     117.3     1.495    1.2%
 1024    45   100     117.9     1.548    1.3%
 1024    46   100     119.5     0.181    0.1%
 1024    47   100     119.4     0.265    0.2%
 1024    48   100     119.6     0.424    0.3%
 1024    49   100     119.1     0.854    0.7%
 1024    50   100     120.4     0.361    0.2%
 1024    51   100     119.8     0.356    0.2%
 1024    52   100     119.9     0.975    0.8%
 1024    53   100     119.5     1.144    0.9%
 1024    54   100     123.2     4.826    3.9%
 1024    55   100     123.2     0.308    0.2%
 1024    56   100     120.8     1.803    1.4%
 1024    57   100     120.5     0.198    0.1%
 1024    58   100     120.4     0.245    0.2%
 1024    59   100     119.6     1.089    0.9%
 1024    60   100     120.3     0.323    0.2%
 1024    61   100     121.1     0.157    0.1%
 1024    62   100     120.5     0.295    0.2%
 1024    63   100     120.5     1.324    1.0%
 1024    64   100     120.3     0.338    0.2%
 1024    65   100     120.6     0.278    0.2%
 1024    66   100     121.1     0.161    0.1%
 1024    67   100     121.3      0.38    0.3%
 1024    68   100       121     0.377    0.3%
 1024    69   100     121.6     0.375    0.3%
 1024    70   100     121.1     1.181    0.9%
 1024    71   100     119.2     1.752    1.4%
 1024    72   100     122.1     0.162    0.1%
 1024    73   100     121.4     0.537    0.4%
 1024    74   100     121.5      0.37    0.3%
 1024    75   100     121.9     0.224    0.1%
 1024    76   100     121.4     1.583    1.3%
 1024    77   100     119.9     1.703    1.4%
 1024    78   100     122.4      1.11    0.9%
 1024    79   100     122.3     1.103    0.9%
 1024    80   100     122.3     0.297    0.2%
 1024    81   100     123.3     0.361    0.2%
 1024    82   100     121.8     1.962    1.6%
 1024    83   100     123.5     0.309    0.2%
 1024    84   100     123.4     0.269    0.2%
 1024    85   100     123.4     0.266    0.2%
 1024    86   100     123.7     0.384    0.3%
 1024    87   100     124.1     0.282    0.2%
 1024    88   100     124.2     0.317    0.2%
 1024    89   100     124.1     0.245    0.1%
 1024    90   100     124.3     0.178    0.1%
 1024    91   100     124.6     0.347    0.2%
 1024    92   100     123.6     0.272    0.2%
 1024    93   100     124.8     0.341    0.2%
 1024    94   100     124.5     0.157    0.1%
 1024    95   100     124.7     0.361    0.2%
 1024    96   100     125.1     0.313    0.2%
 1024    97   100     124.7     0.187    0.1%
 1024    98   100     124.9     0.205    0.1%
 1024    99   100     124.6     0.277    0.2%
 1024   100     1     62.76     0.086    0.1%
 1024   100     2     66.12     0.116    0.1%
 1024   100     3     66.96     0.196    0.2%
 1024   100     4     67.24     0.169    0.2%
 1024   100     5     67.73     0.132    0.1%
 1024   100     6     69.19     0.146    0.2%
 1024   100     7     69.38     0.108    0.1%
 1024   100     8     70.51     0.166    0.2%
 1024   100     9     71.65     0.256    0.3%
 1024   100    10     72.14     0.114    0.1%
 1024   100    11     72.73     0.175    0.2%
 1024   100    12     73.31     0.126    0.1%
 1024   100    13     74.26     0.125    0.1%
 1024   100    14     75.45     0.171    0.2%
 1024   100    15     75.65     0.184    0.2%
 1024   100    16     76.11     0.128    0.1%
 1024   100    17     77.24     0.103    0.1%
 1024   100    18     77.61     0.103    0.1%
 1024   100    19     78.91     0.143    0.1%
 1024   100    20     79.39     0.186    0.2%
 1024   100    21     80.19     0.093    0.1%
 1024   100    22     80.95      0.14    0.1%
 1024   100    23     81.29     0.263    0.3%
 1024   100    24     81.81      0.16    0.1%
 1024   100    25      82.3     0.148    0.1%
 1024   100    26     82.93     0.176    0.2%
 1024   100    27     83.38     0.143    0.1%
 1024   100    28     83.57     0.235    0.2%
 1024   100    29     84.63     0.136    0.1%
 1024   100    30     85.58     0.245    0.2%
 1024   100    31     85.79     0.295    0.3%
 1024   100    32     86.59     0.184    0.2%
 1024   100    33     87.48     0.182    0.2%
 1024   100    34     88.37     0.198    0.2%
 1024   100    35     88.69      0.09    0.1%
 1024   100    36     89.53     0.132    0.1%
 1024   100    37     89.95      0.21    0.2%
 1024   100    38     90.24     0.149    0.1%
 1024   100    39     91.89     0.197    0.2%
 1024   100    40     92.27     0.172    0.1%
 1024   100    41     92.41     0.162    0.1%
 1024   100    42     93.62     0.125    0.1%
 1024   100    43     93.54     0.208    0.2%
 1024   100    44     94.31     0.156    0.1%
 1024   100    45      94.9     0.202    0.2%
 1024   100    46     95.73     0.187    0.1%
 1024   100    47     96.06     0.267    0.2%
 1024   100    48     96.84     0.202    0.2%
 1024   100    49     97.19     0.321    0.3%
 1024   100    50     98.26     0.204    0.2%
 1024   100    51     98.82     0.135    0.1%
 1024   100    52     99.34     0.289    0.2%
 1024   100    53     98.99     0.162    0.1%
 1024   100    54     100.8     0.192    0.1%
 1024   100    55     101.5     0.208    0.2%
 1024   100    56     101.6     0.282    0.2%
 1024   100    57     102.3     0.229    0.2%
 1024   100    58     102.3       0.1    0.0%
 1024   100    59     103.4     0.109    0.1%
 1024   100    60     103.3      0.13    0.1%
 1024   100    61     104.3     0.184    0.1%
 1024   100    62     103.8     0.196    0.1%
 1024   100    63     104.4     0.101    0.0%
 1024   100    64     105.6     0.264    0.2%
 1024   100    65     105.8     0.192    0.1%
 1024   100    66     106.2     0.225    0.2%
 1024   100    67     106.8     0.193    0.1%
 1024   100    68     107.2     0.262    0.2%
 1024   100    69     107.9     0.196    0.1%
 1024   100    70     108.2       0.2    0.1%
 1024   100    71     108.9     0.121    0.1%
 1024   100    72     109.9     0.269    0.2%
 1024   100    73     110.3     0.248    0.2%
 1024   100    74     110.7     0.163    0.1%
 1024   100    75     111.4     0.201    0.1%
 1024   100    76     111.7     0.191    0.1%
 1024   100    77     112.3     0.157    0.1%
 1024   100    78     113.2     0.192    0.1%
 1024   100    79     113.1     0.326    0.2%
 1024   100    80     114.9     0.156    0.1%
 1024   100    81     114.8     0.207    0.1%
 1024   100    82     115.1     0.204    0.1%
 1024   100    83     115.8     0.237    0.2%
 1024   100    84     116.1     0.165    0.1%
 1024   100    85     117.7     0.169    0.1%
 1024   100    86     117.2     0.247    0.2%
 1024   100    87     118.6     0.188    0.1%
 1024   100    88     118.5     0.173    0.1%
 1024   100    89     118.7     0.256    0.2%
 1024   100    90     119.6     0.218    0.1%
 1024   100    91     120.7     0.464    0.3%
 1024   100    92     120.3     0.372    0.3%
 1024   100    93       121     0.383    0.3%
 1024   100    94     121.8     0.726    0.5%
 1024   100    95     122.4      0.27    0.2%
 1024   100    96     123.5     0.261    0.2%
 1024   100    97     124.3     0.185    0.1%
 1024   100    98     121.9     1.531    1.2%
 1024   100    99     122.4     1.316    1.0%
 1024   100   100     123.5     1.564    1.2%

Quality and confidence:
param     error
b             0
m         0.001
p         0.001

Model:
Time ~=    47.13
    + b    0.008
    + m    0.123
    + p     0.58
              µs

Reads = 4 + (0 * b) + (0 * m) + (0 * p)
Writes = 4 + (0 * b) + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""vote"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.87
    + m    0.319
              µs

Reads = 2 + (0 * m)
Writes = 1 + (0 * m)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    m   mean µs  sigma µs       %
    5     47.62      1.28    2.6%
    6     46.62     2.396    5.1%
    7     48.85     0.232    0.4%
    8     49.23     0.159    0.3%
    9     48.42     1.951    4.0%
   10     49.67     0.269    0.5%
   11      49.7     0.225    0.4%
   12     48.43     2.493    5.1%
   13     50.32      0.25    0.4%
   14     50.99     0.114    0.2%
   15     51.35     0.072    0.1%
   16     51.44     0.177    0.3%
   17      52.7     0.226    0.4%
   18     51.23     1.571    3.0%
   19     51.58     1.393    2.7%
   20     50.66     2.013    3.9%
   21     51.55     2.032    3.9%
   22     50.89     2.346    4.6%
   23     51.48     2.534    4.9%
   24     54.15     0.439    0.8%
   25     54.78      0.17    0.3%
   26      51.8      2.44    4.7%
   27     51.59     2.579    4.9%
   28      53.5     2.431    4.5%
   29     52.49     2.641    5.0%
   30     55.31      1.54    2.7%
   31     53.83     2.477    4.6%
   32     52.83     2.617    4.9%
   33     56.08     1.597    2.8%
   34     55.25     2.457    4.4%
   35     53.82     2.358    4.3%
   36     53.56     2.182    4.0%
   37     55.24     2.269    4.1%
   38     53.89      2.23    4.1%
   39     55.18     2.567    4.6%
   40     54.13     1.895    3.5%
   41     59.11     0.216    0.3%
   42     56.52     2.741    4.8%
   43     59.64     1.507    2.5%
   44     58.43     2.533    4.3%
   45     58.77       2.5    4.2%
   46     61.32     1.274    2.0%
   47     60.94     1.977    3.2%
   48     61.05     2.374    3.8%
   49     60.97     2.437    3.9%
   50     60.97     2.432    3.9%
   51     62.69      1.58    2.5%
   52     62.21     2.107    3.3%
   53     63.69     0.161    0.2%
   54     63.22      1.75    2.7%
   55     64.47     0.193    0.2%
   56     63.99     2.137    3.3%
   57      66.1     0.795    1.2%
   58     66.62     0.227    0.3%
   59     66.42     0.563    0.8%
   60     66.41     0.477    0.7%
   61     65.18     0.193    0.2%
   62     65.43     0.172    0.2%
   63     65.95     0.187    0.2%
   64        66     0.207    0.3%
   65      66.7     0.199    0.2%
   66     66.65     0.142    0.2%
   67     67.23     0.226    0.3%
   68     67.12     0.306    0.4%
   69     67.52     0.257    0.3%
   70     67.54     0.208    0.3%
   71     68.12     0.186    0.2%
   72     68.56     0.124    0.1%
   73      68.5     0.179    0.2%
   74     68.94     0.338    0.4%
   75     68.95     0.162    0.2%
   76     69.58     0.174    0.2%
   77     69.42     0.111    0.1%
   78     69.62     0.194    0.2%
   79     70.32     0.147    0.2%
   80     69.99     0.269    0.3%
   81     70.46     0.146    0.2%
   82      70.5     0.162    0.2%
   83     70.92     0.189    0.2%
   84     71.28     0.203    0.2%
   85     71.61     0.192    0.2%
   86     74.14     0.164    0.2%
   87     74.65     0.223    0.2%
   88     74.36     0.121    0.1%
   89     74.97     0.216    0.2%
   90     75.03     0.296    0.3%
   91     75.38     0.218    0.2%
   92     75.61     0.203    0.2%
   93     76.02      0.15    0.1%
   94     76.02     0.194    0.2%
   95     76.37     0.179    0.2%
   96     76.43     0.151    0.1%
   97     76.93     0.181    0.2%
   98     77.27     0.148    0.1%
   99     76.95      0.31    0.4%
  100     79.48     0.504    0.6%

Quality and confidence:
param     error
m         0.002

Model:
Time ~=    44.92
    + m    0.328
              µs

Reads = 2 + (0 * m)
Writes = 1 + (0 * m)
Pallet: ""pallet_collective"", Extrinsic: ""close_early_disapproved"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.99
    + m    0.207
    + p    0.543
              µs

Reads = 3 + (0 * m) + (0 * p)
Writes = 3 + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    m     p   mean µs  sigma µs       %
    4   100     104.4     0.815    0.7%
    5   100     105.4     0.531    0.5%
    6   100     105.4     0.593    0.5%
    7   100     103.3     0.153    0.1%
    8   100     103.2     0.168    0.1%
    9   100       104     0.262    0.2%
   10   100       104      0.32    0.3%
   11   100     104.4     0.231    0.2%
   12   100     104.3      0.22    0.2%
   13   100     104.4     0.213    0.2%
   14   100     104.9     0.243    0.2%
   15   100     105.4     0.271    0.2%
   16   100     105.3     0.361    0.3%
   17   100     105.8     0.273    0.2%
   18   100     105.3     0.205    0.1%
   19   100     105.7     0.222    0.2%
   20   100     106.3     0.267    0.2%
   21   100     106.7      0.22    0.2%
   22   100       107     0.228    0.2%
   23   100     106.9     0.101    0.0%
   24   100       107     0.216    0.2%
   25   100     107.3     0.212    0.1%
   26   100     107.5     0.088    0.0%
   27   100     107.8     0.254    0.2%
   28   100     107.5     0.296    0.2%
   29   100     108.5     0.246    0.2%
   30   100     108.7     0.312    0.2%
   31   100       109     0.282    0.2%
   32   100       108     0.256    0.2%
   33   100     109.1     0.272    0.2%
   34   100     109.5     0.191    0.1%
   35   100     109.7     0.121    0.1%
   36   100     111.1     0.857    0.7%
   37   100     109.4       0.2    0.1%
   38   100       110     0.151    0.1%
   39   100     109.9     0.335    0.3%
   40   100     110.6     0.167    0.1%
   41   100     111.1     0.119    0.1%
   42   100     111.2     0.141    0.1%
   43   100     111.9     0.087    0.0%
   44   100     111.5     0.127    0.1%
   45   100     112.1     0.148    0.1%
   46   100     112.6     0.169    0.1%
   47   100     112.5     0.167    0.1%
   48   100     112.7     0.236    0.2%
   49   100     113.1     0.203    0.1%
   50   100       113     0.341    0.3%
   51   100     113.2      0.25    0.2%
   52   100     113.4     0.228    0.2%
   53   100     113.7     0.266    0.2%
   54   100     114.1     0.155    0.1%
   55   100     114.1     0.281    0.2%
   56   100     113.6     0.182    0.1%
   57   100     114.5     0.253    0.2%
   58   100     114.7     0.226    0.1%
   59   100     114.4     0.274    0.2%
   60   100     114.7     0.135    0.1%
   61   100     115.4     0.193    0.1%
   62   100     115.5     0.311    0.2%
   63   100     116.1      0.24    0.2%
   64   100     115.6     0.212    0.1%
   65   100     115.9     0.294    0.2%
   66   100     116.3      0.11    0.0%
   67   100     116.6     0.163    0.1%
   68   100     116.5     0.189    0.1%
   69   100     116.7     0.271    0.2%
   70   100       117     0.136    0.1%
   71   100     117.1     0.324    0.2%
   72   100     116.8     0.363    0.3%
   73   100     117.5     0.255    0.2%
   74   100     117.6      0.29    0.2%
   75   100     117.4     0.215    0.1%
   76   100     117.9     0.242    0.2%
   77   100       118     0.186    0.1%
   78   100     118.4     0.251    0.2%
   79   100     118.8     0.426    0.3%
   80   100     118.9     0.359    0.3%
   81   100     119.1     0.332    0.2%
   82   100     119.4     0.213    0.1%
   83   100     119.3     0.281    0.2%
   84   100     119.6     0.252    0.2%
   85   100     119.9     0.142    0.1%
   86   100     119.9     0.132    0.1%
   87   100     120.1     0.278    0.2%
   88   100     120.1     0.267    0.2%
   89   100     120.7     0.264    0.2%
   90   100     120.9     0.198    0.1%
   91   100     121.2     0.252    0.2%
   92   100     121.3     0.185    0.1%
   93   100     121.2     0.159    0.1%
   94   100     121.8     0.148    0.1%
   95   100     121.9     0.224    0.1%
   96   100     121.9     0.148    0.1%
   97   100     122.1     0.151    0.1%
   98   100     122.5     0.138    0.1%
   99   100     122.6     0.268    0.2%
  100     1      68.5     0.256    0.3%
  100     2     69.83     0.202    0.2%
  100     3     70.46     0.188    0.2%
  100     4     71.13     0.205    0.2%
  100     5     72.28     0.282    0.3%
  100     6     72.31     0.236    0.3%
  100     7     73.04     0.116    0.1%
  100     8     73.69     0.142    0.1%
  100     9     74.44     0.164    0.2%
  100    10     75.01     0.134    0.1%
  100    11     75.81     0.232    0.3%
  100    12     76.57     0.107    0.1%
  100    13     76.64     0.191    0.2%
  100    14     77.34     0.137    0.1%
  100    15     77.78     0.224    0.2%
  100    16     78.92     0.411    0.5%
  100    17     79.61     0.137    0.1%
  100    18      79.6     0.162    0.2%
  100    19     80.37     0.284    0.3%
  100    20     80.98     0.267    0.3%
  100    21     80.74     0.121    0.1%
  100    22     82.25     0.275    0.3%
  100    23     82.35     0.222    0.2%
  100    24      83.3     0.261    0.3%
  100    25     83.77      0.13    0.1%
  100    26     84.29     0.276    0.3%
  100    27     84.37     0.298    0.3%
  100    28     84.89     0.169    0.1%
  100    29     85.99     0.142    0.1%
  100    30     85.99     0.214    0.2%
  100    31     87.11     0.238    0.2%
  100    32     87.49     0.216    0.2%
  100    33     88.06     0.161    0.1%
  100    34     89.23     0.145    0.1%
  100    35     90.11     0.149    0.1%
  100    36     90.22     0.164    0.1%
  100    37     91.57     0.505    0.5%
  100    38     91.56     0.236    0.2%
  100    39     91.94     0.178    0.1%
  100    40     92.98     0.142    0.1%
  100    41     93.22      0.14    0.1%
  100    42     93.43     0.172    0.1%
  100    43     94.31     0.195    0.2%
  100    44     94.82     0.384    0.4%
  100    45     96.04     0.149    0.1%
  100    46     95.75     0.148    0.1%
  100    47     96.56     0.192    0.1%
  100    48     96.95     0.135    0.1%
  100    49      97.5     0.318    0.3%
  100    50     97.71     0.163    0.1%
  100    51     98.45     0.178    0.1%
  100    52     99.08     0.146    0.1%
  100    53     99.48      0.22    0.2%
  100    54     100.1     0.377    0.3%
  100    55       100     0.128    0.1%
  100    56     100.9     0.229    0.2%
  100    57     101.4     0.145    0.1%
  100    58     102.1     0.253    0.2%
  100    59     104.8     2.746    2.6%
  100    60     106.2     0.239    0.2%
  100    61     104.9      0.79    0.7%
  100    62     104.4     0.213    0.2%
  100    63     104.6     0.213    0.2%
  100    64     105.5     0.178    0.1%
  100    65     106.1     0.167    0.1%
  100    66     106.3     0.192    0.1%
  100    67     107.4     0.206    0.1%
  100    68     107.4     0.269    0.2%
  100    69     107.7     0.234    0.2%
  100    70     108.7     0.135    0.1%
  100    71     108.9     0.137    0.1%
  100    72     108.9     0.276    0.2%
  100    73     110.4     0.254    0.2%
  100    74     110.3     0.251    0.2%
  100    75     110.8      0.19    0.1%
  100    76     111.4     0.157    0.1%
  100    77     112.1     0.238    0.2%
  100    78     112.1     0.191    0.1%
  100    79     112.8     0.159    0.1%
  100    80     113.3      0.11    0.0%
  100    81     114.8     0.184    0.1%
  100    82     114.6     0.186    0.1%
  100    83     115.2     0.218    0.1%
  100    84     115.6     0.211    0.1%
  100    85     115.5     0.078    0.0%
  100    86     116.1     0.434    0.3%
  100    87     117.2     0.185    0.1%
  100    88     117.6     0.242    0.2%
  100    89     117.9      0.36    0.3%
  100    90     117.6     0.262    0.2%
  100    91     118.6     0.208    0.1%
  100    92     119.8     0.171    0.1%
  100    93     119.6     0.211    0.1%
  100    94     119.9     0.198    0.1%
  100    95     120.6     0.198    0.1%
  100    96     121.5     0.078    0.0%
  100    97     122.1      0.37    0.3%
  100    98       122     0.244    0.1%
  100    99     123.1     0.225    0.1%
  100   100     123.4     0.145    0.1%

Quality and confidence:
param     error
m             0
p             0

Model:
Time ~=    48.72
    + m    0.218
    + p    0.533
              µs

Reads = 3 + (0 * m) + (0 * p)
Writes = 3 + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""close_early_approved"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.32
    + b    0.004
    + m    0.221
    + p    0.558
              µs

Reads = 4 + (0 * b) + (0 * m) + (0 * p)
Writes = 3 + (0 * b) + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m     p   mean µs  sigma µs       %
    1   100   100     147.6     0.283    0.1%
   21   100   100     146.6     0.151    0.1%
   41   100   100     147.7     0.254    0.1%
   61   100   100     147.1     0.341    0.2%
   81   100   100     146.7     0.357    0.2%
  101   100   100     148.3     0.985    0.6%
  121   100   100     150.9     1.003    0.6%
  141   100   100     150.3     0.224    0.1%
  161   100   100     148.5     1.353    0.9%
  181   100   100       148     0.178    0.1%
  201   100   100     147.2     0.239    0.1%
  221   100   100     148.8     0.285    0.1%
  241   100   100     148.1     0.273    0.1%
  261   100   100     147.8     0.219    0.1%
  281   100   100     147.8     0.396    0.2%
  301   100   100     147.8     0.257    0.1%
  321   100   100     148.1     0.275    0.1%
  341   100   100     148.1     0.249    0.1%
  361   100   100     147.8     0.323    0.2%
  381   100   100     148.7     0.106    0.0%
  401   100   100     148.3     0.305    0.2%
  421   100   100     149.2     0.202    0.1%
  441   100   100       149     0.176    0.1%
  461   100   100     147.7     0.163    0.1%
  481   100   100     149.3     0.241    0.1%
  501   100   100     149.5     0.456    0.3%
  521   100   100     149.1     0.344    0.2%
  541   100   100     148.1     0.232    0.1%
  561   100   100     148.7     0.251    0.1%
  581   100   100     149.2     0.291    0.1%
  601   100   100     149.9     0.141    0.0%
  621   100   100     150.4     0.324    0.2%
  641   100   100     149.4     0.402    0.2%
  661   100   100     150.1     0.225    0.1%
  681   100   100     149.9     0.267    0.1%
  701   100   100       151     0.212    0.1%
  721   100   100     150.6     0.374    0.2%
  741   100   100     150.1     0.249    0.1%
  761   100   100     150.4     0.373    0.2%
  781   100   100     151.2      0.26    0.1%
  801   100   100     150.9       0.3    0.1%
  821   100   100     150.5     0.354    0.2%
  841   100   100     151.8     0.244    0.1%
  861   100   100     150.4     0.817    0.5%
  881   100   100     151.6     0.843    0.5%
  901   100   100     150.6     0.229    0.1%
  921   100   100       150     2.539    1.6%
  941   100   100     151.2     0.219    0.1%
  961   100   100     147.6     3.985    2.6%
  981   100   100     151.3     0.453    0.2%
 1001   100   100     151.5     0.277    0.1%
 1021   100   100     151.2     0.222    0.1%
 1024     4   100     128.7     1.518    1.1%
 1024     5   100     129.6     1.598    1.2%
 1024     6   100     130.4     1.614    1.2%
 1024     7   100     130.5     1.025    0.7%
 1024     8   100     129.6     1.773    1.3%
 1024     9   100     131.8     1.082    0.8%
 1024    10   100     130.9     1.526    1.1%
 1024    11   100     132.6     0.625    0.4%
 1024    12   100     131.2      1.66    1.2%
 1024    13   100       131     1.674    1.2%
 1024    14   100     132.2     1.754    1.3%
 1024    15   100     133.2     0.275    0.2%
 1024    16   100     130.1       0.7    0.5%
 1024    17   100     133.7     0.302    0.2%
 1024    18   100     131.7     1.982    1.5%
 1024    19   100     133.5     0.992    0.7%
 1024    20   100       132     2.066    1.5%
 1024    21   100     134.8     0.299    0.2%
 1024    22   100     133.9     1.446    1.0%
 1024    23   100     134.7      0.31    0.2%
 1024    24   100     135.8     0.273    0.2%
 1024    25   100     135.1     0.457    0.3%
 1024    26   100     135.1     1.202    0.8%
 1024    27   100     135.9     0.544    0.4%
 1024    28   100     134.7      1.58    1.1%
 1024    29   100     136.4     0.274    0.2%
 1024    30   100       136     0.191    0.1%
 1024    31   100     136.2     0.469    0.3%
 1024    32   100     136.6     0.472    0.3%
 1024    33   100     137.3     0.231    0.1%
 1024    34   100       138     0.279    0.2%
 1024    35   100     137.9     0.427    0.3%
 1024    36   100     138.3     0.286    0.2%
 1024    37   100       138     0.221    0.1%
 1024    38   100     138.6     0.214    0.1%
 1024    39   100     139.1     0.333    0.2%
 1024    40   100     138.5     0.348    0.2%
 1024    41   100     139.1     0.277    0.1%
 1024    42   100     139.1     0.213    0.1%
 1024    43   100     139.8     0.232    0.1%
 1024    44   100     139.8     0.283    0.2%
 1024    45   100       140     0.188    0.1%
 1024    46   100     140.3     0.185    0.1%
 1024    47   100     140.6      0.21    0.1%
 1024    48   100     140.8     0.177    0.1%
 1024    49   100     140.7     0.291    0.2%
 1024    50   100     141.7       0.3    0.2%
 1024    51   100     141.4     0.232    0.1%
 1024    52   100     141.7     0.169    0.1%
 1024    53   100       142     0.243    0.1%
 1024    54   100     141.9     0.326    0.2%
 1024    55   100     142.8     0.126    0.0%
 1024    56   100       142     0.162    0.1%
 1024    57   100     142.5     0.238    0.1%
 1024    58   100     143.4     0.178    0.1%
 1024    59   100     143.6      0.22    0.1%
 1024    60   100     142.8     0.231    0.1%
 1024    61   100     143.3     0.232    0.1%
 1024    62   100     144.5     0.238    0.1%
 1024    63   100     144.2     0.371    0.2%
 1024    64   100     144.1     0.148    0.1%
 1024    65   100     144.6     0.166    0.1%
 1024    66   100     144.5     0.144    0.0%
 1024    67   100     144.8       0.3    0.2%
 1024    68   100     144.9     0.228    0.1%
 1024    69   100     145.2     0.191    0.1%
 1024    70   100     145.2      0.18    0.1%
 1024    71   100     145.1     0.324    0.2%
 1024    72   100     145.3     0.272    0.1%
 1024    73   100     145.8     0.358    0.2%
 1024    74   100     145.7     0.191    0.1%
 1024    75   100     148.6      2.23    1.5%
 1024    76   100       150     0.632    0.4%
 1024    77   100     150.3     0.723    0.4%
 1024    78   100     146.9     0.312    0.2%
 1024    79   100     146.4     0.161    0.1%
 1024    80   100     147.6     0.264    0.1%
 1024    81   100       148     0.329    0.2%
 1024    82   100       148      0.25    0.1%
 1024    83   100     148.7     0.476    0.3%
 1024    84   100     148.1     0.208    0.1%
 1024    85   100     148.1     0.209    0.1%
 1024    86   100     148.1     0.388    0.2%
 1024    87   100     148.9     0.445    0.2%
 1024    88   100       149     0.298    0.1%
 1024    89   100     149.4     0.246    0.1%
 1024    90   100     149.3     0.202    0.1%
 1024    91   100     149.5     0.288    0.1%
 1024    92   100     149.8     0.306    0.2%
 1024    93   100     150.5     0.277    0.1%
 1024    94   100     150.4     0.323    0.2%
 1024    95   100     150.7     0.205    0.1%
 1024    96   100     150.7     0.213    0.1%
 1024    97   100     150.9     0.286    0.1%
 1024    98   100       151     0.224    0.1%
 1024    99   100       151     0.263    0.1%
 1024   100     1     95.02     0.367    0.3%
 1024   100     2     96.46     0.243    0.2%
 1024   100     3     96.85     0.225    0.2%
 1024   100     4     97.22     0.261    0.2%
 1024   100     5     98.38     0.329    0.3%
 1024   100     6     99.23     0.276    0.2%
 1024   100     7     100.3     0.488    0.4%
 1024   100     8       100     0.193    0.1%
 1024   100     9     101.4     0.281    0.2%
 1024   100    10     101.4       0.2    0.1%
 1024   100    11     102.2     0.231    0.2%
 1024   100    12     104.1     0.319    0.3%
 1024   100    13     103.7     0.304    0.2%
 1024   100    14     104.7     0.323    0.3%
 1024   100    15     105.5     0.142    0.1%
 1024   100    16     105.6     0.232    0.2%
 1024   100    17     105.9     0.191    0.1%
 1024   100    18     107.2     0.272    0.2%
 1024   100    19     107.3      0.28    0.2%
 1024   100    20     108.5     0.176    0.1%
 1024   100    21     109.7     0.399    0.3%
 1024   100    22     109.7     0.387    0.3%
 1024   100    23     110.2     0.312    0.2%
 1024   100    24     110.6     0.331    0.2%
 1024   100    25     111.5     0.373    0.3%
 1024   100    26     111.7     0.081    0.0%
 1024   100    27     112.3     0.232    0.2%
 1024   100    28     112.8     0.288    0.2%
 1024   100    29       113      0.24    0.2%
 1024   100    30     114.7     0.387    0.3%
 1024   100    31     115.2     0.236    0.2%
 1024   100    32     115.1     0.223    0.1%
 1024   100    33     115.9     0.215    0.1%
 1024   100    34     117.6     0.295    0.2%
 1024   100    35     120.9     0.548    0.4%
 1024   100    36     121.1     0.325    0.2%
 1024   100    37     121.6     0.373    0.3%
 1024   100    38     122.1     0.341    0.2%
 1024   100    39     119.9     0.139    0.1%
 1024   100    40       121     0.229    0.1%
 1024   100    41     121.9      0.19    0.1%
 1024   100    42     121.8     0.169    0.1%
 1024   100    43     122.4     0.249    0.2%
 1024   100    44     121.8     0.172    0.1%
 1024   100    45     123.4     0.149    0.1%
 1024   100    46     124.3     0.247    0.1%
 1024   100    47     124.5     0.323    0.2%
 1024   100    48     124.6     0.198    0.1%
 1024   100    49     125.3      0.27    0.2%
 1024   100    50     126.1     0.234    0.1%
 1024   100    51       127     0.182    0.1%
 1024   100    52     125.9     0.174    0.1%
 1024   100    53     127.6      0.21    0.1%
 1024   100    54     127.1     0.279    0.2%
 1024   100    55     129.2     0.271    0.2%
 1024   100    56     130.2     0.332    0.2%
 1024   100    57     129.9     0.274    0.2%
 1024   100    58     131.3     0.333    0.2%
 1024   100    59       131     0.249    0.1%
 1024   100    60     132.3     0.435    0.3%
 1024   100    61     131.2     0.116    0.0%
 1024   100    62     132.4     0.769    0.5%
 1024   100    63       132     0.272    0.2%
 1024   100    64     133.8     0.189    0.1%
 1024   100    65       134     0.241    0.1%
 1024   100    66     134.8     0.199    0.1%
 1024   100    67     135.7     0.281    0.2%
 1024   100    68     135.7     0.229    0.1%
 1024   100    69     136.2     0.377    0.2%
 1024   100    70     136.6     0.295    0.2%
 1024   100    71     137.2     0.301    0.2%
 1024   100    72     137.6     0.379    0.2%
 1024   100    73     137.9     0.278    0.2%
 1024   100    74     138.6     0.186    0.1%
 1024   100    75     138.7     0.309    0.2%
 1024   100    76     139.4     0.311    0.2%
 1024   100    77     140.4     0.156    0.1%
 1024   100    78     141.1     0.251    0.1%
 1024   100    79     141.4     0.248    0.1%
 1024   100    80     141.4     0.204    0.1%
 1024   100    81     143.2     0.208    0.1%
 1024   100    82     142.7     0.229    0.1%
 1024   100    83     143.1     0.165    0.1%
 1024   100    84     143.9     0.239    0.1%
 1024   100    85     144.3     0.344    0.2%
 1024   100    86     145.3     0.252    0.1%
 1024   100    87     144.9     0.308    0.2%
 1024   100    88     146.5     0.448    0.3%
 1024   100    89     146.4     0.301    0.2%
 1024   100    90     146.7     0.428    0.2%
 1024   100    91     147.3     0.993    0.6%
 1024   100    92     147.7     0.977    0.6%
 1024   100    93     148.1     0.301    0.2%
 1024   100    94     148.7     0.426    0.2%
 1024   100    95     148.2      0.46    0.3%
 1024   100    96     149.7     0.302    0.2%
 1024   100    97     150.9     0.133    0.0%
 1024   100    98     151.8     0.129    0.0%
 1024   100    99     151.4     0.327    0.2%
 1024   100   100     150.9     0.257    0.1%

Quality and confidence:
param     error
b             0
m         0.001
p         0.001

Model:
Time ~=    68.84
    + b    0.005
    + m    0.233
    + p    0.547
              µs

Reads = 4 + (0 * b) + (0 * m) + (0 * p)
Writes = 3 + (0 * b) + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""close_disapproved"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.74
    + m    0.218
    + p    0.541
              µs

Reads = 4 + (0 * m) + (0 * p)
Writes = 3 + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    m     p   mean µs  sigma µs       %
    4   100     108.1     0.261    0.2%
    5   100     108.5     0.229    0.2%
    6   100     108.6      0.14    0.1%
    7   100       109     0.252    0.2%
    8   100     110.1      0.48    0.4%
    9   100     109.7      0.31    0.2%
   10   100       110     0.298    0.2%
   11   100     110.2     0.233    0.2%
   12   100     110.7     0.202    0.1%
   13   100     110.9     0.211    0.1%
   14   100     111.2     0.197    0.1%
   15   100     111.5     0.214    0.1%
   16   100     111.4     0.214    0.1%
   17   100     111.7     0.256    0.2%
   18   100     112.1     0.175    0.1%
   19   100     111.9     0.156    0.1%
   20   100       112     0.331    0.2%
   21   100     112.1     0.242    0.2%
   22   100     112.6     0.137    0.1%
   23   100     113.3     0.354    0.3%
   24   100       113     0.259    0.2%
   25   100     113.2     0.314    0.2%
   26   100     113.9     0.456    0.4%
   27   100     113.8     0.242    0.2%
   28   100     113.4     0.207    0.1%
   29   100     114.1     0.221    0.1%
   30   100     114.5       0.3    0.2%
   31   100     113.8     0.206    0.1%
   32   100     114.8     0.382    0.3%
   33   100     114.9     0.106    0.0%
   34   100     115.2     0.349    0.3%
   35   100     115.1     0.182    0.1%
   36   100       116     0.264    0.2%
   37   100       116     0.279    0.2%
   38   100     116.5     0.198    0.1%
   39   100     116.8     0.207    0.1%
   40   100     116.7     0.362    0.3%
   41   100     116.4     0.201    0.1%
   42   100     117.3     0.284    0.2%
   43   100     117.4     0.297    0.2%
   44   100       118     0.257    0.2%
   45   100     117.8     0.224    0.1%
   46   100     118.6     0.246    0.2%
   47   100     118.4     0.181    0.1%
   48   100     118.4     0.291    0.2%
   49   100     118.4      0.23    0.1%
   50   100     119.1     0.167    0.1%
   51   100     118.6     0.294    0.2%
   52   100     119.3     0.343    0.2%
   53   100     119.3     0.223    0.1%
   54   100       120     0.238    0.1%
   55   100     120.1     0.333    0.2%
   56   100     120.4     0.173    0.1%
   57   100     120.5     0.246    0.2%
   58   100     120.7     0.211    0.1%
   59   100       120     0.196    0.1%
   60   100     120.7     0.212    0.1%
   61   100     121.2     0.242    0.1%
   62   100     121.5     0.305    0.2%
   63   100     121.4     0.189    0.1%
   64   100     121.6     0.228    0.1%
   65   100     121.7     0.222    0.1%
   66   100     122.2     0.144    0.1%
   67   100     121.6     0.106    0.0%
   68   100     123.5     0.625    0.5%
   69   100     122.9     0.261    0.2%
   70   100     123.4     0.307    0.2%
   71   100     123.1     0.193    0.1%
   72   100       123     0.275    0.2%
   73   100     123.6     0.252    0.2%
   74   100     123.8     0.134    0.1%
   75   100       124     0.149    0.1%
   76   100     127.1     1.919    1.5%
   77   100     125.3      0.94    0.7%
   78   100     125.7     0.291    0.2%
   79   100     125.3     0.279    0.2%
   80   100     125.5     0.118    0.0%
   81   100     125.8     0.131    0.1%
   82   100     125.8     0.321    0.2%
   83   100     126.3     0.242    0.1%
   84   100     126.1     0.156    0.1%
   85   100     126.2      0.42    0.3%
   86   100     126.7     0.252    0.1%
   87   100     126.4     0.284    0.2%
   88   100     126.7     0.169    0.1%
   89   100     126.8     0.349    0.2%
   90   100     127.4     0.154    0.1%
   91   100       128     0.133    0.1%
   92   100     127.2      0.25    0.1%
   93   100     127.7     0.214    0.1%
   94   100     128.9       0.3    0.2%
   95   100     128.6     0.285    0.2%
   96   100     128.8     0.331    0.2%
   97   100     128.9     0.299    0.2%
   98   100     129.4     0.133    0.1%
   99   100     129.7     0.225    0.1%
  100     1     75.05     0.333    0.4%
  100     2      75.7     0.141    0.1%
  100     3     76.68     0.286    0.3%
  100     4     77.59     0.219    0.2%
  100     5     77.51     0.229    0.2%
  100     6     78.23     0.239    0.3%
  100     7     78.47     0.301    0.3%
  100     8     80.63     1.397    1.7%
  100     9     80.08     0.158    0.1%
  100    10     80.93     0.303    0.3%
  100    11     81.54      0.17    0.2%
  100    12     82.62     0.085    0.1%
  100    13     82.77     0.094    0.1%
  100    14     83.41     0.261    0.3%
  100    15     84.09     0.187    0.2%
  100    16     84.51     0.234    0.2%
  100    17     85.07     0.236    0.2%
  100    18     85.18      0.22    0.2%
  100    19     86.08     0.253    0.2%
  100    20     86.53     0.201    0.2%
  100    21     87.14     0.284    0.3%
  100    22     87.68     0.133    0.1%
  100    23     88.43     0.193    0.2%
  100    24     89.03     0.263    0.2%
  100    25     89.25     0.255    0.2%
  100    26     89.82     0.172    0.1%
  100    27     90.31     0.143    0.1%
  100    28     91.23     0.268    0.2%
  100    29     91.99     0.222    0.2%
  100    30     92.41     0.077    0.0%
  100    31     93.44     0.311    0.3%
  100    32        94      0.17    0.1%
  100    33     94.48     0.328    0.3%
  100    34     95.62     0.168    0.1%
  100    35      96.4     0.142    0.1%
  100    36     96.93     0.204    0.2%
  100    37     97.39      0.36    0.3%
  100    38     98.07     0.166    0.1%
  100    39     98.24     0.246    0.2%
  100    40     98.75     0.217    0.2%
  100    41     100.8     0.823    0.8%
  100    42     101.6     0.201    0.1%
  100    43     100.5     0.196    0.1%
  100    44     101.1     0.149    0.1%
  100    45       102     0.137    0.1%
  100    46     101.8      0.17    0.1%
  100    47     102.5      0.12    0.1%
  100    48     102.4      0.19    0.1%
  100    49     103.5     0.313    0.3%
  100    50     104.3     0.208    0.1%
  100    51     103.8     0.185    0.1%
  100    52     105.1      0.17    0.1%
  100    53     105.7     0.119    0.1%
  100    54     106.2     0.235    0.2%
  100    55     106.2     0.216    0.2%
  100    56     107.1     0.292    0.2%
  100    57     108.1     0.209    0.1%
  100    58       109     0.459    0.4%
  100    59       109     0.191    0.1%
  100    60     109.5     0.252    0.2%
  100    61     110.4     0.251    0.2%
  100    62     110.6     0.155    0.1%
  100    63     111.2      0.23    0.2%
  100    64     111.9     0.209    0.1%
  100    65     111.8     0.228    0.2%
  100    66     112.5     0.202    0.1%
  100    67     112.7     0.219    0.1%
  100    68     113.4     0.199    0.1%
  100    69     114.1     0.317    0.2%
  100    70     113.8     0.266    0.2%
  100    71     114.4      0.12    0.1%
  100    72     114.9     0.161    0.1%
  100    73     115.9     0.229    0.1%
  100    74     116.9     0.362    0.3%
  100    75     116.9     0.287    0.2%
  100    76     117.2     0.143    0.1%
  100    77     118.2     0.272    0.2%
  100    78     117.8     0.345    0.2%
  100    79     119.1     0.265    0.2%
  100    80     120.1     0.235    0.1%
  100    81     120.7     0.219    0.1%
  100    82     120.2     0.279    0.2%
  100    83     120.2     0.249    0.2%
  100    84     120.8     0.113    0.0%
  100    85     121.2     0.186    0.1%
  100    86     122.3      0.17    0.1%
  100    87     122.8     0.241    0.1%
  100    88     122.9     0.335    0.2%
  100    89     123.8     0.196    0.1%
  100    90       124     0.343    0.2%
  100    91     124.9     0.171    0.1%
  100    92     125.8     0.276    0.2%
  100    93     125.4     0.302    0.2%
  100    94     126.5     0.314    0.2%
  100    95     126.7     0.245    0.1%
  100    96     127.1     0.188    0.1%
  100    97     127.6     0.137    0.1%
  100    98     127.9     0.196    0.1%
  100    99     128.7     0.229    0.1%
  100   100     129.2     0.291    0.2%

Quality and confidence:
param     error
m             0
p             0

Model:
Time ~=    53.96
    + m    0.224
    + p    0.537
              µs

Reads = 4 + (0 * m) + (0 * p)
Writes = 3 + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""close_approved"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    75.99
    + b    0.003
    + m    0.205
    + p    0.556
              µs

Reads = 5 + (0 * b) + (0 * m) + (0 * p)
Writes = 3 + (0 * b) + (0 * m) + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b     m     p   mean µs  sigma µs       %
    1   100   100     152.1     0.421    0.2%
   21   100   100     151.4      0.26    0.1%
   41   100   100     152.5     0.256    0.1%
   61   100   100     151.4     0.396    0.2%
   81   100   100     151.7     0.316    0.2%
  101   100   100     151.9     0.395    0.2%
  121   100   100     151.4     0.333    0.2%
  141   100   100     151.5     0.225    0.1%
  161   100   100     152.5     0.245    0.1%
  181   100   100     153.3     0.238    0.1%
  201   100   100     153.8     0.303    0.1%
  221   100   100     153.1     0.217    0.1%
  241   100   100     153.8      0.33    0.2%
  261   100   100     152.6     0.239    0.1%
  281   100   100     152.8     0.152    0.0%
  301   100   100     152.6     0.249    0.1%
  321   100   100     153.1     0.157    0.1%
  341   100   100     152.8     0.134    0.0%
  361   100   100     152.6     0.196    0.1%
  381   100   100     153.7     0.245    0.1%
  401   100   100     152.9     0.196    0.1%
  421   100   100     153.9     0.406    0.2%
  441   100   100     153.2      0.14    0.0%
  461   100   100     153.5     0.181    0.1%
  481   100   100     153.8     0.127    0.0%
  501   100   100     154.7     0.253    0.1%
  521   100   100     154.2     0.303    0.1%
  541   100   100     151.9     0.124    0.0%
  561   100   100       154     0.294    0.1%
  581   100   100     154.1     0.178    0.1%
  601   100   100     155.7     0.376    0.2%
  621   100   100     155.3     0.091    0.0%
  641   100   100     154.7     0.327    0.2%
  661   100   100     155.4     0.308    0.1%
  681   100   100     155.7     0.163    0.1%
  701   100   100     156.1     0.171    0.1%
  721   100   100     155.1     0.262    0.1%
  741   100   100     154.9     0.217    0.1%
  761   100   100     155.4     0.248    0.1%
  781   100   100     156.1     0.165    0.1%
  801   100   100     155.2     0.192    0.1%
  821   100   100     152.9     1.541    1.0%
  841   100   100     152.1     3.191    2.0%
  861   100   100     152.9     2.593    1.6%
  881   100   100     153.5     3.756    2.4%
  901   100   100     151.6     1.906    1.2%
  921   100   100       154     3.212    2.0%
  941   100   100     150.8     3.078    2.0%
  961   100   100     152.6     3.443    2.2%
  981   100   100     154.8     2.171    1.4%
 1001   100   100     152.8     2.916    1.9%
 1021   100   100     152.5     2.403    1.5%
 1024     4   100     131.8     0.186    0.1%
 1024     5   100     132.1     0.248    0.1%
 1024     6   100     132.5      1.32    0.9%
 1024     7   100     133.8      1.47    1.0%
 1024     8   100     132.9      1.88    1.4%
 1024     9   100     133.6      1.72    1.2%
 1024    10   100     135.5     1.863    1.3%
 1024    11   100     134.4     2.178    1.6%
 1024    12   100       136     0.361    0.2%
 1024    13   100     134.8     1.488    1.1%
 1024    14   100     134.2     0.532    0.3%
 1024    15   100     134.4     0.267    0.1%
 1024    16   100     135.1     1.808    1.3%
 1024    17   100     135.3     1.375    1.0%
 1024    18   100     135.5     1.244    0.9%
 1024    19   100     134.2     2.192    1.6%
 1024    20   100     135.1     2.201    1.6%
 1024    21   100     135.2     3.462    2.5%
 1024    22   100     133.4     2.412    1.8%
 1024    23   100     132.4     1.985    1.4%
 1024    24   100     134.7     3.402    2.5%
 1024    25   100     136.6     2.438    1.7%
 1024    26   100     134.6     3.349    2.4%
 1024    27   100     140.1     1.554    1.1%
 1024    28   100     133.1     0.836    0.6%
 1024    29   100     134.5     2.385    1.7%
 1024    30   100     136.4     3.681    2.6%
 1024    31   100     135.2     3.387    2.5%
 1024    32   100     137.3     3.683    2.6%
 1024    33   100     137.5     2.844    2.0%
 1024    34   100     137.9     3.514    2.5%
 1024    35   100     138.7     2.338    1.6%
 1024    36   100     135.4     2.416    1.7%
 1024    37   100     136.3     1.382    1.0%
 1024    38   100     139.2     3.328    2.3%
 1024    39   100     137.8     1.976    1.4%
 1024    40   100       140     2.481    1.7%
 1024    41   100     139.3     2.135    1.5%
 1024    42   100     136.6     1.222    0.8%
 1024    43   100     141.2     3.269    2.3%
 1024    44   100     138.8     2.376    1.7%
 1024    45   100     140.3     3.534    2.5%
 1024    46   100     138.3     1.571    1.1%
 1024    47   100     137.4     1.235    0.8%
 1024    48   100     137.2     0.205    0.1%
 1024    49   100     140.1     1.803    1.2%
 1024    50   100     139.4     2.188    1.5%
 1024    51   100     139.4     2.038    1.4%
 1024    52   100       140     3.379    2.4%
 1024    53   100     140.2      2.06    1.4%
 1024    54   100       141     3.192    2.2%
 1024    55   100     142.6     2.048    1.4%
 1024    56   100     139.1     0.515    0.3%
 1024    57   100     139.6     1.763    1.2%
 1024    58   100     141.2     2.164    1.5%
 1024    59   100     143.9     0.405    0.2%
 1024    60   100     143.8     2.731    1.8%
 1024    61   100     142.7     3.136    2.1%
 1024    62   100     142.6     2.076    1.4%
 1024    63   100     142.6      2.42    1.6%
 1024    64   100     147.8     4.972    3.3%
 1024    65   100     144.8     3.045    2.1%
 1024    66   100     146.6     1.747    1.1%
 1024    67   100     144.2     2.632    1.8%
 1024    68   100     143.5     1.929    1.3%
 1024    69   100     146.6     2.685    1.8%
 1024    70   100     145.2     1.712    1.1%
 1024    71   100     143.9     1.974    1.3%
 1024    72   100     145.1     3.185    2.1%
 1024    73   100     144.7     2.382    1.6%
 1024    74   100     145.8       2.5    1.7%
 1024    75   100       144     1.019    0.7%
 1024    76   100     144.9     2.008    1.3%
 1024    77   100     147.3     3.688    2.5%
 1024    78   100       144     1.275    0.8%
 1024    79   100     144.2     0.882    0.6%
 1024    80   100     146.8     2.827    1.9%
 1024    81   100     149.3     1.498    1.0%
 1024    82   100     145.4     1.615    1.1%
 1024    83   100       148     3.463    2.3%
 1024    84   100     147.3     3.366    2.2%
 1024    85   100     147.5     3.539    2.3%
 1024    86   100     148.3     3.096    2.0%
 1024    87   100     147.5     3.484    2.3%
 1024    88   100     151.3      2.93    1.9%
 1024    89   100     147.5     2.234    1.5%
 1024    90   100     147.5     1.801    1.2%
 1024    91   100     147.1      1.64    1.1%
 1024    92   100     150.1      2.89    1.9%
 1024    93   100     149.5      3.13    2.0%
 1024    94   100     147.7     1.764    1.1%
 1024    95   100     150.2     3.488    2.3%
 1024    96   100       150     2.554    1.7%
 1024    97   100     148.7     2.231    1.4%
 1024    98   100     150.2     2.486    1.6%
 1024    99   100     150.1     2.055    1.3%
 1024   100     1     99.48     0.161    0.1%
 1024   100     2       101     0.205    0.2%
 1024   100     3     102.4     0.118    0.1%
 1024   100     4     102.4     0.229    0.2%
 1024   100     5     103.2     0.176    0.1%
 1024   100     6     103.8     0.166    0.1%
 1024   100     7     104.9     0.245    0.2%
 1024   100     8       105      0.17    0.1%
 1024   100     9       106     0.257    0.2%
 1024   100    10     106.2     0.183    0.1%
 1024   100    11     107.2     0.226    0.2%
 1024   100    12     108.3     0.107    0.0%
 1024   100    13     108.3     0.238    0.2%
 1024   100    14     109.8     0.255    0.2%
 1024   100    15     110.5     0.236    0.2%
 1024   100    16     109.7     0.236    0.2%
 1024   100    17     110.9     0.234    0.2%
 1024   100    18     111.8     0.191    0.1%
 1024   100    19     111.7     0.114    0.1%
 1024   100    20     113.1     0.168    0.1%
 1024   100    21       114     0.251    0.2%
 1024   100    22     114.2      0.21    0.1%
 1024   100    23     114.3     0.193    0.1%
 1024   100    24     115.4     0.128    0.1%
 1024   100    25     116.8     0.212    0.1%
 1024   100    26     116.4     0.236    0.2%
 1024   100    27       117     0.305    0.2%
 1024   100    28     118.1     0.159    0.1%
 1024   100    29     117.4     0.219    0.1%
 1024   100    30     118.8     0.228    0.1%
 1024   100    31     119.7     0.121    0.1%
 1024   100    32     120.2      0.15    0.1%
 1024   100    33     121.3     0.118    0.0%
 1024   100    34     121.4     0.242    0.1%
 1024   100    35     122.3     0.072    0.0%
 1024   100    36       123     0.209    0.1%
 1024   100    37     123.5     0.195    0.1%
 1024   100    38     123.8     0.283    0.2%
 1024   100    39     124.9     0.265    0.2%
 1024   100    40       126     0.104    0.0%
 1024   100    41     126.5     0.157    0.1%
 1024   100    42     126.1     0.207    0.1%
 1024   100    43     127.4     0.288    0.2%
 1024   100    44     127.5     0.259    0.2%
 1024   100    45     127.9     0.209    0.1%
 1024   100    46     128.5     0.253    0.1%
 1024   100    47     128.8     0.159    0.1%
 1024   100    48     129.8     0.172    0.1%
 1024   100    49     130.5       0.2    0.1%
 1024   100    50     130.6     0.213    0.1%
 1024   100    51     131.9     0.253    0.1%
 1024   100    52     131.4     0.221    0.1%
 1024   100    53     132.7     0.132    0.0%
 1024   100    54     132.2     0.218    0.1%
 1024   100    55     133.5     0.157    0.1%
 1024   100    56     134.2     0.263    0.1%
 1024   100    57     133.7     0.179    0.1%
 1024   100    58     135.2     0.304    0.2%
 1024   100    59     135.4     0.212    0.1%
 1024   100    60       136     0.175    0.1%
 1024   100    61     136.3     0.285    0.2%
 1024   100    62     136.8     0.193    0.1%
 1024   100    63     137.1      0.12    0.0%
 1024   100    64     137.3     0.149    0.1%
 1024   100    65     138.2     0.207    0.1%
 1024   100    66     139.1     0.337    0.2%
 1024   100    67     139.9       0.3    0.2%
 1024   100    68     139.7     0.222    0.1%
 1024   100    69     140.8      0.13    0.0%
 1024   100    70     141.6     0.378    0.2%
 1024   100    71     141.5     0.225    0.1%
 1024   100    72     142.9     0.201    0.1%
 1024   100    73     142.8     0.189    0.1%
 1024   100    74       144     0.192    0.1%
 1024   100    75     144.4     0.216    0.1%
 1024   100    76       145     0.238    0.1%
 1024   100    77     145.5     0.284    0.1%
 1024   100    78     146.1     0.294    0.2%
 1024   100    79     146.4     0.214    0.1%
 1024   100    80     145.7     0.181    0.1%
 1024   100    81     147.3     0.265    0.1%
 1024   100    82     147.6     0.186    0.1%
 1024   100    83     148.3     0.268    0.1%
 1024   100    84     148.5     0.246    0.1%
 1024   100    85     148.9     0.335    0.2%
 1024   100    86     150.3     0.268    0.1%
 1024   100    87     149.4     0.416    0.2%
 1024   100    88       150     1.796    1.1%
 1024   100    89     146.9     3.543    2.4%
 1024   100    90       150     2.515    1.6%
 1024   100    91     146.8     2.742    1.8%
 1024   100    92     150.6     1.797    1.1%
 1024   100    93     150.3     1.497    0.9%
 1024   100    94     149.8     1.678    1.1%
 1024   100    95     149.9     0.402    0.2%
 1024   100    96     148.2     2.832    1.9%
 1024   100    97     148.7     1.727    1.1%
 1024   100    98       151     2.119    1.4%
 1024   100    99     148.9     1.093    0.7%
 1024   100   100     151.2     3.339    2.2%

Quality and confidence:
param     error
b             0
m         0.002
p         0.002

Model:
Time ~=    79.52
    + b        0
    + m    0.241
    + p    0.494
              µs

Reads = 5 + (0 * b) + (0 * m) + (0 * p)
Writes = 3 + (0 * b) + (0 * m) + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""disapprove_proposal"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.92
    + p    0.541
              µs

Reads = 1 + (0 * p)
Writes = 3 + (0 * p)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    p   mean µs  sigma µs       %
    1     28.01     0.136    0.4%
    2     29.48     0.129    0.4%
    3     30.15     0.169    0.5%
    4     30.95     0.069    0.2%
    5     31.01     0.273    0.8%
    6     31.62     0.217    0.6%
    7     33.12     0.104    0.3%
    8     33.46     0.114    0.3%
    9     34.51     0.135    0.3%
   10     35.22     0.124    0.3%
   11     35.06     0.148    0.4%
   12     36.41     0.084    0.2%
   13     37.08     0.079    0.2%
   14     36.92     0.115    0.3%
   15     37.33     0.086    0.2%
   16     37.93     0.129    0.3%
   17     38.55     0.169    0.4%
   18     39.27     0.091    0.2%
   19     39.86     0.325    0.8%
   20     40.06     0.106    0.2%
   21     40.95     0.092    0.2%
   22     42.47     0.082    0.1%
   23     42.84     0.237    0.5%
   24     43.58     0.206    0.4%
   25     43.94     0.271    0.6%
   26     43.86     0.214    0.4%
   27     44.22     0.223    0.5%
   28     44.67     0.174    0.3%
   29     45.25     0.078    0.1%
   30     45.68     0.134    0.2%
   31     46.14     0.164    0.3%
   32     47.15     0.084    0.1%
   33     48.12     0.119    0.2%
   34     48.72     0.172    0.3%
   35     49.26     0.096    0.1%
   36     50.18     0.208    0.4%
   37     50.43     0.197    0.3%
   38     51.17     0.187    0.3%
   39     51.43      0.09    0.1%
   40     51.93      0.18    0.3%
   41     52.81     0.111    0.2%
   42      53.2      0.18    0.3%
   43      53.9     0.197    0.3%
   44     54.46      0.19    0.3%
   45     55.04     0.256    0.4%
   46     55.49     0.176    0.3%
   47     55.53     0.175    0.3%
   48     56.48     0.133    0.2%
   49     56.96     0.162    0.2%
   50     57.41     0.157    0.2%
   51     58.49     0.189    0.3%
   52     58.94     0.178    0.3%
   53      59.2     0.102    0.1%
   54     59.69     0.173    0.2%
   55     60.12     0.164    0.2%
   56     60.65     0.181    0.2%
   57     61.35     0.083    0.1%
   58     61.94     0.115    0.1%
   59     62.33     0.159    0.2%
   60     62.84     0.116    0.1%
   61      63.2     0.182    0.2%
   62     63.81     0.133    0.2%
   63     64.51      0.16    0.2%
   64     64.89     0.195    0.3%
   65      65.2     0.133    0.2%
   66     65.43     0.135    0.2%
   67     66.61     0.166    0.2%
   68      66.9     0.146    0.2%
   69     67.48     0.066    0.0%
   70     68.15      0.21    0.3%
   71     68.53     0.112    0.1%
   72     68.76     0.116    0.1%
   73     69.45     0.142    0.2%
   74     70.08     0.039    0.0%
   75     70.56     0.133    0.1%
   76     71.56     0.284    0.3%
   77     71.73     0.187    0.2%
   78     71.91     0.138    0.1%
   79     72.22     0.166    0.2%
   80     73.17     0.152    0.2%
   81        74     0.186    0.2%
   82      74.2     0.185    0.2%
   83     74.63      0.17    0.2%
   84     74.96     0.246    0.3%
   85     75.55       0.1    0.1%
   86     76.34     0.122    0.1%
   87      76.5     0.084    0.1%
   88     77.18     0.151    0.1%
   89     77.39     0.227    0.2%
   90     77.96     0.216    0.2%
   91     78.49     0.214    0.2%
   92     79.94     0.138    0.1%
   93     79.71     0.283    0.3%
   94     79.75     0.217    0.2%
   95     80.08     0.224    0.2%
   96      79.5     2.171    2.7%
   97     80.61     1.686    2.0%
   98     76.47     1.203    1.5%
   99      76.9     0.988    1.2%
  100     78.15     0.205    0.2%

Quality and confidence:
param     error
p         0.001

Model:
Time ~=    30.07
    + p    0.533
              µs

Reads = 1 + (0 * p)
Writes = 3 + (0 * p)
Pallet: ""pallet_collective"", Extrinsic: ""dispatch_as_ratio_account"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    21.17
    + b    0.002
              µs

Reads = 0 + (0 * b)
Writes = 0 + (0 * b)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b   mean µs  sigma µs       %
    1     20.71     0.071    0.3%
   21     21.31     0.071    0.3%
   41     21.34     0.074    0.3%
   61     21.37     0.068    0.3%
   81     21.29     0.056    0.2%
  101     21.45     0.097    0.4%
  121     21.47      0.06    0.2%
  141     21.59      0.04    0.1%
  161     21.58     0.071    0.3%
  181     21.68     0.062    0.2%
  201     21.78     0.075    0.3%
  221     21.83      0.07    0.3%
  241     21.84     0.075    0.3%
  261     21.94     0.047    0.2%
  281      21.9     0.062    0.2%
  301     22.06     0.101    0.4%
  321     21.91     0.054    0.2%
  341     22.05     0.055    0.2%
  361     21.95     0.069    0.3%
  381      22.3     0.072    0.3%
  401     22.11     0.029    0.1%
  421     22.29      0.05    0.2%
  441     22.33     0.107    0.4%
  461     22.36     0.065    0.2%
  481      22.4     0.063    0.2%
  501     22.43     0.048    0.2%
  521     22.56     0.061    0.2%
  541     22.66     0.056    0.2%
  561     22.75     0.066    0.2%
  581     22.77     0.091    0.3%
  601     22.69     0.084    0.3%
  621     22.74      0.08    0.3%
  641     22.93     0.095    0.4%
  661     22.89      0.06    0.2%
  681     22.94      0.08    0.3%
  701     22.96     0.055    0.2%
  721     23.04     0.045    0.1%
  741     23.09     0.087    0.3%
  761     23.04     0.071    0.3%
  781     23.17     0.072    0.3%
  801     23.25     0.035    0.1%
  821     23.36     0.042    0.1%
  841     23.43      0.08    0.3%
  861     23.32     0.047    0.2%
  881     23.48     0.061    0.2%
  901     23.59     0.058    0.2%
  921     23.62     0.039    0.1%
  941     23.56     0.077    0.3%
  961     23.73      0.08    0.3%
  981     23.77     0.088    0.3%
 1001     23.69     0.075    0.3%
 1021        24     0.041    0.1%

Quality and confidence:
param     error
b             0

Model:
Time ~=    21.16
    + b    0.003
              µs

Reads = 0 + (0 * b)
Writes = 0 + (0 * b)
Pallet: ""pallet_collective"", Extrinsic: ""dispatch_as_quantity_account"", Lowest values: [], Highest values: [], Steps: [50], Repeat: 20
Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.91
    + b    0.002
              µs

Reads = 0 + (0 * b)
Writes = 0 + (0 * b)
Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b   mean µs  sigma µs       %
    1     20.41      0.09    0.4%
   21     20.94     0.084    0.4%
   41     21.08     0.106    0.5%
   61     21.08     0.074    0.3%
   81     21.16     0.061    0.2%
  101     21.17      0.03    0.1%
  121     21.18     0.058    0.2%
  141      21.4     0.039    0.1%
  161     21.43     0.084    0.3%
  181      21.5     0.096    0.4%
  201     21.33     0.052    0.2%
  221     21.47     0.097    0.4%
  241     21.58     0.097    0.4%
  261      21.8     0.083    0.3%
  281      21.7     0.073    0.3%
  301     21.77     0.069    0.3%
  321     21.82     0.057    0.2%
  341      21.8     0.047    0.2%
  361     21.83     0.126    0.5%
  381        22     0.093    0.4%
  401     21.98     0.073    0.3%
  421     22.07     0.063    0.2%
  441     22.14     0.089    0.4%
  461     22.14     0.093    0.4%
  481     22.19      0.08    0.3%
  501     22.24     0.079    0.3%
  521     22.33     0.122    0.5%
  541     22.49     0.072    0.3%
  561      22.5     0.092    0.4%
  581     22.44     0.064    0.2%
  601     22.56     0.063    0.2%
  621     22.66     0.074    0.3%
  641     22.57     0.061    0.2%
  661     22.77     0.075    0.3%
  681     22.75     0.054    0.2%
  701     22.92     0.071    0.3%
  721     22.87     0.059    0.2%
  741     22.77     0.045    0.1%
  761      22.9     0.059    0.2%
  781     23.04     0.092    0.3%
  801     22.99     0.084    0.3%
  821     23.25     0.085    0.3%
  841     23.23     0.059    0.2%
  861     23.17     0.077    0.3%
  881     23.19     0.106    0.4%
  901     23.32     0.082    0.3%
  921     23.44     0.049    0.2%
  941     23.42     0.084    0.3%
  961     23.44     0.065    0.2%
  981     23.57     0.091    0.3%
 1001     23.61     0.049    0.2%
 1021     23.77     0.068    0.2%

Quality and confidence:
param     error
b             0

Model:
Time ~=     20.9
    + b    0.003
              µs

Reads = 0 + (0 * b)
Writes = 0 + (0 * b)


 </details>",8525,2021-04-05T14:13:19Z,0
1254,shawntabrizi,stale,8525,2021-06-17T22:49:44Z,0
1255,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8525,2021-08-28T22:39:48Z,0
1256,kianenigma,"@shawntabrizi at some point it was discussed that we need this again, mind doing a merge master? ",8525,2021-11-12T11:42:40Z,0
1257,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8525,2021-12-12T14:54:35Z,0
1258,kianenigma,re-opening this one last time as it is ready and I think we need it in the future. ,8525,2022-01-14T14:22:47Z,0
1259,cla-bot-2021[bot],"User @zachanon, please sign the CLA [here](https://cla.parity.io/sign_cla/38860696/3).",9420,2021-07-22T20:43:48Z,0
1260,zachanon,Finished the logic for the RPC. Next step is to add test coverage and confirm it does more than compile.,9420,2021-07-26T19:55:41Z,0
1261,zachanon,"I have run into a snag and would like some advice on how I might solve it.

Apparently serde still has an issue with u128 types. I get the same error as issue [#4641](https://github.com/paritytech/substrate/issues/4641) when I attempt to curl the balances_freeBalance method I added.

[Here](https://github.com/paritytech/substrate/commit/0b647cffac438bd3642bb40d7898d8c7bdf68356) is a link to the code I added to the node-template for testing.

I ran ```cargo build --release && ./target/release/node-template --dev --tmp``` and when built I called from the terminal

```
curl http://localhost:9933 -H ""Content-Type:application/json;charset=utf-8"" -d   '{
     ""jsonrpc"":""2.0"",
      ""id"":1,
      ""method"":""balances_freeBalance"",
      ""params"": [""5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY""]
    }'
```

As a result of the call. my node crashes and gives me a trace ending in 
```
Thread 'http.worker10' panicked at 'Expected always-serializable type; qed: Error(""u128 is not supported"", line: 0, column: 0)', /home/zach/projects/substrate/substrate/frame/balances/rpc/src/lib.rs:44
```

I tried to wrap the result in the struct ```BalanceDetails``` but it failed to work where I have it [instantiated](https://github.com/paritytech/substrate/blob/4b00fa10bb09a45d06c347a5f43c88a6941a8d55/frame/balances/rpc/src/lib.rs#L39). Looking at one example of a solution, it appears I would have to add code [directly to the pallet](https://github.com/celer-network/cChannel-substrate/blob/016223b210fa5913029063507bcb7aa7e6ca1f20/pallets/celer-pay/src/lib.rs#L1012) for a workaround, which I do not want to do if there is another way.

Is there an approach I can take to solve this without modifying the balances pallet directly?",9420,2021-07-30T20:16:23Z,0
1262,zachanon,"By sheer serendipity I happened to find a solution when browsing the code for [zeitgeist](https://github.com/zeitgeistpm/zeitgeist). I implemented, and it works!

Tomorrow I shall add some testing logic and ask for a review.",9420,2021-07-30T23:01:59Z,0
1263,zachanon,"Update: I have tried and failed to make a minimal mock to test the runtime api. I've looked at all the examples I could find of the rpc tests in the codebase and simply cannot figure out what I am doing wrong in my implementation. Spent far too much time on this, but at least I have learned a lot about how the client works.

I will ensure at least the rpc works in the full node under a few conditions, then see about how I might implement pubsub functionality. Apologies for taking my time on this, I want to use the opportunity to really grok every bit of substrate as I go along.",9420,2021-08-06T18:11:28Z,0
1264,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9420,2021-09-17T18:16:33Z,0
1265,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9420,2021-10-20T10:06:02Z,0
1266,kianenigma,"This one seems like it could be merged, adding it to our project to get more eyes.",9420,2022-01-14T14:50:05Z,0
1267,kianenigma,"I'll take a stab at this, might be interesting to be able to move the election offchain. ",8250,2021-03-24T16:57:17Z,0
1268,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8250,2021-07-07T20:23:17Z,0
1269,kianenigma,"will take a while, but we want it. ",8250,2021-07-08T09:15:44Z,0
1270,kianenigma,still interesting. ,8250,2022-01-14T14:51:28Z,0
1271,kianenigma,This is already removed in master. ,9620,2022-01-14T14:55:16Z,0
1272,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8362,2021-07-07T20:23:32Z,0
1273,kianenigma,I'm still keen on this. It will simplify the code a lot. ,8362,2021-07-08T09:07:38Z,0
1274,coriolinus,"Honestly, the ideal resolution will be to get rid of both of them entirely,
and rely in pre-trimming via `max_allowed_voters` to ensure the solution
fits. Post-trimming as we do here is both kind of expensive, and a bit
risky.

On Thu, Jul 8, 2021 at 11:07 AM Kian Paimani ***@***.***>
wrote:

> I'm still keen on this. It will simplify the code a lot.
>
> —
> You are receiving this because you were assigned.
> Reply to this email directly, view it on GitHub
> <https://github.com/paritytech/substrate/issues/8362#issuecomment-876269531>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AB3V4TUZR22DID3UBOBVUZTTWVTGLANCNFSM4ZGSB7XA>
> .
>

-- 
Wichtige Mitteilung

Diese Mitteilung wurde von Parity Technologies 
Deutschland GmbH kommuniziert, eine im Handelsregister des Amtsgerichtes 
Charlottenburg unter HRB 190583 B registrierte Gesellschaft mit 
beschränkter Haftung (GmbH). Der Geschäftsführer der GmbH ist Herr Raul 
Romanutti. Der registrierte Geschäftssitz ist Glogauer Straße 6 in 10999 
Berlin, Deutschland. 

Diese Mitteilung enthält Informationen welche 
vertraulich sind und welche eventuell die Vertraulichkeit der 
Rechtsberatung (""Anwaltsgeheimnis"") berühren. Sie ist ausschließlich für 
den/die vorgesehenen Empfänger bestimmt. Wenn Sie nicht der/die 
beabsichtigte(n) Empfänger sind, benachrichtigen Sie bitte ***@***.*** 
***@***.***> und löschen Sie diese Nachricht sofort.

Unsere 
Datenschutzrichtlinie, einschließlich die Art und den Umfang von 
personenbezogenen Daten, die wir erfassen, wie wir diese Daten erfassen und 
verarbeiten, an wen wir sie in Bezug auf die von uns angebotenen Dienste 
weitergeben dürfen, sowie bestimmte Rechte und Optionen, die Sie in dieser 
Hinsicht haben, finden Sie unter: https://www.parity.io/privacy/ 
<https://www.parity.io/privacy/>
",8362,2021-07-08T09:11:32Z,0
1275,kianenigma,"We might ditch this, since we will soon get a new election pallet and we don't want to support multi-phase forever.

",8362,2022-01-14T14:57:59Z,0
1276,kziemianek,"Hi, is this ready to take? Can I try ?",10386,2021-11-29T19:39:58Z,0
1277,bkchr,@kziemianek yes,10386,2021-11-29T19:53:23Z,0
1278,kziemianek,"Great, I'll refactor it.",10386,2021-11-29T20:16:27Z,0
1279,kziemianek,"@kianenigma, @bkchr could You confirm that the scope of this task is to just rename mentioned type. If something more needs to be done please share more details.",10386,2021-11-30T20:53:43Z,0
1280,kianenigma,rename the current one to HashingFor + make a new HashFor and add use where possible. ,10386,2021-12-01T07:35:29Z,0
1281,kziemianek,I'm quite busy with other stuff so unfortunately i need to give up on this for a while. If somebody else wants to take care of this task feel free to go.,10386,2022-01-14T15:00:18Z,0
1282,thiolliere,"> The role of `pre_dispatch` is this: feel the gap about **criteria that could change over time**. For example, if you are honest, you will always generate a solution that is passes `feasibility_check`. But, if you took an hour to compute it:
> 
>     1. The phase/round might have changed
> 
>     2. `<QueuedSolution>` might now contain a better solution.

This is not the case in the PR https://github.com/paritytech/substrate/pull/8290
in my example https://github.com/paritytech/substrate/pull/8290#discussion_r617533358
A honest validator retrieve from storage a wrong solution. which doesn't pass `feasibility_check`.


>     * `feasibility_check` should still be called only in `submit_unsigned` (except for OCW code that calls it).

What does that mean? `submit_unsigned` will always do the feasibility_check. I can't understand the exception.


> ```
> let maybe_call_and_score = restore_solution::<T>()
>    .and_then(|call|  
>        // `Ok` IFF call.solution is `pre_dispatch`. No need to check `feasibility` given all the notes above.
>    ).or_else(|_| {
>        // Same as before: mine_checked, save and return Ok
>    })
> ```

I don't see why we don't need to do the `feasibility` considering the point I raised above, the restored solution can be invalid.

In my opinion we can:
* associate the solution to its election data:
  * by hashing the election data, so that if the solution is computed for another election data, then it is not used retrieved because it can be invalid.
  * or by associating to the block hash of the block which started the election (and fixed the election data). (but it doesn't seem straightforward to get the block hash of the block which started the election when we want to check it).
* or at the very least run the feasibility check when retrieving the solution.
  
Anyway I don't see where my example is wrong, and in the above example lots of validator mine only one wrong solution for the chain. Which is pretty bad IMO.",8641,2021-04-22T09:00:27Z,0
1283,kianenigma,"> What does that mean? submit_unsigned will always do the feasibility_check. I can't understand the exception.

I mean feasibility check should only be used internally inside `submit_unsigned`, except for OCW code. the OCW code currently calls `feasibility_check` in `fn mine_checked` as well. 

> A honest validator retrieve from storage a wrong solution. which doesn't pass feasibility_check.

What we should do is to add a hash of the snapshot to the things that are checked in `pre_dispatch_checks`. This also fits into the category of *things that can change over time* (due to reorg) and then we won't need to call `feasibility_check` before submission. 

> associate the solution to its election data:
> - by hashing the election data, so that if the solution is computed for another election data, then it is not used retrieved because it can be invalid.

Totally agree. ",8641,2021-04-22T09:20:54Z,0
1284,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8641,2021-07-07T19:13:03Z,0
1285,kianenigma,Quite important. ,8641,2021-07-08T09:26:04Z,0
1286,kianenigma,"We might ditch this, since we will soon get a new election pallet and we don't want to support `multi-phase` forever. ",8641,2022-01-14T14:57:38Z,0
1287,kianenigma,Monthly update notes: https://gist.github.com/kianenigma/aa835946455b9a3f167821b9d05ba376,9511,2021-11-10T15:17:25Z,0
1288,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10197,2021-12-05T15:47:52Z,0
1289,apopiak,"This PR is the reason: https://github.com/paritytech/substrate/pull/10403
TLDR: `AccountId` should not have a default value, so it was removed.",10667,2022-01-14T18:16:39Z,0
1290,drewstone,So the recommendation is convert all instantiations to `Option<T::AccountId>` in the pallet's storage? @apopiak ,10667,2022-01-14T18:33:54Z,0
1291,nazar-pc,"Many things were updated in that PR, just follow those examples. In some cases `Option<T::AccountId>` might make sense, in other cases something different, all depends on the use case.",10667,2022-01-15T05:32:37Z,0
1292,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10174,2021-12-04T12:54:01Z,0
1293,kianenigma,yes there is. ,10174,2021-12-05T09:20:19Z,0
1294,kianenigma,stale but I will get to it soon. ,10174,2021-12-16T06:04:20Z,0
1295,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10174,2022-01-15T06:04:36Z,0
1296,chevdor,The revert has been done in a new branch: https://github.com/paritytech/substrate/tree/polkadot-v0.9.15-1,10666,2022-01-15T10:02:03Z,0
1297,bkchr,bot merge,10640,2022-01-15T10:46:08Z,0
1298,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10640,2022-01-15T10:46:18Z,0
1299,cla-bot-2021[bot],"User @arturgontijo, please sign the CLA [here](https://cla.parity.io/sign_cla/15108323/3).",10054,2021-10-18T23:37:36Z,0
1300,arturgontijo,"Just a heads up that I'm still working on this and we'll need to discuss its design further, so do not spend your time reviewing it now =)",10054,2021-10-21T08:19:52Z,0
1301,arturgontijo,"Talked to Jam and the `change_founder` is not really what we want here...
Pushing new implementation in a few.",10054,2021-10-27T11:00:06Z,0
1302,arturgontijo,"@joshua-mir let me know what do you think about the `SocietyAccountId` idea, ~~added in https://github.com/paritytech/substrate/pull/10054/commits/dbfcf4ce77a965952c08bf8f70a56d6263325d4f.~~
Just wanted to make it configurable. IMO, the previous way was too hard coded =P

Edit: It did't work, let me try another thing here...

Edit2: New idea: https://github.com/paritytech/substrate/pull/10054/commits/716fca5fdd4aae3fa0ab67bedbce860dd4cf22ab",10054,2021-11-08T23:15:11Z,0
1303,arturgontijo,"@joshua-mir, a question about the Society Account:

if I'm getting its logic right we are setting it at `genesis_build`, but how would that work in the Kusama runtime?

Should we have a `set_society_account(society_account)` that:
1 - Checks if `SocietyAccount` is empty.
2 - If it is empty, ensure that caller is a member and runs `SocietyAccount::<T, I>::put(society_account);` with a hard coded `society_account`. (initial setup).
3 - Else, ensure that the caller is from `SuspensionJudgementOrigin` and updates it by running `SocietyAccount::<T, I>::put(society_account);` with a given `society_account` (update).

Does that make sense?",10054,2021-11-09T08:29:50Z,0
1304,joshua-mir,"> how would that work in the Kusama runtime? 

accounts passed via the config trait aren't generated on genesis (and they aren't necessarily in storage, unless configured to be so), they are hardcoded in the runtime, instead of being hardcoded in the pallet, if I understand your question correctly - whatever change you make, the primary consideration needs to be that when doing parameterization on Kusama we'll have to make sure that the old and new format come out to the same account ids for the society treasury and pot.

having it be configurable *in the runtime* is an interesting idea imo and something I should be a proponent of... but I'll have to defer to the actual reviewers of this pr to know if that would get merged. If it does, it could let people do some extra interesting things with the society pallet, but whoever has permission to modify that AccountId could potentially appropriate funds from other onchain bodies or accounts, so it would have to be controlled by Root, not Suspension Judgement Origin, and probably not even a configurable origin. ",10054,2021-11-10T11:38:17Z,0
1305,arturgontijo,"> could potentially appropriate funds from other onchain bodies or accounts

Yeah, saw that too while testing logic here =/
Edit: Maybe we could check if the new AccountId is a `sub_account` from the Society Pallet?

> having it be configurable in the runtime is an interesting idea imo and something I should be a proponent of...

Cool, thanks!",10054,2021-11-10T21:22:42Z,0
1306,arturgontijo,"So as far as I know we do not want to allow such calls like `Balances::transfer`.
My idea then would be validating the incoming call from the `bid_action()` in a way that we avoid not allowed calls.

I can think of some implementations here:

1. Check for the encoded incoming call and validate it as its index matches the Society Pallet index, allowing only calls to the pallet's functions (such as `judge_suspended_member` and `judge_suspended_candidate`). I'm still trying to figure out how to get the pallet index during runtime from within itself (any help here would be appreciated).

2. Create a similar implementations as the `CallIndices` from `pallet_lottery` ([code](https://github.com/paritytech/substrate/blob/master/frame/lottery/src/lib.rs#L310-L321)). That way we'll be able to add and remove allowed calls for `bid_action`.

3. Implement a call type match logic like:
```
	type SocietyCall = pallet_society::Call<Test>;
	fn validate_call_type(call: &Call) -> bool {
		match call {
			Call::Society(SocietyCall::judge_suspended_member { .. }) => true,
			Call::Society(SocietyCall::judge_suspended_candidate { .. }) => true,
			_ => false,
		}
	}
```
I can make this code run in the pallet tests but still struggling to use it in the pallet. Downside here would be the need to keep listing all allowed calls in the future.

cc @joshua-mir @kianenigma ",10054,2021-11-23T22:54:36Z,0
1307,arturgontijo,Just pushed an implementation for `1` in https://github.com/paritytech/substrate/pull/10054/commits/fe4722d387230b38d88aad8134bb2bebe0f162b1,10054,2021-11-24T00:45:53Z,0
1308,arturgontijo,"Big shout for Guillaume (from susbtrate discord room, not sure his github handler) about the heads up on using `PalletInfo`.",10054,2021-11-24T00:49:30Z,0
1309,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10054,2022-01-15T16:25:58Z,0
1310,librelois,"@bkchr I would like to have a first feedback about the design, can you answer the following questions? (or tag someone who could) 

> 1. How to expose this functionality to the user? For the moment I have chosen a compilation feature at the frame-executive level because it is the simplest.
> 2. Should we disable batch verification for sr25519 signatures, in order to separate this in a different future functionality?
> 3. Should we replace all the batch occurrences by background ?
",10353,2021-12-16T12:58:58Z,0
1311,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10353,2022-01-15T16:25:59Z,0
1312,librelois,"I am still working on this PR, I am waiting for a feedback from @bkchr ",10353,2022-01-15T16:28:07Z,0
1313,nazar-pc,"It doesn't look like there were tests for previous behavior to replicate, but I will look into adding some tomorrow.",10388,2021-11-29T20:43:54Z,0
1314,bkchr,"> It doesn't look like there were tests for previous behavior to replicate, but I will look into adding some tomorrow.

Could be, but that just emphasis more that we should have tests ;)",10388,2021-11-29T22:19:15Z,0
1315,nazar-pc,"Added a basic test, but there is an opportunity to write a bunch more for various scenarios",10388,2021-11-29T23:18:47Z,0
1316,bkchr,Ty!,10388,2021-11-29T23:19:18Z,0
1317,bkchr,Could you please merge master,10388,2021-11-30T08:48:39Z,0
1318,tomusdrw,/tip medium,10388,2021-11-30T12:37:30Z,0
1319,substrate-tip-bot[bot],"Please fix the following problems before calling the tip bot again:
 * Contributor did not properly post their Polkadot or Kusama address. Make sure the pull request has: ""{network} address: {address}"".",10388,2021-11-30T12:37:31Z,0
1320,nazar-pc,"> /tip medium

Thanks, added address :smiley_cat: ",10388,2021-11-30T17:44:19Z,0
1321,bkchr,/tip medium,10388,2021-11-30T18:44:33Z,0
1322,bkchr,/tip medium,10388,2021-12-02T10:31:10Z,0
1323,substrate-tip-bot[bot],"A medium tip was successfully submitted for nazar-pc (1vSxzbyz2cJREAuVWjhXUT1ds8vBzoxn2w4asNpusQKwjJd on polkadot). 

 https://polkadot.js.org/apps/#/treasury/tips",10388,2021-12-02T10:31:21Z,0
1324,tomusdrw,bot merge,10388,2021-12-02T23:08:16Z,0
1325,paritytech-processbot[bot],Waiting for commit status.,10388,2021-12-02T23:08:25Z,0
1326,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 368f06ac3864e74e0e8cb8f9bb0729a28e848a13,10388,2021-12-02T23:11:57Z,0
1327,bkchr,bot merge,10388,2021-12-02T23:17:14Z,0
1328,nazar-pc,"Failed test must be racy, I was not able to reproduce it locally :disappointed: ",9710,2021-09-07T02:47:50Z,0
1329,bkchr,Superseded by https://github.com/paritytech/substrate/pull/9713,9710,2021-09-07T08:49:44Z,0
1330,bkchr,@nazar-pc next time please allow edits by maintainers directly.,10673,2022-01-15T20:00:35Z,0
1331,thiolliere,"> I don't think they way this implemented is something what people wants.
> 
> You won't be able to use this for any actual useful configuration.
> 
> Take an example, we want to setup a original that requires a council member approval and a technical committee member approval. How do we use this to support such case?

Yes in case of EnsureOrigin implementation which expect a specific variant there is usecase but maybe there can be some more general implementation like someone could give some specific priviledge level of origin. like say 2/3 of council is priviledge 2 and 99% of democracy is priviledge 2 also.
Then someone could write: EnsureOrigin = Priviledge2 and from council.",10272,2021-11-16T00:47:57Z,0
1332,Mr-Leshiy,"@thiolliere , @xlc , I am little bit confusing. Can you pls little bit more elaborate what cases do you consider ?
According to this implementation I just following the description of the issue and made it as simple as possible.

Am I right that the problem that the trait bound for the `O` type is specialized to the `RawOrigin` ? So need to make these implementation more general ?",10272,2021-11-20T10:13:35Z,0
1333,xlc,"> Since the origin cannot be collected together, it would necessitate a module which retained state over dispatch/proposal hashes, allowing one origin to approve a hash first, and the other origin to approve it later causing the dispatch.",10272,2021-11-20T11:08:34Z,0
1334,thiolliere,"> > Since the origin cannot be collected together, it would necessitate a module which retained state over dispatch/proposal hashes, allowing one origin to approve a hash first, and the other origin to approve it later causing the dispatch.


> I am little bit confusing. Can you pls little bit more elaborate what cases do you consider ? According to this implementation I just following the description of the issue and made it as simple as possible.
> 
> Am I right that the problem that the trait bound for the `O` type is specialized to the `RawOrigin` ? So need to make these implementation more general ?

Ok I finally understood the concern of xlc, the current implementation of the PR doesn't follow what the issue is about. The issue is not about providing a type which ensures that 2 constraint are ensured on the same origin, but instead providing an ensure origin implementation which succeed only when 2 different origin have tried to dispatch a call.
So the issue is very different from the current implementation.",10272,2021-11-22T04:34:50Z,0
1335,Mr-Leshiy,"@xlc , @thiolliere thanks guys for explanation, it seems I have got what do you mean, will try to do the correct implementation.😊",10272,2021-11-27T12:55:31Z,0
1336,Mr-Leshiy,"@thiolliere , @xlc , I have added new implementation of the AND gate with the validation from the different origins, but also remain implementation from the one origin to be respect with the previous implementation of the OR gate. Also added a new implementation of the OR gate from the different origins. 
Waiting for your review 😊


",10272,2021-12-05T10:49:48Z,0
1337,xlc,"I am completely lost. I don't understand what are you trying to achieve here.

I have already quoted Gav's words from the original issue, but I guess I need to emphasize it again.

> Since the origin cannot be collected together, it would necessitate a module which retained state over dispatch/proposal hashes, allowing one origin to approve a hash first, and the other origin to approve it later causing the dispatch.

i.e. You have to write a pallet to do this. It will be somewhat similar to 2/2 multisg.",10272,2021-12-05T23:52:58Z,0
1338,kianenigma,ping @Mr-Leshiy ,10272,2021-12-16T06:03:53Z,0
1339,Mr-Leshiy,"@thiolliere , @kianenigma, @xlc Sorry for the delay guys, have a lot of mess previous week. 
It seems firstly I have misunderstood you, I have followed this comment, so that is why I have done what I have done 😊

> The issue is not about providing a type which ensures that 2 constraint are ensured on the same origin, but instead providing an ensure origin implementation which succeed only when 2 different origin have tried to dispatch a call.

Will try to implement what do you mean.
Should it be a new pallet as a part of `frame` or where it is better to place it ?



",10272,2021-12-16T19:02:15Z,0
1340,xlc,It will be a few frame pallet. It could also be part of the frame-utility pallet but I am not 100% sure if that's a good idea.,10272,2021-12-16T20:29:18Z,0
1341,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10272,2022-01-15T22:16:05Z,0
1342,Mr-Leshiy,Still in progress,10272,2022-01-16T08:29:39Z,0
1343,bkchr,Can you give an example on how to trigger this?,10672,2022-01-15T08:00:36Z,0
1344,nazar-pc,"Take any existing RPC endpoint that returns a vector of bytes, change it to return `vec![0u8; 1024 * 1024 * 10]` (will overflow default output buffer with any serialization method used) and make request to that endpoint with any RPC client (I used `wscat` for simplicity).

Once endpoint is triggered and above error is printed, node stops responding to any subsequent messages sent over still open WebSocket connection and connection just idles forever after that.",10672,2022-01-15T08:04:52Z,0
1345,bkchr,CC @niklasad1 @dvdplm ,10672,2022-01-15T08:16:44Z,0
1346,niklasad1,"Ok, I think it is https://github.com/paritytech/ws-rs/pull/8 that you run into.

We are in the process of replacing the jsonrpc rpc server with jsonrpsee I hope [this will merged ""soon"" (there are some minor fixes required AFAIK)](https://github.com/paritytech/substrate/pull/8783), so I hope this will be fixed by that (ideally we won't have to debug and fix this is ws-rs)

However, meanwhile we would really appreciate if you could try out the jsonrpsee branch but it would require some changes I could probably help you out if you want.

 ",10672,2022-01-15T09:48:33Z,0
1347,nazar-pc,"On `dp-jsonrpsee-integration-2` branch it fails on serialization step, thus not corrupting connection in the first place:
> Error serializing response: Error(""Memory capacity exceeded"", line: 0, column: 0)

Also client receives an error in response:
> {""jsonrpc"":""2.0"",""error"":{""code"":-32702,""message"":""Response is too big"",""data"":""Exceeded max limit 15728640""},""id"":1}

So yeah, it does fix the problem, but PR is open since May of last year, so having a fix in the meantime can still be valuable.

There could be other cases where buffer might be overflown, but I have no easy way to test it, so we can worry about it if it ends up being a problem.",10672,2022-01-15T12:18:03Z,0
1348,niklasad1,"Ok, cool.

I expect it to merged soon (within a couple weeks) and it's not really fixable without patching `ws-rs` again. `ws-rs` is really complicated with the recycling/re-use of cyclic buffers and so on so you might be right. Thus it's not a priority right now (sorry) I hope we can abandon it completely

",10672,2022-01-16T11:20:40Z,0
1349,gilescope,@bkchr can you let me know if this is in the direction that you were expecting? I'm sorry it's taken so long. There's a lot of pallet interactions and it's taken me a while to get to grip with creating clients as well.,10502,2021-12-16T17:19:31Z,0
1350,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10502,2022-01-16T13:45:11Z,0
1351,kianenigma,bot merge,10671,2022-01-15T08:01:45Z,0
1352,paritytech-processbot[bot], Error: Checks failed for 75a6b33eb288e304a5804122670275f636f8b9fb,10671,2022-01-15T08:01:52Z,0
1353,kianenigma,doesn't build. ,10671,2022-01-15T08:01:57Z,0
1354,emostov,bot merge,10671,2022-01-17T00:09:09Z,0
1355,paritytech-processbot[bot]," Error: Approval criteria was not satisfied in https://github.com/paritytech/polkadot/pull/4728.

The following errors **might** have affected the outcome of this attempt:


Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are team members of substrateteamleads or core-devs.",10671,2022-01-17T00:09:18Z,0
1356,shawntabrizi,bot merge,10671,2022-01-17T02:15:07Z,0
1357,tomaka,I haven't applied any `D-` label because I don't know which one is appropriate. Is this considered trivial?,10152,2021-11-02T11:10:02Z,0
1358,tomaka,I now just realize that I actually don't need this information in smoldot. However I think that this PR is still a good thing to do.,10152,2021-11-02T11:39:58Z,0
1359,andresilva,"`node/core/runtime-api/src/tests.rs` in Polkadot still needs to be updated, as well as cumulus. lgtm otherwise.",10152,2021-11-02T14:12:24Z,0
1360,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10152,2021-12-02T22:25:14Z,0
1361,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10152,2022-01-15T08:25:46Z,0
1362,tomaka,I blocked at the companion system,10152,2022-01-17T08:28:39Z,0
1363,bkchr,"> I blocked at the companion system

```
error[E0046]: not all trait items implemented, missing: `BabeApi_slot_duration_runtime_api_impl`
   --> node/core/runtime-api/src/tests.rs:170:2
    |
170 |     impl BabeApi<Block> for MockRuntimeApi {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `BabeApi_slot_duration_runtime_api_impl` in implementation
```

You did not update all usages.",10152,2022-01-17T08:54:38Z,0
1364,bkchr,bot merge,10679,2022-01-17T08:50:29Z,0
1365,paritytech-processbot[bot],Waiting for commit status.,10679,2022-01-17T08:50:37Z,0
1366,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10679,2022-01-17T09:31:44Z,0
1367,athei,bot merge,10595,2022-01-17T09:45:19Z,0
1368,bkchr,bot merge,10681,2022-01-17T12:51:56Z,0
1369,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10681,2022-01-17T12:52:09Z,0
1370,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8989,2021-07-07T16:13:55Z,0
1371,atenjin,I think this feature is useful. Many developers need this.,8989,2021-07-08T02:08:56Z,0
1372,RoyTimes,"We need to verify a cryptographic signature on smart contract as a core requirement for one of our product. Because the contract pallet does not support cryptographic verification, we'd forced to use EVM and deal with all the issues with account types. We would LOVE to see cryptographic signature support on wasm contracts. ",8989,2021-07-24T17:14:18Z,0
1373,athei,Yes it makes total sense to have those. I suggest using the schemes which are already provided by the client to the runtime to implement those.,8989,2021-08-30T12:03:20Z,0
1374,xgreenx,"I agree that we need support verification. But I think that signing must be forbidden. Because if someone tries to sign something in the contract, it means that the private key will be compromised.

About verification funciton. The question is which API do we expect?
Which size of the message? Is it 32 bytes(so the developer must hash it before using of verifying function) or it can have a dynamic size?
The signature can be 64 bytes(Sr25519 and Ed25519) or 65 bytes(ECDSA). Based on the type of verification.
The public key can be 32 bytes(Sr25519 and Ed25519). The question is about the ECDSA key. The size for the ECDSA key will be 32 bytes(the developer must hash the original compressed ecdsa public key by `blake2_256`) or it must be an original compressed ecdsa public key with 33 bytes?",8989,2021-08-30T12:53:52Z,0
1375,athei,"> But I think that signing must be forbidden. Because if someone tries to sign something in the contract, it means that the private key will be compromised.

You are right. Signing does not make sense in a public contract.

> About verification funciton. The question is which API do we expect?

I think this is exactly the reason why this issue wasn't tackled. There are so many ways of doing this and I am reluctant to ossify one way in the contracts API. Additionally, you have other possibilities than doing in-contract crypto on substrate. You could store the account id of some multi sig or proxy account and use those mechanisms. That said, having some flexible verification API would still be something we want.

",8989,2021-08-30T13:26:58Z,0
1376,athei,Fixed by https://github.com/paritytech/substrate/pull/9686,8989,2022-01-17T13:33:37Z,0
1377,shawntabrizi,"> is that some extrinsics can panic

It would seem to me that a panic in the runtime is already a ""game breaking"" problem to have in the code, and thus we should not design a less efficient system in the case that we can better handle an already broken code path.

If saving a single wasm instance will provide a significant performance increase, I think it makes perfect sense.",10557,2021-12-28T23:50:36Z,0
1378,bkchr,"You can not proof that there is never a panic anywhere. So, we need to take care of this.",10557,2021-12-29T22:27:58Z,0
1379,shawntabrizi,We already assume a panic in the runtime is a DDOS vulnerability to a chain. Does it actually matter then the scale of the DDOS?,10557,2021-12-30T04:00:26Z,0
1380,bkchr,"Here the problem could be that you stop block production on all validators. This is really bad! Currently, when you have one failing tx, nothing will happen. But, if we can not safely role back, it means the entire block needs to be thrown away. Yeah, we could restart and skip transactions, but this needs to be really thought through :P 

A panic could for example also happen because some storage entry can not be decoded anymore. There are tons of reasons why the runtime can panic. I know that we try to prevent it, but we can not proof this.",10557,2021-12-30T18:37:19Z,0
1381,bkchr,CC @athei ,10567,2021-12-29T22:31:08Z,0
1382,shawntabrizi,"This should already be possible with a `set_storage` call, so this request is just to make a more easy to use extrinsic?",10567,2021-12-30T04:27:22Z,0
1383,yarikbratashchuk,"@shawntabrizi, please take a look at [this wip pr](https://github.com/Supercolony-net/substrate/pull/2/files) to see what is used to make it work.
This request is to discuss and add first class solution for contract upgradability.",10567,2021-12-30T07:46:29Z,0
1384,xgreenx,"> This should already be possible with a `set_storage` call, so this request is just to make a more easy to use extrinsic?

`set_storage` uses the `write` function that changes some value by key in key-value storage.

<img width=""757"" alt=""image"" src=""https://user-images.githubusercontent.com/18346821/147740084-28ba57d7-d4ca-4a5a-8772-b21f79f465a6.png"">

The idea of `set_code` is that you can change the `ContractInfo` itself and set the hash of the code that should be used by the Contract in the future(this information is not stored in key-value storage).",10567,2021-12-30T09:44:59Z,0
1385,athei,"> This should already be possible with a `set_storage` call, so this request is just to make a more easy to use extrinsic?

You mean the `set_storage` callable from a contract? Nope. This cannot change the contracts code. This is on purpose because immutability is the defining feature of contracts.

How could I ever trust a contract which uses `set_code`? The only scenario I can imagine where this is OK to call is whenever `seal_terminate` is OK to call (when no user generated data is in the contract). But doesn't this defeat the purpose of `set_code`?",10567,2021-12-30T10:06:26Z,0
1386,yarikbratashchuk,"@athei, let me bring up some background for this:
As we're planning to implement [delegate_call](https://github.com/paritytech/substrate/issues/10566) (I assume this based on previous discussions on upgradable contracts in substrate/!ink) to allow developers to build upgradable contracts, we came up with the idea of `set_code` as a cheaper in terms of gas and cleaner in terms of an upgrade flow.
Imagine having a contract `A` that has a state and a library contract `B` that has a logic to update the state of contract `A` using `delegate_call`:
```
ContractA (proxy) -> delegate_call -> ContractB (library)
  state  <--------------modify---------  logic
```
The upgrade flow looks like this:
```
- deploy contractB' -> instantiate -> lib_contract_address
- update lib_contract_address in ContractA state
```
We have to trust that new lib contract is compatible with state of ContractA

With `set_code` approach we keep logic and state in one contract and the upgrade flow looks like this:
```
- make sure new contract version has set_code(code_hash) method to keep contract upgradable
- deploy new contract version -> new_contract_code_hash
- call ContractA.set_code(new_contract_code_hash) method to change the executable code
```
We achieve the same functionality with lower costs for user (no cross contract call) and easier upgrade flow for developer.
We still need `delegate_call` to be implemented though (#10566)

Feels like there is the same amount of trust as with a `delegate_call` approach.



",10567,2021-12-30T11:31:48Z,0
1387,shawntabrizi,"@athei if the argument is around ""trust"" or worrying that a contract can change itself, there can simply be a flag which enables or disables a contract from using this feature. Once it is disabled, it cannot be enabled again without ROOT.",10567,2021-12-30T14:17:06Z,0
1388,athei,"> Feels like there is the same amount of trust as with a delegate_call approach.

I agree. Having some storage field that can be changed to call an arbitrary code in the storage context of the current contract has the same consequences. This is merely moving this popular pattern to pallet-contracts in order to optimize it. I think this makes sense. 

> @athei if the argument is around ""trust"" or worrying that a contract can change itself, there can simply be a flag which enables or disables a contract from using this feature. Once it is disabled, it cannot be enabled again without ROOT.

I don't think this changes anything. Contracts which don't make use of this are already identifiable by not importing the `set_code` host function. Even if there is an additional ""switch"" that must be unlocked by governance the ""proxy admin"" could then still deploy any rogue code. Do we want code hashes be decided on by governance like with a runtime upgrade? I don't think so as this wouldn't scale well: Contracts should code their own mechanism to authorize `set_code`. Having a ""proxy admin"" is just the simplest form.
",10567,2022-01-03T11:52:06Z,0
1389,athei,Anyone want to tackle this: @yarikbratashchuk @xgreenx ?,10567,2022-01-17T13:16:55Z,0
1390,xgreenx,"> Anyone want to tackle this: @yarikbratashchuk @xgreenx ?

Yea, we already implemented it. Now it is on [review](https://github.com/Supercolony-net/substrate/pull/2) in our company repo, after passing it, we will create a PR=)",10567,2022-01-17T14:10:34Z,0
1391,bkchr,I think we should probably disable the simd stuff? So that nothing depends on this by accident? ,10674,2022-01-16T18:27:59Z,0
1392,nazar-pc,"Just curious, is there a roadmap for enabling those various WASM features in wasmtime?
They seem useful for performance, maybe there is a ticket I can follow (I have not been able to find on in this repo)?",10674,2022-01-16T22:54:57Z,0
1393,koute,"> Just curious, is there a roadmap for enabling those various WASM features in wasmtime? They seem useful for performance, maybe there is a ticket I can follow (I have not been able to find on in this repo)?

I don't think there is. But it's good to stay conservative unless we can show that enabling them will actually be beneficial in some way. If there's no benefit then there's no point in turning them on just for the sake of turning them on.",10674,2022-01-17T06:22:35Z,0
1394,nazar-pc,"Just noticed SIMD was already disabled, so there was no need to change anything.

",10674,2022-01-17T06:25:19Z,0
1395,koute,"Also, @nazar-pc FYI we tend to not force-push in our PRs to clean up the history; we just squash everything on merge.",10674,2022-01-17T06:26:13Z,0
1396,nazar-pc,Will keep that in mind going forward :+1: ,10674,2022-01-17T06:26:59Z,0
1397,koute,"> Just noticed SIMD was already disabled, so there was no need to change anything.

Indeed; I can confirm that we currently disable `wasm_simd`. (It was `false` by default in the previous release and they just switched the default to `true`, but we were already disabling it so nothing changes for us.)

One extra thing we should add is to also disable `wasm_memory64`. That *is* `false` by default for now, but we should just proactively disable it anyway (since they'll probably turn it on by default in the future once the spec is finalized).",10674,2022-01-17T06:34:45Z,0
1398,athei,bot merge,10680,2022-01-17T15:00:08Z,0
1399,bkchr,"1. This is done by intention, because people should first build the chain spec they will gonna use and then export the relevant data from this file. Everything else doesn't make any sense and is just more confusing.
2. You control the entire code that s being used for exporting the wasm.  https://github.com/paritytech/cumulus/blob/master/parachain-template/node/src/command.rs#L213-L233 This means, you can modify this as you like.",10675,2022-01-17T08:24:58Z,0
1400,chrisdcosta,"1) This only works if you use `dev` or `local` to extract your wasm blob. It does not work for any other chainspec that _is included in your runtime_ .

2) The link only shows that you are allowed to pass in parameters which I dealt with that case in the issue text.

By not addressing the issue, it makes the barrier to entry for developers that much harder because _there is no specific way to extract the current wasm blob_ that does not result in copy paste and multiple steps.",10675,2022-01-17T12:06:16Z,0
1401,bkchr,"> 2\. The link only shows that you are allowed to pass in parameters which I dealt with that case in the issue text.

If you speak about the `extract_genesis_wasm` function. This function is defined in the very same file: https://github.com/paritytech/cumulus/blob/master/parachain-template/node/src/command.rs#L110-L117 Aka this is your code and you can still whatever you like.



> 1. This only works if you use `dev` or `local` to extract your wasm blob. It does not work for any other chainspec that _is included in your runtime_ .

I don't understand this, as chain specs are not part of the runtime.



> _there is no specific way to extract the current wasm blob_ that does not result in copy paste and multiple steps.

You already copy and pasted the code, so I don't see any big difference.",10675,2022-01-17T12:11:45Z,0
1402,bkchr,In your repo the function is defined here: https://github.com/totem-tech/totem/blob/experimental-ledger/parachain-totem-kapex/node/src/command.rs#L116-L123,10675,2022-01-17T12:16:10Z,0
1403,bkchr,"When you want to launch a parachain, you should do the following:

1. Create a chain spec. (This is also what you do for solo blockchains).
2. Run `export-genesis-wasm --chain my-just-created-chain-spec.json` & `export-genesis-state --chain my-just-created-chain-spec.json`. By doing this, you ensure that the chain-spec and the data  that is being registered on the relay chain match.

We have already seen multiple times that step 2 failed, because people registered the wrong genesis state. To prevent this, we recommend the way as described above.

If you don't like this way, you are free to change your code in whatever way you like. This is one of the reason why the ""user"" code decides on what to do when a particular cli flag is given.",10675,2022-01-17T12:22:09Z,0
1404,chrisdcosta,"The issue is in ""Create a chain spec."" step one.

To ""create a chainspec"" you require a file that contains the wasm blob. To obtain wasm blob you use ""export-genesis-wasm"" to extract it. However it extracts from the chain spec not from the actual `.wasm` that you just compiled. Do you see the issue?

It does not surprise me that other teams are having issues, because they are unaware that the wasm blob isn't in fact coming from their current `.wasm` file. It's my opinion that it should.

I take your point that we could force it to use our compiled wasm.",10675,2022-01-17T16:17:24Z,0
1405,bkchr,"> To ""create a chainspec"" you require a file that contains the wasm blob. To obtain wasm blob you use ""export-genesis-wasm"" to extract it. However it extracts from the chain spec not from the actual `.wasm` that you just compiled. Do you see the issue?

No that is not true. https://docs.substrate.io/how-to-guides/v3/basics/custom-chain-spec/
Here you can read how you build your chain spec.",10675,2022-01-17T17:24:51Z,0
1406,bkchr,Try again with this: https://github.com/paritytech/cumulus/pull/907/ ,10676,2022-01-17T08:19:49Z,0
1407,kianenigma,"Yeah, the above PR in cumulus will fix this. Please reopen if otherwise.",10676,2022-01-17T20:03:44Z,0
1408,dependabot[bot],"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",10641,2022-01-17T21:16:23Z,0
1409,thiolliere,"there also was the idea of putting only the hash of the metadata in the wasm-blob instead of the full metadata. And instead distribute the metadata offchain.

The other advantage of having just the hash on chain is that currently building the metadata in wasm takes some time (it was a regression when we introduced the last metadata with full type info). So querying it takes some time. While fetching the hash would be faster.

Should we superseed this proposal with just having the hash of metadata on chain ?

Maybe @ascjones can give more opinion ?",9235,2021-12-15T04:09:30Z,0
1410,xlc,Remove docs will be an easy and quick short term solution. And we can also discuss in parallel on what will be the right long term solution.,9235,2021-12-15T04:24:16Z,0
1411,ascjones,"I agree that the docs shouldn't all be stored in the metadata. Would need to still make it easy to produce the docs for UIs cc @jacogr.

Existing work: https://github.com/paritytech/frame-metadata/pull/21, and also https://github.com/paritytech/scale-info/pull/120 which reduces the docs slightly.

I'm quite busy at the moment so not sure I will get around to following up on these this year though. Happy to review any contributions though.",9235,2021-12-15T09:20:00Z,0
1412,thiolliere,"ok I also open this PR to allow to remove the forcing of capturing docs on some FRAME types, and also makes doc for storage and constant empty:
https://github.com/paritytech/substrate/pull/10493 ",9235,2021-12-15T09:49:17Z,0
1413,ggwpez,bot merge,10677,2022-01-17T15:02:24Z,0
1414,paritytech-processbot[bot]," Error: Approval criteria was not satisfied in https://github.com/paritytech/substrate/pull/10677.

The following errors **might** have affected the outcome of this attempt:


Merge failed. Check out the [criteria for merge](https://github.com/paritytech/parity-processbot#criteria-for-merge). If you're not meeting the approval count, check if the approvers are team members of substrateteamleads or core-devs.",10677,2022-01-17T15:02:32Z,0
1415,dharjeezy,"I See you merged @ggwpez 
No tip? 😑😕",10677,2022-01-17T15:11:45Z,0
1416,shawntabrizi,"@dharjeezy if you ask for a tip, you will not get one.

This PR is a diff of 5 lines, 2 of which is just formatting. We appreciate your contributions and excitement for Substrate / Polkadot, but not all of your work is really worthy of an on chain tip.",10677,2022-01-18T02:39:40Z,0
1417,dharjeezy,"> @dharjeezy if you ask for a tip, you will not get one.
> 
> This PR is a diff of 5 lines, 2 of which is just formatting. We appreciate your contributions and excitement for Substrate / Polkadot, but not all of your work is really worthy of an on chain tip.

Alright. Thanks! ",10677,2022-01-18T04:07:19Z,0
1418,kianenigma,bot merge,10677,2022-01-18T08:18:44Z,0
1419,dharjeezy,Picking this up. @shawntabrizi ,10686,2022-01-18T04:09:43Z,0
1420,shawntabrizi,"@dharjeezy I havent had a chance to talk to the others in Substrate development about this change, so let's not jump on it so quickly.

If you need some good projects, I recommend looking at some of the open issues in https://github.com/paritytech/bench-bot/issues or even https://github.com/paritytech/substrate-tip-bot",10686,2022-01-18T05:19:55Z,0
1421,dharjeezy,"Alright @shawntabrizi 
Thanks for letting me understand, I am looking at contributing to rust projects basically.
I will appreciate if you  let me know when this issue is available for pick up after confirming from the substrate dev team. Thanks once again.
",10686,2022-01-18T09:08:34Z,0
1422,dharjeezy,"Hello @gavofyork I will like to pick this issue up, but i need help navigating the `construct_runtime` macro so as to get where the `Call` struct is defined and then implement this trait for it?",10139,2022-01-07T15:15:17Z,0
1423,dharjeezy,"> Hello @gavofyork I will like to pick this issue up, but i need help navigating the `construct_runtime` macro so as to get where the `Call` struct is defined and then implement this trait for it?

Hello @shawntabrizi or @ggwpez or @kianenigma sorry for bothering you, but can anyone of you please help me answer the question I asked so I can attempt this issue and open a PR for it?",10139,2022-01-18T09:14:02Z,0
1424,dharjeezy,"@ggwpez attempted this issue, kindly look at my solution in the PR.",10665,2022-01-16T23:37:18Z,0
1425,ggwpez,"#10677 implemented the list part, leaving this issue open since the regex could still be relevant.",10665,2022-01-18T09:28:26Z,0
1426,dharjeezy,"> #10677 implemented the list part, leaving this issue open since the regex could still be relevant.

Hello @ggwpez what is the regex supposed to specifically do asides from the comma separation that the other PR did? ",10665,2022-01-18T09:32:40Z,0
1427,ggwpez,"> Hello @ggwpez what is the regex supposed to specifically do asides from the comma separation that the other PR did?

It would allow for more advanced filtering. But the list approach is good enough for now, just wanted to keep track of it.",10665,2022-01-18T09:35:54Z,0
1428,dharjeezy,"> > Hello @ggwpez what is the regex supposed to specifically do asides from the comma separation that the other PR did?
> 
> It would allow for more advanced filtering. But the list approach is good enough for now, just wanted to keep track of it.

Alright @ggwpez when you ascertain what the advance filtering would be then i am willing to pick it up and implement so as to close out this issue.",10665,2022-01-18T10:41:51Z,0
1429,thiolliere,"I have this PR https://github.com/paritytech/substrate/pull/10159 based on https://github.com/paritytech/substrate/pull/10356
It creates a pallet to whitelist some calls with origin and execute those whitelisted call from another origin",10252,2021-12-07T03:22:51Z,0
1430,shawntabrizi,bot merge,10693,2022-01-18T19:05:03Z,0
1431,dharjeezy,"Hello @shawntabrizi is this particular issue available for pick up?
I am willing to pick it up
",10687,2022-01-18T10:38:38Z,0
1432,bkchr,"> All of these types have some complicated traits which are expected from the `construct_runtime!` macro

That is not correct. You add the traits bounds that you are require for a certain type in your pallet. The runtime is only required to provide types that implement the given traits.",10687,2022-01-18T10:47:24Z,0
1433,shawntabrizi,"@bkchr I think you are saying what I am saying? 

For example, we know `construct_runtime!` implements a bunch of traits, like `From`/`Into` for inner and outer events, inner and outer origin, inner and outer Call type.

We also know that something like the `Call` type must satisfy a bunch of traits which are expected in other parts of the codebase, like `Dispatchable` or `GetDispatchInfo`. The whole thing I am saying is we can take all these assumptions about common types in the FRAME runtime and place them under a single simple trait.

Or what am I misunderstanding?",10687,2022-01-19T01:53:39Z,0
1434,xlc,We have already implemented exactly this in our pallet https://github.com/open-web3-stack/open-runtime-module-library/pull/603,10159,2021-11-02T22:27:01Z,0
1435,KiChjang,"Maybe I'm oversimplifying this, but do we actually need a new trait and implement it on the error enum?",10242,2021-11-11T22:09:30Z,0
1436,KiChjang,"Okay, the basic implementation for restricting the Error enum to only contain types that have an encoded size of 1 byte is done. What I'm not 100% certain right now is whether the `char` type has an encoded size of 1 byte. I believe that for ASCII `char`s, that will certainly be the case, but since Rust `char`s are UTF-8, this may not be the case. How do we SCALE-encode Rust chars?",10242,2021-11-21T00:27:03Z,0
1437,brenzi,"We have proposed a solution for this based on Intel SGX TEEs:
https://github.com/w3f/Web3-collaboration/pull/234
  * our solution targets on-premise Intel HW (although cloud-SGX would be possible)
  * Our grant proposal doesn't (yet) include modifying the substrate client stated in this issue
  * VRF could be a low hanging fruit, but isn't part of our proposal

Remarks to your OP:
  * Concerning your suggested API I'd be careful with the *add key* functionality. I would very much encourage people to let the TEE generate keys, because provisioning keys into a TEE opens an attack vector. 
  * Moreover, as our [concept document](https://github.com/scs/substraTEE/blob/master/validator-protection/VALIDATOR_PROTECTION_PROPOSALS.md) suggests, double signing protection is not enough to protect against slashing if you assume full compromise of the validator host. The remote signer should also be capable of block execution for serious slashing protection (therefore, HSM's don't seem like a viable solution. They just provide the ""wrong"" kind of security)
  * you mention that Ledger devices could do double signing protection. Please state that TEEs can do this too (even more flexibly).

",4689,2020-01-21T13:32:18Z,0
1438,burdges,"We're about to do a new VRF, likely called VRedJubJub, that'll we'll need to support as well, and of course BLS signatures, but they do not add as much complexity here, but of course legder devices cannot produce SNARKs and maybe cannot do BLS signatures.   ",4689,2020-01-22T01:00:28Z,0
1439,Noc2,Just for your information: [Zondax](https://zondax.ch/) is receiving a grant from us to work on a flexible TrustZone-based HSM stack,4689,2020-01-26T19:50:00Z,0
1440,gnunicorn,"Changing this in substrate will be very involved, as it introduces a completely different pattern of what the keystore is and how it works. They way it works right now is, that the keystore is a single entity in the system (either in memory or saved on disk), holding different types of keys for different tasks. When a component needs to sign something it asks the keystore for the appropriate keys and uses them to sign the data. Meaning this is a direct, non-blocking API and in doubt the keys holds all information for signing directly in memory–though discouraged, you can keep the key around and reuse it.

This however, proposes a completely different approach how signing works. Rather than the keystore holding the keys, you'd have to submit something you'd like to have signed to it and wait for that to return. Making it an async and indirect API. While not impossible, a range of crates depend on the keystore directly and a range of others imply this pattern (e.g. GRANDPA). Switching these is a pretty large task, touching a lot of code, many of which are sync right now and would become async as a result, with –probably– a big tail of things to have to change in responds to that ;) .",4689,2020-01-28T16:59:06Z,0
1441,burdges,"We'd prefer doing this by features, not adding some new `Signer` trait to every substrate crate, right?  We've [no roadmap](https://rust-lang.github.io/async-book/07_workarounds/06_async_in_traits.html) for async fns in traits of course, but this holds even if async fns in traits worked, right? ",4689,2020-01-29T02:18:25Z,0
1442,bkchr,"I don't think that it will be that *involved* on the Substrate side of signing. It is right that we need some changes here and there. However, aura, grandpa and babe are already async. The trait can just return a `Future` as result and we wait for the signing. By default with no remote signing the api would be blocking and return directly the signed data. 

Offchain signing (imonline) shouldn't also be that hard, we need to call into the host anyway and use `block_on` to wait for the future, like we do it for http requests.

As everything uses the `Keystore` behind a trait already, it should really be not that hard to integrate.",4689,2020-01-29T08:26:58Z,0
1443,burdges,"I donno if https://github.com/iqlusioninc/armistice is relevant, but maybe good to track if you'd working on this stuff",4689,2020-03-04T19:09:43Z,0
1444,Demi-Marie,"> Changing this in substrate will be very involved, as it introduces a completely different pattern of what the keystore is and how it works. They way it works right now is, that the keystore is a single entity in the system (either in memory or saved on disk), holding different types of keys for different tasks. When a component needs to sign something it asks the keystore for the appropriate keys and uses them to sign the data. Meaning this is a direct, non-blocking API and in doubt the keys holds all information for signing directly in memory–though discouraged, you can keep the key around and reuse it.
> 
> This however, proposes a completely different approach how signing works. Rather than the keystore holding the keys, you'd have to submit something you'd like to have signed to it and wait for that to return. Making it an async and indirect API. While not impossible, a range of crates depend on the keystore directly and a range of others imply this pattern (e.g. GRANDPA). Switching these is a pretty large task, touching a lot of code, many of which are sync right now and would become async as a result, with –probably– a big tail of things to have to change in responds to that ;) .

Some implementations might actually be synchronous, such as those based on an on-chip TEE.",4689,2020-03-25T20:16:17Z,0
1445,jleni,"I think keystore and signer should be two different independent entities. Actually the concept of a software-based keystore may not always be required.. Substrate should ideally deal with a signer only. This signer may later rely on a keystore or not.

My recommendation is to aim for an asynchronous design to cope with latency issues. Even in the case of fast TEEs, it can affect performance if signing operations require context switches, syscalls, etc.

With respect to the work we did at Zondax in Tendermint, yes we used the HSM in Ledger devices (deserializing votes, checking with a monotonic counter, etc.). Latency in these devices is in the order of tens of milliseconds so an asynchronous approach was very important regardless of running in-process or remotely. 

We are now working on a completely new design for Kusama/Polkadot/Substrate with a very much hardened datacenter-quality external device, running in a TEE plus in some models we even have access to an integrated HSM. While running a ""lean"" node would be possible, it means adding a bigger attack surface that we strongly would like to avoid.

Anyway, I am not sure if this discussion is still active.. though having seen the changes here https://github.com/paritytech/substrate/pull/4925/files. I think a good and quick step forward would be to:
1- Decouple the keystore implementation using two traits (i.e. signer, and keystore)
2- Move the current keystore implementation to another crate

This way interested parties can provide clean alternative implementations.

3- Ideally make `sign_with` async.. however, I understand that it may require substantial work and you prefer to avoid it for now.",4689,2020-03-25T22:00:23Z,0
1446,jleni,"IMO, once the signer/keystore have been fully decoupled and made async.. third-party implementations can define their own API, comm protocol, in-process vs remote approach, etc. I think this is the most flexible approach.

There is still one more complex but important issue. At the moment, signers operate on blobs, so they cannot really know what it is being signed. In some cases, signers may even received hashes of the actual content. This severely limits how smart a signer can be.. meaning, it is not possible to track and design adequate double signing protection schemes.

I would need to dig more into the current substrate implementation, but I wonder if there are a few convenient places that could be extended to provide more information at the moment of signing or this is at the moment scattered all over the code. 

Otherwise, I can already see that, at least from my project perspective, the keystore is actually not the point where we need to plug-in but just before GRANDPA/BABE/etc decide to sign and still have an structured object.",4689,2020-03-25T22:20:57Z,0
1447,brenzi,"@jleni: Knowing and understanding what you sign is not enough. You need to be able to *verify* the payload. In the case of signing a block, you need to verify that the block is fresh and legit (builds upon HEAD and executes correctly) and you should prevent double signing. This means you need to know a lot of context before signing. We have previously [elaborated](https://github.com/scs/substraTEE/blob/master/validator-protection/VALIDATOR_PROTECTION_PROPOSALS.md) on this.",4689,2020-03-26T07:24:37Z,0
1448,jleni,"Well, yes.. I understand this. I think we are talking about the same thing here. It can be enough in some specific cases like double sign tracking.

What we initially did in Tendermint (already a few years ago) is what you call Replay Attack Mitigation in your document. We used a Ledger device with a custom app that could deserialize votes and keep a relatively small state. We kept block verification on the validator node.

I was actually trying to ask for a small incremental step related to this particular issue. If the scope is block verification, things are different and you need a very good implementation for a light client.. I think this it out of scope in this issue.

High availability is something more complex and there are many options. I would initially discourage using JSONRPC, but that is part of another discussion. What I would definitely recommend is again, decoupling the signer/keystore, move it to another crate and allow external implementations to override this. There are multiple solutions, more advanced transport options, etc. 

The best option is to create a simple and separate reference crate with the code that already exist and leave this open to further third-party improvements.",4689,2020-03-26T08:37:23Z,0
1449,Demi-Marie,"@brenzi @jleni this seems like a perfect use-case for a formally-verified microkernel, such as seL4.  The microkernel could provide software-based isolation between untrusted components, such as the network stack, and trusted components, such as the signer implementation.

One major caveat is that the main framework that I know of for using seL4, CAmkES, only supports systems where all resources are statically allocated.  Ideally, the trusted code should not use dynamic memory allocation, but I am not sure if this is practical.",4689,2020-03-26T19:37:31Z,0
1450,brenzi,"@DemiMarie-parity Very interesting! But wouldn't this require self-hosted signer HW? Even if cloud services would offer SeL4 VPS, why would you trust them? They still have access to all memory. Am I missing something?",4689,2020-03-27T09:22:15Z,0
1451,Demi-Marie,"> @DemiMarie-parity Very interesting! But wouldn't this require self-hosted signer HW? Even if cloud services would offer SeL4 VPS, why would you trust them? They still have access to all memory. Am I missing something?

@brenzi You are not.  That is one reason why self-hosted signer hardware should be preferred.  The biggest caveat is that not everyone can provide the level of *physical* security required, and most cannot provide the needed protection against DDoS attacks.  Could @kirushik chip in?

Using seL4 has a few caveats:

* It is very much “batteries not included” ― expect to bring your own filesystem and drivers.  Fortunately, seL4 is also a hypervisor, and can run Linux/OpenBSD/etc in a VM.
* IOMMU/SMMU support is not verified yet, but could be given adequate funding.  Without IOMMU/SMMU support, one must trust all of the drivers, which are a substantial amount of unverified code exposed to untrusted input from the network.
* The verified version only supports a single CPU core.  Verifying the multicore version is possible but would require funding.
* seL4 has virtually exclusively been used in the embedded space.",4689,2020-03-27T17:13:51Z,0
1452,Demi-Marie,"To elaborate: From my perspective, the only advantage of a TEE and/or HSM is protection against attackers with physical access.  I believe that equally important, if not more important, is privilege separation a la QubesOS.  While Substrate is a substantial attack surface, we can remove much of the rest.",4689,2020-03-29T23:32:28Z,0
1453,Demi-Marie,Working with QubesOS and Redox might be a good idea as well.,4689,2020-03-29T23:47:17Z,0
1454,jleni,"> To elaborate: From my perspective, the only advantage of a TEE and/or HSM is protection against attackers with physical access. I believe that equally important, if not more important, is privilege separation a la QubesOS. While Substrate is a substantial attack surface, we can remove much of the rest.

I disagree with this, TEEs do not have much to do with physical access. Both TEEs and HSMs can provide different (better?) guarantees than QubesOS (basically a Xen hypervisor without ASLR or NX).

I will not write extensively here, to avoid going off-topic, given this issue is mostly about providing an API for teams to provide their preferred security solution. Happy to organize or a Riot channel about this though! 

Nevertheless, as there are MANY valid alternatives and approaches, I would strongly suggest to make the architecture as flexible as possible so different solutions can be integrated over time.",4689,2020-03-30T03:37:14Z,0
1455,rakanalh,"To advance this a bit further, especially after merging #4925, here's my line of thinking when it comes to implementing client support for remote signing:

- Introduce a `Signer` interface that aligns with what we did previously by introducing `sign_with` into the keystore.

```rust
pub trait Signer {
	fn supported_keys(
		&self,
		id: KeyTypeId,
	) -> Result<Vec<CryptoTypePublicPair>, BareCryptoStoreError>;

	fn sign_with(
		&self,
		id: KeyTypeId,
		key: &CryptoTypePublicPair,
		msg: &[u8],
                at_blockhash: &[u8],
	) -> Result<Vec<u8>, BareCryptoStoreError>;
}
```

- The signer in this case, would be used by `sp_io` to dispatch sign requests regardless of how the signer is internally implemented.
- The substrate node can be configured to run the signer in 3 modes:

```rust
/// Type of the client signer.
#[derive(Clone, Debug)]
pub enum SignerType {
	Local,
	RemoteClient,
	RemoteServer,
}
```
- `Local` signing means that we use the internal keystore to perform signing. This can happen in the following manner:
```rust
pub struct LocalSigner {
	keystore: Store,
}
impl LocalSigner {
	fn new(keystore: Store) -> LocalSigner {
		LocalSigner {
			keystore,
		}
	}
}
impl Signer for LocalSigner {
	fn sign_with(
		&self,
		id: KeyTypeId,
		key: &CryptoTypePublicPair,
		msg: &[u8],
                _at_blockhash: &[u8],
	) -> Result<Vec<std::primitive::u8>, BareCryptoStoreError> {
		self.keystore.sign_with(id, key, msg)
	}

	fn supported_keys(
		&self,
		id: KeyTypeId,
	) -> Result<Vec<CryptoTypePublicPair>, BareCryptoStoreError> {
		self.keystore.supported_keys(id, vec![])
	}

}
```
- `RemoteClient` type of signer is where the substrate node dispatches signing requests towards a specific host/port over a specific endpoint for signing, be it an HTTP(s) call or a gRPC or potentially other protocols.
- `RemoteServer`, on the other hand, tells the substrate node that it should open a port and listen for ""secure"" connections where the node can send signing requests over this connection.

- We could also abstract the protocol implementation into it's own trait so that additional protocols can be implemented on top of this where incoming / outgoing payloads can be encoded / decoded.

- To enable double-signing protection to be implemented by the server, it is suggested that the `sign_with` interface also adds `at_blockhash` parameter where the signing requests explicitly define the block hash at which signing should happen. This enables the server to query certain blockchain information such as block height or other parameters required.

- The interface is defined to be ""sync"" here but could use `block_on` to perform async operations. That is, until async support is implemented in certain parts of the substrate codebase.

I would like to get some feedback on the above to move this forward.
",4689,2020-04-20T11:14:15Z,0
1456,bkchr,"Why do you want to introduce a new trait? The `KeyStore` trait is exactly meant for this, as abstraction over the key store.

`RemoteServer` should be an extra application and should not be included into the Substrate node!

You don't need to pass `at_blockhash` to the sign function. Based on the key type, you can decode the opaque blob that should be signed and this blob already contains all the information you need to prevent double signing.",4689,2020-05-04T09:37:40Z,0
1457,rakanalh,"> Why do you want to introduce a new trait? The `KeyStore` trait is exactly meant for this, as abstraction over the key store.

You're absolutely right. After working on the code for a bit, it is apparent to me that the separation of Signer and Keystore doesn't make sense. I am reverting the work i did by keeping Keystore as-is and going to introduce `RemoteKeystore` which handles remote key management and signing.",4689,2020-05-06T14:22:45Z,0
1458,rakanalh,"> You don't need to pass at_blockhash to the sign function. Based on the key type, you can decode the opaque blob that should be signed and this blob already contains all the information you need to prevent double signing.

Could you expand on this a bit please? how would the key type be relevant to the blob sent for signing?",4689,2020-05-06T14:23:39Z,0
1459,bkchr,"If you see the `KeyType` that is used by `Babe`, you can just decode the blob to the `Babe` specific structure. The same goes for `Grandpa`. Every key type makes it possible to identify the encoded blob to decode it.",4689,2020-05-06T16:07:51Z,0
1460,burdges,"I've increasingly realized that block seals should probably use the `extra` arguments to VRFs in https://github.com/w3f/schnorrkel/blob/master/src/vrf.rs not a separate signature, but not worth the effort required to change this since it'd only save 64 bytes per block.",4689,2020-05-06T22:17:24Z,0
1461,Demi-Marie,"@burdges I would love to see that change be made sooner rather than later, but I am not sure if it is practical right now.  We can always make it at the next hard fork.",4689,2020-05-09T08:58:18Z,0
1462,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8610,2021-07-07T18:13:24Z,0
1463,tomaka,Issue still relevant and important.,8610,2021-07-08T07:20:17Z,0
1464,wigy-opensource-developer,"""each big refactoring has lead to months of tedious debugging sessions"" -> I hope that was not your best motivation speech ever :stuck_out_tongue_closed_eyes: Anyways, I will go through the code, but I guess it needs a few commits to get all CI checks green yet.",10688,2022-01-18T12:40:08Z,0
1465,tomaka,"> Every protocol needs their own config parameters, and extra_sets does not allow to provide them.

I swear I opened an issue about this, but I can't find it.
To me the solution is to refactor the public API of sc-network to make it possible to accept/reject peers based on their handshake. This is essentially what this PR right now is doing: accepting/rejecting peers based on their handshake.

There's no need to ""inject"" a set of accept/deny conditions to the networking, you just have to add a new state to a peer, which is ""waiting for acceptance/denial by the upper layers"".

This is not really doable right now because all new peers substreams events are reported to all the listeners, whereas making this accept/deny system work requires a specific higher-level owner for each peer-substream tuple.

> We might reason, parts of it is to stay backward compatible, but we still break that every now and then.

I agree it's not great, but the fact that we're doing peer-to-peer networking is really helpful here, because nodes don't have to give a reason to deny a peer or close a substream.
The networking protocol doesn't give any guarantee of liveness, and so we are more or less free to break this.
",10688,2022-01-19T09:34:55Z,0
1466,tomaka,"Merging, as we want to fork off Polkadot 0.9.16 today.",10688,2022-01-19T10:58:20Z,0
1467,tomaka,bot merge,10688,2022-01-19T10:58:31Z,0
1468,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10494,2022-01-19T13:11:06Z,0
1469,gavofyork,CC @rrtti ,10689,2022-01-18T14:00:48Z,0
1470,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8965,2021-07-07T16:13:58Z,0
1471,thiolliere,"I understand the interest but actually I don't see that much possible improvments in practice:
* Weights: people should simply writes 0 for their toy pallet.
* MaxEncodedLen: I was thinking keeping the constraint optional as it is currently.
* transactional extrinsic: I think it is a logical change, people can use them or not, in both toy pallet and production pallet.
* `()` implementation of traits: This one makes sense to me, maybe we want to prevent dumb implementation in production network. Maybe we can start the habit with explicit name for dumb implementation, like we did for filter IIRC, so instead of `()` implementation we would have some explicit name which state whether it makes sense in production.

For the mock configuration when testing pallet, I know people complains about setting it, but it is always the same configuration of frame-system, providing a good example to copy and paste could be enough to be able to set easily.",8965,2021-09-23T09:00:02Z,0
1472,shawntabrizi,"For implementing this on the pallet, I suggest a syntax like:

```
#[frame_support::pallet]
#[frame_support::pallet::dev_mode] // <----
pub mod pallet {
    ...
}
```

Which will automatically remove the need for `#[weight()]` attribute (probably set weight to 0 for all extrinsics), and also automatically add `#[without_storage_info]` flag (https://github.com/paritytech/substrate/pull/10662).",8965,2022-01-19T15:27:17Z,0
1473,gabreal,resolved by https://github.com/paritytech/polkadot/pull/3623 and https://github.com/paritytech/substrate/pull/9543,9534,2022-01-19T16:40:44Z,0
1474,KiChjang,Would this make migrations look more or less akin to database migrations for a server backend? I think that should ideally be what we're aiming for here.,10308,2022-01-19T07:15:49Z,0
1475,kianenigma,"> Would this make migrations look more or less akin to database migrations for a server backend? I think that should ideally be what we're aiming for here.

totally. ",10308,2022-01-19T19:31:52Z,0
1476,jamesblacklock,/benchmark runtime pallet pallet_contracts,10489,2021-12-15T00:05:47Z,0
1477,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""wasmer-2.1-test-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.28
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.28
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.191
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     69.92     0.839    1.1%
   20     55.85     0.422    0.7%
   40     92.51     1.025    1.1%
   60     129.6     0.974    0.7%
   80     161.9     1.303    0.8%
  100     199.6     2.565    1.2%
  120     238.1     1.589    0.6%
  140     279.4     2.208    0.7%
  160     319.3     3.925    1.2%
  180     365.3     7.393    2.0%
  200     402.9     2.262    0.5%
  220     452.5     8.069    1.7%
  240     495.8     6.174    1.2%
  260     530.2     4.343    0.8%
  280     585.7     6.536    1.1%
  300       635     10.63    1.6%
  320     673.6     3.189    0.4%
  340       720     5.024    0.6%
  360       765     6.223    0.8%
  380       789     6.847    0.8%
  400     834.5      3.32    0.3%
  420     887.8     8.066    0.9%
  440     928.1     11.34    1.2%
  460     970.2     9.837    1.0%
  480      1010     11.04    1.0%
  500      1059     10.35    0.9%
  520      1124     11.34    1.0%
  540      1159     8.509    0.7%
  560      1207     7.081    0.5%
  580      1236     11.59    0.9%
  600      1291     6.302    0.4%
  620      1338     4.547    0.3%
  640      1373     13.07    0.9%
  660      1443     13.47    0.9%
  680      1474     7.152    0.4%
  700      1504     24.59    1.6%
  720      1532      17.8    1.1%
  740      1582     10.96    0.6%
  760      1663     14.75    0.8%
  780      1702     17.18    1.0%
  800      1732     9.188    0.5%
  820      1799     13.37    0.7%
  840      1831     15.43    0.8%
  860      1882     20.59    1.0%
  880      1924     13.56    0.7%
  900      1972     15.91    0.8%
  920      2003     21.28    1.0%
  940      2075     19.74    0.9%
  960      2122     14.91    0.7%
  980      2114     9.751    0.4%
 1000      2200      15.1    0.6%
 1020      2232     22.48    1.0%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.199
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    95.68
    + q    0.249
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.332     0.015    0.6%
   20     86.05     3.919    4.5%
   40     92.21     1.188    1.2%
   60     100.2      1.18    1.1%
   80     108.4     1.169    1.0%
  100     116.1      0.98    0.8%
  120     124.7     2.436    1.9%
  140     131.1     1.217    0.9%
  160     139.2     0.991    0.7%
  180     150.6     2.121    1.4%
  200     154.5     1.313    0.8%
  220     162.3     2.103    1.2%
  240     168.7     1.671    0.9%
  260     176.1     1.396    0.7%
  280     183.3     0.932    0.5%
  300     184.1     1.993    1.0%
  320     195.5     2.734    1.3%
  340     176.4     4.898    2.7%
  360     209.1     1.209    0.5%
  380     186.6     1.771    0.9%
  400     223.6     1.531    0.6%
  420     197.1     3.144    1.5%
  440     201.3     1.769    0.8%
  460       206     1.005    0.4%
  480       210     1.173    0.5%
  500       217     2.329    1.0%
  520     222.4     1.762    0.7%
  540     229.9     4.665    2.0%
  560     237.3     3.512    1.4%
  580       237     2.474    1.0%
  600     244.7      2.06    0.8%
  620     249.5     2.032    0.8%
  640     252.7     2.209    0.8%
  660     263.1     1.912    0.7%
  680     265.6     1.191    0.4%
  700     272.2      1.68    0.6%
  720     276.1     1.019    0.3%
  740       281     1.673    0.5%
  760       290     1.323    0.4%
  780     294.3     1.985    0.6%
  800     297.9     1.192    0.4%
  820     301.4     1.004    0.3%
  840     307.8     1.648    0.5%
  860     310.2     1.197    0.3%
  880     314.4     1.446    0.4%
  900     317.1     0.789    0.2%
  920     321.5     1.169    0.3%
  940     326.8     1.074    0.3%
  960     329.9     1.867    0.5%
  980     333.3     1.644    0.4%
 1000     339.7     2.049    0.6%
 1020     343.5      0.64    0.1%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=     92.3
    + q    0.255
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    42.13
    + c    90.68
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     47.52     0.145    0.3%
    2     227.7     0.423    0.1%
    4     410.7     11.25    2.7%
    6     569.3      0.29    0.0%
    8     760.9     4.702    0.6%
   10     940.2     12.07    1.2%
   12      1097     10.98    1.0%
   14      1320     14.86    1.1%
   16      1481     15.01    1.0%
   18      1660     13.55    0.8%
   20      1835     15.69    0.8%
   22      1998     18.12    0.9%
   24      2189     11.25    0.5%
   26      2428     14.21    0.5%
   28      2596     12.53    0.4%
   30      2750     14.11    0.5%
   32      2934     4.382    0.1%
   34      3141     4.542    0.1%
   36      3298     14.72    0.4%
   38      3461      14.5    0.4%
   40      3688     3.343    0.0%
   42      3790     11.88    0.3%
   44      3969     15.57    0.3%
   46      4128     9.208    0.2%
   48      4300     24.49    0.5%
   50      4657     23.01    0.4%
   52      4819        19    0.3%
   54      4991     15.57    0.3%
   56      5147     14.96    0.2%
   58      5316     15.15    0.2%
   60      5485     19.47    0.3%
   62      5651     18.47    0.3%
   64      5784     19.73    0.3%
   66      6070     14.05    0.2%
   68      6230     18.64    0.2%
   70      6403     20.72    0.3%
   72      6556     17.45    0.2%
   74      6734     23.33    0.3%
   76      6882     11.23    0.1%
   78      7040     14.58    0.2%
   80      7217     18.76    0.2%
   82      7381      14.7    0.1%
   84      7548     32.54    0.4%
   86      7701     22.35    0.2%
   88      7862     22.41    0.2%
   90      8019     15.03    0.1%
   92      8188      22.5    0.2%
   94      8359        21    0.2%
   96      8529     28.36    0.3%
   98      9132      24.5    0.2%
  100      9254     13.52    0.1%
  102      9453     37.76    0.3%
  104      9641     39.34    0.4%
  106      9794      27.2    0.2%
  108      9976     36.93    0.3%
  110     10100     20.15    0.1%
  112     10270     18.72    0.1%
  114     10430     17.77    0.1%
  116     10600     14.86    0.1%
  118     10760     22.03    0.2%
  120     10910     15.39    0.1%
  122     11100     16.27    0.1%
  124     11270     28.13    0.2%
  126     11410     26.49    0.2%
  128     11540     13.99    0.1%

Quality and confidence:
param     error
c         0.091

Model:
Time ~=     23.9
    + c     90.8
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    398.5
    + c    78.61
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     404.8     0.442    0.1%
    2     572.6     0.587    0.1%
    4       727     0.678    0.0%
    6     867.3     11.12    1.2%
    8      1038     9.303    0.8%
   10      1171     4.467    0.3%
   12      1309      12.1    0.9%
   14      1512     0.863    0.0%
   16      1656     10.15    0.6%
   18      1798     8.888    0.4%
   20      1942     16.42    0.8%
   22      2070     8.901    0.4%
   24      2219     11.47    0.5%
   26      2499     12.83    0.5%
   28      2627     10.27    0.3%
   30      2764     9.758    0.3%
   32      2891     13.48    0.4%
   34      3069     12.21    0.3%
   36      3205     10.71    0.3%
   38      3347     26.67    0.7%
   40      3473     13.89    0.3%
   42      3618     17.78    0.4%
   44      3744     12.55    0.3%
   46      3869     13.59    0.3%
   48      4019     18.92    0.4%
   50      4460     5.908    0.1%
   52      4606      14.9    0.3%
   54      4741     9.559    0.2%
   56      4867     12.95    0.2%
   58      4993     12.47    0.2%
   60      5137      10.2    0.1%
   62      5267      16.4    0.3%
   64      5397      8.31    0.1%
   66      5586     4.761    0.0%
   68      5842     18.75    0.3%
   70      5872     11.23    0.1%
   72      5994     13.16    0.2%
   74      6144      22.6    0.3%
   76      6261     11.54    0.1%
   78      6408     21.55    0.3%
   80      6551     23.59    0.3%
   82      6656     11.49    0.1%
   84      6792     6.811    0.1%
   86      6930     13.76    0.1%
   88      7073     17.13    0.2%
   90      7201     18.55    0.2%
   92      7346     18.43    0.2%
   94      7475     16.15    0.2%
   96      7611     18.38    0.2%
   98      8373        15    0.1%
  100      8500      16.7    0.1%
  102      8658      11.5    0.1%
  104      8801     27.32    0.3%
  106      8929     23.94    0.2%
  108      9077     21.65    0.2%
  110      9198     25.15    0.2%
  112      9334     25.49    0.2%
  114      9470     31.17    0.3%
  116      9597     23.43    0.2%
  118      9736     24.34    0.2%
  120      9866     25.39    0.2%
  122     10000     20.19    0.2%
  124     10130     24.21    0.2%
  126     10280     21.63    0.2%
  128     10420     23.57    0.2%

Quality and confidence:
param     error
c         0.138

Model:
Time ~=    364.7
    + c    78.92
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    538.9
    + c    196.3
    + s    2.012
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2673     15.92    0.5%
    1  1024      2802      17.1    0.6%
    2  1024      2968     11.45    0.3%
    3  1024      3179      17.7    0.5%
    4  1024      3361     17.37    0.5%
    5  1024      3553     16.82    0.4%
    6  1024      3734     17.34    0.4%
    7  1024      3963     18.75    0.4%
    8  1024      4129     13.89    0.3%
    9  1024      4360     22.47    0.5%
   10  1024      4538     9.817    0.2%
   11  1024      4722     13.41    0.2%
   12  1024      4911     17.02    0.3%
   13  1024      5137     9.095    0.1%
   14  1024      5332     27.77    0.5%
   15  1024      5506     14.51    0.2%
   16  1024      5680     23.41    0.4%
   17  1024      6014     31.24    0.5%
   18  1024      6171     14.72    0.2%
   19  1024      6343     12.04    0.1%
   20  1024      6529     22.32    0.3%
   21  1024      6704      16.7    0.2%
   22  1024      6875     17.48    0.2%
   23  1024      7032     20.42    0.2%
   24  1024      7209     12.87    0.1%
   25  1024      7594     22.94    0.3%
   26  1024      7738     14.03    0.1%
   27  1024      7905     19.36    0.2%
   28  1024      8090     23.77    0.2%
   29  1024      8267      25.7    0.3%
   30  1024      8453     11.87    0.1%
   31  1024      8612     25.94    0.3%
   32  1024      8802     19.33    0.2%
   33  1024      9246      18.9    0.2%
   34  1024      9419     20.85    0.2%
   35  1024      9605     30.53    0.3%
   36  1024      9757      22.5    0.2%
   37  1024      9942     30.15    0.3%
   38  1024     10130     37.96    0.3%
   39  1024     10310     32.62    0.3%
   40  1024     10470     19.37    0.1%
   41  1024     10660     23.04    0.2%
   42  1024     10820     22.92    0.2%
   43  1024     11020      26.8    0.2%
   44  1024     11210     29.67    0.2%
   45  1024     11350     39.71    0.3%
   46  1024     11550     53.98    0.4%
   47  1024     11680     31.05    0.2%
   48  1024     11880     44.79    0.3%
   49  1024     12400     39.04    0.3%
   50  1024     12560     38.05    0.3%
   51  1024     12750     48.22    0.3%
   52  1024     12910     36.14    0.2%
   53  1024     13070     17.03    0.1%
   54  1024     13250     33.72    0.2%
   55  1024     13450     29.31    0.2%
   56  1024     13640     38.46    0.2%
   57  1024     13790     18.97    0.1%
   58  1024     13960     26.29    0.1%
   59  1024     14130     36.26    0.2%
   60  1024     14300     35.39    0.2%
   61  1024     14530     52.01    0.3%
   62  1024     14670     37.34    0.2%
   63  1024     14810     19.57    0.1%
   64     0     12890     28.19    0.2%
   64    20     12950     20.26    0.1%
   64    40     13020     24.66    0.1%
   64    60     13060     19.83    0.1%
   64    80     13080     27.31    0.2%
   64   100     13100     21.78    0.1%
   64   120     13160     26.98    0.2%
   64   140     13220     38.12    0.2%
   64   160     13230     42.05    0.3%
   64   180     13270     30.72    0.2%
   64   200     13330     27.62    0.2%
   64   220     13390     35.69    0.2%
   64   240     13410      32.4    0.2%
   64   260     13440     22.18    0.1%
   64   280     13500     44.34    0.3%
   64   300     13530     18.69    0.1%
   64   320     13590     13.16    0.0%
   64   340     13640     35.76    0.2%
   64   360     13670     41.22    0.3%
   64   380     13720     26.56    0.1%
   64   400     13770     35.69    0.2%
   64   420     13790     29.71    0.2%
   64   440     13810      29.1    0.2%
   64   460     13830     21.48    0.1%
   64   480     13860      36.1    0.2%
   64   500     13930     25.91    0.1%
   64   520     13940     27.47    0.1%
   64   540     13990     34.55    0.2%
   64   560     14090     86.43    0.6%
   64   580     14090     29.14    0.2%
   64   600     14140     52.81    0.3%
   64   620     14150     21.94    0.1%
   64   640     14230     41.02    0.2%
   64   660     14230      19.1    0.1%
   64   680     14280     27.71    0.1%
   64   700     14310     21.96    0.1%
   64   720     14380     40.37    0.2%
   64   740     14400     24.97    0.1%
   64   760     14430     29.48    0.2%
   64   780     14470     29.68    0.2%
   64   800     14700     102.4    0.6%
   64   820     14550     19.57    0.1%
   64   840     14640      28.6    0.1%
   64   860     14640     11.34    0.0%
   64   880     14690     27.09    0.1%
   64   900     14720     41.48    0.2%
   64   920     14780     35.86    0.2%
   64   940     14780     29.76    0.2%
   64   960     14880     19.35    0.1%
   64   980     14900     24.76    0.1%
   64  1000     14960     51.66    0.3%
   64  1020     14990     29.62    0.1%
   64  1024     15010     28.69    0.1%

Quality and confidence:
param     error
c         0.137
s         0.008

Model:
Time ~=    427.9
    + c    194.5
    + s    2.156
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    185.9
    + s    1.988
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     184.1     0.193    0.1%
   20     226.4     2.214    0.9%
   40     265.7     0.344    0.1%
   60     305.2     0.706    0.2%
   80     345.4     0.536    0.1%
  100     385.6     1.564    0.4%
  120     423.7     0.629    0.1%
  140     464.2     0.584    0.1%
  160     507.5     8.604    1.6%
  180     543.5     0.394    0.0%
  200     589.4     7.642    1.2%
  220     624.3     4.184    0.6%
  240     661.4     0.378    0.0%
  260       702     0.434    0.0%
  280     748.6     13.63    1.8%
  300     787.6     11.25    1.4%
  320     825.5     8.796    1.0%
  340     862.6     4.874    0.5%
  360     915.7     17.16    1.8%
  380     943.4     5.628    0.5%
  400     978.3     0.536    0.0%
  420      1025      12.9    1.2%
  440      1064     10.74    1.0%
  460      1102     10.35    0.9%
  480      1154     13.76    1.1%
  500      1186     13.87    1.1%
  520      1229     14.94    1.2%
  540      1257      3.75    0.2%
  560      1301     5.194    0.3%
  580      1353     15.38    1.1%
  600      1387     14.89    1.0%
  620      1428     12.92    0.9%
  640      1468     14.72    1.0%
  660      1518     13.33    0.8%
  680      1561     9.521    0.6%
  700      1587     14.72    0.9%
  720      1637     14.35    0.8%
  740      1670      15.2    0.9%
  760      1696     5.391    0.3%
  780      1757     16.97    0.9%
  800      1788      13.8    0.7%
  820      1834     14.77    0.8%
  840      1873     14.66    0.7%
  860      1910     11.63    0.6%
  880      1953     11.83    0.6%
  900      1991     15.08    0.7%
  920      2016     11.47    0.5%
  940      2075     14.42    0.6%
  960      2117     16.63    0.7%
  980      2139      10.8    0.5%
 1000      2181     15.15    0.6%
 1020      2229     12.72    0.5%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    184.4
    + s    2.006
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    139.4
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    139.4
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    76.51
    + c    90.45
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0        77     0.689    0.8%
    1     173.6     0.285    0.1%
    2       262     2.512    0.9%
    3     340.9      0.56    0.1%
    4     443.2      3.29    0.7%
    5     517.8     0.093    0.0%
    6       603     8.818    1.4%
    7     710.3     6.315    0.8%
    8       796     10.86    1.3%
    9     895.2     16.02    1.7%
   10     958.2     8.716    0.9%
   11      1047     16.09    1.5%
   12      1152      8.37    0.7%
   13      1259     12.04    0.9%
   14      1349      14.2    1.0%
   15      1427     15.57    1.0%
   16      1514     16.59    1.0%
   17      1624     16.37    1.0%
   18      1706      14.7    0.8%
   19      1775     16.32    0.9%
   20      1865     17.07    0.9%
   21      1962     5.049    0.2%
   22      2028     16.63    0.8%
   23      2104     14.73    0.7%
   24      2258     16.26    0.7%
   25      2395     3.473    0.1%
   26      2456     13.09    0.5%
   27      2546     13.91    0.5%
   28      2617     17.88    0.6%
   29      2702     16.92    0.6%
   30      2788     12.71    0.4%
   31      2870      13.3    0.4%
   32      2948     14.34    0.4%
   33      3091     15.34    0.4%
   34      3157     13.43    0.4%
   35      3235     10.47    0.3%
   36      3327     10.36    0.3%
   37      3404     8.986    0.2%
   38      3494     9.283    0.2%
   39      3570     20.14    0.5%
   40      3664     24.92    0.6%
   41      3719     17.02    0.4%
   42      3817     20.63    0.5%
   43      3951     16.55    0.4%
   44      3978     8.993    0.2%
   45      4055     12.09    0.2%
   46      4273     8.644    0.2%
   47      4221     16.18    0.3%
   48      4305     10.71    0.2%
   49      4602     11.88    0.2%
   50      4675     10.54    0.2%
   51      4761     18.55    0.3%
   52      4929     4.698    0.0%
   53      4921     13.96    0.2%
   54      5013     15.84    0.3%
   55      5076     9.105    0.1%
   56      5535     29.03    0.5%
   57      5260     17.23    0.3%
   58      5333     16.71    0.3%
   59      5422     11.99    0.2%
   60      5484     12.03    0.2%
   61      5578     16.45    0.2%
   62      5651     13.94    0.2%
   63      5740     11.21    0.1%
   64      5819      17.7    0.3%

Quality and confidence:
param     error
c         0.137

Model:
Time ~=    62.82
    + c    90.94
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.31
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.31
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.8
    + r    78.27
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     405.5     0.242    0.0%
    1     487.5      0.91    0.1%
    2     568.2     0.965    0.1%
    3     643.9     0.425    0.0%
    4     726.7     1.766    0.2%
    5     809.4     11.05    1.3%
    6     880.7     4.248    0.4%
    7     980.2     15.29    1.5%
    8      1053     12.53    1.1%
    9      1129     13.75    1.2%
   10      1204     13.09    1.0%
   11      1285     12.55    0.9%
   12      1362     11.92    0.8%
   13      1430     13.29    0.9%
   14      1517     10.44    0.6%
   15      1598     14.68    0.9%
   16      1668     10.67    0.6%
   17      1756     16.06    0.9%
   18      1831     14.67    0.8%
   19      1904     12.59    0.6%
   20      1965     3.746    0.1%

Quality and confidence:
param     error
r         0.151

Model:
Time ~=    414.5
    + r    78.59
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.2
    + r    78.65
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       410     9.743    2.3%
    1     487.2     0.422    0.0%
    2     567.7       0.3    0.0%
    3     646.3     3.884    0.6%
    4     730.3     5.029    0.6%
    5     807.7      8.72    1.0%
    6     882.8     5.422    0.6%
    7     968.1     1.889    0.1%
    8      1044     2.357    0.2%
    9      1124     8.736    0.7%
   10      1203     12.08    1.0%
   11      1288     13.77    1.0%
   12      1363     13.33    0.9%
   13      1436     15.32    1.0%
   14      1521     11.35    0.7%
   15      1592     7.665    0.4%
   16      1714      10.2    0.5%
   17      1756      12.7    0.7%
   18      1833     14.12    0.7%
   19      1905     11.84    0.6%
   20      1976     10.17    0.5%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    411.8
    + r    79.11
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    413.3
    + r    77.28
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       406      1.12    0.2%
    1     486.6     0.822    0.1%
    2       566     0.645    0.1%
    3     640.8     0.609    0.0%
    4     728.7     6.786    0.9%
    5     803.1      9.64    1.2%
    6     873.3     1.825    0.2%
    7       972     14.26    1.4%
    8      1036     4.057    0.3%
    9      1109     0.965    0.0%
   10      1190     11.13    0.9%
   11      1275      14.6    1.1%
   12      1343     12.65    0.9%
   13      1418     11.54    0.8%
   14      1507     10.99    0.7%
   15      1573     6.091    0.3%
   16      1652     10.79    0.6%
   17      1735      13.8    0.7%
   18      1817     12.66    0.6%
   19      1888     14.65    0.7%
   20      1956     13.38    0.6%

Quality and confidence:
param     error
r          0.13

Model:
Time ~=    412.4
    + r    77.71
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    424.6
    + r    220.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     405.7     0.477    0.1%
    1     643.3     14.83    2.3%
    2     861.4     9.837    1.1%
    3      1081     10.71    0.9%
    4      1304     6.055    0.4%
    5      1528     10.55    0.6%
    6      1747        13    0.7%
    7      1980     12.17    0.6%
    8      2209     14.11    0.6%
    9      2419     7.306    0.3%
   10      2643     5.817    0.2%
   11      2853     4.811    0.1%
   12      3070     11.77    0.3%
   13      3295      8.82    0.2%
   14      3510     4.932    0.1%
   15      3729     11.49    0.3%
   16      3942     10.61    0.2%
   17      4167     21.14    0.5%
   18      4383     12.57    0.2%
   19      4613     14.84    0.3%
   20      4826     11.79    0.2%

Quality and confidence:
param     error
r         0.163

Model:
Time ~=    425.5
    + r    220.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      404
    + r       79
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     404.5     0.102    0.0%
    1     480.2     9.925    2.0%
    2     557.3     6.574    1.1%
    3     627.9     1.098    0.1%
    4     710.6     1.909    0.2%
    5     791.9     7.116    0.8%
    6     861.4     0.834    0.0%
    7     963.6     6.991    0.7%
    8      1038     4.008    0.3%
    9      1116      7.93    0.7%
   10      1205     14.37    1.1%
   11      1271     13.72    1.0%
   12      1353     14.21    1.0%
   13      1427     14.19    0.9%
   14      1523     13.64    0.8%
   15      1596     14.17    0.8%
   16      1668     11.08    0.6%
   17      1737     1.752    0.1%
   18      1821     12.96    0.7%
   19      1913     12.18    0.6%
   20      1980     14.31    0.7%

Quality and confidence:
param     error
r         0.142

Model:
Time ~=      399
    + r    79.39
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    401.6
    + r    78.89
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     404.7     0.177    0.0%
    1     473.8     1.175    0.2%
    2     553.9     3.525    0.6%
    3     628.5      0.89    0.1%
    4     710.7     1.988    0.2%
    5     785.4     2.133    0.2%
    6     866.6     10.42    1.2%
    7     974.3     13.56    1.3%
    8      1035     1.382    0.1%
    9      1117     11.56    1.0%
   10      1195     13.33    1.1%
   11      1265     11.06    0.8%
   12      1339     7.975    0.5%
   13      1421        12    0.8%
   14      1511     2.108    0.1%
   15      1596     13.03    0.8%
   16      1668     13.86    0.8%
   17      1761     11.92    0.6%
   18      1821     12.68    0.6%
   19      1905     12.93    0.6%
   20      1973     13.68    0.6%

Quality and confidence:
param     error
r         0.145

Model:
Time ~=    397.2
    + r    79.37
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    404.6
    + r    78.45
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     405.6     1.019    0.2%
    1     473.4     1.057    0.2%
    2     556.1     8.113    1.4%
    3     638.2     13.11    2.0%
    4     709.2     1.456    0.2%
    5     783.8     0.648    0.0%
    6     863.2     9.033    1.0%
    7     969.3     14.62    1.5%
    8      1047     14.45    1.3%
    9      1113      9.72    0.8%
   10      1187     9.923    0.8%
   11      1270     14.21    1.1%
   12      1335     8.461    0.6%
   13      1407     1.783    0.1%
   14      1517     11.35    0.7%
   15      1588     11.82    0.7%
   16      1681     11.01    0.6%
   17      1737      10.8    0.6%
   18      1820     14.33    0.7%
   19      1893     14.08    0.7%
   20      1970     13.08    0.6%

Quality and confidence:
param     error
r         0.164

Model:
Time ~=    399.9
    + r    78.91
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.1
    + r    78.44
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     391.8     0.323    0.0%
    1     472.4     0.322    0.0%
    2     572.6     9.948    1.7%
    3     645.4     7.843    1.2%
    4     723.1     1.685    0.2%
    5     797.8     1.232    0.1%
    6     877.7     10.65    1.2%
    7     974.1      16.9    1.7%
    8      1044     13.97    1.3%
    9      1116     8.699    0.7%
   10      1201     13.79    1.1%
   11      1274      12.6    0.9%
   12      1339     7.773    0.5%
   13      1420      13.1    0.9%
   14      1513     10.46    0.6%
   15      1588     8.945    0.5%
   16      1662     7.187    0.4%
   17      1740     9.598    0.5%
   18      1820     13.39    0.7%
   19      1891     14.48    0.7%
   20      1983     15.22    0.7%

Quality and confidence:
param     error
r          0.15

Model:
Time ~=    406.5
    + r    78.65
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    410.2
    + r    204.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     404.8     0.185    0.0%
    1     602.9     1.398    0.2%
    2     820.8     1.805    0.2%
    3      1012     1.805    0.1%
    4      1230     8.384    0.6%
    5      1417     9.179    0.6%
    6      1651     13.06    0.7%
    7      1841      6.94    0.3%
    8      2043     4.247    0.2%
    9      2253     11.02    0.4%
   10      2454     8.393    0.3%
   11      2675     11.35    0.4%
   12      2879     9.178    0.3%
   13      3072     10.45    0.3%
   14      3285     13.84    0.4%
   15      3472     7.493    0.2%
   16      3669     5.708    0.1%
   17      3889     6.211    0.1%
   18      4089     13.12    0.3%
   19      4280     11.28    0.2%
   20      4479     10.79    0.2%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=      410
    + r    204.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    142.1
    + r     36.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     134.7     0.126    0.0%
    1     175.5     0.338    0.1%
    2     212.9     0.247    0.1%
    3     252.8      0.15    0.0%
    4       290     1.664    0.5%
    5     312.3     0.091    0.0%
    6     367.3     0.503    0.1%
    7     404.2      0.48    0.1%
    8       441     4.806    1.0%
    9     475.3     0.625    0.1%
   10     510.8     0.311    0.0%
   11     549.3     1.241    0.2%
   12     585.5     1.833    0.3%
   13     621.5     1.241    0.1%
   14     658.6     1.999    0.3%
   15     701.7     11.91    1.6%
   16     736.6     9.764    1.3%
   17     774.1      10.2    1.3%
   18     802.8     2.946    0.3%
   19     839.5     3.206    0.3%
   20     875.9     2.427    0.2%

Quality and confidence:
param     error
r         0.071

Model:
Time ~=    139.6
    + r    37.09
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.1
    + r    71.72
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     409.8      8.71    2.1%
    1     482.6     5.601    1.1%
    2     570.3     5.464    0.9%
    3     623.1     0.603    0.0%
    4     700.3     4.115    0.5%
    5       769     2.139    0.2%
    6     842.7     9.915    1.1%
    7     932.4     12.64    1.3%
    8     996.6     10.74    1.0%
    9      1073     16.17    1.5%
   10      1126      0.71    0.0%
   11      1209     14.71    1.2%
   12      1267     3.365    0.2%
   13      1339     6.908    0.5%
   14      1424      13.2    0.9%
   15      1496     13.28    0.8%
   16      1563     13.87    0.8%
   17      1625     7.793    0.4%
   18      1711     13.15    0.7%
   19      1808     2.171    0.1%
   20      1855     16.25    0.8%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    412.9
    + r    72.17
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    512.2
    + n    37.99
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     480.4     0.287    0.0%
   20      1272     15.02    1.1%
   40      2017     14.01    0.6%
   60      2784     11.51    0.4%
   80      3556     10.97    0.3%
  100      4319     15.14    0.3%
  120      5086      21.7    0.4%
  140      5839     18.64    0.3%
  160      6610     23.47    0.3%
  180      7376     13.94    0.1%
  200      8113     19.34    0.2%
  220      8872     18.84    0.2%
  240      9621     20.68    0.2%
  260     10390     16.44    0.1%
  280     11150     31.76    0.2%
  300     11930     21.21    0.1%
  320     12680     32.16    0.2%
  340     13430     16.55    0.1%
  360     14220     19.81    0.1%
  380     14960     29.07    0.1%
  400     15730     22.46    0.1%
  420     16500     35.22    0.2%
  440     17210     23.98    0.1%
  460     18000     21.13    0.1%
  480     18780     27.53    0.1%
  500     19520      38.4    0.1%
  520     20290     30.33    0.1%
  540     21010     35.07    0.1%
  560     21800     24.44    0.1%
  580     22540      18.4    0.0%
  600     23310     30.23    0.1%
  620     24060     21.22    0.0%
  640     24790     25.08    0.1%
  660     25550     11.45    0.0%
  680     26360     32.46    0.1%
  700     27090     30.03    0.1%
  720     27860     37.03    0.1%
  740     28590      45.1    0.1%
  760     29360     35.84    0.1%
  780     30130     30.88    0.1%
  800     30890     26.36    0.0%
  820     31650     24.87    0.0%
  840     32410      41.7    0.1%
  860     33170     29.12    0.0%
  880     33990     41.04    0.1%
  900     34720     43.55    0.1%
  920     35480     27.06    0.0%
  940     36420     182.9    0.5%
  960     37010     45.05    0.1%
  980     37740     25.32    0.0%
 1000     38560     64.43    0.1%
 1020     39320      57.9    0.1%

Quality and confidence:
param     error
n         0.007

Model:
Time ~=    509.2
    + n    38.01
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      397
    + r     1.21
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     396.9     0.155    0.0%
    1     398.2      0.18    0.0%

Quality and confidence:
param     error
r         0.079

Model:
Time ~=    396.9
    + r    1.258
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    398.7
    + n    0.623
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     397.8     0.244    0.0%
   20     410.7     0.251    0.0%
   40     424.1     0.668    0.1%
   60     436.4      0.35    0.0%
   80     448.9     0.346    0.0%
  100     460.9     0.452    0.0%
  120     473.7     0.308    0.0%
  140     485.9      0.36    0.0%
  160     498.7     0.368    0.0%
  180     514.3     9.049    1.7%
  200     523.5     0.303    0.0%
  220     538.6     8.022    1.4%
  240       548     0.222    0.0%
  260     565.8     10.49    1.8%
  280     573.5     0.205    0.0%
  300     585.7     0.447    0.0%
  320     603.3     9.764    1.6%
  340       611     0.525    0.0%
  360     626.1     7.968    1.2%
  380     641.2     10.13    1.5%
  400     648.5     0.162    0.0%
  420     668.1     9.297    1.3%
  440     673.1     0.267    0.0%
  460     692.7     11.05    1.5%
  480     700.4     8.171    1.1%
  500     710.7     0.509    0.0%
  520     728.4     7.659    1.0%
  540     735.6     0.312    0.0%
  560     748.1      0.63    0.0%
  580     760.2     0.281    0.0%
  600     788.5     17.09    2.1%
  620     795.8      10.1    1.2%
  640     803.9     13.42    1.6%
  660     815.2     9.309    1.1%
  680     821.7     4.271    0.5%
  700     841.7     11.19    1.3%
  720     856.7     14.53    1.6%
  740     861.8     4.906    0.5%
  760     875.1     4.494    0.5%
  780     890.4     9.767    1.0%
  800     902.6     7.525    0.8%
  820     917.2     11.49    1.2%
  840     925.3     7.336    0.7%
  860     947.2     13.15    1.3%
  880     965.2      11.8    1.2%
  900     965.7     9.253    0.9%
  920     984.9     13.36    1.3%
  940     989.4     7.307    0.7%
  960      1005     12.06    1.2%
  980      1010     1.138    0.1%
 1000      1031      14.2    1.3%
 1020      1041      11.6    1.1%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    398.2
    + n    0.632
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    404.2
    + r    56.07
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     404.3      0.29    0.0%
    1     463.7      8.52    1.8%

Quality and confidence:
param     error
r         2.841

Model:
Time ~=    404.3
    + r    59.42
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    411.4
    + r    244.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       406     1.095    0.2%
    1     652.5      0.44    0.0%
    2     904.2     11.08    1.2%
    3      1153     11.83    1.0%
    4      1394     12.63    0.9%
    5      1643     8.122    0.4%
    6      1887     10.74    0.5%
    7      2121     9.559    0.4%
    8      2369     7.674    0.3%
    9      2619     6.414    0.2%
   10      2854     6.995    0.2%
   11      3091     11.72    0.3%
   12      3327     10.24    0.3%
   13      3573     14.28    0.3%
   14      3811     15.88    0.4%
   15      4063     19.05    0.4%
   16      4288     12.66    0.2%
   17      4594      15.5    0.3%
   18      4836     11.84    0.2%
   19      5069     20.91    0.4%
   20      5319     15.96    0.3%

Quality and confidence:
param     error
r         0.222

Model:
Time ~=    410.4
    + r    244.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.9
    + r      405
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     398.4     5.172    1.2%
    1     815.7     7.101    0.8%
    2      1210     1.833    0.1%
    3      1635     11.99    0.7%
    4      2021     8.937    0.4%
    5      2449     10.11    0.4%
    6      2847     7.276    0.2%
    7      3239     9.694    0.2%
    8      3641     12.03    0.3%
    9      4063     13.64    0.3%
   10      4461     14.53    0.3%
   11      4881     15.97    0.3%
   12      5289     20.42    0.3%
   13      5659     9.143    0.1%
   14      6070     15.83    0.2%
   15      6466     13.16    0.2%
   16      6865      15.9    0.2%
   17      7323     15.99    0.2%
   18      7715     15.21    0.1%
   19      8124     11.45    0.1%
   20      8506     29.01    0.3%

Quality and confidence:
param     error
r         0.223

Model:
Time ~=    407.8
    + r    405.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    857.1
    + t    401.7
    + n    163.4
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3428     6.718    0.1%
    1    16      3930     17.67    0.4%
    2    16      4273     14.92    0.3%
    3    16      4713     15.32    0.3%
    4     0      2404     13.36    0.5%
    4     1      2594     10.91    0.4%
    4     2      2769     10.71    0.3%
    4     3      2895     22.47    0.7%
    4     4      3070     13.27    0.4%
    4     5      3227     12.66    0.3%
    4     6      3386     12.18    0.3%
    4     7      3533     10.97    0.3%
    4     8      3764     25.33    0.6%
    4     9      3855     13.36    0.3%
    4    10      4032     9.294    0.2%
    4    11      4179     14.39    0.3%
    4    12      4370     17.51    0.4%
    4    13      4535     12.34    0.2%
    4    14      4699     6.898    0.1%
    4    15      4862      14.4    0.2%
    4    16      5055      26.1    0.5%

Quality and confidence:
param     error
t         2.374
n         0.467

Model:
Time ~=    854.4
    + t    388.2
    + n    164.6
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    153.8
    + r    58.37
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     154.1     0.137    0.0%
    1     216.9     0.382    0.1%
    2     261.4     0.307    0.1%
    3     336.6     0.615    0.1%
    4     377.6     0.687    0.1%
    5     445.8     0.685    0.1%
    6     501.5     0.807    0.1%
    7     556.7     0.457    0.0%
    8     612.1     2.841    0.4%
    9     674.2     10.96    1.6%
   10     728.5     11.51    1.5%
   11     805.3     5.972    0.7%
   12     862.6     8.302    0.9%
   13     915.6     3.891    0.4%
   14     976.7     10.77    1.1%
   15      1025     3.179    0.3%
   16      1083      8.07    0.7%
   17      1150     7.991    0.6%
   18      1213     12.53    1.0%
   19      1261     8.281    0.6%
   20      1318      12.2    0.9%

Quality and confidence:
param     error
r         0.105

Model:
Time ~=    151.3
    + r    58.57
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    477.1
    + r    315.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     391.8     0.221    0.0%
    1     813.4     3.201    0.3%
    2      1129     11.21    0.9%
    3      1446     12.51    0.8%
    4      1726     12.71    0.7%
    5      2044     9.901    0.4%
    6      2384      12.4    0.5%
    7      2651     12.37    0.4%
    8      2954     21.75    0.7%
    9      3308     11.81    0.3%
   10      3615     13.68    0.3%
   11      3970     16.52    0.4%
   12      4249     15.63    0.3%
   13      4564     20.83    0.4%
   14      4853     15.28    0.3%
   15      5165      20.7    0.4%
   16      5455     12.76    0.2%
   17      5786     15.06    0.2%
   18      6222     18.39    0.2%
   19      6509      18.1    0.2%
   20      6801     28.45    0.4%

Quality and confidence:
param     error
r         0.458

Model:
Time ~=      461
    + r      316
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    700.6
    + n    73.42
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     688.6     8.618    1.2%
    1     774.5     2.672    0.3%
    2     858.2     11.54    1.3%
    3     923.8     9.269    1.0%
    4      1002     13.38    1.3%
    5      1060     16.04    1.5%
    6      1138     8.681    0.7%
    7      1208     15.24    1.2%
    8      1293     13.51    1.0%
    9      1378     16.76    1.2%
   10      1444     14.46    1.0%
   11      1502     8.022    0.5%
   12      1593     11.98    0.7%
   13      1664     15.16    0.9%
   14      1738     15.48    0.8%
   15      1803     12.73    0.7%
   16      1869     14.36    0.7%

Quality and confidence:
param     error
n         0.235

Model:
Time ~=    700.5
    + n    73.77
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    178.4
    + r    774.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     405.7     0.966    0.2%
    1      1108     2.621    0.2%
    2      1825     11.15    0.6%
    3      2550     14.17    0.5%
    4      3253     12.68    0.3%
    5      4011     13.45    0.3%
    6      4793     30.74    0.6%
    7      5515     10.49    0.1%
    8      6281     29.93    0.4%
    9      7097     30.12    0.4%
   10      7888     16.46    0.2%
   11      8627     37.11    0.4%
   12      9419     39.52    0.4%
   13     10150     29.98    0.2%
   14     10970     56.25    0.5%
   15     11760        26    0.2%
   16     12580     48.42    0.3%
   17     13360     40.21    0.3%
   18     14340     43.23    0.3%
   19     15180     43.09    0.2%
   20     16050     76.83    0.4%

Quality and confidence:
param     error
r          1.56

Model:
Time ~=    166.8
    + r    779.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    285.5
    + r    432.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     415.5     0.277    0.0%
    1       778     2.042    0.2%
    2      1174     4.828    0.4%
    3      1601     12.71    0.7%
    4      1987     11.77    0.5%
    5      2426     15.49    0.6%
    6      2837     8.056    0.2%
    7      3243     15.32    0.4%
    8      3656     15.39    0.4%
    9      4156     13.53    0.3%
   10      4569     27.75    0.6%
   11      5050     27.27    0.5%
   12      5458     29.57    0.5%
   13      5859     35.86    0.6%
   14      6294     20.03    0.3%
   15      6752     37.03    0.5%
   16      7139     27.65    0.3%
   17      7740     49.64    0.6%
   18      8161      21.5    0.2%
   19      8592     20.76    0.2%
   20      9099     53.67    0.5%

Quality and confidence:
param     error
r         0.833

Model:
Time ~=    271.3
    + r    434.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      624
    + n    110.7
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     609.8      10.5    1.7%
    1     727.4     1.561    0.2%
    2     847.3     2.769    0.3%
    3     959.5      12.4    1.2%
    4      1070     10.13    0.9%
    5      1196     14.36    1.2%
    6      1285     3.818    0.2%
    7      1407     15.58    1.1%
    8      1508     8.871    0.5%
    9      1618     9.614    0.5%
   10      1729     9.388    0.5%
   11      1835     13.19    0.7%
   12      1948     21.02    1.0%
   13      2060      12.5    0.6%
   14      2182     9.104    0.4%
   15      2301     13.12    0.5%
   16      2388     14.39    0.6%

Quality and confidence:
param     error
n         0.225

Model:
Time ~=    622.5
    + n    110.9
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    333.1
    + r     2530
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     409.3     0.399    0.0%
    1      2912     19.58    0.6%
    2      5415     10.49    0.1%
    3      7922      29.1    0.3%
    4     10420     16.83    0.1%
    5     12890     29.09    0.2%
    6     15470     42.28    0.2%
    7     17930     38.12    0.2%
    8     20510     32.57    0.1%
    9     23070     42.58    0.1%
   10     25620     56.72    0.2%
   11     28100     43.07    0.1%
   12     30630     57.01    0.1%
   13     33220     39.45    0.1%
   14     35730     65.66    0.1%
   15     38230      43.3    0.1%
   16     40940     26.53    0.0%
   17     43070     38.78    0.0%
   18     45970     75.66    0.1%
   19     48420      34.4    0.0%
   20     51270     37.55    0.0%

Quality and confidence:
param     error
r         1.336

Model:
Time ~=    295.7
    + r     2533
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    37810
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       411     0.616    0.1%
    1     36720     26.79    0.0%
    2     73000     45.91    0.0%
    3    109300       100    0.0%
    4    151200     74.45    0.0%
    5    189000     186.8    0.0%
    6    226300     110.7    0.0%
    7    264000     175.4    0.0%
    8    301800     138.2    0.0%
    9    340100       169    0.0%
   10    377500     125.4    0.0%
   11    415400     201.6    0.0%
   12    453000     142.3    0.0%
   13    490400     208.5    0.0%
   14    528100     243.5    0.0%
   15    566200     291.7    0.0%
   16    604300     200.3    0.0%
   17    641800     203.9    0.0%
   18    680200     364.3    0.0%
   19    717800     276.6    0.0%
   20    756100     297.4    0.0%

Quality and confidence:
param     error
r         10.76

Model:
Time ~=        0
    + r    37840
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    36850
    + t     2050
    + i    63.34
    + o    101.2
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    198900     118.8    0.0%
    1     0   960    136400     138.1    0.1%
    1    20   960    137600     47.73    0.0%
    1    40   960    139000     165.8    0.1%
    1    60   960    140200     98.99    0.0%
    1    80   960    141500     65.48    0.0%
    1   100   960    142700     71.38    0.0%
    1   120   960    144100     169.2    0.1%
    1   140   960    145200     102.5    0.0%
    1   160   960    146600     91.19    0.0%
    1   180   960    147800     94.05    0.0%
    1   200   960    149000       142    0.0%
    1   220   960    150400     62.54    0.0%
    1   240   960    151400     73.23    0.0%
    1   260   960    152800     74.88    0.0%
    1   280   960    154100     58.59    0.0%
    1   300   960    155300      81.8    0.0%
    1   320   960    156500     47.29    0.0%
    1   340   960    157800     77.33    0.0%
    1   360   960    159200     120.4    0.0%
    1   380   960    160400     85.77    0.0%
    1   400   960    161600     89.62    0.0%
    1   420   960    162900     138.2    0.0%
    1   440   960    164300     40.56    0.0%
    1   460   960    165400     68.45    0.0%
    1   480   960    167100     128.5    0.0%
    1   500   960    168100     99.48    0.0%
    1   520   960    169500     68.95    0.0%
    1   540   960    170800     161.8    0.0%
    1   560   960    172000       157    0.0%
    1   580   960    173200     93.95    0.0%
    1   600   960    174600     165.7    0.0%
    1   620   960    175700     96.46    0.0%
    1   640   960    176900     59.31    0.0%
    1   660   960    178200     98.39    0.0%
    1   680   960    179400     199.2    0.1%
    1   700   960    180800     179.9    0.0%
    1   720   960    182000      75.3    0.0%
    1   740   960    183300     108.9    0.0%
    1   760   960    184600     81.56    0.0%
    1   780   960    185700     151.8    0.0%
    1   800   960    187100     62.22    0.0%
    1   820   960    188300     100.2    0.0%
    1   840   960    189600     97.84    0.0%
    1   860   960    190800     109.9    0.0%
    1   880   960    192200     151.4    0.0%
    1   900   960    193400     85.87    0.0%
    1   920   960    194600     120.5    0.0%
    1   940   960    196000     135.1    0.0%
    1   960   960    197200      28.8    0.0%
    1   980   960    198400       127    0.0%
    1  1000   960    199900     109.1    0.0%
    1  1020   960    201000     69.44    0.0%
    1  1024     0    103800     80.36    0.0%
    1  1024    19    106000     117.5    0.1%
    1  1024    38    107800     62.93    0.0%
    1  1024    57    110000     83.85    0.0%
    1  1024    76    111800     54.78    0.0%
    1  1024    95    113700     85.77    0.0%
    1  1024   114    115800     72.88    0.0%
    1  1024   133    117600     89.39    0.0%
    1  1024   152    119500     50.94    0.0%
    1  1024   171    121400     97.39    0.0%
    1  1024<truncated>...
```

</details>",10489,2021-12-15T00:05:49Z,0
1478,bkchr,Can you please just stop to open the same pr over and over again?,10489,2021-12-15T08:24:45Z,0
1479,jamesblacklock,"> Can you please just stop to open the same pr over and over again?

Not sure what you want me to do. I had an issue with it before and had to redo it. How is this a problem exactly?",10489,2021-12-15T16:06:13Z,0
1480,jamesblacklock,/benchmark runtime pallet pallet_contracts,10489,2021-12-15T16:06:28Z,0
1481,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""wasmer-2.1-test-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.583
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.583
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.221
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     68.45     0.623    0.9%
   20     58.27     0.236    0.4%
   40     96.11     0.513    0.5%
   60     132.7     1.155    0.8%
   80     167.5     0.917    0.5%
  100     202.2     2.359    1.1%
  120     249.2     2.702    1.0%
  140     288.3      0.97    0.3%
  160     330.1     5.202    1.5%
  180     369.2     4.893    1.3%
  200     403.9     2.018    0.4%
  220     448.3      2.37    0.5%
  240     491.5     2.859    0.5%
  260     536.5      3.17    0.5%
  280     581.9      5.04    0.8%
  300     622.2     5.803    0.9%
  320     679.6     3.477    0.5%
  340     717.1     7.443    1.0%
  360     765.8     10.58    1.3%
  380     802.1     2.953    0.3%
  400       851     7.509    0.8%
  420     904.7     8.855    0.9%
  440     935.4     5.266    0.5%
  460      1002     6.245    0.6%
  480      1032     5.655    0.5%
  500      1097     10.73    0.9%
  520      1123     10.09    0.8%
  540      1176     7.817    0.6%
  560      1206     11.91    0.9%
  580      1267     8.316    0.6%
  600      1316     8.401    0.6%
  620      1370      10.7    0.7%
  640      1414     21.12    1.4%
  660      1456     11.59    0.7%
  680      1505     17.08    1.1%
  700      1569     23.72    1.5%
  720      1581     9.696    0.6%
  740      1622     14.06    0.8%
  760      1682     15.48    0.9%
  780      1714     16.61    0.9%
  800      1773     17.23    0.9%
  820      1816     19.54    1.0%
  840      1855     9.595    0.5%
  860      1878     12.14    0.6%
  880      1977     15.42    0.7%
  900      2002     15.26    0.7%
  920      2024     13.52    0.6%
  940      2069     16.52    0.7%
  960      2109      24.9    1.1%
  980      2165      13.4    0.6%
 1000      2227     21.84    0.9%
 1020      2250     29.52    1.3%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.229
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    101.9
    + q     0.24
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.547     0.015    0.5%
   20     85.98     0.786    0.9%
   40      96.8     1.143    1.1%
   60       106     1.067    1.0%
   80     114.7     1.601    1.3%
  100     123.5      1.27    1.0%
  120     130.3     1.022    0.7%
  140     138.1     0.509    0.3%
  160     147.5     1.767    1.1%
  180     154.7     0.736    0.4%
  200     162.3     0.825    0.5%
  220     171.4      1.23    0.7%
  240     177.7     1.403    0.7%
  260     187.4     2.886    1.5%
  280     192.6     3.032    1.5%
  300     190.2     1.465    0.7%
  320     200.9     4.443    2.2%
  340     207.7     4.111    1.9%
  360     216.3     2.897    1.3%
  380     188.4     0.888    0.4%
  400     197.2     1.592    0.8%
  420     199.6     1.158    0.5%
  440     205.5     1.796    0.8%
  460     209.2     1.141    0.5%
  480     214.5     1.802    0.8%
  500     220.6     2.106    0.9%
  520     226.4     1.976    0.8%
  540     229.6     2.478    1.0%
  560     233.5      0.61    0.2%
  580     240.3     1.443    0.6%
  600       246     1.822    0.7%
  620     251.2     2.664    1.0%
  640     257.8     2.251    0.8%
  660     260.4     1.839    0.7%
  680     267.3     2.142    0.8%
  700     270.1     1.404    0.5%
  720     276.1     1.504    0.5%
  740       279     0.936    0.3%
  760       291     3.403    1.1%
  780     290.3     0.878    0.3%
  800     295.4     2.212    0.7%
  820     301.9     2.028    0.6%
  840     305.7     1.199    0.3%
  860     309.2     0.837    0.2%
  880     312.9     0.711    0.2%
  900     317.1     0.757    0.2%
  920       321     0.724    0.2%
  940     325.7     1.604    0.4%
  960       330     1.627    0.4%
  980     334.8     1.523    0.4%
 1000     338.7     1.172    0.3%
 1020     342.4     1.124    0.3%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    99.54
    + q    0.246
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    38.51
    + c    90.44
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     49.74     0.349    0.7%
    2     229.9     0.805    0.3%
    4     415.7     0.627    0.1%
    6     579.8     14.63    2.5%
    8     766.5     13.42    1.7%
   10     934.8     10.92    1.1%
   12      1093     10.45    0.9%
   14      1313     15.27    1.1%
   16      1480     15.49    1.0%
   18      1674      12.2    0.7%
   20      1834     16.32    0.8%
   22      2006      3.18    0.1%
   24      2140     10.28    0.4%
   26      2430     11.63    0.4%
   28      2576     14.52    0.5%
   30      2752     11.84    0.4%
   32      2918     13.33    0.4%
   34      3119     16.45    0.5%
   36      3298      15.5    0.4%
   38      3454      3.62    0.1%
   40      3631     16.81    0.4%
   42      3787     11.49    0.3%
   44      3942     11.91    0.3%
   46      4119     14.34    0.3%
   48      4269     17.45    0.4%
   50      4644     11.03    0.2%
   52      4818     20.78    0.4%
   54      4982     17.73    0.3%
   56      5138     12.81    0.2%
   58      5311     27.69    0.5%
   60      5469     12.92    0.2%
   62      5637     15.58    0.2%
   64      5767     22.07    0.3%
   66      6033     11.85    0.1%
   68      6216     7.252    0.1%
   70      6374     17.45    0.2%
   72      6529     16.71    0.2%
   74      6699     19.87    0.2%
   76      6858     17.68    0.2%
   78      7045     19.25    0.2%
   80      7196     25.66    0.3%
   82      7349     29.07    0.3%
   84      7514      14.9    0.1%
   86      7685     28.21    0.3%
   88      7851     32.67    0.4%
   90      8009     10.15    0.1%
   92      8161     24.51    0.3%
   94      8340     24.36    0.2%
   96      8505     27.52    0.3%
   98      9087     19.59    0.2%
  100      9241     12.19    0.1%
  102      9420     24.54    0.2%
  104      9585     30.05    0.3%
  106      9752     29.11    0.2%
  108      9900     5.173    0.0%
  110     10070     34.41    0.3%
  112     10250     24.31    0.2%
  114     10410     18.92    0.1%
  116     10550     24.97    0.2%
  118     10730     31.11    0.2%
  120     10890      22.1    0.2%
  122     11070     25.94    0.2%
  124     11260     25.14    0.2%
  126     11390     19.72    0.1%
  128     11550     18.83    0.1%

Quality and confidence:
param     error
c         0.088

Model:
Time ~=    21.87
    + c    90.56
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.8
    + c     80.5
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     411.7     0.452    0.1%
    2     584.2     1.888    0.3%
    4     744.2     8.227    1.1%
    6     883.3     8.218    0.9%
    8      1056      8.29    0.7%
   10      1199      11.5    0.9%
   12      1333     5.981    0.4%
   14      1553     12.08    0.7%
   16      1694     13.58    0.8%
   18      1867     17.56    0.9%
   20      1983     14.89    0.7%
   22      2126      15.2    0.7%
   24      2267     18.53    0.8%
   26      2567     17.18    0.6%
   28      2712     14.24    0.5%
   30      2825     14.63    0.5%
   32      2961     19.62    0.6%
   34      3144     15.69    0.4%
   36      3282     19.26    0.5%
   38      3419     2.952    0.0%
   40      3545     13.14    0.3%
   42      3694     3.915    0.1%
   44      3853     15.55    0.4%
   46      3978     23.67    0.5%
   48      4122     15.45    0.3%
   50      4566     12.28    0.2%
   52      4707     15.28    0.3%
   54      4843     15.87    0.3%
   56      4980     20.98    0.4%
   58      5118     11.26    0.2%
   60      5262     21.27    0.4%
   62      5399     18.94    0.3%
   64      5531     12.44    0.2%
   66      5726     18.81    0.3%
   68      5892     18.39    0.3%
   70      6009     19.16    0.3%
   72      6150     18.29    0.2%
   74      6292     34.38    0.5%
   76      6419     13.92    0.2%
   78      6566     21.01    0.3%
   80      6702      20.3    0.3%
   82      6824     13.95    0.2%
   84      6971     13.04    0.1%
   86      7136     21.66    0.3%
   88      7261     24.76    0.3%
   90      7389      17.4    0.2%
   92      7541     24.42    0.3%
   94      7669     15.93    0.2%
   96      7814     11.25    0.1%
   98      8596     19.58    0.2%
  100      8698     18.82    0.2%
  102      8875     19.07    0.2%
  104      9000     44.47    0.4%
  106      9167     59.03    0.6%
  108      9296     29.44    0.3%
  110      9416      29.3    0.3%
  112      9560     23.85    0.2%
  114      9700     16.84    0.1%
  116      9841     18.39    0.1%
  118      9968     32.95    0.3%
  120     10100     17.34    0.1%
  122     10250     20.88    0.2%
  124     10370     16.03    0.1%
  126     10510     21.52    0.2%
  128     10670     21.76    0.2%

Quality and confidence:
param     error
c         0.137

Model:
Time ~=    372.4
    + c    80.87
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    542.3
    + c      201
    + s    2.016
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2596     13.66    0.5%
    1  1024      2811     14.13    0.5%
    2  1024      3015     19.75    0.6%
    3  1024      3201     17.18    0.5%
    4  1024      3408     10.04    0.2%
    5  1024      3605     15.15    0.4%
    6  1024      3780     11.78    0.3%
    7  1024      3985     15.58    0.3%
    8  1024      4168     15.47    0.3%
    9  1024      4451     11.22    0.2%
   10  1024      4606     20.76    0.4%
   11  1024      4784     12.16    0.2%
   12  1024      4958     13.79    0.2%
   13  1024      5230     15.43    0.2%
   14  1024      5400     15.18    0.2%
   15  1024      5578     20.02    0.3%
   16  1024      5758        16    0.2%
   17  1024      6080     12.21    0.2%
   18  1024      6271     13.79    0.2%
   19  1024      6434     19.88    0.3%
   20  1024      6626      18.9    0.2%
   21  1024      6800     14.55    0.2%
   22  1024      7064     38.05    0.5%
   23  1024      7165     19.65    0.2%
   24  1024      7341     16.64    0.2%
   25  1024      7691     9.238    0.1%
   26  1024      7887     23.46    0.2%
   27  1024      8061      13.1    0.1%
   28  1024      8232     14.29    0.1%
   29  1024      8387     13.38    0.1%
   30  1024      8562     12.25    0.1%
   31  1024      8755     24.29    0.2%
   32  1024      8951     29.27    0.3%
   33  1024      9424     18.82    0.1%
   34  1024      9587     10.99    0.1%
   35  1024      9766     20.72    0.2%
   36  1024      9960     24.21    0.2%
   37  1024     10140     14.82    0.1%
   38  1024     10320     18.67    0.1%
   39  1024     10500     36.24    0.3%
   40  1024     10690     26.26    0.2%
   41  1024     10900      33.2    0.3%
   42  1024     11050     35.12    0.3%
   43  1024     11250     57.96    0.5%
   44  1024     11420     32.51    0.2%
   45  1024     11590     21.06    0.1%
   46  1024     11750     34.51    0.2%
   47  1024     11930     22.86    0.1%
   48  1024     12110     20.77    0.1%
   49  1024     12630     38.92    0.3%
   50  1024     12820     31.94    0.2%
   51  1024     12960     17.08    0.1%
   52  1024     13180     45.06    0.3%
   53  1024     13370     39.32    0.2%
   54  1024     13500     35.89    0.2%
   55  1024     13670     25.31    0.1%
   56  1024     13880     51.87    0.3%
   57  1024     14050     20.25    0.1%
   58  1024     14220     40.75    0.2%
   59  1024     14410     44.87    0.3%
   60  1024     14620     44.08    0.3%
   61  1024     14780     41.95    0.2%
   62  1024     14930     54.89    0.3%
   63  1024     15130     35.98    0.2%
   64     0     13220     20.38    0.1%
   64    20     13180     29.17    0.2%
   64    40     13280     41.89    0.3%
   64    60     13330     37.21    0.2%
   64    80     13370     47.68    0.3%
   64   100     13440     39.68    0.2%
   64   120     13550     86.91    0.6%
   64   140     13490      27.9    0.2%
   64   160     13570     45.42    0.3%
   64   180     13580      38.4    0.2%
   64   200     13610     29.98    0.2%
   64   220     13670     29.03    0.2%
   64   240     13710     34.23    0.2%
   64   260     13750     37.15    0.2%
   64   280     13770     22.42    0.1%
   64   300     13820      39.6    0.2%
   64   320     13830     17.04    0.1%
   64   340     13940     29.44    0.2%
   64   360     13950     27.04    0.1%
   64   380     13960     44.77    0.3%
   64   400     14040     62.99    0.4%
   64   420     14080     36.94    0.2%
   64   440     14100     24.82    0.1%
   64   460     14140     50.18    0.3%
   64   480     14190     48.23    0.3%
   64   500     14190     22.69    0.1%
   64   520     14260     32.91    0.2%
   64   540     14300     31.56    0.2%
   64   560     14310     45.52    0.3%
   64   580     14370     44.09    0.3%
   64   600     14420     68.95    0.4%
   64   620     14460     21.21    0.1%
   64   640     14480     25.22    0.1%
   64   660     14530     21.19    0.1%
   64   680     14600     57.83    0.3%
   64   700     14610     48.09    0.3%
   64   720     14670     33.55    0.2%
   64   740     14680     42.45    0.2%
   64   760     14760     64.36    0.4%
   64   780     14770     63.21    0.4%
   64   800     14850      54.6    0.3%
   64   820     14850     30.37    0.2%
   64   840     14900     41.97    0.2%
   64   860     14950     17.57    0.1%
   64   880     15000      42.7    0.2%
   64   900     15020      51.3    0.3%
   64   920     15070     44.16    0.2%
   64   940     15130     30.25    0.1%
   64   960     15150     31.47    0.2%
   64   980     15180     33.95    0.2%
   64  1000     15220     18.16    0.1%
   64  1020     15290     33.22    0.2%
   64  1024     15320     47.34    0.3%

Quality and confidence:
param     error
c         0.143
s         0.009

Model:
Time ~=    434.9
    + c    198.9
    + s    2.165
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    198.4
    + s    1.988
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0       197     0.608    0.3%
   20     238.4     2.429    1.0%
   40     277.5     0.235    0.0%
   60     317.4     0.414    0.1%
   80     357.7     0.747    0.2%
  100     398.7      3.56    0.8%
  120     436.3     0.544    0.1%
  140     477.4     2.331    0.4%
  160     525.5     12.93    2.4%
  180       561      9.69    1.7%
  200     599.4     10.51    1.7%
  220     642.2     12.84    1.9%
  240     674.2     0.648    0.0%
  260     719.8     10.43    1.4%
  280     761.1     14.31    1.8%
  300     795.8     2.396    0.3%
  320     844.9     10.04    1.1%
  340     880.2     12.37    1.4%
  360     933.1     13.01    1.3%
  380       968     15.39    1.5%
  400      1017     16.61    1.6%
  420      1044     13.94    1.3%
  440      1080     14.09    1.3%
  460      1122     15.84    1.4%
  480      1163     15.11    1.2%
  500      1210     16.91    1.3%
  520      1237      12.8    1.0%
  540      1291     15.93    1.2%
  560      1326     13.97    1.0%
  580      1363     16.13    1.1%
  600      1397     15.72    1.1%
  620      1440     16.96    1.1%
  640      1479     14.53    0.9%
  660      1523     14.04    0.9%
  680      1564      15.7    1.0%
  700      1604     15.72    0.9%
  720      1637     12.55    0.7%
  740      1673     11.21    0.6%
  760      1726     15.39    0.8%
  780      1763     16.67    0.9%
  800      1801     15.46    0.8%
  820      1856     3.325    0.1%
  840      1888     14.01    0.7%
  860      1924     17.04    0.8%
  880      1958     15.11    0.7%
  900      1995     13.91    0.6%
  920      2038     15.05    0.7%
  940      2090     14.87    0.7%
  960      2113     12.84    0.6%
  980      2172     15.63    0.7%
 1000      2211     15.32    0.6%
 1020      2243     14.88    0.6%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    199.6
    + s    2.006
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    145.2
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    145.2
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     82.5
    + c    92.63
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0      81.9     0.163    0.1%
    1     177.6     0.169    0.0%
    2     270.3     4.485    1.6%
    3     353.1     0.482    0.1%
    4     448.9     0.518    0.1%
    5       535     0.576    0.1%
    6     624.7     12.61    2.0%
    7     728.8     2.752    0.3%
    8     822.5     16.59    2.0%
    9     900.9     0.706    0.0%
   10     985.8     5.603    0.5%
   11      1116     15.55    1.3%
   12      1150     5.394    0.4%
   13      1303     16.13    1.2%
   14      1383     16.38    1.1%
   15      1477     13.11    0.8%
   16      1605     10.05    0.6%
   17      1668     19.54    1.1%
   18      1751     12.08    0.6%
   19      1834     10.96    0.5%
   20      1912     13.98    0.7%
   21      2015     10.14    0.5%
   22      2079     14.76    0.7%
   23      2246     11.78    0.5%
   24      2254     7.535    0.3%
   25      2432     15.36    0.6%
   26      2521     15.23    0.6%
   27      2692     12.31    0.4%
   28      2708     9.403    0.3%
   29      2774     12.07    0.4%
   30      2859      13.9    0.4%
   31      2927     13.09    0.4%
   32      3036     24.96    0.8%
   33      3157      12.3    0.3%
   34      3247     9.215    0.2%
   35      3326     14.74    0.4%
   36      3401     14.32    0.4%
   37      3500     13.95    0.3%
   38      3654     13.34    0.3%
   39      3663     11.89    0.3%
   40      3753     11.38    0.3%
   41      3831     11.82    0.3%
   42      3915     11.56    0.2%
   43      3994     7.892    0.1%
   44      4077      23.7    0.5%
   45      4159     14.44    0.3%
   46      4236     19.25    0.4%
   47      4323     4.444    0.1%
   48      4414     11.97    0.2%
   49      4710     9.243    0.1%
   50      4798     11.88    0.2%
   51      4890     13.79    0.2%
   52      4977     11.99    0.2%
   53      5053     14.56    0.2%
   54      5152     18.25    0.3%
   55      5214     19.83    0.3%
   56      5296     15.31    0.2%
   57      5399     26.24    0.4%
   58      5474     14.66    0.2%
   59      5560     20.98    0.3%
   60      5636     12.78    0.2%
   61      5728     20.63    0.3%
   62      5811     18.49    0.3%
   63      5895     16.34    0.2%
   64      6024     31.66    0.5%

Quality and confidence:
param     error
c           0.1

Model:
Time ~=    77.11
    + c    92.76
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    34.82
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    34.82
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    416.7
    + r     89.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.7     0.202    0.0%
    1     504.5     0.664    0.1%
    2     595.3     0.705    0.1%
    3       689     10.93    1.5%
    4     784.8     11.39    1.4%
    5     876.6        13    1.4%
    6     950.2     0.825    0.0%
    7      1048     0.921    0.0%
    8      1148     15.21    1.3%
    9      1226     6.403    0.5%
   10      1334        13    0.9%
   11      1405     14.32    1.0%
   12      1487      9.47    0.6%
   13      1576     11.09    0.7%
   14      1684     16.28    0.9%
   15      1791     14.29    0.7%
   16      1887     1.421    0.0%
   17      1978     7.397    0.3%
   18      2027     9.498    0.4%
   19      2109     9.599    0.4%
   20      2209     14.96    0.6%

Quality and confidence:
param     error
r         0.191

Model:
Time ~=      418
    + r    90.23
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    418.2
    + r    89.32
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     413.7     4.048    0.9%
    1     504.7     0.765    0.1%
    2       596     1.713    0.2%
    3     683.4      2.09    0.3%
    4     776.1     1.688    0.2%
    5     874.6     15.07    1.7%
    6     951.7     0.901    0.0%
    7      1058     15.78    1.4%
    8      1141     13.87    1.2%
    9      1231      13.4    1.0%
   10      1317     12.87    0.9%
   11      1408     13.71    0.9%
   12      1499     14.63    0.9%
   13      1591     14.02    0.8%
   14      1674     10.88    0.6%
   15      1782     12.09    0.6%
   16      1855     11.04    0.5%
   17      1942     15.46    0.7%
   18      2033     11.54    0.5%
   19      2110     8.254    0.3%
   20      2214     17.95    0.8%

Quality and confidence:
param     error
r          0.15

Model:
Time ~=      419
    + r    89.82
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    418.5
    + r    88.18
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     414.4      6.54    1.5%
    1       505     5.075    1.0%
    2     593.4      0.99    0.1%
    3     679.4     1.928    0.2%
    4     774.3     7.856    1.0%
    5     860.7     9.135    1.0%
    6     947.7     9.505    1.0%
    7      1048     13.54    1.2%
    8      1140     14.97    1.3%
    9      1218     13.01    1.0%
   10      1302     11.14    0.8%
   11      1398     14.45    1.0%
   12      1476     12.25    0.8%
   13      1568     12.08    0.7%
   14      1659     11.42    0.6%
   15      1748     12.39    0.7%
   16      1840     11.11    0.6%
   17      1932     12.32    0.6%
   18      2022     10.93    0.5%
   19      2095     11.49    0.5%
   20      2180     10.27    0.4%

Quality and confidence:
param     error
r         0.139

Model:
Time ~=    418.4
    + r    88.66
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    423.4
    + r      253
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     412.1     4.506    1.0%
    1     674.3     7.294    1.0%
    2       926     5.006    0.5%
    3      1185     12.85    1.0%
    4      1438     14.24    0.9%
    5      1682     8.764    0.5%
    6      1939     10.12    0.5%
    7      2209     11.47    0.5%
    8      2453     14.26    0.5%
    9      2718      13.6    0.5%
   10      2965     15.63    0.5%
   11      3214     6.902    0.2%
   12      3466     12.37    0.3%
   13      3720     10.89    0.2%
   14      3967     9.685    0.2%
   15      4218     10.61    0.2%
   16      4487     15.76    0.3%
   17      4724     11.68    0.2%
   18      4982     8.206    0.1%
   19      5219        12    0.2%
   20      5483     15.78    0.2%

Quality and confidence:
param     error
r         0.158

Model:
Time ~=    424.4
    + r    253.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.2
    + r    90.24
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.4      4.21    1.0%
    1     490.4     0.967    0.1%
    2     581.1     0.973    0.1%
    3     669.9     4.931    0.7%
    4     766.6     9.936    1.2%
    5     849.6      8.24    0.9%
    6     933.9     2.598    0.2%
    7      1048     6.163    0.5%
    8      1131     2.851    0.2%
    9      1223     10.62    0.8%
   10      1321     12.24    0.9%
   11      1395     9.897    0.7%
   12      1476     4.052    0.2%
   13      1572     13.27    0.8%
   14      1693     14.74    0.8%
   15      1783     12.41    0.6%
   16      1870     12.86    0.6%
   17      1944     11.85    0.6%
   18      2032     12.65    0.6%
   19      2116     10.39    0.4%
   20      2198     11.95    0.5%

Quality and confidence:
param     error
r         0.165

Model:
Time ~=    403.5
    + r    90.66
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    405.9
    + r    89.92
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     409.9      0.09    0.0%
    1     490.4     1.191    0.2%
    2     579.4      0.49    0.0%
    3     666.6     1.378    0.2%
    4     763.2     9.786    1.2%
    5     853.4     12.23    1.4%
    6     936.6     10.58    1.1%
    7      1041     1.322    0.1%
    8      1127     2.036    0.1%
    9      1219     10.13    0.8%
   10      1309     11.62    0.8%
   11      1391     10.59    0.7%
   12      1479     11.85    0.8%
   13      1562     7.274    0.4%
   14      1701     7.905    0.4%
   15      1760     10.94    0.6%
   16      1851     11.07    0.5%
   17      1935     13.28    0.6%
   18      2036     10.22    0.5%
   19      2106     9.302    0.4%
   20      2204     13.69    0.6%

Quality and confidence:
param     error
r         0.153

Model:
Time ~=    402.3
    + r    90.38
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.2
    + r    89.69
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       410      0.41    0.0%
    1     489.3      1.47    0.3%
    2     577.9     0.435    0.0%
    3       666     4.787    0.7%
    4     759.2     5.146    0.6%
    5     854.1     11.95    1.3%
    6     930.1     7.876    0.8%
    7      1046     12.03    1.1%
    8      1131     12.87    1.1%
    9      1224     13.56    1.1%
   10      1306     13.95    1.0%
   11      1405     14.57    1.0%
   12      1474     10.83    0.7%
   13      1566     12.52    0.7%
   14      1677     13.45    0.8%
   15      1754     10.14    0.5%
   16      1851     13.99    0.7%
   17      1945     12.83    0.6%
   18      2027     16.23    0.8%
   19      2102     11.47    0.5%
   20      2203     4.724    0.2%

Quality and confidence:
param     error
r         0.156

Model:
Time ~=    402.5
    + r    90.24
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    415.8
    + r    89.16
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     396.8     0.283    0.0%
    1     493.3     8.648    1.7%
    2     596.1     7.301    1.2%
    3     699.1     19.22    2.7%
    4     776.8     11.44    1.4%
    5       860     8.182    0.9%
    6     965.7     15.65    1.6%
    7      1054     15.53    1.4%
    8      1133     12.62    1.1%
    9      1212     7.073    0.5%
   10      1310      13.4    1.0%
   11      1394     12.59    0.9%
   12      1480     13.15    0.8%
   13      1565     12.79    0.8%
   14      1691     7.735    0.4%
   15      1792     6.172    0.3%
   16      1851     14.44    0.7%
   17      1936     12.53    0.6%
   18      2025     12.74    0.6%
   19      2098     11.67    0.5%
   20      2197     11.65    0.5%

Quality and confidence:
param     error
r           0.2

Model:
Time ~=    415.2
    + r    89.56
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    422.9
    + r    226.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.7     0.912    0.2%
    1     644.2     13.45    2.0%
    2     872.6     3.872    0.4%
    3      1106      13.8    1.2%
    4      1328     9.134    0.6%
    5      1543     10.04    0.6%
    6      1805      12.2    0.6%
    7      2012     9.683    0.4%
    8      2236     8.604    0.3%
    9      2463     6.194    0.2%
   10      2686     15.82    0.5%
   11      2929     16.06    0.5%
   12      3157     16.99    0.5%
   13      3391        27    0.7%
   14      3611     14.92    0.4%
   15      3827     17.89    0.4%
   16      4044     14.51    0.3%
   17      4288     15.46    0.3%
   18      4506      14.6    0.3%
   19      4721     13.51    0.2%
   20      4945     14.99    0.3%

Quality and confidence:
param     error
r         0.197

Model:
Time ~=    422.3
    + r    226.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    144.9
    + r    42.13
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     139.8     0.179    0.1%
    1     185.5      0.23    0.1%
    2     227.6      0.21    0.0%
    3     272.6     0.333    0.1%
    4     315.8      4.12    1.3%
    5     347.1     2.954    0.8%
    6     401.7     0.256    0.0%
    7     442.7     0.343    0.0%
    8     491.4     9.137    1.8%
    9     524.6     0.729    0.1%
   10     564.6     0.436    0.0%
   11     609.9     2.409    0.3%
   12     657.3     7.344    1.1%
   13     692.6      2.75    0.3%
   14     735.2     3.524    0.4%
   15     777.8      6.91    0.8%
   16     818.8     7.363    0.8%
   17     859.4     9.075    1.0%
   18     907.5     14.45    1.5%
   19     955.4     16.89    1.7%
   20     994.9     15.58    1.5%

Quality and confidence:
param     error
r         0.094

Model:
Time ~=    143.1
    + r    42.46
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    417.1
    + r    81.01
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.6      0.16    0.0%
    1     496.2     0.921    0.1%
    2     577.7     0.547    0.0%
    3     662.1     6.528    0.9%
    4     741.3     0.645    0.0%
    5     829.3     12.83    1.5%
    6       900     1.867    0.2%
    7     997.3     12.08    1.2%
    8      1086     11.61    1.0%
    9      1152     5.427    0.4%
   10      1229     9.894    0.8%
   11      1305     9.352    0.7%
   12      1403     16.01    1.1%
   13      1468     11.14    0.7%
   14      1556     11.08    0.7%
   15      1650     9.192    0.5%
   16      1708     7.512    0.4%
   17      1815     10.41    0.5%
   18      1885     17.05    0.9%
   19      1970     21.01    1.0%
   20      2026      9.76    0.4%

Quality and confidence:
param     error
r         0.156

Model:
Time ~=    417.8
    + r    81.42
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      530
    + n    37.99
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     494.6     0.405    0.0%
   20      1268      12.1    0.9%
   40      2034     17.72    0.8%
   60      2803     4.701    0.1%
   80      3559     1.077    0.0%
  100      4341     16.64    0.3%
  120      5082     12.48    0.2%
  140      5853     17.75    0.3%
  160      6613     16.72    0.2%
  180      7374     22.14    0.3%
  200      8146     16.31    0.2%
  220      8893     23.08    0.2%
  240      9658     16.26    0.1%
  260     10600     25.29    0.2%
  280     11180      23.9    0.2%
  300     11930     27.59    0.2%
  320     12690     29.64    0.2%
  340     13470     41.29    0.3%
  360     14200     17.27    0.1%
  380     14970      39.1    0.2%
  400     15730     34.85    0.2%
  420     16510     26.08    0.1%
  440     17260     45.39    0.2%
  460     18010     34.02    0.1%
  480     18790     37.94    0.2%
  500     19570     24.49    0.1%
  520     20300     27.07    0.1%
  540     21010     30.12    0.1%
  560     21800     21.82    0.1%
  580     22540     19.98    0.0%
  600     23310     29.32    0.1%
  620     24080     17.93    0.0%
  640     24830     24.73    0.0%
  660     25590     18.18    0.0%
  680     26360     19.96    0.0%
  700     27130     39.68    0.1%
  720     27870     27.04    0.0%
  740     28640     24.66    0.0%
  760     29390     45.17    0.1%
  780     30190     48.48    0.1%
  800     30930     22.06    0.0%
  820     31660     30.67    0.0%
  840     32460     63.62    0.1%
  860     33210     40.36    0.1%
  880     34140     216.5    0.6%
  900     34730     30.34    0.0%
  920     35470     37.25    0.1%
  940     36230     24.19    0.0%
  960     37010     57.27    0.1%
  980     37760     41.59    0.1%
 1000     38540     41.75    0.1%
 1020     39300     43.01    0.1%

Quality and confidence:
param     error
n         0.008

Model:
Time ~=    535.2
    + n       38
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      401
    + r    2.899
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     401.1     0.213    0.0%
    1     403.9     0.132    0.0%

Quality and confidence:
param     error
r         0.083

Model:
Time ~=    401.1
    + r    2.811
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    403.7
    + n    0.623
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     403.4     0.302    0.0%
   20     417.5     2.842    0.6%
   40     428.9     0.392    0.0%
   60       445     4.869    1.0%
   80     453.4     0.259    0.0%
  100     471.6     8.552    1.8%
  120     478.2     0.149    0.0%
  140     492.9     5.331    1.0%
  160     510.8     11.28    2.2%
  180       519     8.756    1.6%
  200     528.4     0.198    0.0%
  220     540.6     0.286    0.0%
  240     553.5     1.579    0.2%
  260     570.8     9.907    1.7%
  280     580.1     3.902    0.6%
  300     594.5     9.051    1.5%
  320     608.8      9.07    1.4%
  340     615.6     0.276    0.0%
  360     629.6     4.434    0.7%
  380     643.9       9.5    1.4%
  400     652.7      0.41    0.0%
  420     678.5     11.52    1.6%
  440     678.3     0.201    0.0%
  460     704.9     17.77    2.5%
  480     726.4     10.34    1.4%
  500       716     0.368    0.0%
  520     726.6      4.01    0.5%
  540       741     1.682    0.2%
  560     753.6     1.805    0.2%
  580     771.3     12.47    1.6%
  600     779.1     4.468    0.5%
  620     791.9     5.759    0.7%
  640     807.7     9.855    1.2%
  660     817.7      7.59    0.9%
  680     837.4     11.93    1.4%
  700     842.9     7.729    0.9%
  720       860     10.19    1.1%
  740     866.9     4.328    0.4%
  760     880.4     7.335    0.8%
  780     894.6     6.581    0.7%
  800       906     6.007    0.6%
  820     917.6     7.621    0.8%
  840     938.9     10.51    1.1%
  860       950     12.08    1.2%
  880     959.6     10.99    1.1%
  900     966.4     5.228    0.5%
  920     988.1     11.07    1.1%
  940      1000     12.96    1.2%
  960      1009      10.6    1.0%
  980      1021      9.43    0.9%
 1000      1033     9.572    0.9%
 1020      1050     12.84    1.2%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=      405
    + n     0.63
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    409.4
    + r    63.98
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     409.4     0.309    0.0%
    1     478.6     5.986    1.2%

Quality and confidence:
param     error
r         1.998

Model:
Time ~=    409.4
    + r    69.21
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    411.7
    + r    280.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.5     0.285    0.0%
    1     705.7     8.575    1.2%
    2     978.6     12.47    1.2%
    3      1261     13.29    1.0%
    4      1534      11.1    0.7%
    5      1812     10.27    0.5%
    6      2102     12.18    0.5%
    7      2369     6.276    0.2%
    8      2649     13.62    0.5%
    9      2942     17.03    0.5%
   10      3216     9.548    0.2%
   11      3493     17.04    0.4%
   12      3755     10.23    0.2%
   13      4033     16.28    0.4%
   14      4318     9.637    0.2%
   15      4602     21.04    0.4%
   16      4889     19.88    0.4%
   17      5213     17.89    0.3%
   18      5504     17.25    0.3%
   19      5773     15.32    0.2%
   20      6049     17.95    0.2%

Quality and confidence:
param     error
r         0.258

Model:
Time ~=    407.3
    + r    281.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    417.7
    + r    474.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     401.6     0.169    0.0%
    1     890.3     8.622    0.9%
    2      1369     12.63    0.9%
    3      1839     8.876    0.4%
    4      2315     15.62    0.6%
    5      2814     13.66    0.4%
    6      3265     11.37    0.3%
    7      3735     11.78    0.3%
    8      4202     14.73    0.3%
    9      4707     15.63    0.3%
   10      5156     12.71    0.2%
   11      5624     16.63    0.2%
   12      6109     20.78    0.3%
   13      6558     24.57    0.3%
   14      7023     15.88    0.2%
   15      7526     34.63    0.4%
   16      7980     23.61    0.2%
   17      8573     58.21    0.6%
   18      8992     19.39    0.2%
   19      9425     22.66    0.2%
   20      9912      19.4    0.1%

Quality and confidence:
param     error
r          0.38

Model:
Time ~=    412.1
    + r    475.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    935.9
    + t    413.8
    + n    165.1
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3518     12.43    0.3%
    1    16      4042     12.23    0.3%
    2    16      4411     17.38    0.3%
    3    16      4838     18.87    0.3%
    4     0      2562     12.27    0.4%
    4     1      2751     15.91    0.5%
    4     2      2918     15.92    0.5%
    4     3      3061     14.06    0.4%
    4     4      3245      11.6    0.3%
    4     5      3370     18.79    0.5%
    4     6      3547     16.47    0.4%
    4     7      3677     16.25    0.4%
    4     8      3877     24.21    0.6%
    4     9      4144     15.51    0.3%
    4    10      4195      12.7    0.3%
    4    11      4379     26.21    0.5%
    4    12      4575     13.51    0.2%
    4    13      4740     14.47    0.3%
    4    14      4876     16.82    0.3%
    4    15      5029      16.1    0.3%
    4    16      5219      10.8    0.2%

Quality and confidence:
param     error
t         2.539
n           0.5

Model:
Time ~=    917.2
    + t    412.3
    + n      166
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    160.5
    + r    62.13
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     158.6     0.193    0.1%
    1     224.8     0.238    0.1%
    2       276     3.399    1.2%
    3     352.1     0.348    0.0%
    4     398.2     1.152    0.2%
    5     471.8      0.43    0.0%
    6     530.4     1.177    0.2%
    7     599.4     14.49    2.4%
    8     653.4     6.547    1.0%
    9     715.5     12.88    1.7%
   10       768     8.666    1.1%
   11     854.2     10.38    1.2%
   12     915.8      10.8    1.1%
   13     975.8     10.67    1.0%
   14      1031     10.54    1.0%
   15      1097     14.53    1.3%
   16      1150     10.77    0.9%
   17      1221      10.7    0.8%
   18      1284      11.4    0.8%
   19      1340     9.654    0.7%
   20      1406     11.48    0.8%

Quality and confidence:
param     error
r         0.125

Model:
Time ~=    157.4
    + r    62.47
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    488.6
    + r    339.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     397.4     1.026    0.2%
    1     851.5     5.615    0.6%
    2      1188     11.27    0.9%
    3      1518     10.92    0.7%
    4      1829     13.96    0.7%
    5      2187      13.8    0.6%
    6      2526     9.331    0.3%
    7      2827     12.74    0.4%
    8      3153     6.874    0.2%
    9      3546     12.45    0.3%
   10      3855     8.123    0.2%
   11      4252     11.76    0.2%
   12      4568     6.571    0.1%
   13      4876     20.52    0.4%
   14      5201     11.59    0.2%
   15      5536     12.83    0.2%
   16      5866     23.39    0.3%
   17      6183     21.39    0.3%
   18      6654     17.86    0.2%
   19      6977     17.83    0.2%
   20      7306     23.37    0.3%

Quality and confidence:
param     error
r         0.465

Model:
Time ~=    469.6
    + r    340.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    739.5
    + n    73.63
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     722.2     6.766    0.9%
    1     813.5     2.945    0.3%
    2     898.6     11.83    1.3%
    3     961.6     4.582    0.4%
    4      1029       5.5    0.5%
    5      1100     5.454    0.4%
    6      1174     8.602    0.7%
    7      1268     11.11    0.8%
    8      1340     15.66    1.1%
    9      1406      16.2    1.1%
   10      1497     14.03    0.9%
   11      1557     13.96    0.8%
   12      1636     13.69    0.8%
   13      1687     9.489    0.5%
   14      1775     11.05    0.6%
   15      1856      14.4    0.7%
   16      1904     12.92    0.6%

Quality and confidence:
param     error
n         0.241

Model:
Time ~=    738.4
    + n    74.09
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    163.7
    + r    800.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     410.5     0.465    0.1%
    1      1143     11.07    0.9%
    2      1873     13.22    0.7%
    3      2622     10.51    0.4%
    4      3352     14.78    0.4%
    5      4151     12.02    0.2%
    6      4911      13.4    0.2%
    7      5670     12.12    0.2%
    8      6470     23.77    0.3%
    9      7306     11.88    0.1%
   10      8086     20.52    0.2%
   11      8928     28.44    0.3%
   12      9707     22.39    0.2%
   13     10530        21    0.1%
   14     11320     26.85    0.2%
   15     12140     30.01    0.2%
   16     12990     24.93    0.1%
   17     13770     21.73    0.1%
   18     14800     64.99    0.4%
   19     15660     45.78    0.2%
   20     16510     63.82    0.3%

Quality and confidence:
param     error
r         1.531

Model:
Time ~=      165
    + r    804.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    287.1
    + r    455.9
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     411.3      0.14    0.0%
    1     820.9     11.36    1.3%
    2      1233     9.965    0.8%
    3      1668     14.45    0.8%
    4      2078     14.57    0.7%
    5      2571     9.872    0.3%
    6      3009     11.74    0.3%
    7      3419     10.79    0.3%
    8      3850     8.646    0.2%
    9      4359     12.42    0.2%
   10      4782     12.95    0.2%
   11      5288     21.31    0.4%
   12      5750     28.55    0.4%
   13      6170     19.99    0.3%
   14      6637     16.99    0.2%
   15      7100     43.55    0.6%
   16      7582     32.32    0.4%
   17      8064     29.49    0.3%
   18      8593     38.68    0.4%
   19      9068     33.55    0.3%
   20      9535     28.02    0.2%

Quality and confidence:
param     error
r         0.756

Model:
Time ~=    281.8
    + r    457.5
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    661.5
    + n    110.1
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     635.1     3.107    0.4%
    1     767.7     5.517    0.7%
    2       881     1.201    0.1%
    3     992.9     5.418    0.5%
    4      1109     9.526    0.8%
    5      1213     2.629    0.2%
    6      1324     15.79    1.1%
    7      1436     14.69    1.0%
    8      1549     14.03    0.9%
    9      1643     2.359    0.1%
   10      1765     11.78    0.6%
   11      1878     13.24    0.7%
   12      1972     8.767    0.4%
   13      2094      14.6    0.6%
   14      2212     10.22    0.4%
   15      2325     13.62    0.5%
   16      2409      4.46    0.1%

Quality and confidence:
param     error
n         0.215

Model:
Time ~=    657.1
    + n    110.6
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    307.6
    + r     2898
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     414.1     0.216    0.0%
    1      3253     11.79    0.3%
    2      6124      14.5    0.2%
    3      8979     24.01    0.2%
    4     11870     37.56    0.3%
    5     14740     16.42    0.1%
    6     17590     39.86    0.2%
    7     20490     33.52    0.1%
    8     23500     82.92    0.3%
    9     26310     50.52    0.1%
   10     29410     19.02    0.0%
   11     31960        68    0.2%
   12     35010      38.2    0.1%
   13     38050     35.81    0.0%
   14     40770     70.81    0.1%
   15     43780     99.59    0.2%
   16     46730     55.71    0.1%
   17     49410     63.45    0.1%
   18     52490     64.34    0.1%
   19     55510     46.42    0.0%
   20     58530      42.7    0.0%

Quality and confidence:
param     error
r         1.348

Model:
Time ~=    273.9
    + r     2901
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    38310
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       416     0.549    0.1%
    1     37210     45.91    0.1%
    2     74000     83.04    0.1%
    3    110700     85.41    0.0%
    4    152800     47.57    0.0%
    5    191300     103.1    0.0%
    6    229200       247    0.1%
    7    267600     99.83    0.0%
    8    305800     139.2    0.0%
    9    344000     123.6    0.0%
   10    382900     269.9    0.0%
   11    421400     155.8    0.0%
   12    459500     176.7    0.0%
   13    496600     134.2    0.0%
   14    535800       219    0.0%
   15    573600     431.8    0.0%
   16    612200     202.3    0.0%
   17    650300     226.6    0.0%
   18    688100       147    0.0%
   19    727900     228.4    0.0%
   20    765500     391.3    0.0%

Quality and confidence:
param     error
r         11.17

Model:
Time ~=        0
    + r    38340
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37200
    + t     2461
    + i    63.37
    + o    101.4
              µs

Reads = 105 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    199500     132.1    0.0%
    1     0   960    137100     135.9    0.0%
    1    20   960    138400     81.23    0.0%
    1    40   960    139600     72.38    0.0%
    1    60   960    140900     117.9    0.0%
    1    80   960    142300     80.59    0.0%
    1   100   960    143600     81.76    0.0%
    1   120   960    144900     61.98    0.0%
    1   140   960    146100     132.4    0.0%
    1   160   960    147300     56.07    0.0%
    1   180   960    148600     111.3    0.0%
    1   200   960    149900     53.11    0.0%
    1   220   960    151200     75.75    0.0%
    1   240   960    152400     90.62    0.0%
    1   260   960    153700     108.5    0.0%
    1   280   960    154900     81.16    0.0%
    1   300   960    156200     77.44    0.0%
    1   320   960    157400     93.62    0.0%
    1   340   960    158800      57.4    0.0%
    1   360   960    159900     73.47    0.0%
    1   380   960    161200     129.8    0.0%
    1   400   960    162400     67.59    0.0%
    1   420   960    163700     216.9    0.1%
    1   440   960    165000       165    0.0%
    1   460   960    166300     54.01    0.0%
    1   480   960    167700     100.8    0.0%
    1   500   960    168800     67.29    0.0%
    1   520   960    170300     82.85    0.0%
    1   540   960    171500     67.08    0.0%
    1   560   960    172900     133.5    0.0%
    1   580   960    174000     120.7    0.0%
    1   600   960    175200     106.5    0.0%
    1   620   960    176500     145.2    0.0%
    1   640   960    177600     105.8    0.0%
    1   660   960    179100      87.3    0.0%
    1   680   960    180300     79.58    0.0%
    1   700   960    181800     188.5    0.1%
    1   720   960    183000     184.1    0.1%
    1   740   960    184000     181.7    0.0%
    1   760   960    185300     88.22    0.0%
    1   780   960    186600       101    0.0%
    1   800   960    188200       140    0.0%
    1   820   960    189200     109.8    0.0%
    1   840   960    190500       127    0.0%
    1   860   960    191700     92.71    0.0%
    1   880   960    192900     66.16    0.0%
    1   900   960    194100     108.6    0.0%
    1   920   960    195500     139.6    0.0%
    1   940   960    196900     152.6    0.0%
    1   960   960    197900       162    0.0%
    1   980   960    199200     89.26    0.0%
    1  1000   960    200600       199    0.0%
    1  1020   960    201700     95.17    0.0%
    1  1024     0    104600     48.03    0.0%
    1  1024    19    106600     67.06    0.0%
    1  1024    38    108500     49.47    0.0%
    1  1024    57    110700     47.93    0.0%
    1  1024    76    112600     61.26    0.0%
    1  1024    95    114500     61.08    0.0%
    1  1024   114    116200     66.21    0.0%
    1  1024   133    118300     46.18    0.0%
    1  1024   152    120100     69.78    0.0%
    1  1024   171    122400     294.6    0.2%
    1  1024<truncated>...
```

</details>",10489,2021-12-15T16:06:29Z,0
1482,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10489,2022-01-14T19:34:26Z,0
1483,kianenigma,"For the sake of prosperity, I hereby confirm that commit https://github.com/paritytech/substrate/pull/10340/commits/2f629a9ccdcc751f4ec52a04c9d9451470271d38 which is not properly signed was made by me. ",10340,2021-11-24T09:36:52Z,0
1484,jonasW3F,"Based on the discussion in the element group, I'd like to summarize my points on this. First, I think reducing the number of nominations per nominator is generally a reasonable approach if we can trade those for increasing the number of total nominators in the short run. But, I think it is crucial to not reduce those too far, because for the following reasons:

1. The most important reason is that we want our nominators to participate in decentralizing the network, which means that they should seek out the best validators to fit their preferences and include them in their favorite set. Also, we would like them to include inactive validators because of the mentioned reason. Reducing the nominations too much would jeopardize this. Especially including inactive validators becomes increasingly costly which favors large operators and reduces healthy turnover in the active set.
2. Nominators could frequently miss out on rewards if the number of nominations becomes too low, which would cause frustration.
3. I think users of the network generally enjoy the freedom of choice that NPoS gives them and it is an important feature that distinguishes us from other networks that restrict the choices of their stakers.
4. Once we obtain better scaling solutions for staking, sacrificing on the first three mentioned arguments would hurt the network in the long run.

Having said that, I think there is still room to reduce the nominations (currently 16 in Polkadot) to free space for more nominators. As mentioned in the group, I'd propose a rule of setting the minimum number of nominations to 6-8 and giving another nomination per 50k DOT in the stash. That would provide sufficient freedom to smaller stakers as well as for larger token holders.

This strategy of 6 + 1 every 50k (and cap at 32) would give, based on some recent era data, a maximum of 111801 nominations. If we assume that nominators use their free slots similarly as currently (64%), that would bring down the number of nominations to 72k. If we compare that to the current number of 184954 nominations, that's a good gain.
",10340,2021-11-30T18:26:05Z,0
1485,kianenigma,"I'm not quite sure about the prospect of this, so marking it is on ice for now until I know more, or I will temporarily close it. ",10340,2022-01-03T16:59:23Z,0
1486,emostov,Any updates on the status of this?,10340,2022-01-17T21:42:51Z,0
1487,kianenigma,"> Any updates on the status of this?

Not a priority for me anymore, but I am keen in someday getting it in if we have some bandwidth for it. ",10340,2022-01-19T19:53:24Z,0
1488,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8713,2021-07-07T18:13:15Z,0
1489,kianenigma,I really agree with this. Handling migrations that are baked into the pallet is too opaque in my opinion. ,8713,2021-09-17T23:54:41Z,0
1490,kianenigma,"> Maybe update the docs of `on_runtime_upgrade` as well to tell people that it is discouraged to run migrations in there?

Might even be able to generate a compiler warning if it gets implemented inside the pallet 💡 ",10650,2022-01-13T12:59:00Z,0
1491,kianenigma,"Okay the warning's not possible without the unstable `Diognastics` API. If no one has a better idea, then we roll with this for now and call it a day. ",10650,2022-01-14T12:11:08Z,0
1492,kianenigma,bot merge,10650,2022-01-18T16:34:32Z,0
1493,paritytech-processbot[bot],Waiting for commit status.,10650,2022-01-18T16:34:40Z,0
1494,paritytech-processbot[bot],Merge cancelled due to error. Error: Head SHA changed from 500824aec0800b1965ab222f2c04715c888f1730 to 899fb3f98adc87a006657747f9b8aa4b0c63bd2e,10650,2022-01-18T16:40:03Z,0
1495,kianenigma,bot merge,10650,2022-01-19T13:16:51Z,0
1496,paritytech-processbot[bot],Waiting for commit status.,10650,2022-01-19T13:16:59Z,0
1497,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for edbe7a6ed522e5b5603c04947223f42766fccc8d,10650,2022-01-19T13:35:22Z,0
1498,kianenigma,bot merge ,10650,2022-01-19T15:19:19Z,0
1499,paritytech-processbot[bot],Waiting for commit status.,10650,2022-01-19T15:19:27Z,0
1500,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 882992e0c43bd5cfca476c439a868be6576f11ee,10650,2022-01-19T15:48:42Z,0
1501,shawntabrizi,"The hard part of this exercise is to properly identify which `Get<T>` functions should be turned into `const`, `ConstGet<T>` or stay `Get<T>`.

Unfortunately we cannot migrate everything which SHOULD be a `const` into that since const generic features are not fully stabilized: https://github.com/paritytech/substrate/pull/9865",9967,2021-10-07T22:58:46Z,0
1502,Doordashcon,Hi @shawntabrizi can i take on this issue ,9967,2021-10-27T15:33:44Z,0
1503,KiChjang,"@Doordashcon Yes, please go ahead! If you need any help, please ping me or Shawn in the Substrate Technical channel on Element/Discord.",9967,2021-10-27T16:41:43Z,0
1504,Doordashcon,@KiChjang sure thing,9967,2021-10-27T16:42:46Z,0
1505,Doordashcon,@KiChjang want to submit task by task?,9967,2021-11-04T10:31:06Z,0
1506,shawntabrizi,"I think the first two tasks can be done in 1 PR. Make sure your PR targets paritytech/substrate, not your fork",9967,2021-11-04T13:34:08Z,0
1507,Doordashcon,"is this the general idea for the second task?

```rust
#[impl_const]
trait ConstantId {
  const ID: i32;
}
```
the attribute-like macro `#[impl_const]` will implement `ConstGet<T>` for associated constants in ConstantId
```rust
impl ConstGet<i32> for i32 {
  fn get() -> i32
}
```
",9967,2021-11-09T09:42:22Z,0
1508,shawntabrizi,"@Doordashcon yes, but ideally within the trait itself?

```
trait ConstantId {
  #[impl_const_get]
  const ID: i32;
}
```

Is that possible?",9967,2021-11-11T14:10:12Z,0
1509,Doordashcon,"I don't think the macro would know where it is called, so it cannot know about the ConstantId trait, which is a needed element for the expansion.

Another approach would be to keep the attribute on the trait definition, but require a helper annotation on `const`  

```rust
#[apply(derive_Gets!)]
trait ConstantId {
    #[Get]
    const ID: i32;
}
```
And have the outer macro skip the associated items with no #[Get] applied to them.

I would use a crate called `macro_use_attribute` with the alias `apply` which allows  the use of declarative macros as proc_macro attributes or derives.",9967,2021-11-12T20:15:01Z,0
1510,KiChjang,"> Generate a tiny bit of macro code which will wrap a const in a trait into a ConstGet<T> so it can be used within the runtime for things like BoundedVec

This syntax:

```rust
trait ConstantId {
  #[impl_const_get]
  const ID: i32;
}
```

is actually doable in FRAME, assuming that `ConstantId` means the pallet's `Config` trait. Even if `ConstantId` means something else, we can make it so that any associated constant defined inside of a trait under `#[frame_support::pallet]` would parse for an attribute above itself.",9967,2021-11-13T03:22:56Z,0
1511,danielhenrymantilla,"The syntax

```rust
trait ConstantId {
    #[impl_const_get]
    const ID: i32;
}
```

would —within a sane implementation— be unable to generate an `impl …` block since that's not a valid assoc item for `trait ConstantId` definition:

```rust
//! Expanded code

trait ConstantId {
    const ID: i32;

    impl … // Uh oh
}
```

While there exists a contrived workaround to allow for such an `impl …` declaration nested inside the `const ID: i32`, I highly recommend that the trait just take an external annotation:

```rust
//! Expansion: incorrect Rust

#[preprocessor_name] // <- actual proc-macro attribute   <-------------------------------------------------+
trait ConstantId {                                                                                      // |
    #[const_get] // <- fake proc-macro attr / inert attr that shall just act as a syntactical marker for --+
    const ID: i32;
}
```

It's way easier to implement (and the result is more readable). In fact, for a non-generic trait, with only associated constants, that shall be picked or ignored by the ""preprocessor"", then such a preprocessor can be implemented with a `macro_rules!` macro, that can then be, if so desired, [`#[apply]`](https://docs.rs/macro_rules_attribute/0.0.2/macro_rules_attribute/#the-applymacro-shorthand)ed as an attribute.

  - [Demo](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=abc2a40ea9e401973fd557f218925572)",9967,2021-11-15T18:16:25Z,0
1512,KiChjang,"@danielhenrymantilla That is my point, we already have [`#[frame_support::pallet]`](https://paritytech.github.io/substrate/master/frame_support/attr.pallet.html) as a preprocessor for all pallet definitions.

See the directory under `frame/support/procedural/src/pallet` for more information.",9967,2021-11-16T01:13:36Z,0
1513,Doordashcon,Still working on this @KiChjang @shawntabrizi,9967,2022-01-09T22:40:01Z,0
1514,Lohann,"We needed this feature in our pallet, the workaround we found is using traits, but is not optimal:
```rust
trait ConstGet<T> {
    const VALUE: T;
}

struct Two;
impl ConstGet<usize> for Two {
    const VALUE: usize = 2;
}

struct Four;
impl ConstGet<usize> for Four {
    const VALUE: usize = 4;
}

struct FixedArray<const N: usize>([u32; N]);
impl <const N: usize> FixedArray<N> {
    fn new() -> Self {
        Self([0;N])
    }
}

type TwoByteArray = FixedArray::<{Two::VALUE}>;
type FourByteArray = FixedArray::<{Four::VALUE}>;

fn main() {
    let a = TwoByteArray::new();
    let b = FourByteArray::new();
    println!(""a: {:?}"", a.0);
    println!(""b: {:?}"", b.0);
}
```
https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=daee4712ad219a12546465b8ddf774bf

Then the Config definition is something like this:
``` rust
/// Configuration trait.
#[pallet::config]
pub trait Config: frame_system::Config {
    ...
    // Constant array size
    type ArraySize: ConstGet<usize>;
}
```",9967,2022-01-19T20:30:37Z,0
1515,KiChjang,"Looks like this requires an update to `libp2p-core` and `libp2p-websocket` to the latest versions first, because these two crates depends upon `rw-stream-sink`, which in turn still depends upon `pin-project:0.4.27`, which causes the `parse_quote_spanned` name collision.",10660,2022-01-14T13:25:35Z,0
1516,KiChjang,My guess is that an upgrade to `libp2p:0.41.1` should do the trick.,10660,2022-01-14T13:28:22Z,0
1517,dependabot[bot],Superseded by #10703.,10660,2022-01-20T09:19:24Z,0
1518,rakanalh,"Testing shows that the network layer rejects this because the block is unknown through the chain.

https://github.com/paritytech/substrate/blob/3c9b031e449a6249dde07e00066848e0ee481ddf/client/network/src/protocol.rs#L1090-L1100

~~Since this comes through the `NetworkService`'s call to `announce_block`... and is sent to the `NetworkWorker` through `ServiceToWorkerMsg::AnnounceBlock` msg, my current solution to this problem is either attach a `bool` which indicates that this is a preimport to skip this step. Thoughts? @gnunicorn, @tomaka.~~",8052,2021-02-04T19:59:44Z,0
1519,andresilva,"Regardless of the current design details, with the current implementation I am not entirely sure how this is supposed to work in practice. Let's look at an example of what will happen:

- Node1 starts importing block A 
- It does the initial verification checks
- It pre-announces the block
- It begins importing the block (for Polkadot we can assume this will take at most 2s but it could be more for other Substrate-based chains)
- In the meantime Node1 gets a request for block A, which it can't serve since it's not imported yet
- Node2 which requested block A from Node1 will reduce its reputation since it announced something that it couldn't serve (eventually disconnecting from it when the reputation gets too low).



",8052,2021-02-05T12:08:51Z,0
1520,gnunicorn,"pulling @rphmeier into this conversation, especially regarding the comment by @andresilva . Rob, thoughts?",8052,2021-02-05T13:17:55Z,0
1521,andresilva,"Currently the sync code always answers block requests by looking at what's on the database. I think for this feature to work the sync code will also need to be able to serve blocks that have been pre-imported but are still being imported, it will need to somehow manage a cache of what's in the `preimport -> import` stage. I don't have any concrete design suggestions for how to do this.",8052,2021-02-05T14:20:10Z,0
1522,rphmeier,"Yes, I agree with André - we need the sync code to be able to serve pre-verified blocks before they exist in the DB. And this overlay should be pruned after the blocks are in the DB or once verification fails.

@bkchr We'd like the checks that are done within `import_block` of GRANDPA and BABE to be done before broadcast. When I had a brief look at these checks, especially those in GRANDPA, it seemed safer to have them run. The main expense that we are trying to avoid is executing the block in the runtime and committing trie changes to RocksDB, AFAIK. This is difficult to do without a notification stream as the `BlockImport` traits are composed and ultimately form a synchronous wrapper around the client.

I see two ways forward if the extra notification stream in the client is to be avoided. I reserve judgement on whether it should be and defer to @gnunicorn and other maintainers on that decision. I do think that the addition of an extra notification stream is ugly.

1. Investigate the attack surface of doing only header-based checks and if acceptable, build the broadcast into import queue.
2. Re-design the `BlockImport` trait and interface to better support this use-case.

One way of redesigning might be to make `BlockImport` an `async trait`, where we introduce yet another layer of the onion that broadcasts pre-import notifications:

sketch:
```rust
struct BroadcastPreImportNotificationsBlockImport(Vec<Sender>, inner: BlockImport);

async fn import_block(...) {
    let notification = make_notification(...);
    for sender in senders { sender.send(notification).await } // no unbounded channel
    inner.import_block(...)
}
```

and this would be instantiated at the service level and hooked up to the sync protocol.

There are other, cleaner ways to accomplish the same thing but would require digging out even more internals",8052,2021-02-06T07:12:20Z,0
1523,bkchr,"> @bkchr We'd like the checks that are done within `import_block` of GRANDPA and BABE to be done before broadcast. When I had a brief look at these checks, especially those in GRANDPA, it seemed safer to have them run. The main expense that we are trying to avoid is executing the block in the runtime and committing trie changes to RocksDB, AFAIK. This is difficult to do without a notification stream as the `BlockImport` traits are composed and ultimately form a synchronous wrapper around the client.

Yeah, I did read and understood what you said. For me it is more how this communication is done here. We already have a communication between the import queue and sync. Sync instructs the import queue to import blocks and it gets notified by the task about the results. This is complelty independent from the rest of the system. 

I think it should stay this way. Adding some new notification type deep into substrate, is just some hack. We already have the problem that no one really knows when such a notification is send and it also changes from time to time. 

This import queue is currently implemented relative ugly, but could be improved, especially for what we want here. In ethereum we apparently only checked that the header was correct. In the end we should be able to do here the same. Even if all checks in the block import in grandpa and babe are correct, executing the block could still fail. Maybe we require some way in the sync protocol to invalidate a block announcement or something similar. 

",8052,2021-02-06T07:48:41Z,0
1524,rphmeier,"> In ethereum we apparently only checked that the header was correct. In the end we should be able to do here the same

Yes, however, it'll require some reorganization of GRANDPA code. Worth nothing that in Ethereum we only had PoW which has no on-disk metadata except the DAG which is just a function of block height. GRANDPA & BABE require a lot more on-disk metadata which we'd like to be written to the DB atomically with the trie changes.

Of course, these problems are all solvable, and we could easily move all these checks to the header verification in such a way that the pending DB updates are supplied to the `BlockImport` logic to be passed to the client without doing checks more than once per block. it just requires someone to roll up their sleeves, get a shovel, and dig ... @rakanalh ?  :) ",8052,2021-02-06T07:57:00Z,0
1525,rakanalh,"@tomaka, @gnunicorn and I discussed recent changes and we'd like your opinion on this.

Following @bkchr's opinion on keeping the logic for announcing pre-import blocks isolated in the networking layer... the current implementation (still WIP) would differentiate between announcing pre-imported blocks from imported blocks but we end up sending the same message over the network. The differentiation happens internally since when announcing to peers, we would end up keeping the pre-imported headers locally so that any requests for a specific block (or header) would be answered from the list of pre-imported blocks maintained by the sync service. So for peers, it's going to be transparent whether the announcement is for a pre-imported block or an imported one.... that follows the suggestion made by @andresilva.

Any toughts on this approach?",8052,2021-02-08T15:11:55Z,0
1526,rakanalh,"> Currently the sync code always answers block requests by looking at what's on the database. I think for this feature to work the sync code will also need to be able to serve blocks that have been pre-imported but are still being imported, it will need to somehow manage a cache of what's in the `preimport -> import` stage. I don't have any concrete design suggestions for how to do this.

I have hit a roadblock regarding this. Apparently when some node (A) requests a block which was announced by Node (B), the block is not going to be registered in the backend which means that Node (A) will receive a response with 0 blocks. Therefore, disconnecting Node (B) and rejecting any further connections.

The problem with trying to resolve this issue is that the `BlockRequestHandler` only knows the client and can only serve blocks which are in the chain backend. However, knowledge about pre-imported blocks can exist only in the `Protocol`/`ChainSync` layers. 

The only immediate idea i have right now is to pull out the `BlockRequestHandler` logic which fetches the block(s) from the backend and somehow make it pass through the `ChainSync` instead. Which leaves us with:
`BlockImportHandler::handle_request` -> `ChainSync::block_by_id` -> `Either from client.header(block_id) or ChainSync::header(block_id)`.

Not sure how much effort that would take because the instance of `ChainSync` is burried under `NetworkWorker/Protocol/ChainSync`. The alternative is to pass down a channel to ChainSync to handle requests made by the `BlockRequestHandler`. 

Any other ideas?

Edit: Found a solution and the PR is now ready for review",8052,2021-02-11T13:21:35Z,0
1527,tomusdrw,"Note that the Ethereum implementation is verifying PoW before re-broadcasting, in substrate similarly we should perform external consensus checks (like BABE signature verification) before sending further.",7926,2021-01-18T17:05:30Z,0
1528,rakanalh,"I talked to @gnunicorn, @tomusdrw and @tomaka about this issue and here's what i gather to start working on this issue:

Currently on Substrate:
- A block announce is received
- Preliminary checks / validations are done
- If valid, the block is downloaded
- Another step if validation on the downloaded block is done
- Transactions are executed in the runtime
- Block is propagated.

The work to be done involves propagating the block **after** the preliminary checks and block download.",7926,2021-01-28T12:59:55Z,0
1529,rphmeier,"@rakanalh Yes, that sounds accurate. We want all GRANDPA & BABE checks to be done, including those that are done in their respective `ImportBlock` implementations.",7926,2021-01-28T19:15:38Z,0
1530,rakanalh,"@rphmeier just to confirm, you mean you want all consensus checks to be done before propagating? My initial thought was that we want to only pass the `DefaultBlockAnnounceValidator` validation step, download the block and then propagate the block and only then validate through consensus and execute transaction.

So my plan is more like:
`BlockAnnounce` -> `DefaultBlockAnnounceValidator` -> `Propagate block` -> `Consensus checks` -> `Block runtime / transaction execution`.",7926,2021-01-28T19:36:07Z,0
1531,rphmeier,">  just to confirm, you mean you want all consensus checks to be done before propagating?

Yes.

Quoting @tomusdrw from above: 

> in substrate similarly we should perform external consensus checks (like BABE signature verification) before sending further.

The main expensive thing we do with the block is actually executing the block and writing the state to DB. That's what we need to avoid.",7926,2021-01-28T19:40:58Z,0
1532,tomaka,cc https://github.com/libp2p/rust-libp2p/issues/1066,7467,2020-10-30T11:43:32Z,0
1533,tomaka,"> Make it possible for node operators to attach a TLS certificate to their libp2p WebSocket server. I believe this can be done by adding a CLI option that passes a certificate.

I put that item here because it believe that it isn't super hard to implement.
However, it might be easier to just ask people to put a reverse proxy with a certificate in front of the WebSocket endpoint.
",7467,2021-01-06T11:54:05Z,0
1534,MichaelMackus,"> > Make it possible for node operators to attach a TLS certificate to their libp2p WebSocket server. I believe this can be done by adding a CLI option that passes a certificate.
> 
> I put that item here because it believe that it isn't super hard to implement.
> However, it might be easier to just ask people to put a reverse proxy with a certificate in front of the WebSocket endpoint.

You could also do what js-libp2p does in their docs for the webrtc-star server, and provide a docker-compose file to automatically setup the reverse proxy. The nice thing is this way letsencrypt setup can be automated as well.",7467,2021-02-05T23:07:07Z,0
1535,expenses,">  However, it might be easier to just ask people to put a reverse proxy with a certificate in front of the WebSocket endpoint.

We're already doing this for parity nodes, so this is probably the way to go instead of modifying the client.",7467,2021-03-01T15:41:54Z,0
1536,tomaka,"Since this issue has been opened, we realized that in the context of a browser extension, non-secure WebSockets worked.

Therefore, another thing that can be considered is that nodes that nodes all listen through the WebSocket protocol by default, unless for example they were started using `--validator`.",7467,2021-04-07T14:42:11Z,0
1537,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",7467,2021-07-07T18:13:23Z,0
1538,tomaka,Issue still relevant and important.,7467,2021-07-08T07:20:26Z,0
1539,tomaka,cc https://github.com/libp2p/specs/issues/220,7467,2022-01-20T09:45:27Z,0
1540,tomaka,https://github.com/ipfs/js-ipfs/issues/611 seems like a big problem.,7467,2022-01-20T09:50:50Z,0
1541,shawntabrizi,"I strongly prefer the second option. By default, we should make sure all pallets follow this storage definition requirement.",10652,2022-01-13T19:56:04Z,0
1542,thiolliere,this requires some manual upgrade,10449,2021-12-16T08:06:05Z,0
1543,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10449,2022-01-20T11:22:39Z,0
1544,ggwpez,"Thanks @kianenigma for the *very* fast review!  
I still want to extend the testing. Seems like the automation bot removed my `inprogress` label…",10662,2022-01-14T11:13:16Z,0
1545,shawntabrizi,The Developer Hub team (docs + support) has been notified of this change.,10662,2022-01-20T01:26:08Z,0
1546,ggwpez,bot merge,10662,2022-01-20T11:15:49Z,0
1547,shawntabrizi,"This looks good in general, but I would prefer a backwards compatible PR, rather than forcing everyone into this way of things. That probably means just keeping the existing macro as is, and changing the name of the new macro you created to something like `auto_list_benchmark!`. Otherwise, seems good to me, and something I would def use in Substrate / Polkadot.",10592,2022-01-12T02:28:12Z,0
1548,ggwpez,"> This looks good in general, but I would prefer a backwards compatible PR, rather than forcing everyone into this way of things.

It is backwards-compatible :smile: but the naming is a bit sneaky.  
`add_benchmark` vs `add_benchmarks`: note the suffix **s**. Should I still rename it to `auto_list_benchmark`?  

Also what do you think about the boilerplate code, should I put it inside the macro or not? This specifically:  
```rust
#[macro_use]
extern crate frame_benchmarking;

#[cfg(feature = ""runtime-benchmarks"")]
mod benches {
}
```
@shawntabrizi ",10592,2022-01-12T10:00:51Z,0
1549,kianenigma,"> > This looks good in general, but I would prefer a backwards compatible PR, rather than forcing everyone into this way of things.
> 
> It is backwards-compatible 😄 but the naming is a bit sneaky. `add_benchmark` vs `add_benchmarks`: note the suffix **s**. Should I still rename it to `auto_list_benchmark`?
> 
> Also what do you think about the boilerplate code, should I put it inside the macro or not? This specifically:
> 
> ```rust
> #[macro_use]
> extern crate frame_benchmarking;
> 
> #[cfg(feature = ""runtime-benchmarks"")]
> mod benches {
> }
> ```
> 
> @shawntabrizi

More a fan of having it inside the `impl_runtime_api` macro to keep all the benchmark related stuff under one roof. ",10592,2022-01-18T06:59:39Z,0
1550,ggwpez,"> More a fan of having it inside the `impl_runtime_api` macro to keep all the benchmark related stuff under one roof.

Yes I tried this. The `impl_runtime_apis!` only accept `impl ...` syntax.  
So either I also change the `impl_runtime_apis` macro or it wont work.  

This MR is only a temporary solution until we have automatic bench-case extraction from the pallet metadata, so I think it is ok.
",10592,2022-01-19T10:20:09Z,0
1551,ggwpez,bot merge,10592,2022-01-19T15:31:05Z,0
1552,shawntabrizi,@ggwpez please do the same in Polkadot and Cumulus?,10592,2022-01-20T14:00:01Z,0
1553,nazar-pc,"I was looking into this a bit to force enable simd and found https://github.com/paritytech/wasm-instrument/issues/4 is needed before those features can be enabled in Substrate, once that is done, it will be possible to test things with wasmtime by tweaking a just few things.",10707,2022-01-20T17:20:39Z,0
1554,shawntabrizi,bot merge,10701,2022-01-20T18:17:07Z,0
1555,bkchr,bot merge,10536,2022-01-15T08:00:58Z,0
1556,paritytech-processbot[bot],Waiting for commit status.,10536,2022-01-15T08:01:06Z,0
1557,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for f3fe72f205f4b851c6c524805bb4040250609fc1,10536,2022-01-15T08:32:58Z,0
1558,bkchr,@nazar-pc Can you add a polkadot companion?,10536,2022-01-15T20:02:21Z,0
1559,nazar-pc,"This PR is meant to be fully compatible with it and indeed I see no issues locally :man_shrugging: 
CI errors do not seem related to this PR, I pulled `master` again just in case.",10536,2022-01-15T23:56:27Z,0
1560,bkchr,This didn't helped.,10536,2022-01-18T15:36:52Z,0
1561,nazar-pc,"I think there is something related to lock file that forces it to load incorrect version of the package whose version was updated, but I can't reproduce the issue locally.",10536,2022-01-18T15:38:20Z,0
1562,bkchr,Can you merge master again. I will then merge this pr manually.,10536,2022-01-18T15:43:18Z,0
1563,nazar-pc,"Looks like this version of binaryen doesn't support simd128 either, @pepyakin do you plan to update it?

Also with this CMake would be needed in CI and on dev machines, not sure if this is acceptable.",10704,2022-01-20T09:51:06Z,0
1564,pepyakin,"Yes, we are aware about the problem with wasm-gc. It's being tracked under https://github.com/paritytech/substrate/issues/1262.

Yes, I can put binaryen upgrade on my radar but not sure when I'll be able to get there. FWIW, PRs are welcome.

Regarding CMake: it would be a shame to get it back, but if we need to we can do that.",10704,2022-01-20T12:51:23Z,0
1565,nazar-pc,"Maybe it is worth removing compact version entirely?
I just tested `-C lto=fat -C codegen-units=1` and got roughly the same size for regular build as compact version prior to this. It is also a bit faster in that benchmark.

Of course running wasm-opt on top helps even more, but that is something every chain maintainer can apply on top before doing runtime upgrade, right?",10704,2022-01-20T13:51:16Z,0
1566,pepyakin,Can we move this discussion into the issue for peristance?,10704,2022-01-20T14:21:48Z,0
1567,dependabot[bot],Superseded by #10713.,10599,2022-01-21T09:29:59Z,0
1568,0x7CFE,"> Another open question is whether we need to expand the API to allow for chunked execution so that code merkelization can be implemented. However, current thinking is that we can and should get away without execution engine support. I think it is reasonable to go forward with a non chunked version risking that we might need to maintain two APIs. Otherwise this is blocked by #9431.

I think, by carefully designing the API we can future-proof it to support potential chunked execution similar to what we have done for wasmi during our experiment.",10297,2021-11-17T11:56:37Z,0
1569,athei,"Maybe. It adds complexity, though. For example, we would need some kind of feature discovery then because not all execution engines will support this right off the bat. As a matter of fact none will support it as we only put it in for future proofing. Just creating a new version of the API when the need arises is better in my opinion. Future proofing APIs is worth nothing when [users will depend on the implementation](https://www.hyrumslaw.com/).",10297,2021-11-17T13:37:45Z,0
1570,pepyakin,"Excerpt from our discussion about changing the terminology from sandoxing to a term based on virtualization, e.g. wasm virtualization API, hypervisor API, or whatever.

> Specifically, I think it is just too general and does not represent what it actually does. What is usually understood by sandbox? Well, it's when some code is put into an environment where it cannot reach to anything except things that was explicitly designated to be used by that sandboxed code.
>
> If we agree on that definition, then the ""runtime"" is exactly that. The thing that executes ""runtime"" (which would be called runtime by normal people) can be also called a sandbox. 
> 
> However, virtualization is really more appropriate term here I feel. This is because it fits really an analogy. Virtualization is where you have some medium that provides virtualization facilities, some hypervisor/supervisor that virtualizes or multiplexes the underlying hardware, emulating other and providing services, and the guest which consumes those services, who uses the hardware through the hypervisor, and ultimately is controlled by the hypervisor",10297,2021-11-17T13:43:56Z,0
1571,athei,"Updated the top post with new information after a discussion I had with @0x7CFE, today.",10297,2021-11-23T12:01:47Z,0
1572,athei,Refined the top posting again after the picture got a bit clearer on how the final refactoring should look like.,10297,2021-12-02T09:56:32Z,0
1573,athei,I narrowed down the scope in this issue and created a proper task list.,10297,2022-01-21T11:09:24Z,0
1574,NukeManDan,"[The wiki article on this](https://wiki.polkadot.network/docs/en/learn-proxies#anonymous-proxies) likely should be updated to reflect more of _what you can do_ with one. Once this is very well established, the name may become more clear. 

IMHO the aspect that is critical and novel is that a _keyed_ account (shown in the diagram as the ""anon proxy"") creates and controls a _full account_ that has _no key_. To others this ""user primary account"" looks to be just like any regular single owner account, but no one could **ever construct a key to sign on it's behalf** . The _only_ way this account can do anything is by the ""anon proxy/proxies"" sign on behalf of the ""user primary account"".  

![](https://wiki.polkadot.network/docs/assets/proxy_anonymous_diagram.png)

So I would propose we have a graphic that replaces:
- ""anon proxy"" with a _dynamic set of keyed accounts_ (not sure how to illustrate this)
- ""user primary account"" with a _keyless account_

Then give examples of use cases and analogies like:
- A ""keyless account"" is akin to a [""shell company""](https://en.wikipedia.org/wiki/Shell_corporation) that looks and acts like an _individual / person_ on chain (keyed accounts), but in reality is controlled by a _dynamic set_ of ""real"" keyed accounts.
- Contrast with multisigs (MS):
  - MS _do have a single master key_ (that you technically could find and use to make a MS -> single key control) this ""user primary account"" does _not_ have a key.
  - MS are constructed one and set permanently - the keys needed and thresholds are all set at creation. ""user primary accounts"" can set multiple parties dynamically over time that have various levels of control over it. 

Open to thoughts/comments. I am still trying to grasp the concept and have not looked at how this is implemented at all 😅 ... Who does have insight into the code behind this? We should ping them 🙏🏼 ",7735,2020-12-15T17:28:23Z,0
1575,wpank,Tagging @laboon for wiki changes,7735,2020-12-15T17:59:22Z,0
1576,kirushik,"@NukeManDan I think the code you're referring to is located in the [frame/proxy/src/lib.rs](https://github.com/paritytech/substrate/blob/566ad03cf8c07c3c3ab226a724b2dcb4b6dbbc9b/frame/proxy/src/lib.rs) file.

> that you technically could find and use to make a MS

I wouldn't agree with the word _technically_ here; there's no _technical_ way to do that other than bruteforcing 2 to power two-hundred-something keys. I would call this probability _theoretical_ at best.

I think I also misled everyone during today's call mentioning that multisig accounts differ from anonymous proxies in the way they addresses are generated ([here](https://github.com/paritytech/substrate/blob/566ad03cf8c07c3c3ab226a724b2dcb4b6dbbc9b/frame/multisig/src/lib.rs#L452) is the multisig generation, and [here](https://github.com/paritytech/substrate/blob/566ad03cf8c07c3c3ab226a724b2dcb4b6dbbc9b/frame/proxy/src/lib.rs#L551) is the anonymous proxy one).|
They both rely on BLAKE2 encoding of some deterministic seed values, and the only difference in there is that the proxy-related code also uses block height and extrinsic index as its inputs (thus requiring attacker to also have control over block authoring to have any predicting power over what the account address is going to be like — in multisig theoretically a malicious party can theoretically get at least some sort of a ""vanity address"" by submitting a carefully-chosen member account address).",7735,2020-12-15T21:59:22Z,0
1577,kianenigma,"""Keyless Proxy"" 👍 ",7735,2020-12-16T07:44:27Z,0
1578,joepetrowski,"I'm not a fan of ""Keyless Proxy"" and prefer ""Pure Proxy"" because other accounts could be ""keyless"" proxies. For example, multisig and derivative\* accounts are keyless, but they could be proxies. Those are, in a sense, keyless proxies, but does not fully convey the meaning of anon proxy.

The most difficult hurdle for me was that the anon proxy is actually the _proxied_ account (which is why I explicitly centered the Polkadot Wiki section around this fact). I think I would call the dispatchable `generate_proxied` to generate the new account ID, and then you just call it a ""pure proxied account"" to express the fact that proxy is the only means of accessing it.

\* Talking about `utility.as_derivative`, not key derivation, here.",7735,2020-12-24T08:27:37Z,0
1579,bkchr,"""Pure proxy"" convey as much information as anonymous proxy to the user. Probably even less and again require the user to read through a lot of docs to understand them... IMHO this does not help in understanding the proxy in any way. ",7735,2020-12-25T20:48:37Z,0
1580,kirushik,"Maybe we can drop the word ""proxy"" here altogether (since it's not doing that great job in conveying the direction of the proxying relation), and call this feature something completely different, like ""virtualized account""?",7735,2020-12-28T10:41:03Z,0
1581,wpank,"> Maybe we can drop the word ""proxy"" here altogether (since it's not doing that great job in conveying the direction of the proxying relation), and call this feature something completely different, like ""virtualized account""?

Indeed - I think the proxy part of the name adds to the confusion. Maybe something like ""Pure Keyless Account"", ""Shell Account"", or similar.",7735,2020-12-28T12:44:25Z,0
1582,h4x3rotab,"""Pure Account"" and ""Keyless Account"" are both confusing to me. I think we sometimes mixed two different things:

- Proxy, or Anonymous Proxy, refers to a **relation** between two accounts where the delegator can act on behalf of the proxied account
- As a result of Anonymous Proxy creation, a new **account** is generated and can be used as a regular account, but controlled by some delegator

I suggest to name the account generated by Anonymous Proxy as **Agent Account**, or **Automated Agent**, to address the fact it's not controlled by any key but by the blockchain itself (the blockchain defines how the permission is delegated).

As I pointed out, the Proxy itself is not an entity, but a relation which grants some other account the permission to behalf on the creator (or a generated keyless account). Therefore I would call it **Account Permission**.

## Example 1

With this setting, we can turn the following statement:

> Alice creates an **All Proxy** and assign Bob as the delegator. So Bob can act as Alice.

into a much better one:

> Alice create a new **All Permission** and grant it to Bob. So Bob can act as Alice.

## Example 2

A more sophisticated example:

> Alice and Bob own a company. To jointly control a Polkadot account to stake DOTs with the flexibility, they created a 2-of-2 multisig account.
> Then Alice creates an **Anonymous All Proxy**, and assign the multisig account as the delegator. Now, they can use the generated **keyless account** to hold assets and stake. They can operate the account only when they both agree.

will be changed to:

> Alice and Bob own a company. To jointly control a Polkadot account to stake DOTs with the flexibility, they created a 2-of-2 multisig account.
> Then Alice creates an **Agent Account** and grant the **All Permission** to the multisig account to make it the controller. Now, they can use the generated **Agent Account** to hold assets and stake. They can operate the account only when they both agree.",7735,2021-01-23T18:27:01Z,0
1583,emostov,"Throwing one into the ring: ""Proxy Contingent Account"" - communicating the account is 1) born into existence only by an account (initially) proxying it and 2) generally dependent on proxies to operate.",7735,2021-05-18T04:34:06Z,0
1584,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",7735,2021-07-07T17:13:12Z,0
1585,kianenigma,Should stay. ,7735,2021-07-08T09:33:39Z,0
1586,DrW3RK,"Transferable Keyless Account?

Trying to make a video tutorial on Proxies and stumbled on to this issue through Technical discussion at W3F. I'll make sure I summarize this discussion concisely (and add it to Polkadot Wiki as well)",7735,2021-09-21T19:25:33Z,0
1587,bjornwgnr,Has there been any movement on this issue? My observations indicate that this remains a topic of great confusion to our users.,7735,2022-01-21T12:39:45Z,0
1588,athei,"I think we need to check whether the code hash already exists. It is necessary because we need to increase the ref count of the code that we are switching to. This will prevent the code from being deleted. The reason for that is that we don't want the owner of a code being able to delete it when it is in use.

We could of course get rid of the ref counting and let the owner always delete the code. Anyone who still needs the code would then need to re-upload the code (they can get it from an archive node). However, this can lead to intermediate breakage and might prevent people from sharing code. ",10690,2022-01-18T15:30:44Z,0
1589,yarikbratashchuk,Makes sense. Will add the check using `contains_storage` method.,10690,2022-01-18T15:37:27Z,0
1590,yarikbratashchuk,"@athei, please take a look at what has been done, and let me know what you think",10690,2022-01-19T12:36:34Z,0
1591,yarikbratashchuk,"@athei, please take a look at the updates.
I'm not sure how to stop execution of the contract though, what are your thoughts on this? ",10690,2022-01-20T14:47:00Z,0
1592,xlc,what is StorageVersion::V2 ?,10073,2021-10-22T09:44:21Z,0
1593,cheme,"> what is StorageVersion::V2 ?

V1 actually (could be rename 2 actually), it is a new trie format from https://github.com/paritytech/substrate/pull/9732 and https://github.com/paritytech/trie/pull/142 . It requires migrating the whole state.

TLDR; currently trie can add unneeded value in Pov (deleted value, trie related accessed nodes...), with this change, values are a single node and get only embeded when accessed.",10073,2021-10-22T09:47:12Z,0
1594,kianenigma,"I migrated both polkadot and kusama state with the code, with 1000 storage items migrated per block: 

```
// kusama
Oct 28 11:04:11.016  INFO runtime::state-trie-migration: finished migration in 676 block, final state of the task: MigrationTask { top: None, child: None, prev_tick_child: false, dyn_top_items: 0, dyn_child_items: 0, dyn_size: 0, size: 113215656, top_items: 556827, child_items: 116514 }

// polkadot
Oct 28 11:41:34.753  INFO runtime::state-trie-migration: finished migration in 900 block, final state of the task: MigrationTask { top: None, child: None, prev_tick_child: false, dyn_top_items: 0, dyn_child_items: 0, dyn_size: 0, size: 214903885, top_items: 900126, child_items: 0 }
```

interesting to note is the total number of keys and their size. ",10073,2021-10-28T10:02:57Z,0
1595,apopiak,"Meta:
Could you make the description more elaborate (maybe just synthesize the comments already in the conversation)?
I also find the name of the PR slightly confusing (thought this was about pallet versions initially).
Maybe ""Storage Trie Version Migration Pallet""?",10073,2021-11-16T16:02:08Z,0
1596,kianenigma,"@cheme FWIW, other than fixing https://github.com/paritytech/substrate/pull/10073#discussion_r752308810 which will be quick and easy, this work is done and you can decide to proceed with merging the underlying PR. ",10073,2021-12-10T05:11:16Z,0
1597,cheme,"> @cheme FWIW, other than fixing [#10073 (comment)](https://github.com/paritytech/substrate/pull/10073#discussion_r752308810) which will be quick and easy, this work is done and you can decide to proceed with merging the underlying PR.

yes, I will freshen it up and check if it can get merged (maybe only monday).
Skimming through history there is still two points I see:
- skip write for value of size < 33 byte.
- for a manual migration, the effect of two transactions arriving concurrently (two different origin) is unclear to me.
(it looks like one of both tx will be slashed when it could just be ignored).
",10073,2021-12-10T08:15:50Z,0
1598,cheme,Underlying PR is in master.,10073,2021-12-24T09:30:13Z,0
1599,kianenigma,"I am almost sure that we are not going to use the offchain/unsigned version that was added here. Perhaps I can remove it from the PR to make it more slim and easy to review. 

Tried it out here https://github.com/paritytech/substrate/pull/10073/commits/c2df41b7584a98f5f5bcac1b52d4f63c9c80840f",10073,2022-01-05T07:25:37Z,0
1600,bkchr,"> I am almost sure that we are not going to use the offchain/unsigned version that was added here.

Why?

Does the auto migration also supports to be ""paused""?",10073,2022-01-09T19:11:19Z,0
1601,kianenigma,"> I am almost sure that we are not going to use the offchain/unsigned version that was added here.

> Why?

> Does the auto migration also supports to be ""paused""?

Because it is more dangerous than doing anything useful. With a refundable signed submission, there is no need for it. It is really really error-prone. The main reason is that we want to make sure it is not spam-able by validators, so we want to panic if a validators puts a bad migration task onchain and make their block invalid, but it is near impossible to be sure of the exact amount of data that will be migrated by reading `x` keys ahead of time, not to mention the exact PoV size. 

Relay chain should use auto migration (which is, Yes, ""pauseable""), or signed.
Parachains should use signed migration.
Period. ",10073,2022-01-11T14:21:02Z,0
1602,bkchr,/cla run-cla-check,10714,2022-01-21T16:28:05Z,0
1603,cla-bot-2021[bot],Queueing command execution: run-cla-check,10714,2022-01-21T16:28:09Z,0
1604,cla-bot-2021[bot],@bkchr Command execution has finished.,10714,2022-01-21T16:28:15Z,0
1605,bkchr,bot merge,10714,2022-01-21T16:28:30Z,0
1606,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10714,2022-01-21T16:28:41Z,0
1607,bkchr,@apopiak can you please try if that fixes your problem? You will need to replace wasm-builder everywhere in your failing build with the one from my branch.,10700,2022-01-19T22:05:27Z,0
1608,apopiak,"The build succeeds, but I also had to update to a more recent version of Substrate that doesn't trigger the downstream compile error so I don't see the previous build error in the output.",10700,2022-01-20T10:33:52Z,0
1609,apopiak,"Just set up an environment to verify it and the fix worked :+1: 

This will be very useful for patching parachains and their dependents :pray: ",10700,2022-01-21T16:03:31Z,0
1610,bkchr,bot merge,10700,2022-01-21T16:43:08Z,0
1611,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10700,2022-01-21T16:43:19Z,0
1612,ggwpez,"Thanks for reporting! Looks like we do not test this.  
I will fix it together with another problem.",10712,2022-01-21T11:48:02Z,0
1613,kianenigma,bot merge,10715,2022-01-21T17:08:26Z,0
1614,pepyakin,"According to `twiggy diff node_runtime.wasm node_runtime.compact.wasm`:

```
 Delta Bytes │ Item
─────────────┼─────────────────────────────────
     -252601 ┊ <total>
      -68707 ┊ custom section '.debug_str'
      -56447 ┊ custom section '.debug_line'
      -52165 ┊ custom section '.debug_info'
      -16040 ┊ custom section '.debug_ranges'
      -10261 ┊ custom section '.debug_pubnames'
       -6072 ┊ custom section '.debug_pubtypes'
       -1432 ┊ custom section '.debug_abbrev'
         -20 ┊ ""function names"" subsection
         -18 ┊ custom section '.debug_macinfo'
          -3 ┊ __wasm_call_ctors
          -1 ┊ elem[0]
          -1 ┊ func[357]
```

so major source of the cruft is `debug_` sections.

There is a tool called `wasm-strip` in the wabt suite, which strips all custom sections.

```
882K baseline
643K after wasm-strip
636K after wasm-gc
```

however, if we decide to depend on wabt in our build pipeline we could then use wabt's wasm-opt, which could optimize binary (including pruning of dead symbols) and produce a binary with size of  `561K`.
",1262,2018-12-13T17:55:12Z,0
1615,bkchr,Why do we have debug sections in a release build? Shouldn't they be removed?,1262,2018-12-14T07:09:31Z,0
1616,pepyakin,"I'd say they should be removed! But for now this is not the case (and it has been this way for a while).
And I'm not sure why is this that way, but I asked why.",1262,2018-12-16T19:30:18Z,0
1617,pepyakin,"So, a quick recap: 

- substrate uses a wasm file to encode logic of blockchain. We call it wasm runtime
- an example wasm runtime is written in rust, built with cargo. Rust uses LLVM LLD linker to link rust libraries and produce a final wasm blob
- by default, rustc puts a quite some junk into the final binary and that junk is unnecessary.
- to strip this unnecessary stuff, we use `wasm-gc`. 

There is a chance that since the last time we checked the things have changed. Notably, there is a LLD flag `-s` which can be used to strip all unnecessary sections.

To check if that actually helps we need:

1. Disable wasm-gc. We can comment it on the line below just for the experiment.
    https://github.com/paritytech/substrate/blob/7010ec7716e0edf97d61a29bd0c337648b3a57ae/core/utils/wasm-builder/src/wasm_project.rs#L354-L360

1. Try build the wasm runtime passing this flag to LLD and disable wasm-gc. This can be achieved by building substrate with the following command:
    ```
    WASM_BUILD_RUSTFLAGS='-C link-arg=-s' cargo build --release
    ```

You should be able to find the runtime files under `target/release/wbuild` directory. Keep in mind that if you skip wasm-gc then there won't be the `.compact.wasm`.

If the results turn out to be satisfying, we can then get rid of wasm-gc enitrely.

",1262,2019-10-02T14:31:14Z,0
1618,kianenigma,"with wasm-gc

```bash
// compact 
→ pwd
/Users/kianenigma/Desktop/Parity/substrate/target/release/wbuild/node-runtime
 → du -sk node_runtime.compact.wasm 
1156	node_runtime.compact.wasm

// Original
→ pwd                      
.../substrate/target/release/wbuild/target/wasm32-unknown-unknown/release
→ du -sk node_runtime.wasm        
1480	node_runtime.wasm
```

---

without wasm-gc

```bash
// run with `let res: Result<bool, std::io::Error> = Ok(true);`
→ pwd
/substrate/target/release/wbuild/target/wasm32-unknown-unknown/release
→ du -sk node_runtime.wasm
1168	node_runtime.wasm
```

for which, after a cargo clean, I saved the compact file of the previous build, pasted it back here to silent this error 

```
error: couldn't read /Users/kianenigma/Desktop/Parity/substrate/target/release/wbuild/node-runtime/node_runtime.compact.wasm: No such file or directory (os error 2)
 --> /Users/kianenigma/Desktop/Parity/substrate/target/release/build/node-runtime-de07cf4da2bc533b/out/wasm_binary.rs:2:36
  |
2 |                 pub const WASM_BINARY: &[u8] = include_bytes!(""/Users/kianenigma/Desktop/Parity/substrate/target/release/wbuild/node-runtime/node_runtime.compact.wasm"");
  |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
```

and then ran the command with the linker flag. but I am not 100% sure if I have done it correctly. I pasted the `cwd` as well for someone to check.",1262,2019-10-03T13:59:03Z,0
1619,Swader,"Just a note that the test suite depends on wasm-gc and the prerequisites installation script doesn't pull it in. So to reduce new user friction, it should either be added to that one, or removed from the tests imo.",1262,2019-10-04T08:40:35Z,0
1620,bkchr,"Which script? The init script installs it.
Nevertheless, it is documented in the readme and having clear install instructions is always better than having any scripts that work on one distribution. ",1262,2019-10-04T08:43:44Z,0
1621,Swader,"You're right, I've been relying too much on the getsubstrate.io script which does not pull it in, but the README does document it.",1262,2019-10-04T09:05:36Z,0
1622,bkchr,@shawntabrizi ^^^,1262,2019-10-04T09:24:55Z,0
1623,bkchr,(That is also a script I really would like to get rid of!),1262,2019-10-04T09:25:23Z,0
1624,Swader,"I ran into it from the Substrate Kitties workshop and [here](https://substrate.dev/docs/en/next/tutorials/start-a-private-network-with-substrate).

As a tech ed I'm all for simplification and abstracting bootstrapping from the user, but I do agree that if we cannot provide a coherent experience to newcomers, such a script shouldn't be a thing. Maybe something like a vagrant box with all the prerequisites installed would be better.",1262,2019-10-04T09:33:15Z,0
1625,shawntabrizi,"We can and should update the `getsubstrate.io` script for the time being.

@bkchr I am 100% with you, let's get rid of all the scripts. For now though, I don't see a good solution for installing all these prerequisites.

Maybe the best thing is to literally have an install page with each operating system and instructions?

@Swader vagrant is a virtual env?",1262,2019-10-04T14:12:46Z,0
1626,shawntabrizi,Here is a PR to update the `getsubstrate.io` script for now: https://github.com/paritytech/scripts/pull/101,1262,2019-10-04T14:25:24Z,0
1627,Swader,"@shawntabrizi vagrant is a VM tool for composing and running reproducible headless VMs of little size and resource intensity. For a good while I was maintaining https://github.com/Swader/homestead_improved

Basically it lets you pre-install stuff with provisioning scripts (shell, ansible, etc.) into a headless distro like a 200MB ubuntu, similar to what you might find in WSL, but it's not raw - it's all the prereqs in place. So no downloading rust, running updates, etc. The organization / author keeps the box up to date, the users merely run vagrant box update once in a while, though this is optional because once they run an instance of the VM they can just update it as any other headless VM.

Here's a better explained rundown of mine from ages ago: https://www.sitepoint.com/re-introducing-vagrant-right-way-start-php/ - mentions PHP but has nothing to do with it specifically.

In a nutshell, all OSes then have the _exact same thing_. On windows, it works exactly the same as on OS X or Linux. So suddenly all of your users have to follow exactly one set of instructions which always works (download vagrant, oraclevm and this box) and they have the same env from which to report bugs, which is coincidentally identical to the env on which you can then reproduce them.",1262,2019-10-04T14:31:46Z,0
1628,kianenigma,"@Swader if you are recommending us maintaining vagrant boxes (or similar IaC tools) that'd be cool. We already have docker builds that can be used mostly to play with the ui and less to hack substrate itself. 

But, such things would never be enough. We need manual installation as well, always. ",1262,2019-10-05T09:15:08Z,0
1629,Swader,"I agree. Let me see if I can put together a box, I could use one myself so I'm sure I could dedicate part of my time to maintaining it. We can evaluate once done.",1262,2019-10-05T14:39:33Z,0
1630,DrSensor,"Hi, is it okay if I work on this issue?",1262,2019-10-19T07:24:13Z,0
1631,bkchr,"You can work on this, but our experiments show that you probably will not find anything that achieves the same result.",1262,2019-10-19T08:45:11Z,0
1632,shawntabrizi,@pepyakin this should be closed right?,1262,2021-03-25T15:35:06Z,0
1633,pepyakin,"I wasn't following for what is happening on the wasm-builder side lately, but just a quick glance revealed that it still does invoke `wasm-gc`. So apparently it is still being used.",1262,2021-03-25T17:08:17Z,0
1634,shawntabrizi,"How do we go about getting rid of it?

If we can't, should this issue be closed?",1262,2021-03-25T22:51:15Z,0
1635,pepyakin,"We should check how littered the binaries produced by the rustc are nowadays. I would be pleasantly surprised if it improved but I don't hold my breath.

The alternative is to use wasm-opt. I expect it would give way better results. I historically wasn't so sure about it but now I guess less so. FWIW, the contract team uses it for preparing contracts by default.",1262,2021-03-26T11:00:09Z,0
1636,expenses,I've started looking into this. [`binaryen-rs`](https://github.com/pepyakin/binaryen-rs) unfortunately has a very long build time due to compiling binaryen via gcc. It might be possible to use a pre-installed version of binaryen though. @pepyakin do you know if that's do-able?,1262,2021-05-31T12:35:18Z,0
1637,expenses,"The difference isn't huge imo:
```
du before_compact.wasm after_compact.wasm
2928	before_compact.wasm
2700	after_compact.wasm
```
```
twiggy diff before_compact.wasm after_compact.wasm
 Delta Bytes │ Item
─────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
     -304100 ┊ data[0]
     -142011 ┊ ""function names"" subsection
     -101888 ┊ <node_runtime::Call as frame_support::traits::dispatch::UnfilteredDispatchable>::dispatch_bypass_filter::h7d3fd923cf8fd14e
      +94582 ┊ code[256]
      -63778 ┊ node_runtime::_::<impl parity_scale_codec::codec::Decode for node_runtime::Call>::decode::h307a9f9b65f4fda8
      +61535 ┊ code[107]
      -48851 ┊ <pallet_assets::pallet::Call<T,I> as frame_support::traits::dispatch::UnfilteredDispatchable>::dispatch_bypass_filter::hc22452fada11af84
      -47899 ┊ node_runtime::_::<impl parity_scale_codec::codec::Encode for node_runtime::Event>::encode_to::h969c3ff99399b607
      -47226 ┊ node_runtime::_::<impl parity_scale_codec::codec::Decode for node_runtime::Call>::decode::ha00c8e5063e970e8
      -45630 ┊ node_runtime::_::<impl parity_scale_codec::codec::Encode for node_runtime::Call>::encode_to::hf70ff279a2fc7797
      +45271 ┊ code[101]
      +45069 ┊ code[262]
      +43329 ┊ code[164]
      +40773 ┊ custom section '.debug_str'
      -39285 ┊ node_runtime::_::<impl parity_scale_codec::codec::Decode for node_runtime::Event>::decode::h0895f1dad2dd60d6
      -38797 ┊ <node_runtime::NposCompactSolution16 as sp_npos_elections::CompactSolution>::into_assignment::h36f919769403d82e
      +38166 ┊ code[214]
      +37295 ┊ code[143]
      -37156 ┊ <pallet_democracy::Call<T> as frame_support::traits::dispatch::UnfilteredDispatchable>::dispatch_bypass_filter::hfd7c1543aff6391d
      -36219 ┊ schnorrkel::vrf::VRFOutput::attach_input_hash::h539b2808f611581e
     +311808 ┊ ... and 5099 more.
     -235012 ┊ Σ [5119 Total Rows]
```

**You also get the best size reduction by running `wasm-opt -Oz` on the `wasm_gc`'d binary:**

```
du before_compact.wasm after_compact.wasm wasm_gc_then_wasm_opt.wasm
2928	before_compact.wasm
2700	after_compact.wasm
2600	wasm_gc_then_wasm_opt.wasm
```

so TLDR; wasm optimisation is still a dark art.",1262,2021-05-31T12:56:25Z,0
1638,expenses,Anyway; here's a branch for that: https://github.com/paritytech/substrate/compare/ashley-wasm-builder-wasm-opt,1262,2021-05-31T13:03:54Z,0
1639,pepyakin,"Can you add to comparison just plain `wasm-opt` with -Oz (and perhaps with -O3, or what's the analogue of that?) but without running wasm-gc before that? 

wasm-gc performs a really simple tree shaking pass. I am sure that wasm-opt is capable of doing that as well.

Regarding binaryen/gcc: I wasn't aware of that actually. Most testing happened on macOS and clang. Sometimes I do use gcc but it worked fast enough that I didn't notice anything. We can use locally installed wasm-opt. That, however, will somehow complicate deterministic builds. `wasm-opt` will be another variable needed to be fixed during such a build.",1262,2021-05-31T13:16:29Z,0
1640,expenses,"> Can you add to comparison just plain `wasm-opt` with -Oz (and perhaps with -O3, or what's the analogue of that?) but without running wasm-gc before that?

Here's a full comparison:

```
du *
3180	node_runtime.wasm
3024	node_runtime_gc.wasm
2708	node_runtime_gc_O3.wasm
2720	node_runtime_gc_O4.wasm
2708	node_runtime_gc_Oz.wasm
2708	node_runtime_O3.wasm
2720	node_runtime_O4.wasm
2708	node_runtime_Oz.wasm
```

So it seems that `wasm-gc` doesn't manage to reduce the sizes down to what I got above, only the `wasm_gc` function call? Strange.",1262,2021-05-31T13:33:25Z,0
1641,pepyakin,"😰  I have realized one important thing

wasm-opt butchers DWARF

Meaning that if we start relying on wasm-opt we will make on-chain wasm execution introspection and debugging even harder.  (No issue/writeup yet to point, but things like onchain alarms, onchain logging without overhead, debuggers (forward and reverse)). Now, to get a trace you will have to have to re-execute the original pre-wasm-opt binary.

I think this should be considered before embracing wasm-opt in the build.",1262,2021-05-31T13:35:49Z,0
1642,olanod,Seems like WASM supports [`external_debug_info`](https://yurydelendik.github.io/webassembly-dwarf/#external-DWARF) is it something that would help? more importantly are any of the tools able to generate that and make use of it?,1262,2021-06-06T07:55:56Z,0
1643,pepyakin,"The problem I was talking is that tools like wasm-opt when they move code around during optimizations do not patch the DWARF data. That means be it external or embedded in the wasm file it will be broken anyway.

Although wasm-gc probably also botches the debuginfo",1262,2021-06-07T11:24:03Z,0
1644,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",1262,2021-07-07T16:13:45Z,0
1645,kianenigma,One way or another this should be removed from the Runtime project. ,1262,2021-07-08T09:36:56Z,0
1646,nazar-pc,"Copied from https://github.com/paritytech/substrate/pull/10704#issuecomment-1017523486:

Maybe it is worth removing compact version entirely?
I just tested `-C lto=fat -C codegen-units=1` and got roughly the same size for regular build as compact version prior to this. It is also a bit faster.

Of course running wasm-opt on top helps even more, but that is something every chain maintainer can apply on top before doing runtime upgrade, right?",1262,2022-01-20T14:23:20Z,0
1647,pepyakin,"Yes, they can. I would go further and say that the users opting into wasm-opt would be ideal.

`wasm-gc` just removes unreachable symbols. OTOH, `wasm-opt` performs more elaborate transformations. It enables improvements in code size. However it also brings risks of some transformations not being sound. IMO the final user should evaluate pros and cons whether they want to take on the risk for the extra wins of code size and take into account other considerations as the DWARF point I brought up above.

As you, @nazar-pc, mentioned in https://github.com/paritytech/substrate/pull/10704#issue-1109078800 `wasm-gc` does not support newest wasm features like simd128. Since we eventually want to enable them, https://github.com/paritytech/substrate/issues/10707, to reap the performance benefits that's a sign that `wasm-gc` deprecation goes from OK to an active nuisance. Some maybe it's finally time to get rid of it. I think it maybe OK to just skip the post-build optimization steps and just rely on compression for now. Then, optionally, we could add `wasm-opt` as an opt-in.",1262,2022-01-20T16:15:36Z,0
1648,nazar-pc,I can prepare a PR with `wasm-gc` removed and LTO/codegen units exposed as methods on `WasmBuilder` (so `build.rs` on runtime examples will be able to use them to compensate for wasm size increase) if you'd like.,1262,2022-01-20T17:29:19Z,0
1649,pepyakin,"Before we could accept such a PR we would need some data. Specifically, we need to know actual numbers. There are two axis we are interested in: 

- the binary size and 
- the build time (this is pretty important since there are some projects where we have to build 4 runtimes)

So we would need to get concrete numbers for the status quo (i.e. wasm-gc and compression) and the proposed solution (i.e. LTO/cgo-units, no post processing, only compression).

Ideally though we compile all the recent and comprehensive data on this, which would allow us to compare all the factors that contributes to the binary size. Namely:

- how much is the baseline (i.e. without post processing and compression) binary size.
- what's the contributing factor of the debug custom sections.
- how much binary size shaved off by wasm-opt
- how much binary size shaved off by wasm-gc
- what are the compression ratios for wasm-opt and wasm-gc.

But once again, even though useful that's not necessary for accepting the PR.",1262,2022-01-20T17:44:45Z,0
1650,nazar-pc,"Numbers below are for `node-runtime` on NVMe SSD with AMD 5900X 12C24T processor.

Status quo:
* baseline size 4_360_748 bytes
* compact size (wasm-gc) 3_974_726 bytes
* compact+compress size (wasm-gc+zstd) 1_030_234 bytes
* `wasm-opt -Os -O2` on top of baseline 3_670_017 bytes
* release build time from scratch is 1m 46s
  * out of it `node-runtime`'s build script is 72.3s

`-C lto=fat -C codegen-units=1`:
* uncompressed size 3_980_524 bytes
* compressed size (zstd) 1_036_487 bytes
* `wasm-opt -Os -O2` on top of uncompressed 3_374_880 bytes
* release build time from scratch is 2m 23s
  * out of it `node-runtime`'s build script is 110.3s",1262,2022-01-20T18:32:49Z,0
1651,pepyakin,"Thanks for the thorough reply!

The build time metric is a bit daunting. I wonder though if that can be a result of `codgen-units=1`. I heard anecdotes that cgu number does not influence the quality of the generated code in LTO mode lately. Thus can I ask you to run the LTO case without `-Ccodegen-units=1`?",1262,2022-01-20T18:57:45Z,0
1652,nazar-pc,"Size without `codgen-units=1` barely changes.

`-C lto=fat`:
* uncompressed size 4_345_542 bytes
* compressed size (zstd) 1_092_160 bytes
* `wasm-opt -Os -O2` on top of uncompressed 3_644_745 bytes
* release build time from scratch is 1m 42s
  * out of it `node-runtime`'s build script is 69.8s",1262,2022-01-20T19:09:07Z,0
1653,athei,"I don't get it. AFAIK wasm builder builds the runtime with `lto` in release profile already. How to do you see those differences with only `lto` enabled:
https://github.com/paritytech/substrate/blob/48e0b415b94d8ce14e0ebbbdb813263afa27f02e/utils/wasm-builder/src/wasm_project.rs#L231",1262,2022-01-21T11:23:36Z,0
1654,koute,"> I don't get it. AFAIK wasm builder builds the runtime with `lto` in release profile already. How to do you see those differences with only `lto` enabled:

Just guessing - probably because of the extra `codegen-units=1`, and also AFAIK by default `lto` runs in `thinlto` mode, doesn't it? (So it'd be different than `lto=fat`.)

> The build time metric is a bit daunting.

Hmm.... indeed, although extra 40s doesn't seem *that* bad considering how long everything else takes to build.

Maybe we should have separate cargo profiles for a proper release build and a ""development"" release build?",1262,2022-01-21T12:57:02Z,0
1655,pepyakin,"> Maybe we should have separate cargo profiles for a proper release build and a ""development"" release build?

Yes, I was thinking about something along these lines too. Alternatively, maybe finally get the debug builds (with lots of opt-level overrides for performance critical crates).

> Hmm.... indeed, although extra 40s doesn't seem that bad considering how long everything else takes to build.

The problem is that it's 40 seconds for one runtime. In [polkadot](https://github.com/paritytech/polkadot) we have 4 ༼ ༎ຶ ෴ ༎ຶ༽ 

I envision that with https://github.com/paritytech/substrate/issues/7288 we will be able to split the runtimes out so those will be buildable with separate `cargo xbuild-runtime` one-by-one, or something along these lines, which will bring us to only 40s",1262,2022-01-21T13:03:00Z,0
1656,koute,"> 
> > Hmm.... indeed, although extra 40s doesn't seem that bad considering how long everything else takes to build.
> 
> The problem is that it's 40 seconds for one runtime. In [polkadot](https://github.com/paritytech/polkadot) we have 4 ༼ ༎ຶ ෴ ༎ຶ༽

Yes but, wouldn't they be compiled *in parallel*?",1262,2022-01-21T13:05:44Z,0
1657,athei,"> Just guessing - probably because of the extra codegen-units=1

But @nazar-pc reports a difference for `lto=""fat""` **only**. This is what confuses me.

> and also AFAIK by default lto runs in thinlto mode, doesn't it? (So it'd be different than lto=fat.)

Not according to [this documentation](https://doc.rust-lang.org/cargo/reference/profiles.html#lto). AFAIK `true == fat`.",1262,2022-01-21T13:08:02Z,0
1658,pepyakin,"> Yes but, wouldn't they be compiled in parallel?

Oh, right, that's true",1262,2022-01-21T13:08:19Z,0
1659,nazar-pc,"> But @nazar-pc reports a difference for lto=""fat"" only. This is what confuses me.

I think this is caused by incremental compilation, I did not wipe `target` in between those initial tests until I got to measure time.

> Yes but, wouldn't they be compiled in parallel?

Assuming you have enough CPU cores of course :wink: ",1262,2022-01-21T13:09:21Z,0
1660,athei,"> I think this is caused by incremental compilation, I did not wipe target in between those initial tests until I got to measure time.

You also reported different code sizes.",1262,2022-01-21T13:10:20Z,0
1661,nazar-pc,"> You also reported different code sizes.

I just re-ran it a few times and I do reproducibly get different sizes with and without `.append_to_rust_flags(""-C lto=fat"")` added to `WasmBuilder` call.

I don't think incremental compilation in Rust guarantees for builds from scratch to be fully identical to some incremental rebuilds, but this is not it regardless.",1262,2022-01-21T13:20:51Z,0
1662,nazar-pc,"I checked commands that are being generated, and with `release_profile.insert(""lto"".into(), true.into());` you only get `-C lto`, which explains the difference.

I guess you need `""true"".into()` to get what you expected to get. I don't like those weak and mixed types parameters, they are confusing :disappointed: ",1262,2022-01-21T13:36:46Z,0
1663,koute,"> > Yes but, wouldn't they be compiled in parallel?
> 
> Assuming you have enough CPU cores of course wink

Well, indeed I do, whole 32 of them. (:

Anyhow, this seems like it's something we should measure. Maybe you could also compile `polkadot` (so all of the runtimes get compiled) while limiting the compilation to a certain number of cores (on Linux you should be able to do this through `taskset`) and compare how the compile time changes assuming we have N cores?",1262,2022-01-21T13:52:48Z,0
1664,nazar-pc,"Polkadot compilation on the same machine as above, also attaching timing results.

Status quo:
```
   Completed rococo-runtime v0.9.13 build script (run) in 143.0s
   Completed westend-runtime v0.9.13 build script (run) in 148.2s
   Completed polkadot-runtime v0.9.13 build script (run) in 150.6s
   Completed kusama-runtime v0.9.13 build script (run) in 151.9s
...
    Finished release [optimized] target(s) in 6m 15s
```
[cargo-timing-before.html.zip](https://github.com/paritytech/substrate/files/7914359/cargo-timing-before.html.zip)

`-C lto=fat -C codegen-units=1`:
```
   Completed rococo-runtime v0.9.13 build script (run) in 169.4s
   Completed westend-runtime v0.9.13 build script (run) in 187.0s
   Completed polkadot-runtime v0.9.13 build script (run) in 193.7s
   Completed kusama-runtime v0.9.13 build script (run) in 212.5s
...
    Finished release [optimized] target(s) in 7m 06s
```
[cargo-timing-after.html.zip](https://github.com/paritytech/substrate/files/7914702/cargo-timing-after.html.zip)

Runtime compilation into WASM is a single-threaded process, so with 4+ cores time overhead doesn't add up and compilation happens in parallel.",1262,2022-01-21T15:16:56Z,0
1665,bkchr,We could just remove wasm-gc and do the optimal build only for when we prepare a release. We already do this for stuff like `log` where we disable it completely for the on chain build to reduce the final binary size.,1262,2022-01-21T17:14:43Z,0
1666,KiChjang,"Needs cumulus and polkadot companions, sadly.",10655,2022-01-14T14:00:05Z,0
1667,NukeManDan,"Cannot merge this, I do want to have someone double check me on there being no issue in bumping the version of the crates here to `4.0.0-dev` . the rest is no code changes ",10710,2022-01-22T02:28:03Z,0
1668,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10346,2021-12-23T10:05:39Z,0
1669,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10346,2022-01-22T12:21:06Z,0
1670,tomaka,"Please don't close this, stalebot. We can merge at least after 0.9.16 is out.",10346,2022-01-22T13:16:42Z,0
1671,jimmychu0807,"Let me check the requirement of publishing a package under `@substrate`.
",10604,2022-01-18T10:28:39Z,0
1672,jimmychu0807,"@alvicsam 
I have transferred [`index-tpl-crud` project](https://github.com/substrate-developer-hub/index-tpl-crud) to Substrate devhub. Will update the node published package to under @substrate namespace in my next PR. Would love to merge this first and have the team using it.",10604,2022-01-20T09:43:48Z,0
1673,Robbepop,/benchmark runtime pallet pallet_contracts,10709,2022-01-20T17:01:14Z,0
1674,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""rf-check-cgu=1-performance"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.594
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.594
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    14.41
    + k    0.826
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     13.52     0.053    0.3%
   20     32.55     0.267    0.8%
   40     48.47     0.306    0.6%
   60     63.45     0.231    0.3%
   80     76.47     0.278    0.3%
  100     92.88     0.282    0.3%
  120     108.6     0.202    0.1%
  140     126.7      0.45    0.3%
  160     142.7     0.383    0.2%
  180       160     0.369    0.2%
  200     175.8     0.667    0.3%
  220     193.3     0.832    0.4%
  240     209.5     0.353    0.1%
  260       226     0.928    0.4%
  280     244.6     0.845    0.3%
  300     259.6     0.815    0.3%
  320     280.5     1.482    0.5%
  340     296.8     0.699    0.2%
  360     314.2     0.929    0.2%
  380     332.5     0.978    0.2%
  400     357.2     1.725    0.4%
  420       366     0.639    0.1%
  440     383.7     1.117    0.2%
  460     398.4     1.263    0.3%
  480       415     0.892    0.2%
  500     433.4     0.645    0.1%
  520     449.5     1.809    0.4%
  540     466.5     0.872    0.1%
  560     481.4     1.278    0.2%
  580     499.1     1.978    0.3%
  600     515.4     1.042    0.2%
  620     528.9     1.796    0.3%
  640     545.9     1.702    0.3%
  660     560.7     1.454    0.2%
  680     579.3     2.113    0.3%
  700       594     2.446    0.4%
  720     612.3     3.335    0.5%
  740     628.1     4.023    0.6%
  760     643.7     6.145    0.9%
  780     658.2     1.344    0.2%
  800     674.2     3.706    0.5%
  820     691.7     1.542    0.2%
  840     712.6     7.035    0.9%
  860     727.1     5.347    0.7%
  880       739     2.685    0.3%
  900     755.3     1.301    0.1%
  920     769.5     2.467    0.3%
  940     783.1     2.119    0.2%
  960     796.9     1.584    0.1%
  980     816.8     4.194    0.5%
 1000     831.9     2.071    0.2%
 1020     848.8     1.291    0.1%

Quality and confidence:
param     error
k             0

Model:
Time ~=    15.48
    + k    0.824
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.88
    + q    0.151
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.511     0.023    0.9%
   20     21.95     0.107    0.4%
   40     28.46     0.098    0.3%
   60     34.22     0.164    0.4%
   80     39.64     0.182    0.4%
  100     44.47     0.184    0.4%
  120     49.65     0.117    0.2%
  140        55      0.11    0.2%
  160     60.55     0.604    0.9%
  180     64.83     0.176    0.2%
  200     71.28     0.252    0.3%
  220     76.25     0.304    0.3%
  240     81.21     0.265    0.3%
  260     87.33      0.55    0.6%
  280     91.79     0.195    0.2%
  300     87.23     0.262    0.3%
  320     91.93     0.223    0.2%
  340     97.12     0.303    0.3%
  360     101.9     0.285    0.2%
  380       107     0.587    0.5%
  400       124     4.582    3.6%
  420     116.9     0.195    0.1%
  440     122.5     0.223    0.1%
  460     90.65     0.558    0.6%
  480      93.5     0.316    0.3%
  500     96.48     0.455    0.4%
  520     99.43     0.287    0.2%
  540     102.7     1.127    1.0%
  560     105.8     0.216    0.2%
  580     109.8     0.207    0.1%
  600     112.2     0.292    0.2%
  620     115.8     0.377    0.3%
  640       119     0.547    0.4%
  660     122.5     0.652    0.5%
  680     124.9     0.326    0.2%
  700     128.1     0.354    0.2%
  720     131.7     0.636    0.4%
  740     135.6     1.051    0.7%
  760     139.1     0.365    0.2%
  780     141.7     0.318    0.2%
  800     145.6     0.455    0.3%
  820     149.2     0.457    0.3%
  840     151.2     0.619    0.4%
  860     153.1     0.322    0.2%
  880     157.8     0.409    0.2%
  900     161.7     0.453    0.2%
  920     165.6     0.993    0.5%
  940     168.1     0.626    0.3%
  960     171.1     0.804    0.4%
  980     175.2     0.951    0.5%
 1000     177.6      0.57    0.3%
 1020     181.2     0.397    0.2%

Quality and confidence:
param     error
q         0.001

Model:
Time ~=    36.23
    + q     0.14
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.67
    + c    68.38
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     28.38     0.288    1.0%
    2     168.9     1.577    0.9%
    4     302.3     0.413    0.1%
    6     433.2     0.399    0.0%
    8     570.6     0.548    0.0%
   10     710.6     7.243    1.0%
   12     852.6     14.45    1.6%
   14     987.8      9.38    0.9%
   16      1134     14.25    1.2%
   18      1260     14.07    1.1%
   20      1382     7.567    0.5%
   22      1520     12.76    0.8%
   24      1658     12.82    0.7%
   26      1821     13.25    0.7%
   28      1955      12.6    0.6%
   30      2066     8.008    0.3%
   32      2227     3.617    0.1%
   34      2353     12.99    0.5%
   36      2498     11.94    0.4%
   38      2633     8.922    0.3%
   40      2773     14.01    0.5%
   42      2880     16.32    0.5%
   44      3025     10.16    0.3%
   46      3159     3.973    0.1%
   48      3303     15.38    0.4%
   50      3463     16.92    0.4%
   52      3612     15.32    0.4%
   54      3738      8.35    0.2%
   56      3868     18.84    0.4%
   58      4010      22.4    0.5%
   60      4117     16.42    0.3%
   62      4274     12.41    0.2%
   64      4391     14.71    0.3%
   66      4546     13.13    0.2%
   68      4687      21.3    0.4%
   70      4816     14.03    0.2%
   72      4962      17.8    0.3%
   74      5095     19.22    0.3%
   76      5222     17.28    0.3%
   78      5329     11.74    0.2%
   80      5444     13.77    0.2%
   82      5603     20.94    0.3%
   84      5736     21.98    0.3%
   86      5883     26.65    0.4%
   88      6016     24.69    0.4%
   90      6141     14.71    0.2%
   92      6284     15.03    0.2%
   94      6428     27.41    0.4%
   96      6550     28.54    0.4%
   98      6771     17.84    0.2%
  100      6910     11.82    0.1%
  102      7059     24.91    0.3%
  104      7171     12.63    0.1%
  106      7307     23.21    0.3%
  108      7442     13.82    0.1%
  110      7587     12.66    0.1%
  112      7704     23.83    0.3%
  114      7832     14.18    0.1%
  116      7969     12.97    0.1%
  118      8135     31.18    0.3%
  120      8230     14.19    0.1%
  122      8368     16.87    0.2%
  124      8500     13.89    0.1%
  126      8642     20.23    0.2%
  128      8766     11.24    0.1%

Quality and confidence:
param     error
c         0.028

Model:
Time ~=    25.73
    + c    68.42
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    238.8
    + c    62.51
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     248.5      0.24    0.0%
    2     372.3     0.424    0.1%
    4     496.3     1.102    0.2%
    6     617.4     5.052    0.8%
    8     743.1     1.695    0.2%
   10     872.3     15.61    1.7%
   12     978.2     1.818    0.1%
   14      1127     11.52    1.0%
   16      1240     8.712    0.7%
   18      1372     12.95    0.9%
   20      1472     7.668    0.5%
   22      1596     11.22    0.7%
   24      1710     11.46    0.6%
   26      1880     11.88    0.6%
   28      1999     14.52    0.7%
   30      2119     14.43    0.6%
   32      2240     17.95    0.8%
   34      2362     14.01    0.5%
   36      2475     15.08    0.6%
   38      2592     15.54    0.5%
   40      2719     8.437    0.3%
   42      2839     13.73    0.4%
   44      2958     10.18    0.3%
   46      3074     10.08    0.3%
   48      3191     11.46    0.3%
   50      3393     14.39    0.4%
   52      3492     11.01    0.3%
   54      3629        17    0.4%
   56      3743     15.17    0.4%
   58      3874     5.364    0.1%
   60      3985     8.433    0.2%
   62      4099     5.984    0.1%
   64      4216     8.169    0.1%
   66      4357     12.63    0.2%
   68      4462     20.19    0.4%
   70      4589     16.07    0.3%
   72      4709     14.71    0.3%
   74      4839     20.97    0.4%
   76      4940     12.72    0.2%
   78      5055     15.44    0.3%
   80      5179     20.82    0.4%
   82      5295     17.02    0.3%
   84      5411     21.41    0.3%
   86      5540     16.39    0.2%
   88      5646     11.09    0.1%
   90      5774     15.18    0.2%
   92      5891      18.9    0.3%
   94      6007     16.06    0.2%
   96      6118     4.009    0.0%
   98      6446     19.28    0.2%
  100      6571     10.25    0.1%
  102      6675     12.19    0.1%
  104      6797     16.84    0.2%
  106      6912     17.27    0.2%
  108      7023     25.15    0.3%
  110      7156      14.8    0.2%
  112      7283      20.5    0.2%
  114      7401     10.22    0.1%
  116      7541     33.27    0.4%
  118      7648      21.2    0.2%
  120      7744     17.35    0.2%
  122      7867     15.49    0.1%
  124      8006     21.73    0.2%
  126      8423     57.15    0.6%
  128      8237     20.63    0.2%

Quality and confidence:
param     error
c         0.062

Model:
Time ~=    217.7
    + c    62.77
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    281.1
    + c      153
    + s    1.756
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2114     4.968    0.2%
    1  1024      2265      16.2    0.7%
    2  1024      2414     12.13    0.5%
    3  1024      2387     10.56    0.4%
    4  1024      2715     9.469    0.3%
    5  1024      2869     19.38    0.6%
    6  1024      2834     13.81    0.4%
    7  1024      3171     20.09    0.6%
    8  1024      3314     9.966    0.3%
    9  1024      3302     15.61    0.4%
   10  1024      3645     18.52    0.5%
   11  1024      3790     11.57    0.3%
   12  1024      3765     14.42    0.3%
   13  1024      4093     14.25    0.3%
   14  1024      4239      18.4    0.4%
   15  1024      4208     9.707    0.2%
   16  1024      4535     11.28    0.2%
   17  1024      4717     6.935    0.1%
   18  1024      4695     9.505    0.2%
   19  1024      5005     17.31    0.3%
   20  1024      5186     24.11    0.4%
   21  1024      5157     17.05    0.3%
   22  1024      5461     11.11    0.2%
   23  1024      5610        15    0.2%
   24  1024      5578      7.95    0.1%
   25  1024      5931      19.9    0.3%
   26  1024      6094     23.46    0.3%
   27  1024      6109     39.86    0.6%
   28  1024      6379     25.12    0.3%
   29  1024      6527     16.58    0.2%
   30  1024      6506     22.88    0.3%
   31  1024      6836     30.25    0.4%
   32  1024      6962     16.28    0.2%
   33  1024      7028     23.82    0.3%
   34  1024      7352     19.91    0.2%
   35  1024      7447      15.7    0.2%
   36  1024      7485     17.43    0.2%
   37  1024      7769     25.42    0.3%
   38  1024      7913     23.76    0.3%
   39  1024      7918     19.66    0.2%
   40  1024      8366      12.4    0.1%
   41  1024      8377     26.06    0.3%
   42  1024      8382     32.03    0.3%
   43  1024      8695     26.84    0.3%
   44  1024      8837     32.55    0.3%
   45  1024      8803     15.09    0.1%
   46  1024      9145     33.92    0.3%
   47  1024      9252      28.3    0.3%
   48  1024      9257     28.21    0.3%
   49  1024      9660     20.42    0.2%
   50  1024      9840     30.51    0.3%
   51  1024      9778      11.5    0.1%
   52  1024     10090     29.51    0.2%
   53  1024     10220     18.26    0.1%
   54  1024     10250     20.07    0.1%
   55  1024     10570     32.16    0.3%
   56  1024     10700     25.99    0.2%
   57  1024     10670     27.04    0.2%
   58  1024     10980     16.55    0.1%
   59  1024     11120     34.07    0.3%
   60  1024     11090     26.04    0.2%
   61  1024     11440      23.5    0.2%
   62  1024     11560      31.8    0.2%
   63  1024     11530     21.57    0.1%
   64     0     10040     14.53    0.1%
   64    20     10050     10.72    0.1%
   64    40     10110     19.21    0.1%
   64    60     10140     22.26    0.2%
   64    80     10170     28.12    0.2%
   64   100     10220     19.56    0.1%
   64   120     10230     15.74    0.1%
   64   140     10290     19.59    0.1%
   64   160     10320     29.22    0.2%
   64   180     10360     24.47    0.2%
   64   200     10390     15.97    0.1%
   64   220     10450     19.96    0.1%
   64   240     10460     20.72    0.1%
   64   260     10510     30.81    0.2%
   64   280     10540     32.03    0.3%
   64   300     10570     27.38    0.2%
   64   320     10600     19.11    0.1%
   64   340     10650     28.87    0.2%
   64   360     10690     54.01    0.5%
   64   380     10710     36.29    0.3%
   64   400     10770     38.97    0.3%
   64   420     10800     14.87    0.1%
   64   440     10840     45.68    0.4%
   64   460     10840     18.96    0.1%
   64   480     10890     14.66    0.1%
   64   500     10910     22.06    0.2%
   64   520     10960     48.24    0.4%
   64   540     10990     39.27    0.3%
   64   560     11020     23.74    0.2%
   64   580     11060     40.08    0.3%
   64   600     11090     31.75    0.2%
   64   620     11200     79.59    0.7%
   64   640     11160     36.36    0.3%
   64   660     11210     30.02    0.2%
   64   680     11250     35.56    0.3%
   64   700     11260     14.78    0.1%
   64   720     11330     52.13    0.4%
   64   740     11320     25.49    0.2%
   64   760     11370     17.57    0.1%
   64   780     11440     36.87    0.3%
   64   800     11440     18.19    0.1%
   64   820     11470     37.43    0.3%
   64   840     11510     30.26    0.2%
   64   860     11550     31.54    0.2%
   64   880     11600     40.99    0.3%
   64   900     11620     31.16    0.2%
   64   920     11640     24.11    0.2%
   64   940     11680     35.43    0.3%
   64   960     11720     20.62    0.1%
   64   980     11780     32.67    0.2%
   64  1000     11790      17.1    0.1%
   64  1020     11870     27.65    0.2%
   64  1024     11840     10.42    0.0%

Quality and confidence:
param     error
c          0.12
s         0.007

Model:
Time ~=    246.5
    + c    153.1
    + s    1.764
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    205.2
    + s    1.704
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     203.5     0.892    0.4%
   20     241.5     7.808    3.2%
   40     273.3     0.872    0.3%
   60     307.3     0.595    0.1%
   80     341.6     0.949    0.2%
  100     374.7     0.368    0.0%
  120     409.6      0.57    0.1%
  140     444.2     2.171    0.4%
  160       478       0.4    0.0%
  180     514.7      7.54    1.4%
  200       546     1.062    0.1%
  220     585.7     10.15    1.7%
  240     615.5     4.462    0.7%
  260     651.4     5.315    0.8%
  280     686.7     6.514    0.9%
  300     718.2     4.352    0.6%
  320     755.8      12.7    1.6%
  340     790.9     9.918    1.2%
  360     821.3     8.856    1.0%
  380     858.8     9.306    1.0%
  400     894.1     14.48    1.6%
  420     924.3      9.43    1.0%
  440     961.7     14.65    1.5%
  460      1012      16.3    1.6%
  480      1022     1.241    0.1%
  500      1060     9.805    0.9%
  520      1104     12.67    1.1%
  540      1132     11.59    1.0%
  560      1162     8.875    0.7%
  580      1210     11.45    0.9%
  600      1243     12.06    0.9%
  620      1259     1.512    0.1%
  640      1300     14.48    1.1%
  660      1345     12.47    0.9%
  680      1371     14.17    1.0%
  700      1422     13.11    0.9%
  720      1445     13.18    0.9%
  740      1487     14.21    0.9%
  760      1509     13.68    0.9%
  780      1543     15.87    1.0%
  800      1577     13.09    0.8%
  820      1617     14.34    0.8%
  840      1653     15.67    0.9%
  860      1675     10.58    0.6%
  880      1711     13.51    0.7%
  900      1754     12.14    0.6%
  920      1792     13.31    0.7%
  940      1833     6.235    0.3%
  960      1861     14.65    0.7%
  980      1897     11.93    0.6%
 1000      1927     14.58    0.7%
 1020      1961     15.66    0.7%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    203.4
    + s    1.724
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    158.1
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    158.1
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    63.36
    + c    66.76
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0      58.2     0.254    0.4%
    1     129.5     0.308    0.2%
    2     196.3     0.491    0.2%
    3     260.3     0.435    0.1%
    4     328.3     1.028    0.3%
    5     392.2     0.622    0.1%
    6       456     0.695    0.1%
    7     537.6     13.27    2.4%
    8     592.6      3.83    0.6%
    9     660.4     0.762    0.1%
   10     727.4     8.127    1.1%
   11       803      7.91    0.9%
   12     860.8     11.23    1.3%
   13     946.3     14.91    1.5%
   14      1000     12.56    1.2%
   15      1079     15.77    1.4%
   16      1141     17.73    1.5%
   17      1206     15.32    1.2%
   18      1263     10.91    0.8%
   19      1328     14.02    1.0%
   20      1411     9.522    0.6%
   21      1466     14.01    0.9%
   22      1523     15.61    1.0%
   23      1586     16.13    1.0%
   24      1663     12.26    0.7%
   25      1762     5.267    0.2%
   26      1815      12.1    0.6%
   27      1879     14.06    0.7%
   28      1956     10.72    0.5%
   29      2006     15.64    0.7%
   30      2067     15.23    0.7%
   31      2147     11.59    0.5%
   32      2194     14.03    0.6%
   33      2282     13.33    0.5%
   34      2345      9.76    0.4%
   35      2409      13.3    0.5%
   36      2473       8.3    0.3%
   37      2543     9.805    0.3%
   38      2580     11.62    0.4%
   39      2661     10.05    0.3%
   40      2745      21.8    0.7%
   41      2791       3.3    0.1%
   42      2856     7.683    0.2%
   43      2938     12.08    0.4%
   44      2984     5.533    0.1%
   45      3047     12.32    0.4%
   46      3119     16.78    0.5%
   47      3169     16.19    0.5%
   48      3236     14.83    0.4%
   49      3368     19.42    0.5%
   50      3431     6.271    0.1%
   51      3501     14.64    0.4%
   52      3568     15.84    0.4%
   53      3626     6.823    0.1%
   54      3696     17.71    0.4%
   55      3745     7.427    0.1%
   56      3817     11.93    0.3%
   57      3874     14.32    0.3%
   58      3935      14.3    0.3%
   59      4009     12.52    0.3%
   60      4094     22.17    0.5%
   61      4139     11.78    0.2%
   62      4202     15.04    0.3%
   63      4270      14.9    0.3%
   64      4329      13.3    0.3%

Quality and confidence:
param     error
c         0.039

Model:
Time ~=    63.35
    + c    66.89
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.96
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.96
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.5
    + r    67.96
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.4     0.299    0.1%
    1     299.2      0.36    0.1%
    2     369.1     1.902    0.5%
    3       435     0.142    0.0%
    4     503.8     1.295    0.2%
    5     577.4     10.78    1.8%
    6     638.6     1.826    0.2%
    7     710.7     4.816    0.6%
    8     777.2     4.071    0.5%
    9     845.6     4.806    0.5%
   10     912.3     8.459    0.9%
   11     975.8      1.69    0.1%
   12      1058     13.71    1.2%
   13      1124     11.29    1.0%
   14      1194     11.83    0.9%
   15      1272     13.68    1.0%
   16      1320     3.043    0.2%
   17      1390     13.74    0.9%
   18      1466     13.13    0.8%
   19      1527     11.85    0.7%
   20      1598     12.89    0.8%

Quality and confidence:
param     error
r         0.114

Model:
Time ~=    230.4
    + r    68.51
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.9
    + r     67.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.4     0.143    0.0%
    1     299.6     0.241    0.0%
    2     368.3     0.346    0.0%
    3     435.8     0.746    0.1%
    4     503.9     0.663    0.1%
    5     570.4       0.9    0.1%
    6     645.1     11.09    1.7%
    7     711.5     8.799    1.2%
    8     774.9      1.34    0.1%
    9     848.5     9.037    1.0%
   10     920.4     11.25    1.2%
   11     990.6     12.98    1.3%
   12      1046     8.606    0.8%
   13      1122     12.01    1.0%
   14      1191     12.63    1.0%
   15      1260     13.05    1.0%
   16      1333     16.01    1.2%
   17      1398     14.47    1.0%
   18      1455     9.925    0.6%
   19      1538     14.59    0.9%
   20      1593     11.27    0.7%

Quality and confidence:
param     error
r         0.122

Model:
Time ~=    230.8
    + r    68.52
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.3
    + r    67.37
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.6     0.138    0.0%
    1     298.8     0.343    0.1%
    2     366.5     0.383    0.1%
    3     432.8     0.207    0.0%
    4     509.4     4.223    0.8%
    5     567.8     3.152    0.5%
    6     633.4     1.632    0.2%
    7     719.6     1.356    0.1%
    8     787.7     0.987    0.1%
    9     845.5     11.17    1.3%
   10     918.1     12.51    1.3%
   11     990.2     14.18    1.4%
   12      1050     17.54    1.6%
   13      1113     13.68    1.2%
   14      1183     16.92    1.4%
   15      1249     15.02    1.2%
   16      1323     14.86    1.1%
   17      1380     12.49    0.9%
   18      1448     11.59    0.8%
   19      1519     14.53    0.9%
   20      1592     12.13    0.7%

Quality and confidence:
param     error
r         0.138

Model:
Time ~=    233.7
    + r    67.86
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    234.9
    + r    198.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.5     0.239    0.1%
    1     434.3     1.652    0.3%
    2     631.3     1.343    0.2%
    3     824.2     1.143    0.1%
    4      1033        12    1.1%
    5      1226      7.92    0.6%
    6      1422     10.14    0.7%
    7      1637     9.745    0.5%
    8      1835     16.31    0.8%
    9      2027     4.443    0.2%
   10      2226     16.56    0.7%
   11      2426     10.22    0.4%
   12      2628     13.96    0.5%
   13      2817     9.132    0.3%
   14      3034     17.81    0.5%
   15      3223     15.19    0.4%
   16      3417     14.25    0.4%
   17      3599     10.39    0.2%
   18      3806     12.52    0.3%
   19      4016     12.08    0.3%
   20      4203     16.01    0.3%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    235.7
    + r    198.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.4
    + r       68
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       228     0.126    0.0%
    1       299     0.359    0.1%
    2     367.7     0.442    0.1%
    3     435.2     0.617    0.1%
    4     503.4     1.597    0.3%
    5     576.4     13.12    2.2%
    6     642.8     10.96    1.7%
    7     715.1     11.92    1.6%
    8     780.9     9.317    1.1%
    9     843.7     7.537    0.8%
   10     917.3     12.18    1.3%
   11     988.7     12.08    1.2%
   12      1053     13.74    1.3%
   13      1123     13.18    1.1%
   14      1200     13.05    1.0%
   15      1273     11.34    0.8%
   16      1326     13.31    1.0%
   17      1388     8.902    0.6%
   18      1466     10.17    0.6%
   19      1526      13.2    0.8%
   20      1606     13.97    0.8%

Quality and confidence:
param     error
r         0.131

Model:
Time ~=    230.8
    + r    68.64
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.6
    + r    67.67
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.5     0.178    0.0%
    1     300.2     1.177    0.3%
    2     367.5      1.17    0.3%
    3     433.9     0.582    0.1%
    4     503.1     1.757    0.3%
    5     574.3     10.43    1.8%
    6     635.9     1.205    0.1%
    7     709.9      7.84    1.1%
    8     778.1      7.56    0.9%
    9     839.7     2.296    0.2%
   10     907.1     2.903    0.3%
   11     972.3     0.977    0.1%
   12      1048     11.55    1.1%
   13      1117     13.22    1.1%
   14      1187     10.04    0.8%
   15      1259     10.79    0.8%
   16      1317     10.88    0.8%
   17      1391     9.572    0.6%
   18      1476     10.91    0.7%
   19      1521     14.35    0.9%
   20      1588     14.73    0.9%

Quality and confidence:
param     error
r         0.116

Model:
Time ~=    229.5
    + r    68.28
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.7
    + r    67.23
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.6     0.155    0.0%
    1     299.3     1.136    0.3%
    2     366.5     0.444    0.1%
    3     432.7     0.709    0.1%
    4     500.6      0.63    0.1%
    5     566.6     0.729    0.1%
    6     635.6     3.418    0.5%
    7     709.4     7.755    1.0%
    8     773.6     7.515    0.9%
    9     839.6     9.735    1.1%
   10     911.3     14.39    1.5%
   11     982.8     16.17    1.6%
   12      1041     10.28    0.9%
   13      1111     12.58    1.1%
   14      1177     7.107    0.6%
   15      1249     12.25    0.9%
   16      1322     11.56    0.8%
   17      1385     15.22    1.0%
   18      1453     12.83    0.8%
   19      1520     13.88    0.9%
   20      1578     11.76    0.7%

Quality and confidence:
param     error
r         0.118

Model:
Time ~=    230.3
    + r    67.86
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.4
    + r    67.08
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.3      0.17    0.0%
    1     299.2     1.086    0.3%
    2     366.8     0.527    0.1%
    3     438.3       8.8    2.0%
    4     500.8     1.007    0.2%
    5     567.3     1.011    0.1%
    6     634.7     3.548    0.5%
    7     712.6     11.75    1.6%
    8     773.3     8.484    1.0%
    9       842     11.46    1.3%
   10     910.3     12.95    1.4%
   11       991     8.366    0.8%
   12      1045     15.08    1.4%
   13      1107     10.93    0.9%
   14      1174     3.939    0.3%
   15      1247      11.1    0.8%
   16      1316     13.36    1.0%
   17      1380     14.87    1.0%
   18      1448     13.94    0.9%
   19      1515     14.77    0.9%
   20      1579     11.23    0.7%

Quality and confidence:
param     error
r         0.125

Model:
Time ~=    232.7
    + r    67.58
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    233.9
    + r    165.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.5     0.272    0.1%
    1     399.9     0.725    0.1%
    2     566.2     8.469    1.4%
    3     728.1     1.119    0.1%
    4     895.5     4.475    0.4%
    5      1066     12.08    1.1%
    6      1245     9.934    0.7%
    7      1397     12.45    0.8%
    8      1553     12.39    0.7%
    9      1727     13.02    0.7%
   10      1889     13.62    0.7%
   11      2059     13.69    0.6%
   12      2233     12.94    0.5%
   13      2382     12.01    0.5%
   14      2531     8.734    0.3%
   15      2709     18.05    0.6%
   16      2877     9.524    0.3%
   17      3066     14.48    0.4%
   18      3232     9.401    0.2%
   19      3397     7.849    0.2%
   20      3545     19.42    0.5%

Quality and confidence:
param     error
r          0.17

Model:
Time ~=      233
    + r    165.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    138.8
    + r    33.24
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     136.5     0.134    0.0%
    1     171.9     0.053    0.0%
    2       205     0.291    0.1%
    3     239.3     0.139    0.0%
    4     271.6     0.141    0.0%
    5     306.7     3.797    1.2%
    6     339.2     1.778    0.5%
    7       372     1.768    0.4%
    8     403.2     0.518    0.1%
    9       438     3.982    0.9%
   10       468     0.632    0.1%
   11       510     4.935    0.9%
   12     544.4     8.047    1.4%
   13     572.3      2.37    0.4%
   14     605.4     2.248    0.3%
   15     637.9     2.298    0.3%
   16     670.1     2.542    0.3%
   17     702.9      2.85    0.4%
   18     737.4     4.737    0.6%
   19     771.9     8.426    1.0%
   20     809.5     7.636    0.9%

Quality and confidence:
param     error
r         0.051

Model:
Time ~=    138.3
    + r    33.38
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.6
    + r    62.71
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.4     0.201    0.0%
    1     294.6     0.445    0.1%
    2     357.2     0.432    0.1%
    3     419.9     0.467    0.1%
    4     483.6      2.29    0.4%
    5     545.2     1.685    0.3%
    6     606.2     1.275    0.2%
    7     677.4     8.648    1.2%
    8     737.1     8.652    1.1%
    9     797.6     5.121    0.6%
   10     861.3     7.028    0.8%
   11     921.1     2.354    0.2%
   12      1003        12    1.1%
   13      1054     13.56    1.2%
   14      1117      12.1    1.0%
   15      1180     12.46    1.0%
   16      1247     13.38    1.0%
   17      1302        12    0.9%
   18      1367     12.56    0.9%
   19      1433     15.45    1.0%
   20      1499     15.24    1.0%

Quality and confidence:
param     error
r         0.115

Model:
Time ~=    229.7
    + r    63.39
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    317.8
    + n    10.55
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     294.6     0.233    0.0%
   20     510.1     0.593    0.1%
   40     721.5     5.008    0.6%
   60     954.7     14.43    1.5%
   80      1165     11.66    1.0%
  100      1375     14.98    1.0%
  120      1598     16.15    1.0%
  140      1803     12.14    0.6%
  160      2023     13.12    0.6%
  180      2214     10.93    0.4%
  200      2447     8.257    0.3%
  220      2660     15.69    0.5%
  240      2854     14.84    0.5%
  260      3070     6.929    0.2%
  280      3277     8.033    0.2%
  300      3485     14.96    0.4%
  320      3709     11.29    0.3%
  340      3911     15.25    0.3%
  360      4137     22.98    0.5%
  380      4340      18.7    0.4%
  400      4568     13.01    0.2%
  420      4758     15.93    0.3%
  440      4974     21.48    0.4%
  460      5193     44.31    0.8%
  480      5371     21.11    0.3%
  500      5576     23.34    0.4%
  520      5808     17.89    0.3%
  540      6026     24.39    0.4%
  560      6248     32.57    0.5%
  580      6432     13.89    0.2%
  600      6657        32    0.4%
  620      6865     22.74    0.3%
  640      7063     25.45    0.3%
  660      7289     24.79    0.3%
  680      7491     30.74    0.4%
  700      7706     49.76    0.6%
  720      7917     23.23    0.2%
  740      8129     61.98    0.7%
  760      8355     27.33    0.3%
  780      8538     25.66    0.3%
  800      8762     19.15    0.2%
  820      8970     42.38    0.4%
  840      9168     42.02    0.4%
  860      9400     59.07    0.6%
  880      9591     35.18    0.3%
  900      9800     19.64    0.2%
  920     10010      50.3    0.5%
  940     10250     60.24    0.5%
  960     10500     47.03    0.4%
  980     10840     97.55    0.8%
 1000     10870     51.75    0.4%
 1020     11130     60.22    0.5%

Quality and confidence:
param     error
n         0.006

Model:
Time ~=    314.1
    + n    10.57
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    224.9
    + r    1.584
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     224.8     0.144    0.0%
    1     226.4     0.223    0.0%

Quality and confidence:
param     error
r         0.088

Model:
Time ~=    224.8
    + r    1.597
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    226.9
    + n    0.184
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     226.7     0.322    0.1%
   20     230.7      0.19    0.0%
   40     234.7     0.176    0.0%
   60     238.4     0.176    0.0%
   80     241.9     0.317    0.1%
  100     246.6      3.92    1.5%
  120     249.3     0.273    0.1%
  140     258.6     11.05    4.2%
  160     256.4     0.363    0.1%
  180     260.2     0.398    0.1%
  200       264      0.16    0.0%
  220     267.5     0.283    0.1%
  240     271.3     0.185    0.0%
  260     275.7     1.359    0.4%
  280     278.4     0.131    0.0%
  300     282.1     0.252    0.0%
  320     286.1     0.247    0.0%
  340     289.9     0.191    0.0%
  360     294.1     1.322    0.4%
  380     297.7     0.649    0.2%
  400     301.1     0.288    0.0%
  420     304.3     0.305    0.1%
  440     313.7     4.392    1.3%
  460     311.7     0.398    0.1%
  480       315     0.935    0.2%
  500     319.4      0.16    0.0%
  520     326.8     6.619    2.0%
  540     329.1     7.121    2.1%
  560     330.1     0.257    0.0%
  580     333.5     0.159    0.0%
  600     338.4     2.782    0.8%
  620     345.3     4.994    1.4%
  640     344.9     0.394    0.1%
  660     348.5     0.168    0.0%
  680     352.3     0.204    0.0%
  700     355.8     0.228    0.0%
  720     362.2     8.356    2.3%
  740       364     0.363    0.0%
  760     367.5      0.79    0.2%
  780       371     0.245    0.0%
  800     375.8     3.269    0.8%
  820     381.4     4.342    1.1%
  840     388.7     10.68    2.7%
  860     392.4     10.16    2.5%
  880     389.8     0.418    0.1%
  900     393.1     0.582    0.1%
  920     400.8     5.107    1.2%
  940       405     3.565    0.8%
  960     404.4     0.515    0.1%
  980     407.8     0.335    0.0%
 1000       412     0.518    0.1%
 1020     415.3     0.152    0.0%

Quality and confidence:
param     error
n             0

Model:
Time ~=    227.2
    + n    0.186
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    228.4
    + r    70.99
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.4     0.162    0.0%
    1     299.4     0.197    0.0%

Quality and confidence:
param     error
r         0.085

Model:
Time ~=    228.4
    + r    71.04
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      230
    + r    236.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.4     0.426    0.1%
    1     467.8     0.677    0.1%
    2     703.3     8.127    1.1%
    3     942.2     11.16    1.1%
    4      1183     14.24    1.2%
    5      1407     10.48    0.7%
    6      1645      10.8    0.6%
    7      1890     7.443    0.3%
    8      2132     11.43    0.5%
    9      2352     12.93    0.5%
   10      2574     7.591    0.2%
   11      2817     10.83    0.3%
   12      3044     3.883    0.1%
   13      3295     13.58    0.4%
   14      3510      12.9    0.3%
   15      3830      11.5    0.3%
   16      3981     11.66    0.2%
   17      4263     10.54    0.2%
   18      4488        18    0.4%
   19      4727     14.93    0.3%
   20      4978     13.96    0.2%

Quality and confidence:
param     error
r         0.241

Model:
Time ~=      227
    + r    236.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    238.4
    + r    412.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     225.2     0.142    0.0%
    1     653.3     2.374    0.3%
    2      1073      10.3    0.9%
    3      1495     13.48    0.9%
    4      1896     10.85    0.5%
    5      2303     7.196    0.3%
    6      2723     8.848    0.3%
    7      3124      9.43    0.3%
    8      3533     8.931    0.2%
    9      3946     15.35    0.3%
   10      4341     11.99    0.2%
   11      4757     13.08    0.2%
   12      5165     14.24    0.2%
   13      5570     16.02    0.2%
   14      5993     29.85    0.4%
   15      6404     21.12    0.3%
   16      6821     17.04    0.2%
   17      7288     20.87    0.2%
   18      7717     37.15    0.4%
   19      8105     21.21    0.2%
   20      8509     15.96    0.1%

Quality and confidence:
param     error
r          0.31

Model:
Time ~=    232.4
    + r    413.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      706
    + t    407.2
    + n    81.33
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      1957     17.08    0.8%
    1    16      2432     17.42    0.7%
    2    16      2842     10.16    0.3%
    3    16      3243     13.39    0.4%
    4     0      2337     14.11    0.6%
    4     1      2403     10.33    0.4%
    4     2      2485      12.4    0.4%
    4     3      2575     14.87    0.5%
    4     4      2601     11.49    0.4%
    4     5      2692        19    0.7%
    4     6      2797     18.43    0.6%
    4     7      2859     21.37    0.7%
    4     8      2933     13.01    0.4%
    4     9      3036     14.66    0.4%
    4    10      3126     7.648    0.2%
    4    11      3190     17.65    0.5%
    4    12      3289      23.2    0.7%
    4    13      3383     16.14    0.4%
    4    14      3456     12.29    0.3%
    4    15      3545     13.81    0.3%
    4    16      3613        19    0.5%

Quality and confidence:
param     error
t          1.91
n         0.376

Model:
Time ~=    688.7
    + t    404.4
    + n       82
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    147.3
    + r    48.71
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     144.5     0.196    0.1%
    1     196.6     0.319    0.1%
    2     244.3     0.409    0.1%
    3     294.2     0.302    0.1%
    4       346     4.551    1.3%
    5     388.2     0.701    0.1%
    6     443.9     1.352    0.3%
    7     490.7      1.71    0.3%
    8     540.7     3.816    0.7%
    9     586.8     5.167    0.8%
   10     629.5     1.882    0.2%
   11     682.8     1.995    0.2%
   12     733.7     8.253    1.1%
   13       792      17.2    2.1%
   14     831.5     12.77    1.5%
   15     888.3      14.4    1.6%
   16     925.9     13.29    1.4%
   17     979.4     9.073    0.9%
   18      1026     6.367    0.6%
   19      1075       5.4    0.5%
   20      1133     13.07    1.1%

Quality and confidence:
param     error
r           0.1

Model:
Time ~=    146.4
    + r    49.03
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.7
    + r    309.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.7     0.358    0.1%
    1     567.9     3.825    0.6%
    2     864.3     10.45    1.2%
    3      1170     12.43    1.0%
    4      1456      13.3    0.9%
    5      1779     14.03    0.7%
    6      2065      12.6    0.6%
    7      2347     12.04    0.5%
    8      2643     13.48    0.5%
    9      3026     14.11    0.4%
   10      3342     12.95    0.3%
   11      3639     22.17    0.6%
   12      3932     18.41    0.4%
   13      4229     13.05    0.3%
   14      4522      14.5    0.3%
   15      4806     10.11    0.2%
   16      5140     23.19    0.4%
   17      5436     16.13    0.2%
   18      5899     10.26    0.1%
   19      6182     14.82    0.2%
   20      6491     23.08    0.3%

Quality and confidence:
param     error
r          0.52

Model:
Time ~=    215.9
    + r    310.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    464.4
    + n    27.03
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     440.9     0.266    0.0%
    1     484.9     0.602    0.1%
    2     516.5     0.739    0.1%
    3     549.6      1.12    0.2%
    4     573.3     0.953    0.1%
    5     602.9      2.85    0.4%
    6     626.6     2.586    0.4%
    7     656.1     7.928    1.2%
    8     680.8     11.42    1.6%
    9     715.1     14.58    2.0%
   10     751.9     14.99    1.9%
   11     770.2      5.72    0.7%
   12     780.6     10.85    1.3%
   13     807.5     5.303    0.6%
   14     837.2     12.19    1.4%
   15     874.7     8.907    1.0%
   16     879.4     2.408    0.2%

Quality and confidence:
param     error
n         0.193

Model:
Time ~=    461.8
    + n    27.18
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    843.3
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.5     0.316    0.1%
    1     901.6     10.76    1.1%
    2      1618     14.21    0.8%
    3      2370     8.041    0.3%
    4      3200     18.15    0.5%
    5      4026     23.25    0.5%
    6      4793     25.75    0.5%
    7      5577     26.55    0.4%
    8      6396     25.16    0.3%
    9      7306     29.71    0.4%
   10      8073     33.08    0.4%
   11      8955     12.14    0.1%
   12      9868     28.11    0.2%
   13     10740      21.2    0.1%
   14     11530     27.68    0.2%
   15     12410     24.97    0.2%
   16     13350     51.79    0.3%
   17     14120     39.54    0.2%
   18     15340     27.99    0.1%
   19     16210     40.29    0.2%
   20     17080     33.74    0.1%

Quality and confidence:
param     error
r         2.187

Model:
Time ~=        0
    + r    847.3
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    107.9
    + r    427.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.1     0.255    0.1%
    1     594.5     2.451    0.4%
    2     989.8     12.61    1.2%
    3      1400     10.77    0.7%
    4      1801     11.23    0.6%
    5      2215     13.82    0.6%
    6      2637     15.16    0.5%
    7      3050     24.67    0.8%
    8      3505     16.79    0.4%
    9      3921      21.8    0.5%
   10      4301     14.44    0.3%
   11      4776     24.64    0.5%
   12      5198     26.74    0.5%
   13      5625     33.92    0.6%
   14      6044     25.07    0.4%
   15      6493     32.34    0.4%
   16      6955        17    0.2%
   17      7374     27.16    0.3%
   18      7915        20    0.2%
   19      8339     24.07    0.2%
   20      8813     50.41    0.5%

Quality and confidence:
param     error
r         0.772

Model:
Time ~=    95.47
    + r    429.4
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    556.4
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.3     0.439    0.1%
    1     664.3     3.088    0.4%
    2      1166     8.115    0.6%
    3      1669     5.168    0.3%
    4      2213     11.66    0.5%
    5      2721     18.88    0.6%
    6      3207     17.45    0.5%
    7      3800     12.32    0.3%
    8      4332     30.33    0.7%
    9      4907     23.48    0.4%
   10      5487     29.88    0.5%
   11      6079     46.98    0.7%
   12      6641     36.21    0.5%
   13      7278     39.63    0.5%
   14      7816     51.13    0.6%
   15      8292     20.63    0.2%
   16      8908     31.91    0.3%
   17      9398     51.76    0.5%
   18     10050     82.55    0.8%
   19     10750     38.68    0.3%
   20     11310      37.3    0.3%

Quality and confidence:
param     error
r         1.206

Model:
Time ~=        0
    + r    557.9
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    420.2
    + n    55.38
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     399.9     0.602    0.1%
    1     470.7     1.782    0.3%
    2     540.8     11.07    2.0%
    3     589.1     1.808    0.3%
    4     648.5     11.15    1.7%
    5     698.8     12.19    1.7%
    6     760.4     16.11    2.1%
    7     804.4     5.977    0.7%
    8     870.2     12.09    1.3%
    9       914     5.383    0.5%
   10     967.1     5.835    0.6%
   11      1025        12    1.1%
   12      1240     15.16    1.2%
   13      1137      12.9    1.1%
   14      1208     11.64    0.9%
   15      1246     14.02    1.1%
   16      1293     15.43    1.1%

Quality and confidence:
param     error
n         0.606

Model:
Time ~=    416.6
    + n    56.86
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     76.7
    + r    533.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.6     0.187    0.0%
    1     709.3     1.763    0.2%
    2      1194      12.7    1.0%
    3      1718     16.78    0.9%
    4      2196      11.5    0.5%
    5      2727      16.6    0.6%
    6      3246     13.59    0.4%
    7      3733     24.05    0.6%
    8      4258     17.88    0.4%
    9      4849     14.99    0.3%
   10      5374     14.33    0.2%
   11      5955     24.04    0.4%
   12      6444     22.99    0.3%
   13      6956     24.31    0.3%
   14      7500     17.42    0.2%
   15      8037     22.05    0.2%
   16      8596     35.34    0.4%
   17      9183     31.11    0.3%
   18      9829     41.25    0.4%
   19     10470     22.95    0.2%
   20     10930     29.19    0.2%

Quality and confidence:
param     error
r         1.053

Model:
Time ~=    67.69
    + r    536.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    799.8
    + n    64.07
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     705.1     1.703    0.2%
    1     842.5     7.931    0.9%
    2     940.2     8.743    0.9%
    3     999.2     3.852    0.3%
    4      1070     14.15    1.3%
    5      1126     7.821    0.6%
    6      1176     2.507    0.2%
    7      1243     14.45    1.1%
    8      1327     4.669    0.3%
    9      1384     8.098    0.5%
   10      1425     12.64    0.8%
   11      1498     9.741    0.6%
   12      1544     11.24    0.7%
   13      1608     4.391    0.2%
   14      1696     11.11    0.6%
   15      1774     13.46    0.7%
   16      1817     10.07    0.5%

Quality and confidence:
param     error
n         0.415

Model:
Time ~=    782.1
    + n    65.33
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      176
    + r     2521
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.6     0.203    0.0%
    1      2724     12.28    0.4%
    2      5236     11.45    0.2%
    3      7726     26.29    0.3%
    4     10270     39.63    0.3%
    5     12730      29.6    0.2%
    6     15190     47.79    0.3%
    7     17780     39.16    0.2%
    8     20310     47.78    0.2%
    9     22780     35.17    0.1%
   10     25470     32.81    0.1%
   11     27880     39.34    0.1%
   12     30400     45.79    0.1%
   13     32920     44.99    0.1%
   14     35310     50.26    0.1%
   15     37970     29.26    0.0%
   16     40520     62.99    0.1%
   17     42870     75.64    0.1%
   18     45470     67.85    0.1%
   19     48320     53.28    0.1%
   20     50880     56.24    0.1%

Quality and confidence:
param     error
r         1.299

Model:
Time ~=    142.1
    + r     2524
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    20870
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.7     0.256    0.1%
    1     20980     25.07    0.1%
    2     41790     40.93    0.0%
    3     62490     40.91    0.0%
    4     83200     62.81    0.0%
    5    104200     97.22    0.0%
    6    124800     81.73    0.0%
    7    145700       117    0.0%
    8    166700     99.65    0.0%
    9    187300     112.7    0.0%
   10    208600     133.5    0.0%
   11    229400     95.46    0.0%
   12    250100     176.8    0.0%
   13    270900     154.9    0.0%
   14    292200     130.2    0.0%
  <truncated>...
```

</details>",10709,2022-01-20T17:01:16Z,0
1675,Robbepop,Closed since the experiment is done. Results are ambiguous. More experimentation needed.,10709,2022-01-22T11:22:15Z,0
1676,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10202,2021-12-09T21:59:07Z,0
1677,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10202,2022-01-09T09:35:29Z,0
1678,liuchengxu,@bkchr Any thoughts on this feature request?,10711,2022-01-23T10:25:11Z,0
1679,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10510,2022-01-20T08:22:40Z,0
1680,leonardocustodio,"@gavofyork, I really appreciate the feedback but I need to understand one point. You said all filters rely in the concept of ""set-inclusion"" but not all ""set-inclusion"" are filters. But all types that were changed are called: `BaseCallFilter` may I assume that some of those type are incorrectly named, since adding `Filter` in the end of the name would imply that they are indeed Filters and not just any other type of ""set-inclusion""?
",10510,2022-01-23T22:13:21Z,0
1681,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10553,2022-01-24T01:52:02Z,0
1682,athei,/benchmark runtime pallet pallet_contracts,10702,2022-01-20T07:21:02Z,0
1683,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-bump-wasmi"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.424
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.424
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    14.31
    + k    0.824
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     13.87     0.045    0.3%
   20     32.69     0.088    0.2%
   40     48.51     0.249    0.5%
   60     62.92     0.314    0.4%
   80     76.45      0.29    0.3%
  100     92.55     0.594    0.6%
  120     107.9     0.116    0.1%
  140     126.1     0.494    0.3%
  160       142     0.393    0.2%
  180     159.7      0.41    0.2%
  200       174     0.585    0.3%
  220     191.9     0.415    0.2%
  240     209.4     0.829    0.3%
  260     226.5     1.694    0.7%
  280     243.3      0.76    0.3%
  300     259.8     0.661    0.2%
  320     279.3     0.409    0.1%
  340     296.2      1.31    0.4%
  360     313.8     0.597    0.1%
  380     331.1     0.939    0.2%
  400     348.9     2.525    0.7%
  420     365.6     1.458    0.3%
  440     381.9     1.141    0.2%
  460     395.9     1.123    0.2%
  480     412.5     0.979    0.2%
  500     430.8     0.988    0.2%
  520     448.5      1.33    0.2%
  540     463.3     1.076    0.2%
  560     479.3     1.635    0.3%
  580     496.4     1.707    0.3%
  600       514     2.669    0.5%
  620     530.1     4.632    0.8%
  640     542.6     0.937    0.1%
  660     561.3      1.29    0.2%
  680     577.1     1.236    0.2%
  700     592.1      3.22    0.5%
  720     607.7      0.81    0.1%
  740       624     2.113    0.3%
  760     640.6     2.285    0.3%
  780     655.9     1.806    0.2%
  800     672.5     1.497    0.2%
  820     689.9     3.372    0.4%
  840       705     1.388    0.1%
  860     721.9     2.297    0.3%
  880     738.2     2.557    0.3%
  900     751.6     1.423    0.1%
  920       766     1.779    0.2%
  940       789     6.099    0.7%
  960     794.6     1.691    0.2%
  980     813.1     0.982    0.1%
 1000     828.2     2.398    0.2%
 1020     845.8      2.11    0.2%

Quality and confidence:
param     error
k             0

Model:
Time ~=    15.17
    + k    0.821
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     25.3
    + q     0.15
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.495      0.03    1.2%
   20     21.94     0.109    0.4%
   40     28.46     0.073    0.2%
   60     33.91     0.094    0.2%
   80      39.4     0.148    0.3%
  100     43.96     0.177    0.4%
  120     49.25     0.176    0.3%
  140     54.67     0.502    0.9%
  160     59.18     0.151    0.2%
  180     64.81     0.224    0.3%
  200     70.14      0.46    0.6%
  220     75.59     0.971    1.2%
  240     80.45     0.426    0.5%
  260     85.61     0.235    0.2%
  280     90.75      0.15    0.1%
  300     86.67     0.342    0.3%
  320     85.59      8.04    9.3%
  340     95.17     0.224    0.2%
  360     89.64     12.66   14.1%
  380     105.5     0.239    0.2%
  400     111.1     0.449    0.4%
  420     115.1      0.26    0.2%
  440     121.3     0.302    0.2%
  460     89.69     0.363    0.4%
  480     92.97     0.877    0.9%
  500     96.54     0.723    0.7%
  520     98.11     0.391    0.3%
  540     101.9     0.713    0.6%
  560     104.6     0.384    0.3%
  580     108.3     0.616    0.5%
  600     111.5     0.543    0.4%
  620     113.8     0.627    0.5%
  640       118     1.046    0.8%
  660     120.9     0.864    0.7%
  680       123     0.306    0.2%
  700     127.3     0.691    0.5%
  720     129.4     0.373    0.2%
  740     133.3      0.52    0.3%
  760     136.1     0.454    0.3%
  780     140.9     0.249    0.1%
  800     143.7     0.518    0.3%
  820     147.1     0.566    0.3%
  840     149.9     0.999    0.6%
  860     153.5      0.88    0.5%
  880     156.7     0.748    0.4%
  900     160.8     0.268    0.1%
  920     162.9     0.959    0.5%
  940     167.2     0.665    0.3%
  960     169.1      1.03    0.6%
  980     172.8      0.51    0.2%
 1000     176.7     0.526    0.2%
 1020     179.1     1.166    0.6%

Quality and confidence:
param     error
q         0.001

Model:
Time ~=    34.83
    + q    0.139
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.17
    + c    69.15
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     28.73     0.674    2.3%
    2     171.2     1.849    1.0%
    4     306.6     1.601    0.5%
    6     440.8     7.833    1.7%
    8       576     1.842    0.3%
   10       715     1.549    0.2%
   12     850.5     7.037    0.8%
   14     997.3     7.747    0.7%
   16      1144     16.86    1.4%
   18      1276     13.26    1.0%
   20      1407     14.21    1.0%
   22      1529     10.41    0.6%
   24      1677     11.48    0.6%
   26      1837     15.74    0.8%
   28      1964     13.49    0.6%
   30      2108     13.88    0.6%
   32      2240     10.25    0.4%
   34      2386     22.84    0.9%
   36      2540     13.68    0.5%
   38      2661      18.6    0.6%
   40      2788     7.648    0.2%
   42      2919     5.803    0.1%
   44      3041      20.2    0.6%
   46      3176     11.06    0.3%
   48      3314     9.722    0.2%
   50      3502     14.17    0.4%
   52      3646     12.08    0.3%
   54      3776     20.75    0.5%
   56      3912     12.91    0.3%
   58      4057     23.95    0.5%
   60      4159      10.1    0.2%
   62      4299     27.99    0.6%
   64      4442     12.84    0.2%
   66      4588     19.73    0.4%
   68      4719     18.14    0.3%
   70      4873     18.68    0.3%
   72      5013     21.11    0.4%
   74      5139     17.44    0.3%
   76      5278     14.14    0.2%
   78      5431     12.85    0.2%
   80      5553     12.79    0.2%
   82      5668     8.738    0.1%
   84      5793     14.28    0.2%
   86      5940      16.2    0.2%
   88      6059     13.43    0.2%
   90      6233     28.11    0.4%
   92      6339     23.79    0.3%
   94      6473     21.94    0.3%
   96      6622     23.77    0.3%
   98      6863     27.63    0.4%
  100      6961     12.25    0.1%
  102      7117     20.51    0.2%
  104      7267     19.16    0.2%
  106      7409     21.28    0.2%
  108      7527     17.89    0.2%
  110      7644     18.15    0.2%
  112      7790     9.941    0.1%
  114      7936     14.53    0.1%
  116      8058     13.76    0.1%
  118      8195     16.87    0.2%
  120      8330     16.11    0.1%
  122      8488     21.78    0.2%
  124      8609     24.87    0.2%
  126      8720     17.06    0.1%
  128      8871     31.29    0.3%

Quality and confidence:
param     error
c         0.029

Model:
Time ~=    23.04
    + c    69.21
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    193.3
    + c    70.44
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     210.5     0.188    0.0%
    2       352     0.867    0.2%
    4     477.2      1.21    0.2%
    6     610.3     2.265    0.3%
    8     756.5     2.065    0.2%
   10     909.5     7.386    0.8%
   12      1028     7.425    0.7%
   14      1199     11.55    0.9%
   16      1336     12.32    0.9%
   18      1460      13.7    0.9%
   20      1582     3.903    0.2%
   22      1726     8.773    0.5%
   24      1859        11    0.5%
   26      2040     4.936    0.2%
   28      2189     11.73    0.5%
   30      2309     16.88    0.7%
   32      2450     13.18    0.5%
   34      2581     10.01    0.3%
   36      2724     8.943    0.3%
   38      2859     14.89    0.5%
   40      2987     14.01    0.4%
   42      3123     7.157    0.2%
   44      3263     12.87    0.3%
   46      3412     17.69    0.5%
   48      3523     11.43    0.3%
   50      3736        13    0.3%
   52      3880     10.47    0.2%
   54      4011     14.07    0.3%
   56      4144      10.5    0.2%
   58      4274     7.545    0.1%
   60      4473      13.4    0.2%
   62      4548     12.29    0.2%
   64      4705     14.34    0.3%
   66      4871     27.68    0.5%
   68      4957     22.47    0.4%
   70      5102     16.49    0.3%
   72      5225     15.46    0.2%
   74      5384     18.98    0.3%
   76      5527     14.35    0.2%
   78      5633     12.08    0.2%
   80      5774     16.44    0.2%
   82      5911     9.908    0.1%
   84      6092     44.86    0.7%
   86      6177     10.35    0.1%
   88      6314     30.19    0.4%
   90      6467     24.34    0.3%
   92      6585     24.79    0.3%
   94      6714     13.16    0.1%
   96      6832     20.71    0.3%
   98      7176     17.86    0.2%
  100      7309     23.97    0.3%
  102      7442     19.85    0.2%
  104      7563     27.39    0.3%
  106      7750     23.04    0.2%
  108      7865        20    0.2%
  110      7994     24.23    0.3%
  112      8129     29.83    0.3%
  114      8257     22.28    0.2%
  116      8389     39.44    0.4%
  118      8541     13.22    0.1%
  120      8681     17.24    0.1%
  122      8828     25.94    0.2%
  124      8947     19.85    0.2%
  126      9077     21.39    0.2%
  128      9210      35.9    0.3%

Quality and confidence:
param     error
c         0.048

Model:
Time ~=    182.6
    + c    70.58
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    255.6
    + c    165.9
    + s    1.756
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2062     13.01    0.6%
    1  1024      2244     11.74    0.5%
    2  1024      2401     8.526    0.3%
    3  1024      2397     8.681    0.3%
    4  1024      2739     18.85    0.6%
    5  1024      2902     11.88    0.4%
    6  1024      2884     10.22    0.3%
    7  1024      3230     16.58    0.5%
    8  1024      3391     6.629    0.1%
    9  1024      3480     10.67    0.3%
   10  1024      3743     18.32    0.4%
   11  1024      3909     16.87    0.4%
   12  1024      3885     22.36    0.5%
   13  1024      4264     11.74    0.2%
   14  1024      4394     9.355    0.2%
   15  1024      4414        11    0.2%
   16  1024      4718     16.47    0.3%
   17  1024      4913     14.89    0.3%
   18  1024      4899     17.24    0.3%
   19  1024      5234     19.22    0.3%
   20  1024      5413     16.83    0.3%
   21  1024      5377     17.84    0.3%
   22  1024      5718     11.53    0.2%
   23  1024      5885     26.49    0.4%
   24  1024      5852     18.44    0.3%
   25  1024      6248      15.3    0.2%
   26  1024      6384     19.55    0.3%
   27  1024      6408     25.28    0.3%
   28  1024      6746     23.49    0.3%
   29  1024      6876        13    0.1%
   30  1024      6872     19.38    0.2%
   31  1024      7209     20.51    0.2%
   32  1024      7387     23.16    0.3%
   33  1024      7430     36.73    0.4%
   34  1024      7767     20.63    0.2%
   35  1024      7911     35.97    0.4%
   36  1024      7875     13.42    0.1%
   37  1024      8238     21.99    0.2%
   38  1024      8368     12.67    0.1%
   39  1024      8386     39.68    0.4%
   40  1024      8725     36.07    0.4%
   41  1024      8882     24.39    0.2%
   42  1024      8870      21.7    0.2%
   43  1024      9190     29.84    0.3%
   44  1024      9337     27.82    0.2%
   45  1024      9339     22.69    0.2%
   46  1024      9678     30.58    0.3%
   47  1024      9845     14.34    0.1%
   48  1024      9825     22.63    0.2%
   49  1024     10250     23.22    0.2%
   50  1024     10420     26.65    0.2%
   51  1024     10400      24.5    0.2%
   52  1024     10750     21.81    0.2%
   53  1024     10910     26.76    0.2%
   54  1024     10870     31.18    0.2%
   55  1024     11230     30.97    0.2%
   56  1024     11410     24.33    0.2%
   57  1024     11390     52.56    0.4%
   58  1024     11730     39.48    0.3%
   59  1024     11870     44.11    0.3%
   60  1024     11860     41.13    0.3%
   61  1024     12200     35.93    0.2%
   62  1024     12320     21.98    0.1%
   63  1024     12330     53.28    0.4%
   64     0     10860     40.17    0.3%
   64    20     10880     21.17    0.1%
   64    40     10910     34.37    0.3%
   64    60     10940      18.7    0.1%
   64    80     10970     28.73    0.2%
   64   100     11030     28.89    0.2%
   64   120     11050     32.79    0.2%
   64   140     11060      28.9    0.2%
   64   160     11390     114.9    1.0%
   64   180     11140     24.15    0.2%
   64   200     11190     13.37    0.1%
   64   220     11260     55.43    0.4%
   64   240     11250     21.83    0.1%
   64   260     11310     19.31    0.1%
   64   280     11330     29.78    0.2%
   64   300     11390     22.34    0.1%
   64   320     11380     24.83    0.2%
   64   340     11430     21.04    0.1%
   64   360     11460     42.56    0.3%
   64   380     11500     20.49    0.1%
   64   400     11540     52.77    0.4%
   64   420     11570     20.48    0.1%
   64   440     11610        29    0.2%
   64   460     11650     21.87    0.1%
   64   480     11680     17.47    0.1%
   64   500     11730     50.68    0.4%
   64   520     11740     17.62    0.1%
   64   540     11770     29.84    0.2%
   64   560     11820     28.99    0.2%
   64   580     11850     19.73    0.1%
   64   600     11880     27.58    0.2%
   64   620     11950     22.54    0.1%
   64   640     11970     24.68    0.2%
   64   660     12000     20.19    0.1%
   64   680     12040      36.4    0.3%
   64   700     12060        31    0.2%
   64   720     12100     23.14    0.1%
   64   740     12120     38.69    0.3%
   64   760     12160     47.12    0.3%
   64   780     12210     21.37    0.1%
   64   800     12250     18.39    0.1%
   64   820     12280     29.39    0.2%
   64   840     12310     15.12    0.1%
   64   860     12380     64.68    0.5%
   64   880     12360     31.17    0.2%
   64   900     12410     28.55    0.2%
   64   920     12450     33.73    0.2%
   64   940     12500     19.93    0.1%
   64   960     12500     22.21    0.1%
   64   980     12660     66.94    0.5%
   64  1000     12620     25.62    0.2%
   64  1020     12640     30.83    0.2%
   64  1024     12650     42.45    0.3%

Quality and confidence:
param     error
c         0.129
s         0.008

Model:
Time ~=    242.5
    + c    165.8
    + s    1.744
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    180.2
    + s    1.719
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     181.9     1.525    0.8%
   20     213.1     0.777    0.3%
   40     248.2     0.428    0.1%
   60     286.7     7.921    2.7%
   80     317.9     1.153    0.3%
  100     351.8     0.993    0.2%
  120     393.2     13.79    3.5%
  140       421     0.652    0.1%
  160     460.7     10.71    2.3%
  180     495.6     12.81    2.5%
  200     525.3      4.54    0.8%
  220     561.1     9.721    1.7%
  240     598.2     10.38    1.7%
  260     628.2      4.74    0.7%
  280     672.1     15.96    2.3%
  300     698.4     9.151    1.3%
  320     728.2     1.117    0.1%
  340     767.7     8.855    1.1%
  360     801.2     10.48    1.3%
  380     835.9     11.36    1.3%
  400     877.1     12.17    1.3%
  420     904.3     11.68    1.2%
  440     939.7     13.28    1.4%
  460     975.8     11.01    1.1%
  480      1027      10.5    1.0%
  500      1047     13.73    1.3%
  520      1082     14.93    1.3%
  540      1117     15.23    1.3%
  560      1156     16.33    1.4%
  580      1183     10.93    0.9%
  600      1224     15.44    1.2%
  620      1269     13.42    1.0%
  640      1287     11.09    0.8%
  660      1321      14.5    1.0%
  680      1364     17.59    1.2%
  700      1392     13.15    0.9%
  720      1438     18.39    1.2%
  740      1460     13.46    0.9%
  760      1497     13.42    0.8%
  780      1544     16.07    1.0%
  800      1574     15.39    0.9%
  820      1608     16.51    1.0%
  840      1641     14.56    0.8%
  860      1666     15.29    0.9%
  880      1743     8.671    0.4%
  900      1775     3.045    0.1%
  920      1773     14.29    0.8%
  940      1807     14.57    0.8%
  960      1841     16.09    0.8%
  980      1881     12.87    0.6%
 1000      1908     14.56    0.7%
 1020      1959     18.77    0.9%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    178.6
    + s    1.742
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    133.4
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    133.4
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    66.72
    + c    71.14
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     59.46     0.159    0.2%
    1     135.2     0.801    0.5%
    2     206.2     0.274    0.1%
    3     275.2     1.755    0.6%
    4     348.2     0.917    0.2%
    5     414.8      0.64    0.1%
    6     482.7      1.11    0.2%
    7     565.9     5.475    0.9%
    8     632.2     9.344    1.4%
    9     702.8     4.083    0.5%
   10       784     13.06    1.6%
   11     850.2     10.41    1.2%
   12     922.6     18.77    2.0%
   13      1012     11.71    1.1%
   14      1066     14.99    1.4%
   15      1147     16.95    1.4%
   16      1201     15.63    1.3%
   17      1279     16.37    1.2%
   18      1351      16.2    1.1%
   19      1434     2.795    0.1%
   20      1485     15.19    1.0%
   21      1554     17.55    1.1%
   22      1622     15.88    0.9%
   23      1695     11.46    0.6%
   24      1765     13.31    0.7%
   25      1863     15.42    0.8%
   26      1929     13.94    0.7%
   27      1995     13.45    0.6%
   28      2059     13.23    0.6%
   29      2128     15.15    0.7%
   30      2192     14.48    0.6%
   31      2258     13.89    0.6%
   32      2344     10.16    0.4%
   33      2418     15.81    0.6%
   34      2500      16.9    0.6%
   35      2567     5.245    0.2%
   36      2627     12.75    0.4%
   37      2699     11.55    0.4%
   38      2747     12.07    0.4%
   39      2833     10.59    0.3%
   40      2909     5.642    0.1%
   41      2972     15.71    0.5%
   42      3041     11.37    0.3%
   43      3232     17.87    0.5%
   44      3174     11.37    0.3%
   45      3242     17.09    0.5%
   46      3321     10.59    0.3%
   47      3518      5.91    0.1%
   48      3449     16.63    0.4%
   49      3582      17.6    0.4%
   50      3644     12.12    0.3%
   51      3717     6.923    0.1%
   52      3781     6.391    0.1%
   53      3856     15.23    0.3%
   54      3935     17.72    0.4%
   55      3981     18.96    0.4%
   56      4059     9.323    0.2%
   57      4123     17.16    0.4%
   58      4202     14.38    0.3%
   59      4273     14.92    0.3%
   60      4324     12.92    0.2%
   61      4400     10.66    0.2%
   62      4480     25.59    0.5%
   63      4538     15.04    0.3%
   64      4621     8.774    0.1%

Quality and confidence:
param     error
c         0.053

Model:
Time ~=    64.65
    + c    71.32
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.41
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.41
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    185.8
    + r     70.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.3      0.64    0.3%
    1     250.7      0.34    0.1%
    2       322     0.534    0.1%
    3     393.4     4.356    1.1%
    4       464     7.249    1.5%
    5     530.3     0.745    0.1%
    6     609.6     11.82    1.9%
    7     683.9     1.224    0.1%
    8     757.6     10.66    1.4%
    9     832.8     12.51    1.5%
   10     893.6      8.54    0.9%
   11     955.7     1.132    0.1%
   12      1027     2.093    0.2%
   13      1103     12.01    1.0%
   14      1177     11.01    0.9%
   15      1242     10.34    0.8%
   16      1323     14.74    1.1%
   17      1382     7.786    0.5%
   18      1464     11.63    0.7%
   19      1522     11.57    0.7%
   20      1586     6.156    0.3%

Quality and confidence:
param     error
r          0.12

Model:
Time ~=    185.1
    + r    70.61
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    184.1
    + r    70.46
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.3     0.543    0.2%
    1     251.3     0.309    0.1%
    2     321.8      0.35    0.1%
    3     390.5     0.573    0.1%
    4     462.3     0.798    0.1%
    5     530.6     1.116    0.2%
    6     599.8     1.104    0.1%
    7     683.1     1.154    0.1%
    8     754.1     3.802    0.5%
    9       831     11.49    1.3%
   10     897.4     12.94    1.4%
   11     970.2     11.39    1.1%
   12      1033     10.65    1.0%
   13      1103     10.61    0.9%
   14      1180      11.4    0.9%
   15      1250     14.33    1.1%
   16      1319     12.44    0.9%
   17      1382     11.94    0.8%
   18      1454     13.47    0.9%
   19      1526     12.13    0.7%
   20      1596     14.02    0.8%

Quality and confidence:
param     error
r         0.123

Model:
Time ~=    183.4
    + r    70.84
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    175.7
    + r    73.61
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.3      1.76    0.9%
    1     250.6     0.167    0.0%
    2     322.4     1.267    0.3%
    3     391.1     1.609    0.4%
    4     462.4     0.777    0.1%
    5     532.6     2.156    0.4%
    6     600.4     1.835    0.3%
    7     688.3     8.338    1.2%
    8     759.7     11.42    1.5%
    9     837.3     8.525    1.0%
   10     899.8     10.64    1.1%
   11     957.3     4.632    0.4%
   12      1048     3.997    0.3%
   13      1123     2.324    0.2%
   14      1227     5.184    0.4%
   15      1283     5.554    0.4%
   16      1350      4.93    0.3%
   17      1446     4.805    0.3%
   18      1515     2.392    0.1%
   19      1587     2.555    0.1%
   20      1609     11.66    0.7%

Quality and confidence:
param     error
r         0.179

Model:
Time ~=      172
    + r    73.68
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    191.9
    + r    213.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.4     1.425    0.7%
    1     396.5     0.738    0.1%
    2     609.2     2.379    0.3%
    3     832.9     10.31    1.2%
    4      1048     16.15    1.5%
    5      1271     10.75    0.8%
    6      1467     12.56    0.8%
    7      1697     14.49    0.8%
    8      1916     12.66    0.6%
    9      2116     11.35    0.5%
   10      2328     11.17    0.4%
   11      2545     10.74    0.4%
   12      2752      12.6    0.4%
   13      2971        14    0.4%
   14      3182     15.48    0.4%
   15      3407     14.12    0.4%
   16      3612     16.87    0.4%
   17      3836     21.39    0.5%
   18      4036     17.97    0.4%
   19      4250     9.892    0.2%
   20      4467     14.84    0.3%

Quality and confidence:
param     error
r         0.165

Model:
Time ~=    190.9
    + r    213.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    197.8
    + r    68.87
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     192.1     1.696    0.8%
    1       264     0.362    0.1%
    2     334.4     0.382    0.1%
    3     404.9     4.101    1.0%
    4     473.2     1.021    0.2%
    5     542.9     0.411    0.0%
    6     621.4        12    1.9%
    7     682.4     1.516    0.2%
    8     753.5     8.391    1.1%
    9     825.5     13.22    1.6%
   10       891     7.066    0.7%
   11     972.3     15.75    1.6%
   12      1029     10.77    1.0%
   13      1107     14.54    1.3%
   14      1160     7.543    0.6%
   15      1230     8.919    0.7%
   16      1306     14.62    1.1%
   17      1369     12.56    0.9%
   18      1440     12.33    0.8%
   19      1510     13.75    0.9%
   20      1581     12.11    0.7%

Quality and confidence:
param     error
r         0.126

Model:
Time ~=    198.2
    + r    69.19
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    198.3
    + r    68.47
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     192.1     0.468    0.2%
    1     264.2     0.397    0.1%
    2     333.4     0.262    0.0%
    3     403.3     0.723    0.1%
    4     472.4     0.857    0.1%
    5     541.4     1.844    0.3%
    6     612.5      10.3    1.6%
    7     680.7     2.183    0.3%
    8     749.3     2.756    0.3%
    9     822.6     11.89    1.4%
   10     889.7     10.27    1.1%
   11       957     11.04    1.1%
   12      1030     11.34    1.1%
   13      1093     10.17    0.9%
   14      1160      10.8    0.9%
   15      1225     11.88    0.9%
   16      1303     13.38    1.0%
   17      1357     8.253    0.6%
   18      1440     13.94    0.9%
   19      1496     11.81    0.7%
   20      1568     10.03    0.6%

Quality and confidence:
param     error
r         0.114

Model:
Time ~=    198.1
    + r    68.73
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    197.8
    + r    68.08
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.3     0.295    0.1%
    1     263.6     0.489    0.1%
    2       333     0.554    0.1%
    3     403.1     5.175    1.2%
    4     471.9     0.857    0.1%
    5     539.9     1.877    0.3%
    6     607.5     1.771    0.2%
    7     679.4     4.611    0.6%
    8     745.2     2.827    0.3%
    9     811.1     0.888    0.1%
   10     889.9     9.796    1.1%
   11     945.2     1.206    0.1%
   12      1014     1.165    0.1%
   13      1088        12    1.1%
   14      1146     4.109    0.3%
   15      1225     18.04    1.4%
   16      1282     10.42    0.8%
   17      1359     12.23    0.9%
   18      1432     16.75    1.1%
   19      1489     10.81    0.7%
   20      1586     6.676    0.4%

Quality and confidence:
param     error
r         0.116

Model:
Time ~=    195.2
    + r     68.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    193.5
    + r    68.72
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.1     0.255    0.1%
    1       263     0.255    0.0%
    2     333.5     0.214    0.0%
    3     402.3     0.471    0.1%
    4       466     7.904    1.6%
    5     528.7     1.066    0.2%
    6     600.4     5.892    0.9%
    7     673.2     6.021    0.8%
    8     738.4     7.242    0.9%
    9     806.2      2.82    0.3%
   10     875.9     8.017    0.9%
   11     963.5     13.64    1.4%
   12      1015     8.562    0.8%
   13      1106      4.39    0.3%
   14      1176     2.625    0.2%
   15      1232     13.63    1.1%
   16      1299     12.75    0.9%
   17      1357     5.208    0.3%
   18      1430     12.21    0.8%
   19      1501     12.53    0.8%
   20      1569     12.73    0.8%

Quality and confidence:
param     error
r         0.126

Model:
Time ~=    191.2
    + r    69.11
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    198.2
    + r    171.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.9      0.54    0.2%
    1       370      0.89    0.2%
    2     541.7     1.209    0.2%
    3     712.5     2.051    0.2%
    4     875.6     9.332    1.0%
    5      1057     11.08    1.0%
    6      1228     6.679    0.5%
    7      1410     11.09    0.7%
    8      1575     9.036    0.5%
    9      1750     10.08    0.5%
   10      1924     8.883    0.4%
   11      2089     6.203    0.2%
   12      2248     11.12    0.4%
   13      2418     13.92    0.5%
   14      2607     10.78    0.4%
   15      2762     8.153    0.2%
   16      2937     6.261    0.2%
   17      3118     17.24    0.5%
   18      3277     14.34    0.4%
   19      3476     10.34    0.2%
   20      3649     20.66    0.5%

Quality and confidence:
param     error
r         0.153

Model:
Time ~=    196.1
    + r    171.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    105.9
    + r    29.95
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     99.49     0.347    0.3%
    1     131.8     0.329    0.2%
    2     160.7     0.464    0.2%
    3     191.2     0.452    0.2%
    4     219.9     0.408    0.1%
    5     261.8     0.889    0.3%
    6     291.1     0.535    0.1%
    7     323.5     2.485    0.7%
    8       348     1.347    0.3%
    9     382.8     3.342    0.8%
   10     404.9     1.727    0.4%
   11     439.1     1.688    0.3%
   12     468.2     2.052    0.4%
   13       498     4.475    0.8%
   14     522.9     0.729    0.1%
   15     558.5     11.09    1.9%
   16     584.1      4.96    0.8%
   17     610.4     4.831    0.7%
   18     638.4     2.581    0.4%
   19     678.6     10.42    1.5%
   20     697.5     4.954    0.7%

Quality and confidence:
param     error
r         0.073

Model:
Time ~=    105.6
    + r    29.96
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    186.6
    + r    66.39
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     195.4     0.472    0.2%
    1       247     0.335    0.1%
    2     314.9     2.077    0.6%
    3     379.7     1.781    0.4%
    4     446.4     1.809    0.4%
    5     510.6     1.682    0.3%
    6     578.3      5.68    0.9%
    7     656.2     1.587    0.2%
    8     721.7     1.967    0.2%
    9     793.5     11.89    1.4%
   10     870.4     4.645    0.5%
   11     938.3     1.288    0.1%
   12       977     1.041    0.1%
   13      1046     8.616    0.8%
   14      1125     12.97    1.1%
   15      1189     13.36    1.1%
   16      1255     14.41    1.1%
   17      1332     7.986    0.5%
   18      1379     10.32    0.7%
   19      1440      3.41    0.2%
   20      1505     9.826    0.6%

Quality and confidence:
param     error
r         0.135

Model:
Time ~=    186.4
    + r    66.62
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    265.7
    + n    11.01
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     247.5     0.193    0.0%
   20     487.3     5.265    1.0%
   40     706.3     10.76    1.5%
   60     927.3     9.801    1.0%
   80      1150     11.72    1.0%
  100      1384     11.96    0.8%
  120      1599     18.18    1.1%
  140      1833     15.28    0.8%
  160      2050     15.29    0.7%
  180      2261     16.83    0.7%
  200      2483     31.04    1.2%
  220      2720     66.94    2.4%
  240      2913     30.02    1.0%
  260      3121     22.99    0.7%
  280      3336     19.76    0.5%
  300      3589     43.24    1.2%
  320      3804     22.27    0.5%
  340      3993     37.24    0.9%
  360      4340     76.25    1.7%
  380      4415     22.57    0.5%
  400      4638     30.78    0.6%
  420      4878     26.54    0.5%
  440      5071     31.77    0.6%
  460      5376     58.36    1.0%
  480      5506     29.12    0.5%
  500      5759      17.8    0.3%
  520      6020     76.12    1.2%
  540      6270      90.9    1.4%
  560      6405     37.89    0.5%
  580      6742     121.4    1.8%
  600      6877     122.2    1.7%
  620      7078     50.97    0.7%
  640      7314     50.09    0.6%
  660      7480     38.09    0.5%
  680      7830       133    1.6%
  700      7966     26.43    0.3%
  720      8189     41.46    0.5%
  740      8503     157.5    1.8%
  760      8826       120    1.3%
  780      8933     114.5    1.2%
  800      9151     107.2    1.1%
  820      9276      83.1    0.8%
  840      9619     159.3    1.6%
  860      9824     111.3    1.1%
  880      9995       162    1.6%
  900     10120     111.1    1.0%
  920     10410     78.65    0.7%
  940     10650     77.16    0.7%
  960     11000     175.4    1.5%
  980     10980      74.8    0.6%
 1000     11470     210.2    1.8%
 1020     11660     175.3    1.5%

Quality and confidence:
param     error
n         0.014

Model:
Time ~=    251.6
    + n    11.09
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      188
    + r    2.692
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     188.6     1.572    0.8%
    1     190.6     0.139    0.0%

Quality and confidence:
param     error
r         0.526

Model:
Time ~=    188.6
    + r    2.068
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    176.9
    + n    0.171
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     176.5     0.266    0.1%
   20     179.8     0.225    0.1%
   40     183.4     0.355    0.1%
   60     187.4     0.761    0.4%
   80     190.6     1.489    0.7%
  100     194.3     0.458    0.2%
  120     197.1      0.36    0.1%
  140     200.2     0.283    0.1%
  160     203.6     0.652    0.3%
  180     206.9     0.406    0.1%
  200     211.1     0.905    0.4%
  220     215.1     1.444    0.6%
  240     218.2     1.578    0.7%
  260     222.8     5.257    2.3%
  280     225.4     1.882    0.8%
  300     226.9     0.265    0.1%
  320     232.2     1.421    0.6%
  340     236.7     2.448    1.0%
  360     237.3     0.427    0.1%
  380     243.9     1.707    0.6%
  400     244.2     0.798    0.3%
  420     247.5     1.344    0.5%
  440     250.9     0.741    0.2%
  460     255.5      2.48    0.9%
  480     257.6     0.661    0.2%
  500     263.5     2.054    0.7%
  520     270.7      5.34    1.9%
  540     273.3     4.715    1.7%
  560       276      4.89    1.7%
  580     282.5     5.812    2.0%
  600     286.3     4.791    1.6%
  620     285.7     6.387    2.2%
  640     287.6     4.991    1.7%
  660     294.7     5.242    1.7%
  680     298.8     5.979    2.0%
  700     298.2     5.173    1.7%
  720     315.5     6.704    2.1%
  740     311.4     4.997    1.6%
  760     313.4     4.845    1.5%
  780     317.5     6.333    1.9%
  800     318.2     6.286    1.9%
  820     320.9     5.733    1.7%
  840     324.6     7.062    2.1%
  860     327.8     5.622    1.7%
  880     332.7     4.655    1.3%
  900     339.3     6.793    2.0%
  920     345.8      9.46    2.7%
  940     343.2     6.236    1.8%
  960     348.5     5.824    1.6%
  980     349.4     5.174    1.4%
 1000     350.2     4.935    1.4%
 1020     356.4     6.226    1.7%

Quality and confidence:
param     error
n             0

Model:
Time ~=    175.3
    + n     0.18
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    177.6
    + r    83.33
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     177.7     0.251    0.1%
    1     261.1     0.576    0.2%

Quality and confidence:
param     error
r         0.209

Model:
Time ~=    177.7
    + r     83.4
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    195.6
    + r    238.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     192.6     0.801    0.4%
    1     421.4     0.474    0.1%
    2     674.2     2.312    0.3%
    3     903.1     8.908    0.9%
    4      1154      11.7    1.0%
    5      1392     11.48    0.8%
    6      1644       3.7    0.2%
    7      1863     8.725    0.4%
    8      2102     11.76    0.5%
    9      2367     7.346    0.3%
   10      2589     12.52    0.4%
   11      2826     14.79    0.5%
   12      3057     13.69    0.4%
   13      3289     8.964    0.2%
   14      3540      9.44    0.2%
   15      3758     8.162    0.2%
   16      4005      15.7    0.3%
   17      4269      13.5    0.3%
   18      4501     9.394    0.2%
   19      4727     12.19    0.2%
   20      4968     18.59    0.3%

Quality and confidence:
param     error
r         0.168

Model:
Time ~=    195.8
    + r    238.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    192.5
    + r    407.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     188.6     0.409    0.2%
    1     597.5     1.197    0.2%
    2      1006      11.1    1.1%
    3      1408     6.944    0.4%
    4      1847     8.717    0.4%
    5      2230     11.09    0.4%
    6      2637     8.653    0.3%
    7      3046     15.74    0.5%
    8      3451     14.31    0.4%
    9      3894     13.75    0.3%
   10      4264      10.8    0.2%
   11      4688     9.536    0.2%
   12      5107     15.54    0.3%
   13      5481      23.6    0.4%
   14      5896     22.71    0.3%
   15      6325     31.92    0.5%
   16      6705     22.84    0.3%
   17      7213     39.71    0.5%
   18      7547     26.51    0.3%
   19      7928     27.24    0.3%
   20      8327     35.15    0.4%

Quality and confidence:
param     error
r         0.343

Model:
Time ~=    192.8
    + r    408.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    683.1
    + t    400.7
    + n    79.35
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      1910     14.57    0.7%
    1    16      2373     15.22    0.6%
    2    16      2778     12.49    0.4%
    3    16      3185     14.43    0.4%
    4     0      2266     13.21    0.5%
    4     1      2377     16.02    0.6%
    4     2      2445     10.77    0.4%
    4     3      2478     9.298    0.3%
    4     4      2574     11.28    0.4%
    4     5      2668     13.31    0.4%
    4     6      2733     23.28    0.8%
    4     7      2789     13.71    0.4%
    4     8      2876     16.93    0.5%
    4     9      2956     9.968    0.3%
    4    10      3064      21.5    0.7%
    4    11      3146     11.08    0.3%
    4    12      3190     18.02    0.5%
    4    13      3319      18.5    0.5%
    4    14      3368     12.63    0.3%
    4    15      3479        23    0.6%
    4    16      3539      16.1    0.4%

Quality and confidence:
param     error
t         2.002
n         0.394

Model:
Time ~=      669
    + t    397.6
    + n    80.23
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    122.3
    + r    47.89
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     107.3     1.096    1.0%
    1     170.6     0.358    0.2%
    2     218.1     0.785    0.3%
    3     269.8     1.299    0.4%
    4     314.5     7.519    2.3%
    5     359.7     3.047    0.8%
    6     409.5     4.078    0.9%
    7     456.5     4.131    0.9%
    8     505.3     2.551    0.5%
    9     545.7     4.937    0.9%
   10     599.3     8.184    1.3%
   11     648.5     6.878    1.0%
   12     701.7     10.53    1.5%
   13     760.3     8.798    1.1%
   14     794.3     13.66    1.7%
   15     836.4     12.26    1.4%
   16       897     6.839    0.7%
   17       936     11.78    1.2%
   18     992.7     8.437    0.8%
   19      1029     9.895    0.9%
   20      1068     12.75    1.1%

Quality and confidence:
param     error
r         0.115

Model:
Time ~=    120.2
    + r    48.07
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    193.6
    + r    317.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     178.4     0.271    0.1%
    1     532.3     6.804    1.2%
    2     844.6     5.789    0.6%
    3      1153     7.455    0.6%
    4      1461     17.14    1.1%
    5      1792     12.67    0.7%
    6      2075     7.058    0.3%
    7      2383      3.84    0.1%
    8      2687     13.79    0.5%
    9      3050     10.51    0.3%
   10      3377     12.19    0.3%
   11      3689     19.28    0.5%
   12      4002     15.64    0.3%
   13      4323      16.9    0.3%
   14      4604     16.61    0.3%
   15      4918     19.32    0.3%
   16      5227     10.43    0.1%
   17      5539     17.25    0.3%
   18      5997     20.87    0.3%
   19      6326     50.33    0.7%
   20      6579     19.42    0.2%

Quality and confidence:
param     error
r         0.477

Model:
Time ~=    180.4
    + r    318.8
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    417.1
    + n    27.36
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     397.6     0.563    0.1%
    1     439.6     0.994    0.2%
    2     476.9     1.065    0.2%
    3     499.9     3.679    0.7%
    4     529.5     1.206    0.2%
    5     561.3      3.23    0.5%
    6     581.7      2.69    0.4%
    7     611.8     2.105    0.3%
    8     643.2     7.936    1.2%
    9       645     1.994    0.3%
   10     688.9     2.313    0.3%
   11     705.4     6.144    0.8%
   12     736.6     11.87    1.6%
   13     767.8     3.785    0.4%
   14     797.6     7.046    0.8%
   15     860.4     10.61    1.2%
   16     845.8     3.875    0.4%

Quality and confidence:
param     error
n         0.199

Model:
Time ~=      413
    + n     27.7
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r      845
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     190.8     0.347    0.1%
    1     859.8     4.578    0.5%
    2      1601     8.121    0.5%
    3      2386     13.84    0.5%
    4      3188     10.01    0.3%
    5      3992     8.507    0.2%
    6      4794     22.68    0.4%
    7      5591     17.43    0.3%
    8      6401     8.476    0.1%
    9      7299     25.84    0.3%
   10      8099     24.58    0.3%
   11      8984     30.27    0.3%
   12      9924     39.07    0.3%
   13     10750     24.52    0.2%
   14     11570      57.2    0.4%
   15     12410     44.44    0.3%
   16     13310     34.87    0.2%
   17     14160     15.77    0.1%
   18     15320     38.01    0.2%
   19     16280     51.49    0.3%
   20     17030     35.74    0.2%

Quality and confidence:
param     error
r         2.057

Model:
Time ~=        0
    + r      849
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.55
    + r    439.6
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     180.7     0.731    0.4%
    1     560.8     4.391    0.7%
    2     975.9     10.36    1.0%
    3      1407     12.63    0.8%
    4      1803     11.15    0.6%
    5      2233     10.46    0.4%
    6      2658     9.451    0.3%
    7      3089      18.3    0.5%
    8      3495     17.06    0.4%
    9      4019     10.96    0.2%
   10      4453     24.14    0.5%
   11      4843     36.76    0.7%
   12      5290     23.15    0.4%
   13      5740     17.39    0.3%
   14      6196     29.97    0.4%
   15      6640     26.35    0.3%
   16      7061     11.19    0.1%
   17      7608     29.14    0.3%
   18      8083     11.68    0.1%
   19      8492     32.34    0.3%
   20      9000     46.34    0.5%

Quality and confidence:
param     error
r         0.748

Model:
Time ~=     53.5
    + r    441.4
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r      555
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     191.1     0.449    0.2%
    1     639.8     3.284    0.5%
    2      1126     6.394    0.5%
    3      1667      4.58    0.2%
    4      2185     15.21    0.6%
    5      2737     17.07    0.6%
    6      3266     13.54    0.4%
    7      3796     10.64    0.2%
    8      4331     15.35    0.3%
    9      4921     12.98    0.2%
   10      5418     36.86    0.6%
   11      5990     28.24    0.4%
   12      6601      43.1    0.6%
   13      7216     39.28    0.5%
   14      7738      43.1    0.5%
   15      8434     18.45    0.2%
   16      8896     34.24    0.3%
   17      9394      61.9    0.6%
   18      9987     37.34    0.3%
   19     10730     56.44    0.5%
   20     11300     27.48    0.2%

Quality and confidence:
param     error
r         1.157

Model:
Time ~=        0
    + r    557.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    377.5
    + n    54.79
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     360.6      0.96    0.2%
    1     428.9     1.072    0.2%
    2     495.3     1.772    0.3%
    3     547.8     2.138    0.3%
    4     603.8     2.105    0.3%
    5       650     1.953    0.3%
    6     704.4     2.574    0.3%
    7     758.7     2.865    0.3%
    8     812.4     2.317    0.2%
    9     872.9     10.41    1.1%
   10     921.2     4.998    0.5%
   11     992.7     11.68    1.1%
   12      1042      14.9    1.4%
   13      1093     15.89    1.4%
   14      1136     8.968    0.7%
   15      1225     13.43    1.0%
   16      1256     17.05    1.3%

Quality and confidence:
param     error
n         0.192

Model:
Time ~=    373.8
    + n     55.5
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    60.21
    + r      539
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     194.7     0.397    0.2%
    1     691.6     13.13    1.8%
    2      1177     4.502    0.3%
    3      1692     11.11    0.6%
    4      2193     17.56    0.8%
    5      2730      18.1    0.6%
    6      3247     8.892    0.2%
    7      3786     22.34    0.5%
    8      4255     25.66    0.6%
    9      4888     19.06    0.3%
   10      5369     11.93    0.2%
   11      5959      23.5    0.3%
   12      6526     26.82    0.4%
   13      7020     26.88    0.3%
   14      7556     23.49    0.3%
   15      8089     32.77    0.4%
   16      8629     37.55    0.4%
   17      9231      36.5    0.3%
   18      9932     44.34    0.4%
   19     10510     10.26    0.0%
   20     11060     57.83    0.5%

Quality and confidence:
param     error
r          1.09

Model:
Time ~=    37.48
    + r    542.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    772.7
    + n    63.84
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     685.3     1.576    0.2%
    1     815.1     4.906    0.6%
    2     915.7     4.832    0.5%
    3     988.3     15.32    1.5%
    4      1051     11.23    1.0%
    5      1099        12    1.0%
    6      1158     9.522    0.8%
    7      1223     13.48    1.1%
    8      1275     7.674    0.6%
    9      1348     14.14    1.0%
   10      1394      10.3    0.7%
   11      1471     8.123    0.5%
   12      1524     9.748    0.6%
   13      1586     12.38    0.7%
   14      1664     12.32    0.7%
   15      1734     5.739    0.3%
   16      1797     3.667    0.2%

Quality and confidence:
param     error
n         0.406

Model:
Time ~=    760.5
    + n    64.75
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    89.14
    + r     2534
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     194.1     0.322    0.1%
    1      2673     10.43    0.3%
    2      5203     17.98    0.3%
    3      7700     27.67    0.3%
    4     10240     18.73    0.1%
    5     12730     42.44    0.3%
    6     15210     34.77    0.2%
    7     17700     18.31    0.1%
    8     20260     30.97    0.1%
    9     22730     62.72    0.2%
   10     25500      29.5    0.1%
   11     27890      20.5    0.0%
   12     30470     65.44    0.2%
   13     32990      24.6    0.0%
   14     35490     31.58    0.0%
   15     38090     30.48    0.0%
   16     40710     53.93    0.1%
   17     43030     42.85    0.0%
   18     45730     46.67    0.1%
   19     48370     30.98    0.0%
   20     51060     39.62    0.0%

Quality and confidence:
param     error
r         1.228

Model:
Time ~=    56.43
    + r     2537
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    506.1
    + r    15820
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     193.3     0.483    0.2%
    1     17270     29.73    0.1%
    2     34330     41.53    0.1%
    3     51370      51.6    0.1%
    4     68970     99.32    0.1%
    5     86190     55.88    0.0%
    6     94820     40.78    0.0%
    7    110600     88.42    0.0%
    8    126500     66.61    0.0%
    9    142400     87.59    0.0%
   10    158300     143.2    0.0%
   11    173900     66.76    0.0%
   12    190000     99.54    0.0%
   13    205700     127.6    0.0%
   14    221700       157    0.0%
   15    237700<truncated>...
```

</details>",10702,2022-01-20T07:21:04Z,0
1684,Robbepop,"> @Robbepop The deprecation of `memory.get` doesn't feel good. It just requires the user to introduce the tedious extra step of allocating a buffer in the common case where we want to allow a dynamically sized buffer. Or how else would be deal with this code:

Why is this only a problem with `wasmi` but not a problem with the other commonly used Wasm runtimes such as [Wasmtime](https://docs.rs/wasmtime/0.33.0/wasmtime/struct.Memory.html) and [Wasmer](https://wasmerio.github.io/wasmer/crates/doc/wasmer/sys/externals/memory/struct.Memory.html)?

It is trivial to create a thin wrapper around this struct in case you want to mimic the old behavior.
I won't repeat here why the old API was going against common API guidelines.

To answer your question: You have 2 options:

1) Allocate a new `vec![0x00; len]` everytime before you write to `wasmi` memory and directly mimic the old behavior.
2) Create a reusable buffer that you use instead to avoid frequent reallocations.

Prefer 2) if you are operating in a hot loop, otherwise it won't matter too much what you do there. If you already do have a reusable byte buffer for other common operations you could start using it here.",10702,2022-01-20T07:56:47Z,0
1685,athei,"It isn't a problem, really. It was just a convenience API to save myself this `vec![0u8; len]` step. I just wanted some advice what to to do in this case. The wasmtime impl just uses this approach. It's fine.",10702,2022-01-20T08:07:36Z,0
1686,pepyakin,Should we run a burn-in just in case?,10702,2022-01-20T12:56:56Z,0
1687,athei,"I put it on ice because it turns out that we have a performance regression. While the weights with regards to instantiation time and host functions go down we have almost 50% regression for instruction weights. @Robbepop confirmed that with a coremark benchmark just now.

burn-in is a good idea after we resolved the regression.",10702,2022-01-20T13:07:53Z,0
1688,Robbepop,"@athei @pepyakin 

Turns out this is more complex than stating that `wasmi` version `0.11` is slow ...

I tested `wasmi` versions `0.9.1`, `0.10.0` and `0.11.0` under all combinations of the following profiles:
```toml
[profile.release]
lto = false # or ""fat""
codegen-units = 16 # or 1
```

The Wasm `coremark` result scores are in the following table:

|  | `0.9.1` | `0.10.0` | `0.11.0` | `v1` |
|:--|:--:|:--:|:--:|:--:|
| `lto = ""fat"", cgu = 1` | 413 | 410 | 377 | **500** |
| `lto = ""fat"", cgu = 16` | 373 | **401** | 371 | 299 |
| `lto = false, cgu = 1` | 430 | **445** | 416 | 151 |
| `lto = false, cgu = 16` | 395 | 415 | **425** | 120 |

# Summary

- For nearly every configuration there is a different fastest version.
- Interpreter engines seem to be very fragile to small changes in their engine code.
- The `v1` implementation is both by far the slowest and by far the fastest engine depending on the profile.
- The `lto = ""fat""` setting is bad for all engines but the `v1` one.
- The `cgu = 1` setting is good for all engines.
- Following those results version `0.10.0` should run fine.

For more information about the huge difference in `v1` visit: https://github.com/paritytech/wasmi/issues/339",10702,2022-01-20T13:34:29Z,0
1689,athei,"Runtime uses `lto = ""fat"", cgu = 16`. Regarding to this numbers we shouldn't see a regression in this case.",10702,2022-01-20T13:40:28Z,0
1690,Robbepop,"> Runtime uses `lto = ""fat"", cgu = 16`. Regarding to this numbers we shouldn't see a regression in this case.

I'd welcome that we at least run benchmarks in order to see what is really happening.
If there is one thing that I learned about those results it is that we should make fewer assumptions about performance.",10702,2022-01-20T13:54:16Z,0
1691,athei,What do you mean? Weights are **the** benchmark.,10702,2022-01-20T14:01:14Z,0
1692,Robbepop,"> What do you mean? Weights are **the** benchmark.

Sorry, i mean benchmarking wasmi version 0.10.0 instead of version 0.11.0.

With this we can better locate the slowdown.",10702,2022-01-20T14:05:10Z,0
1693,athei,/benchmark runtime pallet pallet_contracts,10702,2022-01-20T14:26:21Z,0
1694,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-bump-wasmi"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.599
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.599
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    12.77
    + k    0.825
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     13.48     0.063    0.4%
   20     31.99     0.117    0.3%
   40     47.71     0.231    0.4%
   60     61.97     0.312    0.5%
   80     75.66     0.235    0.3%
  100     91.38       0.3    0.3%
  120     107.4     0.324    0.3%
  140     125.8     0.587    0.4%
  160     141.9     0.699    0.4%
  180       160     0.706    0.4%
  200       174     0.855    0.4%
  220     191.5     0.652    0.3%
  240     208.1     0.575    0.2%
  260     224.1     0.682    0.3%
  280     241.1     0.706    0.2%
  300     257.5     1.128    0.4%
  320     277.3     0.395    0.1%
  340     294.6     1.258    0.4%
  360     309.6     0.441    0.1%
  380     328.9     0.236    0.0%
  400     347.4     2.215    0.6%
  420     361.7       0.6    0.1%
  440     379.2     1.102    0.2%
  460     393.6     0.898    0.2%
  480     410.4     0.946    0.2%
  500     428.2     0.898    0.2%
  520     446.5     0.842    0.1%
  540     465.2      6.04    1.2%
  560     478.8     1.538    0.3%
  580     495.9     2.319    0.4%
  600     512.1     1.468    0.2%
  620     526.5     1.611    0.3%
  640     541.3     0.895    0.1%
  660     560.4     7.203    1.2%
  680     575.3     0.862    0.1%
  700     592.4     2.391    0.4%
  720     606.5     1.276    0.2%
  740     623.7      1.25    0.2%
  760     638.8     1.469    0.2%
  780     654.3     1.654    0.2%
  800     667.9     0.988    0.1%
  820     688.3     1.133    0.1%
  840     705.2     2.034    0.2%
  860     721.3      1.48    0.2%
  880     737.8     1.648    0.2%
  900       754     1.636    0.2%
  920       768     5.368    0.6%
  940     780.3       1.6    0.2%
  960     794.8     1.726    0.2%
  980     827.4     9.877    1.1%
 1000     837.4      9.61    1.1%
 1020       847     4.334    0.5%

Quality and confidence:
param     error
k             0

Model:
Time ~=    13.05
    + k    0.824
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.91
    + q    0.159
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.471      0.05    2.0%
   20     21.89     0.147    0.6%
   40     28.38     0.126    0.4%
   60     34.27     0.127    0.3%
   80     39.66     0.122    0.3%
  100     44.97     0.126    0.2%
  120     50.01     0.197    0.3%
  140     55.45     0.268    0.4%
  160     60.68     0.286    0.4%
  180     65.52     0.154    0.2%
  200     71.25     0.197    0.2%
  220     76.41     0.185    0.2%
  240     81.78     0.276    0.3%
  260     87.32     0.413    0.4%
  280     92.62     0.443    0.4%
  300     88.59     0.269    0.3%
  320     93.35       0.2    0.2%
  340     71.94     0.154    0.2%
  360      95.2     11.83   12.4%
  380     108.2     0.313    0.2%
  400     113.9     0.857    0.7%
  420     118.7     0.256    0.2%
  440     123.8     0.369    0.2%
  460     91.83     0.401    0.4%
  480     94.75     0.284    0.2%
  500     98.74     0.364    0.3%
  520     101.8     0.294    0.2%
  540       106     0.458    0.4%
  560     108.7     0.382    0.3%
  580     111.9     0.221    0.1%
  600       115     0.286    0.2%
  620     118.9     0.472    0.3%
  640     121.3     0.249    0.2%
  660     125.5      0.31    0.2%
  680       128     0.443    0.3%
  700     131.3     0.342    0.2%
  720       135     0.603    0.4%
  740     139.4     0.751    0.5%
  760     143.7     0.827    0.5%
  780     146.6     0.797    0.5%
  800     150.1     0.643    0.4%
  820     153.2     0.542    0.3%
  840     155.9     0.718    0.4%
  860       159     0.502    0.3%
  880     162.3     0.336    0.2%
  900     167.5     0.689    0.4%
  920     169.2     0.744    0.4%
  940     174.6     1.058    0.6%
  960     176.2     0.696    0.3%
  980     179.1     0.466    0.2%
 1000     182.5     0.557    0.3%
 1020     185.8     0.644    0.3%

Quality and confidence:
param     error
q         0.001

Model:
Time ~=    33.96
    + q    0.147
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.52
    + c    66.85
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     28.17     0.297    1.0%
    2     164.5     0.276    0.1%
    4     298.1     0.545    0.1%
    6     424.4     0.351    0.0%
    8     565.7     8.621    1.5%
   10     692.5     0.998    0.1%
   12     828.8     13.19    1.5%
   14     986.6     11.43    1.1%
   16      1111     15.25    1.3%
   18      1228     9.674    0.7%
   20      1374     10.05    0.7%
   22      1486     14.32    0.9%
   24      1615     14.03    0.8%
   26      1790     11.61    0.6%
   28      1920     7.933    0.4%
   30      2033     12.35    0.6%
   32      2168      13.5    0.6%
   34      2310     15.95    0.6%
   36      2427     11.94    0.4%
   38      2577     12.47    0.4%
   40      2703     12.34    0.4%
   42      2822      12.2    0.4%
   44      2948     14.38    0.4%
   46      3083     12.16    0.3%
   48      3223     14.78    0.4%
   50      3393     9.036    0.2%
   52      3523     9.563    0.2%
   54      3650     13.94    0.3%
   56      3785     9.484    0.2%
   58      3914     11.36    0.2%
   60      4043      15.3    0.3%
   62      4166     9.993    0.2%
   64      4296     16.42    0.3%
   66      4450     14.41    0.3%
   68      4587     12.53    0.2%
   70      4723        16    0.3%
   72      4848     17.29    0.3%
   74      4973     20.44    0.4%
   76      5112     17.24    0.3%
   78      5217     13.33    0.2%
   80      5336     9.863    0.1%
   82      5494     16.36    0.2%
   84      5612     8.958    0.1%
   86      5750     28.24    0.4%
   88      5865      18.5    0.3%
   90      6006     14.65    0.2%
   92      6137      17.2    0.2%
   94      6254     10.74    0.1%
   96      6388     18.59    0.2%
   98      6643     18.85    0.2%
  100      6773      14.9    0.2%
  102      6901     17.92    0.2%
  104      7038      10.6    0.1%
  106      7159     24.25    0.3%
  108      7276     14.52    0.1%
  110      7414     11.77    0.1%
  112      7539     6.978    0.0%
  114      7670     17.21    0.2%
  116      7800     11.48    0.1%
  118      7922     10.98    0.1%
  120      8056     24.02    0.2%
  122      8200     36.07    0.4%
  124      8335     17.33    0.2%
  126      8443     18.14    0.2%
  128      8569     15.39    0.1%

Quality and confidence:
param     error
c          0.03

Model:
Time ~=    26.24
    + c    66.92
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    242.9
    + c    62.24
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     247.6     0.273    0.1%
    2     372.4     0.639    0.1%
    4     498.4     6.073    1.2%
    6     613.4      0.82    0.1%
    8       741     1.135    0.1%
   10       869     11.68    1.3%
   12     977.2      4.31    0.4%
   14      1120     2.878    0.2%
   16      1242     11.68    0.9%
   18      1354     2.932    0.2%
   20      1481      13.5    0.9%
   22      1593     9.556    0.5%
   24      1715     13.85    0.8%
   26      1879     10.77    0.5%
   28      2004     12.36    0.6%
   30      2122     12.26    0.5%
   32      2227      10.3    0.4%
   34      2352     12.45    0.5%
   36      2484     7.198    0.2%
   38      2597     12.94    0.4%
   40      2710     12.29    0.4%
   42      2842     11.76    0.4%
   44      2958     11.11    0.3%
   46      3071     16.61    0.5%
   48      3181      12.4    0.3%
   50      3391     9.579    0.2%
   52      3492     12.04    0.3%
   54      3618     12.05    0.3%
   56      3736     10.69    0.2%
   58      3871     11.29    0.2%
   60      3980        11    0.2%
   62      4099     9.574    0.2%
   64      4217     10.49    0.2%
   66      4351     9.272    0.2%
   68      4486     9.844    0.2%
   70      4589     9.789    0.2%
   72      4714     5.508    0.1%
   74      4829      15.5    0.3%
   76      4940     10.61    0.2%
   78      5057     14.71    0.2%
   80      5172     4.915    0.0%
   82      5305     12.25    0.2%
   84      5436     26.02    0.4%
   86      5541     12.46    0.2%
   88      5668     21.51    0.3%
   90      5780     22.27    0.3%
   92      5871      13.5    0.2%
   94      6000      20.7    0.3%
   96      6126     16.84    0.2%
   98      6430     23.29    0.3%
  100      6528      18.9    0.2%
  102      6668     15.26    0.2%
  104      6759     11.08    0.1%
  106      6906     28.02    0.4%
  108      6980     15.01    0.2%
  110      7177     56.19    0.7%
  112      7246     12.86    0.1%
  114      7375     16.86    0.2%
  116      7474     15.18    0.2%
  118      7596     24.35    0.3%
  120      7710     12.23    0.1%
  122      7862      30.8    0.3%
  124      7949     20.05    0.2%
  126      8092     14.18    0.1%
  128      8216      24.3    0.2%

Quality and confidence:
param     error
c         0.041

Model:
Time ~=    233.1
    + c    62.34
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    323.7
    + c    154.3
    + s    1.719
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2081     7.759    0.3%
    1  1024      2256     13.06    0.5%
    2  1024      2418     18.13    0.7%
    3  1024      2398     10.42    0.4%
    4  1024      2726     7.484    0.2%
    5  1024      2875     10.55    0.3%
    6  1024      2846      16.7    0.5%
    7  1024      3173     25.97    0.8%
    8  1024      3314     12.49    0.3%
    9  1024      3330     5.624    0.1%
   10  1024      3636     14.46    0.3%
   11  1024      3810     17.97    0.4%
   12  1024      3777     14.99    0.3%
   13  1024      4116     12.03    0.2%
   14  1024      4329     14.25    0.3%
   15  1024      4289      12.8    0.2%
   16  1024      4569     9.719    0.2%
   17  1024      4752     14.98    0.3%
   18  1024      4725     19.75    0.4%
   19  1024      5044     15.19    0.3%
   20  1024      5202     16.29    0.3%
   21  1024      5160     10.92    0.2%
   22  1024      5487     16.57    0.3%
   23  1024      5635      12.7    0.2%
   24  1024      5637     22.31    0.3%
   25  1024      5994     12.46    0.2%
   26  1024      6123     15.87    0.2%
   27  1024      6215     13.59    0.2%
   28  1024      6449      15.1    0.2%
   29  1024      6580     15.53    0.2%
   30  1024      6553     28.28    0.4%
   31  1024      6969     12.75    0.1%
   32  1024      7018     29.66    0.4%
   33  1024      7041     10.78    0.1%
   34  1024      7413     16.46    0.2%
   35  1024      7524     38.27    0.5%
   36  1024      7496     16.84    0.2%
   37  1024      7851     31.61    0.4%
   38  1024      7980        24    0.3%
   39  1024      7980     27.25    0.3%
   40  1024      8289      12.5    0.1%
   41  1024      8549     41.01    0.4%
   42  1024      8384     13.32    0.1%
   43  1024      8724     31.25    0.3%
   44  1024      8865     34.11    0.3%
   45  1024      8846     27.87    0.3%
   46  1024      9181     29.96    0.3%
   47  1024      9304     21.26    0.2%
   48  1024      9288     26.46    0.2%
   49  1024      9691     20.65    0.2%
   50  1024      9854     40.76    0.4%
   51  1024      9839     33.57    0.3%
   52  1024     10250     31.28    0.3%
   53  1024     10310      30.6    0.2%
   54  1024     10270      17.2    0.1%
   55  1024     10610     38.31    0.3%
   56  1024     10750     37.32    0.3%
   57  1024     10730     39.38    0.3%
   58  1024     11050     41.37    0.3%
   59  1024     11190     38.38    0.3%
   60  1024     11170     29.64    0.2%
   61  1024     11500     45.07    0.3%
   62  1024     12270     34.38    0.2%
   63  1024     11610     26.74    0.2%
   64     0     10240     54.31    0.5%
   64    20     10130     29.01    0.2%
   64    40     10180     16.83    0.1%
   64    60     10220     14.06    0.1%
   64    80     10290     26.96    0.2%
   64   100     10290     27.91    0.2%
   64   120     10320      28.1    0.2%
   64   140     10380      27.6    0.2%
   64   160     10400     23.13    0.2%
   64   180     10430     26.39    0.2%
   64   200     10540     27.84    0.2%
   64   220     10550     23.26    0.2%
   64   240     10750     18.08    0.1%
   64   260     10570     31.75    0.3%
   64   280     10600     20.46    0.1%
   64   300     10640     22.59    0.2%
   64   320     10690     16.71    0.1%
   64   340     10710     15.64    0.1%
   64   360     10750     13.56    0.1%
   64   380     10810     29.85    0.2%
   64   400     10810     18.46    0.1%
   64   420     11080     20.64    0.1%
   64   440     10930     21.47    0.1%
   64   460     10910     19.67    0.1%
   64   480     11140     16.76    0.1%
   64   500     11100      23.6    0.2%
   64   520     11020     46.74    0.4%
   64   540     11040     12.24    0.1%
   64   560     11080     30.02    0.2%
   64   580     11360     18.16    0.1%
   64   600     11130     15.82    0.1%
   64   620     11160     18.48    0.1%
   64   640     11210     20.36    0.1%
   64   660     11260     27.87    0.2%
   64   680     11280     16.45    0.1%
   64   700     11380      27.5    0.2%
   64   720     11540     17.48    0.1%
   64   740     11580     17.32    0.1%
   64   760     11420     29.59    0.2%
   64   780     11460     24.66    0.2%
   64   800     11500     40.54    0.3%
   64   820     11510     20.29    0.1%
   64   840     11570     32.72    0.2%
   64   860     11600     40.26    0.3%
   64   880     11640     13.38    0.1%
   64   900     11700     35.57    0.3%
   64   920     11700     20.89    0.1%
   64   940     11740     18.03    0.1%
   64   960     11810     37.55    0.3%
   64   980     11850     43.05    0.3%
   64  1000     11890     20.68    0.1%
   64  1020     11910      22.6    0.1%
   64  1024     11930     19.54    0.1%

Quality and confidence:
param     error
c         0.179
s         0.011

Model:
Time ~=    266.3
    + c    154.4
    + s    1.748
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    203.5
    + s    1.703
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     200.6     0.403    0.2%
   20     235.4     0.161    0.0%
   40       271     0.806    0.2%
   60     304.7     0.541    0.1%
   80     338.9     0.359    0.1%
  100     373.2     0.683    0.1%
  120     412.6     11.29    2.7%
  140       445      5.97    1.3%
  160     478.3     8.214    1.7%
  180       521      15.2    2.9%
  200     543.9     0.789    0.1%
  220     583.5     11.61    1.9%
  240     617.1     11.18    1.8%
  260     645.8     0.436    0.0%
  280     681.5     4.071    0.5%
  300     721.9     14.36    1.9%
  320     757.4     16.05    2.1%
  340     782.2     1.634    0.2%
  360     827.6     16.48    1.9%
  380       854     8.951    1.0%
  400     898.2     15.07    1.6%
  420     920.6     8.076    0.8%
  440     982.4     3.046    0.3%
  460      1017     2.325    0.2%
  480      1028     12.88    1.2%
  500      1059     11.09    1.0%
  520      1092     11.53    1.0%
  540      1131      16.8    1.4%
  560      1163     12.88    1.1%
  580      1195      8.32    0.6%
  600      1246     15.14    1.2%
  620      1265     12.68    1.0%
  640      1299     11.11    0.8%
  660      1338     14.53    1.0%
  680      1377     15.32    1.1%
  700      1404     13.07    0.9%
  720      1452     16.02    1.1%
  740      1476     16.32    1.1%
  760      1521      14.2    0.9%
  780      1534     11.31    0.7%
  800      1580     13.98    0.8%
  820      1610      15.1    0.9%
  840      1647      15.4    0.9%
  860      1682     12.28    0.7%
  880      1715     14.62    0.8%
  900      1748     14.42    0.8%
  920      1794     13.67    0.7%
  940      1809     11.18    0.6%
  960      1854     11.05    0.5%
  980      1880     13.11    0.6%
 1000      1913     12.57    0.6%
 1020      1940     7.371    0.3%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    205.3
    + s    1.716
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    157.2
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    157.2
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    63.09
    + c    67.64
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     58.06     0.106    0.1%
    1     131.4     1.643    1.2%
    2     197.5     0.474    0.2%
    3     263.2     0.483    0.1%
    4       332     0.268    0.0%
    5     396.9     0.808    0.2%
    6     461.5     0.671    0.1%
    7     534.7     0.806    0.1%
    8     599.9     1.797    0.2%
    9     667.8      0.78    0.1%
   10     734.6     1.073    0.1%
   11     804.1     11.98    1.4%
   12     868.8     12.33    1.4%
   13     945.1     0.737    0.0%
   14      1021     13.42    1.3%
   15      1089     14.38    1.3%
   16      1149     14.66    1.2%
   17      1216     14.07    1.1%
   18      1287     17.25    1.3%
   19      1349     11.86    0.8%
   20      1425      11.9    0.8%
   21      1487     13.77    0.9%
   22      1545      14.5    0.9%
   23      1606     12.25    0.7%
   24      1681     15.68    0.9%
   25      1771      14.5    0.8%
   26      1831     13.76    0.7%
   27      1905     13.18    0.6%
   28      1963      14.1    0.7%
   29      2033     16.13    0.7%
   30      2093     14.73    0.7%
   31      2169     11.63    0.5%
   32      2223      11.7    0.5%
   33      2314     18.09    0.7%
   34      2372     13.77    0.5%
   35      2438     21.71    0.8%
   36      2509     15.62    0.6%
   37      2562     14.49    0.5%
   38      2632     12.16    0.4%
   39      2702     10.25    0.3%
   40      2768     6.375    0.2%
   41      2830     15.17    0.5%
   42      2907      22.6    0.7%
   43      2961     11.97    0.4%
   44      3034     7.692    0.2%
   45      3094     7.842    0.2%
   46      3153      3.93    0.1%
   47      3208     8.681    0.2%
   48      3274     10.71    0.3%
   49      3410      12.4    0.3%
   50      3475     10.96    0.3%
   51      3540      10.7    0.3%
   52      3613      11.1    0.3%
   53      3665     10.15    0.2%
   54      3749     13.09    0.3%
   55      3815     12.09    0.3%
   56      3868     10.11    0.2%
   57      3927     5.987    0.1%
   58      4001     10.95    0.2%
   59      4056     14.84    0.3%
   60      4125     10.38    0.2%
   61      4184     9.844    0.2%
   62      4254     8.016    0.1%
   63      4320     10.75    0.2%
   64      4392     13.38    0.3%

Quality and confidence:
param     error
c         0.036

Model:
Time ~=     61.5
    + c    67.79
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.93
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.93
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.1
    + r    61.95
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.9     0.185    0.0%
    1     292.5     0.216    0.0%
    2     356.7     0.246    0.0%
    3     417.4     0.576    0.1%
    4       483     3.034    0.6%
    5     541.6     0.741    0.1%
    6     611.9     12.79    2.0%
    7     667.5     2.682    0.4%
    8     733.8     10.53    1.4%
    9     800.8     13.75    1.7%
   10       853     7.589    0.8%
   11     912.4     4.942    0.5%
   12     974.6     5.544    0.5%
   13      1035     6.543    0.6%
   14      1114     14.99    1.3%
   15      1172     15.18    1.2%
   16      1227     8.103    0.6%
   17      1292     12.66    0.9%
   18      1355     13.07    0.9%
   19      1414     12.34    0.8%
   20      1479     14.19    0.9%

Quality and confidence:
param     error
r         0.117

Model:
Time ~=    231.4
    + r     62.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.6
    + r    62.13
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.4      0.33    0.1%
    1     293.2     0.405    0.1%
    2       357      0.39    0.1%
    3     422.8     7.142    1.6%
    4     481.9     0.773    0.1%
    5     542.3     1.436    0.2%
    6     610.9     8.821    1.4%
    7     667.1     2.234    0.3%
    8     727.6     2.547    0.3%
    9     796.9     11.25    1.4%
   10     864.8     13.08    1.5%
   11     922.3     10.31    1.1%
   12     986.7        12    1.2%
   13      1036     6.377    0.6%
   14      1113     12.08    1.0%
   15      1182     13.13    1.1%
   16      1227     1.965    0.1%
   17      1284     7.281    0.5%
   18      1351     7.299    0.5%
   19      1418     10.44    0.7%
   20      1483     15.64    1.0%

Quality and confidence:
param     error
r         0.114

Model:
Time ~=    232.4
    + r    62.46
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.3
    + r     61.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.9      0.21    0.0%
    1     292.5     0.305    0.1%
    2     356.6     0.903    0.2%
    3       421     5.016    1.1%
    4     479.7     1.581    0.3%
    5     540.7     4.005    0.7%
    6     598.5     0.953    0.1%
    7     663.4     1.184    0.1%
    8     724.8     1.077    0.1%
    9     784.1     1.412    0.1%
   10     850.4      7.64    0.8%
   11     907.1     8.278    0.9%
   12     982.4      15.4    1.5%
   13      1035     10.44    1.0%
   14      1111     12.38    1.1%
   15      1165     13.68    1.1%
   16      1220     9.389    0.7%
   17      1277     8.368    0.6%
   18      1340     10.02    0.7%
   19      1395     1.877    0.1%
   20      1468     16.74    1.1%

Quality and confidence:
param     error
r         0.111

Model:
Time ~=    231.8
    + r    61.78
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.4
    + r    189.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.2     0.198    0.0%
    1     424.5     2.206    0.5%
    2       614     1.334    0.2%
    3       803     3.429    0.4%
    4      1010     12.33    1.2%
    5      1190      16.2    1.3%
    6      1377     10.02    0.7%
    7      1566     10.06    0.6%
    8      1759     9.971    0.5%
    9      1947     11.61    0.5%
   10      2130     11.37    0.5%
   11      2323     8.214    0.3%
   12      2506     6.984    0.2%
   13      2693     12.23    0.4%
   14      2915     15.49    0.5%
   15      3091     15.03    0.4%
   16      3278     11.61    0.3%
   17      3458     15.35    0.4%
   18      3640     12.41    0.3%
   19      3846     15.46    0.4%
   20      4018     16.13    0.4%

Quality and confidence:
param     error
r         0.162

Model:
Time ~=    238.1
    + r    189.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.3
    + r     61.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.7     0.295    0.1%
    1     292.3     0.231    0.0%
    2     354.8     0.369    0.1%
    3     415.8     0.668    0.1%
    4       479     1.818    0.3%
    5     539.4     2.022    0.3%
    6     599.9     1.885    0.3%
    7     672.1     8.279    1.2%
    8     731.9     12.53    1.7%
    9     786.9      9.01    1.1%
   10     848.7     10.08    1.1%
   11     908.2     6.462    0.7%
   12     980.2     14.53    1.4%
   13      1032     11.19    1.0%
   14      1104     13.61    1.2%
   15      1161     12.67    1.0%
   16      1221     12.16    0.9%
   17      1294     14.06    1.0%
   18      1346     12.04    0.8%
   19      1404     11.33    0.8%
   20      1471     13.11    0.8%

Quality and confidence:
param     error
r         0.118

Model:
Time ~=    230.2
    + r    62.08
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    231.2
    + r    61.96
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.8     0.129    0.0%
    1     293.2     0.375    0.1%
    2     356.3     0.793    0.2%
    3       418     3.487    0.8%
    4     482.5     7.483    1.5%
    5     541.8     1.211    0.2%
    6     601.7     0.973    0.1%
    7     664.2     1.393    0.2%
    8     732.5     9.493    1.2%
    9     788.7     1.826    0.2%
   10     868.5     7.596    0.8%
   11     912.2     6.992    0.7%
   12     996.7     11.98    1.2%
   13      1045     11.93    1.1%
   14      1097     9.386    0.8%
   15      1164     9.764    0.8%
   16      1222     10.29    0.8%
   17      1295     16.97    1.3%
   18      1365     9.369    0.6%
   19      1410     8.685    0.6%
   20      1480     10.65    0.7%

Quality and confidence:
param     error
r         0.118

Model:
Time ~=    230.5
    + r    62.49
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.4
    + r    61.02
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.1     0.076    0.0%
    1     292.4     0.284    0.0%
    2     355.4     2.146    0.6%
    3     415.1     0.232    0.0%
    4     479.6     4.866    1.0%
    5     537.9     1.679    0.3%
    6     608.2     12.99    2.1%
    7     663.6     5.135    0.7%
    8       723     5.144    0.7%
    9     792.9     14.28    1.8%
   10     842.5     6.338    0.7%
   11     903.7      8.17    0.9%
   12     964.9     7.916    0.8%
   13      1034     14.28    1.3%
   14      1101        10    0.9%
   15      1159     14.35    1.2%
   16      1220     13.65    1.1%
   17      1281     14.86    1.1%
   18      1335     14.64    1.0%
   19      1394     9.262    0.6%
   20      1461     13.08    0.8%

Quality and confidence:
param     error
r         0.122

Model:
Time ~=      232
    + r    61.54
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.3
    + r    61.49
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.4     1.093    0.4%
    1     292.7     0.324    0.1%
    2     356.1     0.487    0.1%
    3     417.3     1.155    0.2%
    4     479.6     0.644    0.1%
    5     540.5     4.904    0.9%
    6     614.3     17.27    2.8%
    7     663.2       2.2    0.3%
    8     723.4     2.538    0.3%
    9     789.6      12.2    1.5%
   10     847.6     7.213    0.8%
   11     910.3     10.44    1.1%
   12     974.8     10.52    1.0%
   13      1025     1.597    0.1%
   14      1094     1.659    0.1%
   15      1159     11.69    1.0%
   16      1221     12.69    1.0%
   17      1291     11.34    0.8%
   18      1359     7.247    0.5%
   19      1399     10.44    0.7%
   20      1471     15.33    1.0%

Quality and confidence:
param     error
r         0.117

Model:
Time ~=    230.8
    + r    61.97
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    246.7
    + r    158.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.3     0.146    0.0%
    1     390.8     0.355    0.0%
    2     549.1     1.236    0.2%
    3     710.2     10.02    1.4%
    4       870     10.88    1.2%
    5      1021      7.46    0.7%
    6      1204     4.376    0.3%
    7      1364     3.134    0.2%
    8      1538     3.767    0.2%
    9      1686     5.001    0.2%
   10      1843     2.643    0.1%
   11      2047     5.375    0.2%
   12      2214     6.524    0.2%
   13      2331     16.05    0.6%
   14      2456     7.932    0.3%
   15      2604      15.3    0.5%
   16      2754     14.37    0.5%
   17      2919     11.07    0.3%
   18      3081      12.8    0.4%
   19      3260     10.39    0.3%
   20      3404     15.07    0.4%

Quality and confidence:
param     error
r           0.3

Model:
Time ~=      246
    + r    158.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    142.1
    + r    26.76
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     140.4     1.072    0.7%
    1     172.8     2.334    1.3%
    2     196.8     0.976    0.4%
    3     225.1     1.272    0.5%
    4       246     1.777    0.7%
    5     273.2     2.233    0.8%
    6     300.2     3.217    1.0%
    7     329.3     1.423    0.4%
    8     350.9     3.874    1.1%
    9     373.5     1.566    0.4%
   10       403     3.924    0.9%
   11     435.9     5.593    1.2%
   12       467     4.042    0.8%
   13     485.4     5.055    1.0%
   14     533.1     4.875    0.9%
   15     539.5     7.504    1.3%
   16     576.3     5.539    0.9%
   17     600.4      4.94    0.8%
   18     618.9     8.052    1.3%
   19     655.6     4.252    0.6%
   20       683     7.551    1.1%

Quality and confidence:
param     error
r          0.08

Model:
Time ~=    139.9
    + r    26.98
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      232
    + r    56.79
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.1     0.211    0.0%
    1     288.1     0.273    0.0%
    2     346.1     0.421    0.1%
    3     404.6     4.254    1.0%
    4       460     0.634    0.1%
    5     516.1     1.242    0.2%
    6     571.3     0.971    0.1%
    7     636.9     11.15    1.7%
    8     687.3     1.749    0.2%
    9     743.4     2.542    0.3%
   10     807.6     7.809    0.9%
   11     863.7      14.3    1.6%
   12     926.8     9.287    1.0%
   13     967.6     1.418    0.1%
   14      1041     13.59    1.3%
   15      1091     12.49    1.1%
   16      1151     12.91    1.1%
   17      1206     13.38    1.1%
   18      1264     16.54    1.3%
   19      1307     3.964    0.3%
   20      1373     15.13    1.1%

Quality and confidence:
param     error
r         0.116

Model:
Time ~=    231.4
    + r    57.26
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    319.4
    + n    10.59
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       288     0.224    0.0%
   20     509.6     2.256    0.4%
   40       734     9.399    1.2%
   60       951     14.05    1.4%
   80      1160     10.06    0.8%
  100      1376     11.96    0.8%
  120      1588     14.29    0.8%
  140      1803     11.28    0.6%
  160      2019     17.78    0.8%
  180      2230     12.34    0.5%
  200      2451     11.04    0.4%
  220      2654     13.81    0.5%
  240      2874     24.54    0.8%
  260      3078     13.27    0.4%
  280      3304     23.83    0.7%
  300      3514      17.2    0.4%
  320      3723     11.31    0.3%
  340      3945     40.84    1.0%
  360      4154      24.9    0.5%
  380      4338      24.4    0.5%
  400      4592     18.01    0.3%
  420      4769     18.14    0.3%
  440      4985     18.28    0.3%
  460      5185     14.42    0.2%
  480      5407     23.68    0.4%
  500      5628     31.86    0.5%
  520      5860     43.89    0.7%
  540      6072     56.59    0.9%
  560      6244     30.84    0.4%
  580      6464     19.75    0.3%
  600      6648     35.05    0.5%
  620      6898     38.06    0.5%
  640      7101     23.29    0.3%
  660      7291     33.37    0.4%
  680      7539     44.91    0.5%
  700      7753     69.85    0.9%
  720      7981     44.97    0.5%
  740      8191     40.83    0.4%
  760      8337     36.25    0.4%
  780      8573     49.14    0.5%
  800      8775      39.7    0.4%
  820      8977     41.96    0.4%
  840      9250     45.36    0.4%
  860      9430     56.15    0.5%
  880      9634     42.53    0.4%
  900      9818     43.55    0.4%
  920     10050      29.6    0.2%
  940     10320     39.12    0.3%
  960     10440      36.4    0.3%
  980     10770     31.41    0.2%
 1000     10920     54.84    0.5%
 1020     11130      51.7    0.4%

Quality and confidence:
param     error
n         0.005

Model:
Time ~=    320.2
    + n     10.6
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    224.2
    + r    2.303
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     224.2     0.211    0.0%
    1     226.5     0.149    0.0%

Quality and confidence:
param     error
r         0.086

Model:
Time ~=    224.2
    + r    2.246
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    226.7
    + n    0.181
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     226.4      0.13    0.0%
   20     230.1     0.305    0.1%
   40     233.3     0.401    0.1%
   60     237.1     0.437    0.1%
   80     241.2     0.325    0.1%
  100     244.5     0.295    0.1%
  120       248     0.354    0.1%
  140       251     0.979    0.3%
  160     255.1     0.879    0.3%
  180     259.1     0.696    0.2%
  200     266.2     2.954    1.1%
  220     265.5     1.183    0.4%
  240     269.6     0.979    0.3%
  260     273.7     0.279    0.1%
  280     277.5     0.212    0.0%
  300     280.7     0.294    0.1%
  320     281.8     1.953    0.6%
  340     288.2     0.203    0.0%
  360     290.8     2.019    0.6%
  380     295.3     0.285    0.0%
  400     297.8     2.349    0.7%
  420     300.9     2.423    0.8%
  440     305.9     1.635    0.5%
  460     309.6     1.871    0.6%
  480     316.1     5.663    1.7%
  500     315.4     2.678    0.8%
  520     321.1     0.437    0.1%
  540     326.4     3.871    1.1%
  560     325.1     4.059    1.2%
  580     332.2     0.417    0.1%
  600     335.4     0.192    0.0%
  620     339.4     0.437    0.1%
  640     342.3     2.719    0.7%
  660     346.8     0.407    0.1%
  680     350.6     0.319    0.0%
  700     352.9     2.804    0.7%
  720     356.6     2.958    0.8%
  740     359.4     4.236    1.1%
  760     360.7      4.88    1.3%
  780     366.4     4.141    1.1%
  800     369.1      5.07    1.3%
  820     376.6     1.586    0.4%
  840     373.5     5.527    1.4%
  860     381.5      5.95    1.5%
  880     384.9     4.751    1.2%
  900     384.1     6.132    1.5%
  920     394.4     0.683    0.1%
  940     396.3      3.66    0.9%
  960     400.3     2.805    0.7%
  980     410.7     10.14    2.4%
 1000     403.3     6.776    1.6%
 1020     411.5     4.865    1.1%

Quality and confidence:
param     error
n             0

Model:
Time ~=    226.5
    + n     0.18
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      228
    + r    68.61
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       228     0.207    0.0%
    1     296.6     0.315    0.1%

Quality and confidence:
param     error
r         0.125

Model:
Time ~=      228
    + r    68.61
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.3
    + r    223.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.1       0.2    0.0%
    1     456.1     0.313    0.0%
    2     680.4     1.073    0.1%
    3     919.5     10.34    1.1%
    4      1132      13.4    1.1%
    5      1354     9.678    0.7%
    6      1577     14.17    0.8%
    7      1799     14.97    0.8%
    8      2026     14.71    0.7%
    9      2260     10.91    0.4%
   10      2466     12.65    0.5%
   11      2703      2.76    0.1%
   12      2927     6.437    0.2%
   13      3137     11.31    0.3%
   14      3379     12.02    0.3%
   15      3578     16.43    0.4%
   16      3806     12.59    0.3%
   17      4043     8.589    0.2%
   18      4253     7.385    0.1%
   19      4479     14.29    0.3%
   20      4701     18.92    0.4%

Quality and confidence:
param     error
r         0.154

Model:
Time ~=    237.9
    + r    223.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    242.1
    + r    382.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.6     2.499    1.0%
    1     621.9     0.756    0.1%
    2      1004     8.421    0.8%
    3      1399     16.51    1.1%
    4      1774     14.42    0.8%
    5      2157        12    0.5%
    6      2547     10.29    0.4%
    7      2937     7.444    0.2%
    8      3308     14.82    0.4%
    9      3689     14.61    0.3%
   10      4083     16.02    0.3%
   11      4459      19.4    0.4%
   12      4845     15.74    0.3%
   13      5222     15.21    0.2%
   14      5622     29.07    0.5%
   15      5977     9.418    0.1%
   16      6365     9.551    0.1%
   17      6747     16.54    0.2%
   18      7140     12.91    0.1%
   19      7521     15.34    0.2%
   20      7909     15.61    0.1%

Quality and confidence:
param     error
r         0.185

Model:
Time ~=      242
    + r    383.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    660.2
    + t    405.4
    + n    81.77
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      1912     13.14    0.6%
    1    16      2400      16.9    0.7%
    2    16      2794     18.05    0.6%
    3    16      3187     16.36    0.5%
    4     0      2242     13.15    0.5%
    4     1      2354     13.01    0.5%
    4     2      2416     9.606    0.3%
    4     3      2509     13.92    0.5%
    4     4      2579     12.46    0.4%
    4     5      2633     11.19    0.4%
    4     6      2689     17.09    0.6%
    4     7      2820     26.55    0.9%
    4     8      2865     11.68    0.4%
    4     9      2966     17.41    0.5%
    4    10      3060     9.458    0.3%
    4    11      3113     12.93    0.4%
    4    12      3200     13.18    0.4%
    4    13      3320     22.96    0.6%
    4    14      3409     6.854    0.2%
    4    15      3465     12.13    0.3%
    4    16      3581     12.04    0.3%

Quality and confidence:
param     error
t         2.142
n         0.422

Model:
Time ~=    636.8
    + t    399.8
    + n    82.89
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    148.3
    + r    40.74
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       144     0.141    0.0%
    1       189     0.141    0.0%
    2     229.8     0.254    0.1%
    3     270.9     1.142    0.4%
    4     310.4     0.554    0.1%
    5     349.6     1.105    0.3%
    6     394.9     0.716    0.1%
    7     436.5     3.714    0.8%
    8     482.4     11.63    2.4%
    9     512.7     1.021    0.1%
   10     556.1     7.999    1.4%
   11     599.9     1.717    0.2%
   12     639.8     1.619    0.2%
   13     682.7     8.629    1.2%
   14     719.1     2.786    0.3%
   15     762.4      2.45    0.3%
   16     799.1      3.82    0.4%
   17     843.5     12.36    1.4%
   18       885     10.02    1.1%
   19     918.1     1.579    0.1%
   20     969.7     13.38    1.3%

Quality and confidence:
param     error
r         0.076

Model:
Time ~=    147.8
    + r    40.91
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    228.8
    + r    293.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.5     0.188    0.0%
    1     550.8     1.202    0.2%
    2     839.8      11.7    1.3%
    3      1113     3.214    0.2%
    4      1408     11.93    0.8%
    5      1693     9.162    0.5%
    6      1982     15.61    0.7%
    7      2245      14.2    0.6%
    8      2521      12.8    0.5%
    9      2884     11.91    0.4%
   10      3166     15.12    0.4%
   11      3443     8.842    0.2%
   12      3723     14.86    0.3%
   13      4030     11.41    0.2%
   14      4290     15.25    0.3%
   15      4591     10.88    0.2%
   16      4877      27.1    0.5%
   17      5195     18.46    0.3%
   18      5644     23.88    0.4%
   19      5888     15.72    0.2%
   20      6180     12.31    0.1%

Quality and confidence:
param     error
r         0.538

Model:
Time ~=    213.1
    + r    295.3
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    444.9
    + n    27.59
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     427.8     0.656    0.1%
    1     469.5     1.007    0.2%
    2     501.8     0.623    0.1%
    3       532     2.083    0.3%
    4     557.3     2.138    0.3%
    5     579.1     2.888    0.4%
    6       613     4.892    0.7%
    7     646.9     10.62    1.6%
    8     662.8      4.72    0.7%
    9     702.8     11.59    1.6%
   10     715.3     14.71    2.0%
   11     757.2     11.55    1.5%
   12     780.3      7.81    1.0%
   13     809.5     8.238    1.0%
   14     828.5     4.853    0.5%
   15       838     6.861    0.8%
   16     893.8     14.13    1.5%

Quality and confidence:
param     error
n          0.18

Model:
Time ~=    443.2
    + n     27.8
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    828.3
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.3     0.355    0.1%
    1       875      11.9    1.3%
    2      1581     17.61    1.1%
    3      2360     20.04    0.8%
    4      3130     13.74    0.4%
    5      3921     18.77    0.4%
    6      4726     12.24    0.2%
    7      5472     14.11    0.2%
    8      6247      11.4    0.1%
    9      7184     27.27    0.3%
   10      7962     21.06    0.2%
   11      8822     23.94    0.2%
   12      9623     20.68    0.2%
   13     10530     19.77    0.1%
   14     11360     43.12    0.3%
   15     12180      33.1    0.2%
   16     13090     35.78    0.2%
   17     13880     26.88    0.1%
   18     14990     20.46    0.1%
   19     15980      52.5    0.3%
   20     16840     42.26    0.2%

Quality and confidence:
param     error
r         2.231

Model:
Time ~=        0
    + r    832.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    101.1
    + r    413.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       230     0.352    0.1%
    1     582.1     4.222    0.7%
    2     957.1     11.15    1.1%
    3      1344     4.403    0.3%
    4      1730     9.624    0.5%
    5      2142      14.5    0.6%
    6      2533     7.727    0.3%
    7      2928     12.78    0.4%
    8      3337     18.81    0.5%
    9      3794     9.766    0.2%
   10      4171     19.58    0.4%
   11      4598     23.45    0.5%
   12      5045     28.86    0.5%
   13      5427     28.31    0.5%
   14      5848     24.41    0.4%
   15      6307     27.08    0.4%
   16      6742     34.03    0.5%
   17      7125     41.99    0.5%
   18      7607     28.46    0.3%
   19      8056     38.72    0.4%
   20      8478     40.49    0.4%

Quality and confidence:
param     error
r         0.724

Model:
Time ~=    90.94
    + r    414.6
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.804
    + r    548.2
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.4     0.249    0.1%
    1     661.3     3.526    0.5%
    2      1143     9.332    0.8%
    3      1635     12.38    0.7%
    4      2166      10.8    0.4%
    5      2733     18.81    0.6%
    6      3271     9.955    0.3%
    7      3792     18.37    0.4%
    8      4297     28.96    0.6%
    9      4878     36.49    0.7%
   10      5438     21.89    0.4%
   11      6000     20.77    0.3%
   12      6552     27.59    0.4%
   13      7137      31.3    0.4%
   14      7675      37.7    0.4%
   15      8278     54.05    0.6%
   16      8776     73.63    0.8%
   17      9322     45.68    0.4%
   18      9968     46.96    0.4%
   19     10620     52.64    0.4%
   20     11140     66.29    0.5%

Quality and confidence:
param     error
r         1.057

Model:
Time ~=    5.524
    + r    550.5
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    407.7
    + n    56.03
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     389.8     0.515    0.1%
    1     462.1      9.81    2.1%
    2     529.9     12.04    2.2%
    3     575.8     2.036    0.3%
    4     632.8     0.462    0.0%
    5     689.3     5.795    0.8%
    6     743.8     7.852    1.0%
    7     821.5     10.08    1.2%
    8     855.6     11.09    1.2%
    9     916.3     8.667    0.9%
   10     971.1     13.12    1.3%
   11      1034     16.91    1.6%
   12      1076     9.391    0.8%
   13      1144     15.52    1.3%
   14      1188        13    1.0%
   15      1255     12.45    0.9%
   16      1308      12.5    0.9%

Quality and confidence:
param     error
n         0.205

Model:
Time ~=    406.5
    + n     56.5
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    85.74
    + r    516.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.4     0.183    0.0%
    1     692.2     1.887    0.2%
    2      1160     10.58    0.9%
    3      1659     9.133    0.5%
    4      2127     15.28    0.7%
    5      2635      13.2    0.5%
    6      3147     18.82    0.5%
    7      3646     11.56    0.3%
    8      4119      15.7    0.3%
    9      4731     22.38    0.4%
   10      5217     16.75    0.3%
   11      5734     20.99    0.3%
   12      6273     19.16    0.3%
   13      6748     14.26    0.2%
   14      7283     31.84    0.4%
   15      7796     26.27    0.3%
   16      8322     27.45    0.3%
   17      8875     31.88    0.3%
   18      9509     31.55    0.3%
   19     10110     30.68    0.3%
   20     10610     31.89    0.3%

Quality and confidence:
param     error
r         0.975

Model:
Time ~=    72.98
    + r    519.5
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    783.3
    + n    64.15
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     693.7     2.518    0.3%
    1     828.4     8.762    1.0%
    2     921.3     9.683    1.0%
    3       983     2.867    0.2%
    4      1054     10.17    0.9%
    5      1115     13.33    1.1%
    6      1187     14.94    1.2%
    7      1229     1.215    0.0%
    8      1297     9.863    0.7%
    9      1357      13.6    1.0%
   10      1412     10.77    0.7%
   11      1467      11.9    0.8%
   12      1536     12.61    0.8%
   13      1604     12.58    0.7%
   14      1681     11.66    0.6%
   15      1757     13.02    0.7%
   16      1807     12.12    0.6%

Quality and confidence:
param     error
n         0.405

Model:
Time ~=    767.8
    + n    65.31
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    134.9
    + r     2459
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.1     0.254    0.1%
    1      2634     8.657    0.3%
    2      5101     16.84    0.3%
    3      7529     19.17    0.2%
    4      9948     38.09    0.3%
    5     12330     27.09    0.2%
    6     14800     33.72    0.2%
    7     17240     30.16    0.1%
    8     19750      26.6    0.1%
    9     22130     26.34    0.1%
   10     24750     61.13    0.2%
   11     27130     75.72    0.2%
   12     29600     45.19    0.1%
   13     32040     36.22    0.1%
   14     34460     32.05    0.0%
   15     37070     56.71    0.1%
   16     39630     31.84    0.0%
   17     41750     83.59    0.2%
   18     44560     33.98    0.0%
   19     46820     51.15    0.1%
   20     49580     57.78    0.1%

Quality and confidence:
param     error
r         1.294

Model:
Time ~=    97.67
    + r     2462
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    20870
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.1     0.285    0.1%
    1     20920     26.87    0.1%
    2     41770     53.43    0.1%
    3     62480     47.25    0.0%
    4     83300     42.89    0.0%
    5    104200     128.8    0.1%
    6    124900     134.7    0.1%
    7    145600     88.12    0.0%
    8    166500     86.56    0.0%
    9    187700     111.4    0.0%
   10    208300     75.08    0.0%
   11    229400     140.5    0.0%
   12    250200     147.1    0.0%
   13    270700     81.07    0.0%
   14    291700     110.2    0.0%
   15    312900<truncated>...
```

</details>",10702,2022-01-20T14:26:23Z,0
1695,athei,I am currently running a benchmark here with `cgu=1`. Let's see if this changes anything.,10702,2022-01-20T14:59:46Z,0
1696,athei,With `cgu=1` the instruction benchmarks are much better now. Even better as with the old version. Let's see if we can get this change in.,10702,2022-01-20T16:01:43Z,0
1697,Robbepop,"That's great news! Especially for the upcoming `v1` engine that heavily relies on `cgu=1`.

Ideally we'd check if using `wasmi` version `0.9.1` and `cgu=1` results in even better results.",10702,2022-01-20T16:08:50Z,0
1698,athei,"I compared the benchmark results of this PR with the ones of #10709. With `lto=fat` and `cgu=1` 0.11 performs better than the old version. Instructions are faster and host functions, too.

We merge this as soon as the runtime is build with those flags for production/benchmarks @ggwpez and we ran a burn in.",10702,2022-01-24T08:46:57Z,0
1699,bkchr,"> 1. ""Require approvals from code owners"" is enabled in the repository settings. It already seems to be enabled, but an admin needs to double-check.

I'm against this, because a lot of people have put themself into the code owners file and don't review their stuff the properly. I mean this is a people problem mainly, however, this should be solved before we start slowing down everybody.",10549,2021-12-23T12:16:50Z,0
1700,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10549,2022-01-22T12:21:05Z,0
1701,joao-paulo-parity,"> > 1. ""Require approvals from code owners"" is enabled in the repository settings. It already seems to be enabled, but an admin needs to double-check.
> 
> I'm against this, because a lot of people have put themself into the code owners file and don't review their stuff the properly. I mean this is a people problem mainly, however, this should be solved before we start slowing down everybody.

Any previous CODEOWNERS enforcement intention is supposed to be replaced by https://github.com/paritytech/pr-custom-review, thus the plans have changed and there's no more interest in ""require approvals from code owners"" from the repository settings.

Regarding ""people have put themself into the code owners file and don't review their stuff the properly"", it's possible that the CODEOWNERS file will be removed or massively reduced once https://github.com/paritytech/pr-custom-review is installed. I imagine CODEOWNERS could remain as a second layer of defense for critical files (e.g. pr-custom-review's configuration files) but it would not be used for application code anymore. In any case I don't see a point in having this PR open anymore, it's better to perform those changes in a new PR once https://github.com/paritytech/pr-custom-review is installed.

cc @TriplEight ",10549,2022-01-24T08:57:21Z,0
1702,dependabot[bot],Superseded by #10723.,10713,2022-01-24T09:24:51Z,0
1703,gavofyork,/benchmark runtime pallet pallet_referenda,10195,2021-12-19T18:39:20Z,0
1704,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""gav-referenda"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_referenda --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/referenda/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_referenda"", Extrinsic: ""submit"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumCount (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)
Storage: Referenda ReferendumInfoFor (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    42.39
              µs

Reads = 2
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    42.39
              µs

Reads = 2
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""place_decision_deposit_preparing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    48.11
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    48.11
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""place_decision_deposit_queued"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda DecidingCount (r:1 w:0)
Storage: Referenda TrackQueue (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.62
              µs

Reads = 3
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.62
              µs

Reads = 3
Writes = 2

Pallet: ""pallet_referenda"", Extrinsic: ""place_decision_deposit_not_queued"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda DecidingCount (r:1 w:0)
Storage: Referenda TrackQueue (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.56
              µs

Reads = 3
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.56
              µs

Reads = 3
Writes = 2

Pallet: ""pallet_referenda"", Extrinsic: ""place_decision_deposit_passing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda DecidingCount (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.06
              µs

Reads = 4
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.06
              µs

Reads = 4
Writes = 4

Pallet: ""pallet_referenda"", Extrinsic: ""place_decision_deposit_failing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda DecidingCount (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.45
              µs

Reads = 4
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.45
              µs

Reads = 4
Writes = 4

Pallet: ""pallet_referenda"", Extrinsic: ""refund_decision_deposit"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     28.5
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     28.5
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_referenda"", Extrinsic: ""cancel"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40.42
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40.42
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""kill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    65.97
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    65.97
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""one_fewer_deciding_queue_empty"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda TrackQueue (r:1 w:0)
Storage: Referenda DecidingCount (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    8.904
              µs

Reads = 2
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    8.904
              µs

Reads = 2
Writes = 1

Pallet: ""pallet_referenda"", Extrinsic: ""one_fewer_deciding_failing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda TrackQueue (r:1 w:1)
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    181.3
              µs

Reads = 4
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    181.3
              µs

Reads = 4
Writes = 4

Pallet: ""pallet_referenda"", Extrinsic: ""one_fewer_deciding_passing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda TrackQueue (r:1 w:1)
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    179.7
              µs

Reads = 4
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    179.7
              µs

Reads = 4
Writes = 4

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_requeued_insertion"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda TrackQueue (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.59
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.59
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_requeued_slide"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda TrackQueue (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.17
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.17
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_queued"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda DecidingCount (r:1 w:0)
Storage: Referenda TrackQueue (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.77
              µs

Reads = 4
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.77
              µs

Reads = 4
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_not_queued"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda DecidingCount (r:1 w:0)
Storage: Referenda TrackQueue (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.92
              µs

Reads = 4
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.92
              µs

Reads = 4
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_no_deposit"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     26.9
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     26.9
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_preparing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.94
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.94
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_timed_out"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.25
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.25
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_begin_deciding_failing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda DecidingCount (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.96
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.96
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_begin_deciding_passing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Referenda DecidingCount (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.76
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.76
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_begin_confirming"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.89
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.89
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_end_confirming"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.66
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.66
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_continue_not_confirming"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.74
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.74
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_continue_confirming"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.66
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.66
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_approved"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)
Storage: Scheduler Lookup (r:1 w:1)
Storage: Preimage StatusFor (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.73
              µs

Reads = 5
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.73
              µs

Reads = 5
Writes = 5

Pallet: ""pallet_referenda"", Extrinsic: ""nudge_referendum_rejected"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.72
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.72
              µs

Reads = 2
Writes = 2


```

</details>",10195,2021-12-19T18:39:22Z,0
1705,gavofyork,/benchmark runtime pallet pallet_conviction_voting,10195,2022-01-09T15:45:11Z,0
1706,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""gav-referenda"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_conviction_voting --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/conviction-voting/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
2022-01-09 15:49:13 [0] 💸 generated 1 npos voters, 1 from validators and 0 nominators    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 15:49:15 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.<truncated>...
```

</details>

ERROR: Unable to commit file ./frame/conviction-voting/src/weights.rs",10195,2022-01-09T15:45:12Z,0
1707,gavofyork,/benchmark runtime pallet pallet_conviction_voting,10195,2022-01-09T16:21:14Z,0
1708,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""gav-referenda"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_conviction_voting --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/conviction-voting/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
2022-01-09 16:25:16 [0] 💸 generated 1 npos voters, 1 from validators and 0 nominators    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.    
2022-01-09 16:25:17 Warning: There are more items queued in the Scheduler than expected from the runtime configuration. An update might be needed.<truncated>...
```

</details>

ERROR: Unable to commit file ./frame/conviction-voting/src/weights.rs",10195,2022-01-09T16:21:15Z,0
1709,gavofyork,/benchmark runtime pallet pallet_conviction_voting,10195,2022-01-09T16:55:32Z,0
1710,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""gav-referenda"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_conviction_voting --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/conviction-voting/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_conviction_voting"", Extrinsic: ""vote_new"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: ConvictionVoting VotingFor (r:1 w:1)
Storage: ConvictionVoting ClassLocksFor (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    159.6
              µs

Reads = 6
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    159.6
              µs

Reads = 6
Writes = 6

Pallet: ""pallet_conviction_voting"", Extrinsic: ""vote_existing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: ConvictionVoting VotingFor (r:1 w:1)
Storage: ConvictionVoting ClassLocksFor (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    339.8
              µs

Reads = 6
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    339.8
              µs

Reads = 6
Writes = 6

Pallet: ""pallet_conviction_voting"", Extrinsic: ""remove_vote"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: ConvictionVoting VotingFor (r:1 w:1)
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    317.6
              µs

Reads = 4
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    317.6
              µs

Reads = 4
Writes = 4

Pallet: ""pallet_conviction_voting"", Extrinsic: ""remove_other_vote"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: ConvictionVoting VotingFor (r:1 w:1)
Storage: Referenda ReferendumInfoFor (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.22
              µs

Reads = 2
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.22
              µs

Reads = 2
Writes = 1

Pallet: ""pallet_conviction_voting"", Extrinsic: ""delegate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: ConvictionVoting VotingFor (r:2 w:2)
Storage: ConvictionVoting ClassLocksFor (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    61.67
    + r    33.02
              µs

Reads = 4 + (3 * r)
Writes = 4 + (3 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     61.55     0.339    0.5%
    1     94.64     0.147    0.1%

Quality and confidence:
param     error
r         0.123

Model:
Time ~=    61.55
    + r    33.09
              µs

Reads = 4 + (3 * r)
Writes = 4 + (3 * r)

Pallet: ""pallet_conviction_voting"", Extrinsic: ""undelegate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: ConvictionVoting VotingFor (r:2 w:2)
Storage: Referenda ReferendumInfoFor (r:1 w:1)
Storage: Scheduler Agenda (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.31
    + r    33.12
              µs

Reads = 2 + (3 * r)
Writes = 2 + (3 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     42.03     1.732    4.1%
    1     74.33     0.234    0.3%

Quality and confidence:
param     error
r         0.582

Model:
Time ~=    42.03
    + r    32.29
              µs

Reads = 2 + (3 * r)
Writes = 2 + (3 * r)

Pallet: ""pallet_conviction_voting"", Extrinsic: ""unlock"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: ConvictionVoting VotingFor (r:1 w:1)
Storage: ConvictionVoting ClassLocksFor (r:1 w:1)
Storage: Balances Locks (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.01
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.01
              µs

Reads = 3
Writes = 3


```

</details>",10195,2022-01-09T16:55:37Z,0
1711,tomaka,"@chevdor @eskimor Sorry for being a pain, but it would be great to include this in 0.9.16 otherwise smoldot nodes can't connect anymore :grimacing: ",10721,2022-01-24T08:31:55Z,0
1712,tomaka,bot merge,10721,2022-01-24T09:05:33Z,0
1713,paritytech-processbot[bot],Waiting for commit status.,10721,2022-01-24T09:05:41Z,0
1714,chevdor,Added to v0.9.16 via https://github.com/paritytech/polkadot/pull/4773/commits/01c5e9f90e778d24da5f9ffbea7963c94f812f2a,10721,2022-01-24T10:53:19Z,0
1715,bkchr,"We could monitor the disk usage, however I think that would not solve anything. Even when we say we stop at 100MB of free disk space, we don't know if that gives us enough time to shutdown the node and let the database sync (because something else could eat up the free space too fast). 

Not sure if journaling should be able to help with this. @ordian may you have some ideas?",5633,2020-04-14T22:10:07Z,0
1716,ordian,"we had a similar report in openethereum https://github.com/openethereum/openethereum/issues/11586, if this is related to https://github.com/facebook/rocksdb/issues/6316, than it should be fixed when we update `rust-rocksdb` to the latest release (not published yet), otherwise it could be another issue with rocksdb :/",5633,2020-04-15T10:33:26Z,0
1717,mosonyi,Same here. +1,5633,2022-01-24T10:30:06Z,0
1718,bkchr,@mosonyi you should use grafana and setup alerts for disk usage.,5633,2022-01-24T10:44:45Z,0
1719,mosonyi,"@bkchr thanks, it is obvious, however, we could run into a situation like this.
You can't rely only on prevention or monitoring. 
If the problem occurs the solution is easy to purge the chain and sync again.
I can't judge of course how big the impact on the development side could be but it would be a nice-to-have fix.
 
",5633,2022-01-24T10:54:25Z,0
1720,bkchr,"@mosonyi we will not really invest any resources into rocksdb, because it is ""uncontrollable"". However, you can try to run paritydb and if that is showing similar problems, please create a new issue and we will see how to fix it.",5633,2022-01-24T10:57:29Z,0
1721,mosonyi,"@bkchr I see your point! Thanks for the tip, have a good one!",5633,2022-01-24T10:59:15Z,0
1722,athei,Thanks. Currently ooO. Will review next week.,10617,2022-01-11T13:08:16Z,0
1723,yarikbratashchuk,"@athei, please take a look at the `seal_caller` approach i came up with.
It uses the property that if all gas is passed and the account id is the same then we assume it was `delegate_call`.
We look for a caller recursively.

Let me know if you don't like it and want to add `caller` field to the frame itself.",10617,2022-01-19T13:45:26Z,0
1724,yarikbratashchuk,"@athei, please take a look again and let me know what you think.",10617,2022-01-20T12:10:13Z,0
1725,yarikbratashchuk,"@athei, i feel like this is gonna be a problem, as i don't have this button and the [issue](https://github.com/isaacs/github/issues/1681) is still there",10617,2022-01-20T15:11:15Z,0
1726,yarikbratashchuk,"@athei, can i ask you to run benchbot manually so I can just update weights.rs file? I don't see any other options right now.
",10617,2022-01-21T11:32:54Z,0
1727,athei,/benchmark runtime pallet pallet_contracts,10617,2022-01-21T11:36:40Z,0
1728,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""delegatecall"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.445
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.445
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    14.31
    + k    0.825
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     13.58     0.081    0.5%
   20     32.51     0.126    0.3%
   40     48.02     0.282    0.5%
   60     62.39     0.265    0.4%
   80     75.99      0.24    0.3%
  100     92.94     0.388    0.4%
  120     108.2     0.292    0.2%
  140     126.4     0.459    0.3%
  160     141.9     0.362    0.2%
  180     159.4     0.343    0.2%
  200     174.8     0.523    0.2%
  220     192.6     0.458    0.2%
  240     209.4     0.499    0.2%
  260     227.8     3.148    1.3%
  280     241.4     0.725    0.3%
  300     267.7     9.844    3.6%
  320     278.8     0.794    0.2%
  340     295.1     0.687    0.2%
  360     311.8     1.127    0.3%
  380     338.4     9.237    2.7%
  400     347.5     0.718    0.2%
  420     366.5     2.588    0.7%
  440     382.4     1.567    0.4%
  460     395.6     0.695    0.1%
  480     413.1     1.104    0.2%
  500     430.7     0.868    0.2%
  520     450.8     1.852    0.4%
  540     464.1      0.92    0.1%
  560     482.6       4.1    0.8%
  580     497.1     2.368    0.4%
  600     513.1      1.41    0.2%
  620       528     1.241    0.2%
  640     546.6     4.291    0.7%
  660     567.1     11.43    2.0%
  680     579.8     4.174    0.7%
  700     592.9     1.986    0.3%
  720     609.2     1.867    0.3%
  740     626.5     1.202    0.1%
  760     640.9     1.978    0.3%
  780     666.4     6.287    0.9%
  800     672.1     2.107    0.3%
  820     690.1     1.032    0.1%
  840     711.8     9.066    1.2%
  860       730     6.682    0.9%
  880     737.6     1.468    0.1%
  900     752.1     1.405    0.1%
  920     767.7     2.139    0.2%
  940     782.8     3.017    0.3%
  960     798.3      5.56    0.6%
  980     812.8     1.626    0.2%
 1000       834     7.581    0.9%
 1020     847.1     1.485    0.1%

Quality and confidence:
param     error
k             0

Model:
Time ~=    15.09
    + k    0.824
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.51
    + q     0.15
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.479     0.026    1.0%
   20     21.89     0.217    0.9%
   40     28.52     0.075    0.2%
   60     34.06     0.102    0.2%
   80     39.78     0.259    0.6%
  100     44.62     0.229    0.5%
  120     49.26     0.062    0.1%
  140     55.32     0.177    0.3%
  160     60.02     0.208    0.3%
  180     65.64     0.283    0.4%
  200     71.75     1.225    1.7%
  220     76.02     0.176    0.2%
  240     81.51     0.268    0.3%
  260     88.38     1.872    2.1%
  280     93.95      1.07    1.1%
  300      88.6     1.062    1.1%
  320     91.85     0.337    0.3%
  340      96.7     0.448    0.4%
  360     101.8     0.453    0.4%
  380     107.4     0.833    0.7%
  400     113.9     0.624    0.5%
  420     117.9     0.566    0.4%
  440       122      0.22    0.1%
  460     91.11     0.366    0.4%
  480     96.05     0.522    0.5%
  500     98.96     0.534    0.5%
  520     102.9     0.791    0.7%
  540     103.8     0.585    0.5%
  560     109.3     1.589    1.4%
  580     111.4     1.418    1.2%
  600       115     0.862    0.7%
  620       118     0.628    0.5%
  640     119.3      0.26    0.2%
  660     125.4     0.623    0.4%
  680       126     0.246    0.1%
  700     129.6     0.497    0.3%
  720     132.8     0.886    0.6%
  740     138.3      0.66    0.4%
  760     140.2     0.318    0.2%
  780     143.6     0.625    0.4%
  800     146.1     0.444    0.3%
  820     150.4     0.452    0.3%
  840       152     0.383    0.2%
  860     155.4     0.449    0.2%
  880     159.9     0.374    0.2%
  900     161.8     0.669    0.4%
  920       166     1.885    1.1%
  940     168.5      0.63    0.3%
  960     171.4     0.555    0.3%
  980     176.3     0.611    0.3%
 1000     178.6     0.399    0.2%
 1020     182.8     0.534    0.2%

Quality and confidence:
param     error
q         0.001

Model:
Time ~=    36.16
    + q    0.141
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     33.2
    + c    69.73
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     33.74      0.19    0.5%
    2     175.7     1.499    0.8%
    4     311.4     0.322    0.1%
    6       444      0.73    0.1%
    8       587     6.105    1.0%
   10       735     13.53    1.8%
   12     858.6     8.382    0.9%
   14      1030     12.25    1.1%
   16      1151     8.608    0.7%
   18      1287      12.7    0.9%
   20      1424     11.86    0.8%
   22      1557     16.03    1.0%
   24      1681     13.52    0.8%
   26      1866     12.36    0.6%
   28      2156     16.17    0.7%
   30      2137     5.976    0.2%
   32      2261     9.614    0.4%
   34      2404     11.36    0.4%
   36      2541      17.5    0.6%
   38      2686     8.143    0.3%
   40      2808     9.185    0.3%
   42      2952     19.24    0.6%
   44      3077     16.42    0.5%
   46      3202     12.67    0.3%
   48      3341     17.07    0.5%
   50      3534     17.34    0.4%
   52      3672     13.89    0.3%
   54      3817     20.66    0.5%
   56      3936     14.92    0.3%
   58      4094     13.48    0.3%
   60      4230     19.93    0.4%
   62      4340     11.06    0.2%
   64      4466     6.415    0.1%
   66      4665     25.92    0.5%
   68      4767     11.06    0.2%
   70      4894     14.61    0.2%
   72      5042     14.74    0.2%
   74      5167     12.93    0.2%
   76      5326     13.89    0.2%
   78      5459     13.86    0.2%
   80      5585     15.48    0.2%
   82      5713     14.71    0.2%
   84      5846     19.33    0.3%
   86      5967     14.55    0.2%
   88      6114     17.25    0.2%
   90      6253     19.47    0.3%
   92      6385     13.85    0.2%
   94      6518     15.07    0.2%
   96      6666     18.16    0.2%
   98      6946     24.95    0.3%
  100      7077     38.81    0.5%
  102      7200     13.19    0.1%
  104      7351     22.22    0.3%
  106      7489     20.67    0.2%
  108      7608      17.2    0.2%
  110      7735     22.15    0.2%
  112      7864     9.854    0.1%
  114      8008     17.29    0.2%
  116      8135     15.36    0.1%
  118      8258     13.47    0.1%
  120      8399     19.91    0.2%
  122      8576     30.96    0.3%
  124      8659     18.75    0.2%
  126      8888     14.81    0.1%
  128      8946     22.61    0.2%

Quality and confidence:
param     error
c         0.044

Model:
Time ~=    30.13
    + c     69.8
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    252.1
    + c    67.43
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     262.3     0.207    0.0%
    2     381.6     0.459    0.1%
    4     529.7      2.35    0.4%
    6     657.1     3.095    0.4%
    8     800.1     11.44    1.4%
   10     932.8     10.96    1.1%
   12      1055     11.21    1.0%
   14      1217     12.06    0.9%
   16      1328     7.178    0.5%
   18      1476     10.32    0.6%
   20      1589      13.4    0.8%
   22      1717     12.77    0.7%
   24      1857      8.36    0.4%
   26      2018     14.57    0.7%
   28      2156     10.19    0.4%
   30      2281     16.02    0.7%
   32      2416     6.456    0.2%
   34      2546     17.53    0.6%
   36      2683     8.668    0.3%
   38      2799     13.56    0.4%
   40      2940     19.82    0.6%
   42      3059     10.08    0.3%
   44      3184     12.86    0.4%
   46      3318     13.27    0.4%
   48      3440     15.89    0.4%
   50      3652     16.39    0.4%
   52      3789     15.94    0.4%
   54      3910     12.78    0.3%
   56      4065     11.76    0.2%
   58      4197     18.06    0.4%
   60      4308     23.51    0.5%
   62      4424     17.11    0.3%
   64      4539     13.28    0.2%
   66      4699      17.2    0.3%
   68      4831     18.48    0.3%
   70      4990     19.63    0.3%
   72      5076     15.36    0.3%
   74      5211     23.14    0.4%
   76      5332     10.53    0.1%
   78      5467     13.78    0.2%
   80      5588     23.95    0.4%
   82      5706     19.23    0.3%
   84      5851     17.45    0.2%
   86      5990     17.62    0.2%
   88      6119     15.84    0.2%
   90      6235     20.38    0.3%
   92      6350     29.68    0.4%
   94      6475     16.23    0.2%
   96      6616     20.38    0.3%
   98      6918      18.9    0.2%
  100      7063     34.15    0.4%
  102      7196     20.78    0.2%
  104      7313     22.71    0.3%
  106      7448     35.84    0.4%
  108      7572     11.74    0.1%
  110      7705     14.48    0.1%
  112      7832        21    0.2%
  114      8024     27.66    0.3%
  116      8122     20.18    0.2%
  118      8222     28.56    0.3%
  120      8360     40.37    0.4%
  122      8493      18.5    0.2%
  124      8702      54.9    0.6%
  126      8734     37.84    0.4%
  128      8875     18.84    0.2%

Quality and confidence:
param     error
c         0.049

Model:
Time ~=    243.2
    + c    67.51
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    329.5
    + c    162.8
    + s    1.777
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2184     11.73    0.5%
    1  1024      2349     19.64    0.8%
    2  1024      2510     14.22    0.5%
    3  1024      2495     15.42    0.6%
    4  1024      2829     8.429    0.2%
    5  1024      3003     15.11    0.5%
    6  1024      2980     14.49    0.4%
    7  1024      3334     22.99    0.6%
    8  1024      3464     15.55    0.4%
    9  1024      3498     14.15    0.4%
   10  1024      3797     10.98    0.2%
   11  1024      3949     13.65    0.3%
   12  1024      3939     14.25    0.3%
   13  1024      4299     24.87    0.5%
   14  1024      4431     16.27    0.3%
   15  1024      4434     16.62    0.3%
   16  1024      4767     22.18    0.4%
   17  1024      4976     22.02    0.4%
   18  1024      4976     16.09    0.3%
   19  1024      5249     11.23    0.2%
   20  1024      5424     23.65    0.4%
   21  1024      5437     20.71    0.3%
   22  1024      5727     9.026    0.1%
   23  1024      5896      22.8    0.3%
   24  1024      5899     32.66    0.5%
   25  1024      6247     15.45    0.2%
   26  1024      6425     12.24    0.1%
   27  1024      6465     32.24    0.4%
   28  1024      6716     17.64    0.2%
   29  1024      6863     18.07    0.2%
   30  1024      6858     18.95    0.2%
   31  1024      7180     18.24    0.2%
   32  1024      7346     18.41    0.2%
   33  1024      7455     19.18    0.2%
   34  1024      7732     13.56    0.1%
   35  1024      7929     31.39    0.3%
   36  1024      7925     19.04    0.2%
   37  1024      8244     25.53    0.3%
   38  1024      8393      14.3    0.1%
   39  1024      8388     30.58    0.3%
   40  1024      8709     22.58    0.2%
   41  1024      8865     26.37    0.2%
   42  1024      8869     24.09    0.2%
   43  1024      9154     21.53    0.2%
   44  1024      9318     17.51    0.1%
   45  1024      9306      22.6    0.2%
   46  1024      9636     21.09    0.2%
   47  1024      9790     27.06    0.2%
   48  1024      9825     34.74    0.3%
   49  1024     10210     24.96    0.2%
   50  1024     10360     17.98    0.1%
   51  1024     10390     37.94    0.3%
   52  1024     10670     23.86    0.2%
   53  1024     10830     30.29    0.2%
   54  1024     10820     18.47    0.1%
   55  1024     11140     33.61    0.3%
   56  1024     11370     62.53    0.5%
   57  1024     11300     47.75    0.4%
   58  1024     11620     34.11    0.2%
   59  1024     11790     38.06    0.3%
   60  1024     11740     23.55    0.2%
   61  1024     12110     26.76    0.2%
   62  1024     12230     36.15    0.2%
   63  1024     12240     32.47    0.2%
   64     0     10690     25.08    0.2%
   64    20     10700     32.86    0.3%
   64    40     10750     37.23    0.3%
   64    60     10820     35.48    0.3%
   64    80     10850     37.13    0.3%
   64   100     10870     29.94    0.2%
   64   120     10940     40.97    0.3%
   64   140     10980     74.75    0.6%
   64   160     11350     45.59    0.4%
   64   180     11100     44.71    0.4%
   64   200     11090     35.16    0.3%
   64   220     11100     43.93    0.3%
   64   240     11190     41.36    0.3%
   64   260     11220     29.04    0.2%
   64   280     11250     36.94    0.3%
   64   300     11220     26.29    0.2%
   64   320     11230     16.41    0.1%
   64   340     11300     19.19    0.1%
   64   360     11350     34.84    0.3%
   64   380     11370     33.39    0.2%
   64   400     11380     10.52    0.0%
   64   420     11460     22.91    0.1%
   64   440     11470     17.48    0.1%
   64   460     11520     37.85    0.3%
   64   480     11550     29.78    0.2%
   64   500     11600     40.37    0.3%
   64   520     11630     37.08    0.3%
   64   540     11670     41.79    0.3%
   64   560     11700     22.43    0.1%
   64   580     11720     46.54    0.3%
   64   600     11770     34.88    0.2%
   64   620     11770     19.91    0.1%
   64   640     11810     30.05    0.2%
   64   660     11880     30.82    0.2%
   64   680     11910     46.21    0.3%
   64   700     11950     40.37    0.3%
   64   720     11990     30.59    0.2%
   64   740     12020      39.7    0.3%
   64   760     12050      31.3    0.2%
   64   780     12110     52.22    0.4%
   64   800     12150        33    0.2%
   64   820     12170     38.66    0.3%
   64   840     12260     48.47    0.3%
   64   860     12240     36.17    0.2%
   64   880     12290     32.45    0.2%
   64   900     12310     32.75    0.2%
   64   920     12340     36.16    0.2%
   64   940     12410     58.71    0.4%
   64   960     12410     48.21    0.3%
   64   980     12440      42.7    0.3%
   64  1000     12490     34.65    0.2%
   64  1020     12530     30.89    0.2%
   64  1024     12570     26.61    0.2%

Quality and confidence:
param     error
c         0.131
s         0.008

Model:
Time ~=    314.8
    + c    162.6
    + s    1.773
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    170.9
    + s    1.769
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     183.9     0.299    0.1%
   20     210.5     2.658    1.2%
   40     241.6     0.264    0.1%
   60     282.9     0.279    0.0%
   80       314     3.051    0.9%
  100     346.2     0.216    0.0%
  120     381.8     0.293    0.0%
  140     416.6     0.247    0.0%
  160     457.6      12.6    2.7%
  180       493     12.57    2.5%
  200     525.2     4.766    0.9%
  220     562.5     12.26    2.1%
  240     597.8     9.164    1.5%
  260     628.3     6.646    1.0%
  280     678.3     17.27    2.5%
  300     699.6      10.2    1.4%
  320     732.5     4.982    0.6%
  340     774.7      9.65    1.2%
  360       811     11.27    1.3%
  380     834.9     1.369    0.1%
  400     880.5     15.45    1.7%
  420     909.1      7.96    0.8%
  440     942.2      8.44    0.8%
  460     974.1      1.94    0.1%
  480      1009     0.874    0.0%
  500      1051     14.51    1.3%
  520      1110     15.65    1.4%
  540      1143     14.89    1.3%
  560      1168     12.11    1.0%
  580      1211     16.31    1.3%
  600      1249     15.18    1.2%
  620      1282     15.77    1.2%
  640      1311      15.5    1.1%
  660      1338      4.46    0.3%
  680      1391     16.85    1.2%
  700      1422      15.4    1.0%
  720      1453     10.11    0.6%
  740      1487     12.77    0.8%
  760      1526     14.87    0.9%
  780      1553     13.11    0.8%
  800      1597     15.18    0.9%
  820      1635     16.28    0.9%
  840      1680     11.48    0.6%
  860      1710     12.86    0.7%
  880      1757     10.94    0.6%
  900      1777     11.14    0.6%
  920      1827     8.712    0.4%
  940      1852      12.8    0.6%
  960      1888     3.754    0.1%
  980      1917     21.59    1.1%
 1000      1945     12.19    0.6%
 1020      1979      17.3    0.8%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    168.7
    + s    1.787
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    126.3
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    126.3
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.38
    + c     69.7
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     64.32     0.187    0.2%
    1       141     0.267    0.1%
    2     210.6      1.89    0.8%
    3     280.7     0.396    0.1%
    4     344.8     0.787    0.2%
    5       412     0.828    0.2%
    6     481.6     5.088    1.0%
    7     554.7      3.75    0.6%
    8     622.4     6.155    0.9%
    9     699.8     13.78    1.9%
   10     758.4     4.886    0.6%
   11       839      9.81    1.1%
   12     904.9     13.51    1.4%
   13     990.4     10.61    1.0%
   14      1051      12.6    1.1%
   15      1132     16.86    1.4%
   16      1192     13.71    1.1%
   17      1257     16.38    1.3%
   18      1333     12.65    0.9%
   19      1402     13.03    0.9%
   20      1459     13.59    0.9%
   21      1532     14.37    0.9%
   22      1598     13.34    0.8%
   23      1662     14.56    0.8%
   24      1733     20.46    1.1%
   25      1827     16.61    0.9%
   26      1900     19.53    1.0%
   27      1966     12.93    0.6%
   28      2032     20.21    0.9%
   29      2102     18.76    0.8%
   30      2186     18.64    0.8%
   31      2226     15.62    0.7%
   32      2300     15.51    0.6%
   33      2404     13.63    0.5%
   34      2463     12.88    0.5%
   35      2517     3.236    0.1%
   36      2601     17.15    0.6%
   37      2666     14.49    0.5%
   38      2710     9.862    0.3%
   39      2780     24.01    0.8%
   40      2840     10.24    0.3%
   41      2903     13.66    0.4%
   42      2980     19.72    0.6%
   43      3065     15.36    0.5%
   44      3121     7.341    0.2%
   45      3189     6.231    0.1%
   46      3261     16.74    0.5%
   47      3316     13.14    0.3%
   48      3386     12.44    0.3%
   49      3516     11.84    0.3%
   50      3583     6.603    0.1%
   51      3649     7.828    0.2%
   52      3723     17.01    0.4%
   53      3794      17.2    0.4%
   54      3864     16.62    0.4%
   55      3930     13.63    0.3%
   56      3985     12.14    0.3%
   57      4057     18.77    0.4%
   58      4126     11.71    0.2%
   59      4191     11.47    0.2%
   60      4248     10.31    0.2%
   61      4323     18.48    0.4%
   62      4392      19.3    0.4%
   63      4454     21.11    0.4%
   64      4520     14.79    0.3%

Quality and confidence:
param     error
c         0.042

Model:
Time ~=    70.39
    + c    69.81
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.75
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.75
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    244.8
    + r    76.62
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     235.5     6.044    2.5%
    1     321.7     0.343    0.1%
    2     398.5     0.754    0.1%
    3     482.6     10.04    2.0%
    4     554.2     4.908    0.8%
    5     632.7      10.9    1.7%
    6     705.7     7.778    1.1%
    7     791.3      13.6    1.7%
    8     854.7     2.509    0.2%
    9     942.7     13.97    1.4%
   10      1015     12.19    1.2%
   11      1087     9.984    0.9%
   12      1160     8.269    0.7%
   13      1237     7.832    0.6%
   14      1335     11.25    0.8%
   15      1400     12.59    0.8%
   16      1471     9.596    0.6%
   17      1553     10.44    0.6%
   18      1637     13.26    0.8%
   19      1717     12.63    0.7%
   20      1785     9.992    0.5%

Quality and confidence:
param     error
r          0.13

Model:
Time ~=    243.6
    + r    77.17
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    243.6
    + r    76.94
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.1     1.095    0.4%
    1     322.4     0.439    0.1%
    2     397.5     0.464    0.1%
    3     474.9     4.095    0.8%
    4     555.1      9.99    1.7%
    5       628     4.593    0.7%
    6     710.4     8.267    1.1%
    7     784.8      9.57    1.2%
    8     864.5     12.65    1.4%
    9     930.9     3.537    0.3%
   10      1010     11.68    1.1%
   11      1090     15.99    1.4%
   12      1166     16.38    1.4%
   13      1233     8.427    0.6%
   14      1334     13.41    1.0%
   15      1412      18.3    1.2%
   16      1485     22.05    1.4%
   17      1551     14.49    0.9%
   18      1642     9.753    0.5%
   19      1710     8.577    0.5%
   20      1797     12.26    0.6%

Quality and confidence:
param     error
r         0.148

Model:
Time ~=    239.7
    + r    77.62
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      245
    + r     77.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.7     0.151    0.0%
    1     322.8     1.489    0.4%
    2     398.1     0.593    0.1%
    3     474.7      3.06    0.6%
    4     558.2     4.848    0.8%
    5       635     12.86    2.0%
    6     700.7     5.593    0.7%
    7     790.7     12.34    1.5%
    8       861      13.5    1.5%
    9     937.2     13.33    1.4%
   10      1020     12.73    1.2%
   11      1098     11.79    1.0%
   12      1166     11.92    1.0%
   13      1257     5.336    0.4%
   14      1344      8.17    0.6%
   15      1400     12.15    0.8%
   16      1480     16.65    1.1%
   17      1548     15.45    0.9%
   18      1640        11    0.6%
   19      1717     16.33    0.9%
   20      1785     10.08    0.5%

Quality and confidence:
param     error
r         0.145

Model:
Time ~=    242.6
    + r    77.49
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    248.3
    + r    210.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     232.8     2.433    1.0%
    1     458.5      0.49    0.1%
    2     668.7     2.481    0.3%
    3     882.6     7.479    0.8%
    4      1098     11.41    1.0%
    5      1303     12.19    0.9%
    6      1512     10.53    0.6%
    7      1734     11.92    0.6%
    8      1935     12.72    0.6%
    9      2140     10.73    0.5%
   10      2359     10.11    0.4%
   11      2553     6.436    0.2%
   12      2762     6.246    0.2%
   13      2996     21.96    0.7%
   14      3200     6.744    0.2%
   15      3408     16.37    0.4%
   16      3626     18.09    0.4%
   17      3828     9.898    0.2%
   18      4033     7.816    0.1%
   19      4243     13.97    0.3%
   20      4442     7.812    0.1%

Quality and confidence:
param     error
r         0.157

Model:
Time ~=    249.8
    + r    210.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    241.9
    + r    76.52
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       242     0.139    0.0%
    1     322.3     0.723    0.2%
    2     393.5     0.542    0.1%
    3     472.2     4.967    1.0%
    4     537.9     3.563    0.6%
    5     621.1     12.58    2.0%
    6     696.1     9.425    1.3%
    7     771.4     10.61    1.3%
    8     843.8      12.7    1.5%
    9     923.8     13.78    1.4%
   10      1016     10.38    1.0%
   11      1076      13.4    1.2%
   12      1140     8.516    0.7%
   13      1214     9.141    0.7%
   14      1331     12.14    0.9%
   15      1414     6.524    0.4%
   16      1473     14.12    0.9%
   17      1538     11.01    0.7%
   18      1624     14.61    0.8%
   19      1705     11.35    0.6%
   20      1765     9.928    0.5%

Quality and confidence:
param     error
r         0.168

Model:
Time ~=    237.3
    + r    76.87
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    236.9
    + r    76.07
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.9     0.252    0.1%
    1     321.4     0.849    0.2%
    2     384.2     1.659    0.4%
    3       459     1.452    0.3%
    4     535.9      4.91    0.9%
    5     619.9      15.2    2.4%
    6     683.6     3.746    0.5%
    7     760.5     4.672    0.6%
    8     844.3     12.84    1.5%
    9     917.5     12.59    1.3%
   10     985.8     9.713    0.9%
   11      1064     12.22    1.1%
   12      1156     12.46    1.0%
   13      1211     9.966    0.8%
   14      1303     7.766    0.5%
   15      1391     12.22    0.8%
   16      1459     14.55    0.9%
   17      1537     10.47    0.6%
   18      1611     10.93    0.6%
   19      1689     10.42    0.6%
   20      1771     7.838    0.4%

Quality and confidence:
param     error
r         0.139

Model:
Time ~=    231.9
    + r    76.57
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      236
    + r    75.71
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.6     0.207    0.0%
    1     320.6     0.331    0.1%
    2     382.7     0.415    0.1%
    3     456.4     0.765    0.1%
    4     533.3     0.926    0.1%
    5     613.3      7.56    1.2%
    6     686.9     9.878    1.4%
    7     766.3     13.33    1.7%
    8     844.1     11.69    1.3%
    9     916.7      12.9    1.4%
   10     979.9     2.314    0.2%
   11      1060     12.15    1.1%
   12      1140     11.09    0.9%
   13      1227      10.8    0.8%
   14      1318     13.51    1.0%
   15      1389     12.13    0.8%
   16      1445     4.595    0.3%
   17      1535     15.33    0.9%
   18      1604     13.69    0.8%
   19      1674     10.39    0.6%
   20      1763     10.75    0.6%

Quality and confidence:
param     error
r         0.146

Model:
Time ~=    232.8
    + r    76.26
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.5
    + r    77.07
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.7     0.139    0.0%
    1     307.8     0.447    0.1%
    2     384.1     0.625    0.1%
    3     459.9     3.131    0.6%
    4     550.8      3.23    0.5%
    5     624.1     0.878    0.1%
    6     701.8     6.557    0.9%
    7     780.5     6.405    0.8%
    8     858.7     11.62    1.3%
    9     948.5     6.202    0.6%
   10      1004     6.877    0.6%
   11      1102     9.832    0.8%
   12      1181     1.244    0.1%
   13      1257     1.723    0.1%
   14      1310     12.03    0.9%
   15      1393     17.37    1.2%
   16      1454     5.435    0.3%
   17      1543     11.18    0.7%
   18      1626     14.55    0.8%
   19      1691      14.2    0.8%
   20      1776     12.79    0.7%

Quality and confidence:
param     error
r          0.15

Model:
Time ~=    237.8
    + r    77.11
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    242.9
    + r    176.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.9     0.167    0.0%
    1     412.1     1.448    0.3%
    2     595.7     7.942    1.3%
    3     776.6     11.79    1.5%
    4     958.4     11.54    1.2%
    5      1113     5.587    0.5%
    6      1300     10.03    0.7%
    7      1487     7.675    0.5%
    8      1659     9.071    0.5%
    9      1822     5.465    0.2%
   10      2001     7.233    0.3%
   11      2202     6.711    0.3%
   12      2374     11.41    0.4%
   13      2549     13.71    0.5%
   14      2723     10.73    0.3%
   15      2892     10.12    0.3%
   16      3082     10.34    0.3%
   17      3244     15.45    0.4%
   18      3420      11.6    0.3%
   19      3607     9.026    0.2%
   20      3776     13.23    0.3%

Quality and confidence:
param     error
r         0.141

Model:
Time ~=    241.4
    + r      177
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    122.1
    + r    35.77
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     118.9     0.153    0.1%
    1     157.7     0.205    0.1%
    2     193.7     0.768    0.3%
    3     230.7     1.277    0.5%
    4     265.6     0.467    0.1%
    5     300.2     0.886    0.2%
    6     337.4     2.031    0.6%
    7     371.5     1.669    0.4%
    8     409.4     2.112    0.5%
    9     441.5     2.494    0.5%
   10     481.1     0.772    0.1%
   11       518     1.721    0.3%
   12       550     3.687    0.6%
   13     595.5     11.11    1.8%
   14     622.4     6.362    1.0%
   15     665.4     6.905    1.0%
   16     693.2     1.749    0.2%
   17     722.5     8.301    1.1%
   18       771     10.97    1.4%
   19       806     8.925    1.1%
   20     842.9     10.91    1.2%

Quality and confidence:
param     error
r         0.073

Model:
Time ~=      121
    + r    35.96
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    245.6
    + r    69.96
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.3     0.194    0.0%
    1     315.7     0.266    0.0%
    2     386.7     0.757    0.1%
    3     454.7     0.523    0.1%
    4     526.4     1.154    0.2%
    5     606.4      14.2    2.3%
    6     663.9     1.089    0.1%
    7     739.9     8.802    1.1%
    8     811.1     13.19    1.6%
    9     882.1     13.55    1.5%
   10     954.6     12.69    1.3%
   11      1016     9.167    0.9%
   12      1090     12.13    1.1%
   13      1161     11.87    1.0%
   14      1233     12.12    0.9%
   15      1315     9.762    0.7%
   16      1362     2.159    0.1%
   17      1435     7.517    0.5%
   18      1513     13.02    0.8%
   19      1586     9.287    0.5%
   20      1645     9.037    0.5%

Quality and confidence:
param     error
r         0.128

Model:
Time ~=    244.4
    + r    70.46
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    341.4
    + n    11.93
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     315.3     0.397    0.1%
   20     558.7     2.182    0.3%
   40     810.5     16.26    2.0%
   60      1043     9.176    0.8%
   80      1298     10.38    0.7%
  100      1530     14.61    0.9%
  120      1771     13.24    0.7%
  140      2005     14.86    0.7%
  160      2267     9.203    0.4%
  180      2492     15.95    0.6%
  200      2733     1.966    0.0%
  220      2978     8.637    0.2%
  240      3215     17.19    0.5%
  260      3449     9.109    0.2%
  280      3685     10.36    0.2%
  300      3919     8.057    0.2%
  320      4161     14.77    0.3%
  340      4401      15.8    0.3%
  360      4639     19.81    0.4%
  380      4907     13.43    0.2%
  400      5133      7.16    0.1%
  420      5348     23.17    0.4%
  440      5611     26.65    0.4%
  460      5833      14.6    0.2%
  480      6073     20.72    0.3%
  500      6315     14.92    0.2%
  520      6537     23.53    0.3%
  540      6785     20.61    0.3%
  560      6998      25.5    0.3%
  580      7279     17.26    0.2%
  600      7497     23.58    0.3%
  620      7728      22.6    0.2%
  640      7983     27.24    0.3%
  660      8218      31.4    0.3%
  680      8432     13.33    0.1%
  700      8677     18.68    0.2%
  720      8922     30.17    0.3%
  740      9172     48.86    0.5%
  760      9436     21.52    0.2%
  780      9700     59.89    0.6%
  800      9893     23.18    0.2%
  820     10120     38.37    0.3%
  840     10410     49.81    0.4%
  860     10620      40.6    0.3%
  880     10860     41.09    0.3%
  900     11100     36.61    0.3%
  920     11330     14.51    0.1%
  940     11530     23.13    0.2%
  960     11770     24.63    0.2%
  980     12010     31.14    0.2%
 1000     12260     26.23    0.2%
 1020     12510     48.46    0.3%

Quality and confidence:
param     error
n         0.004

Model:
Time ~=    339.6
    + n    11.94
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    242.3
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.4     0.289    0.1%
    1       227     0.273    0.1%

Quality and confidence:
param     error
r         0.132

Model:
Time ~=    242.4
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    239.9
    + n    0.228
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     239.6     0.128    0.0%
   20     244.6     0.284    0.1%
   40     249.2     0.271    0.1%
   60     253.8     0.162    0.0%
   80     258.2     0.137    0.0%
  100     262.6     0.175    0.0%
  120     267.2     0.268    0.1%
  140     275.6     3.786    1.3%
  160     276.6     0.216    0.0%
  180     280.8     0.219    0.0%
  200     287.3     3.883    1.3%
  220     290.1      0.12    0.0%
  240     294.8     0.203    0.0%
  260     299.1     0.199    0.0%
  280     303.8     0.163    0.0%
  300     308.7     0.238    0.0%
  320     312.9     0.287    0.0%
  340     317.7     0.185    0.0%
  360       322     0.196    0.0%
  380     326.5     0.208    0.0%
  400       337     5.374    1.5%
  420     335.5     0.143    0.0%
  440     340.4     0.282    0.0%
  460     353.7      11.3    3.1%
  480     349.5     0.295    0.0%
  500     357.1     3.429    0.9%
  520     357.6     3.632    1.0%
  540     364.6     3.819    1.0%
  560       367     3.832    1.0%
  580     371.5     3.855    1.0%
  600     375.6     3.718    0.9%
  620     381.8     0.441    0.1%
  640     389.1      7.55    1.9%
  660     390.7     0.332    0.0%
  680     398.6     5.528    1.3%
  700     400.2     0.606    0.1%
  720       409     6.533    1.5%
  740     409.4     0.429    0.1%
  760     412.7     3.758    0.9%
  780     418.4     0.416    0.0%
  800     422.8     0.425    0.1%
  820     427.4     0.464    0.1%
  840     437.4     10.22    2.3%
  860     435.1     3.505    0.8%
  880     443.5     7.608    1.7%
  900     455.6     10.08    2.2%
  920     455.9      11.7    2.5%
  940     460.1     7.744    1.6%
  960     460.1     0.707    0.1%
  980     466.7      5.44    1.1%
 1000     469.9     3.387    0.7%
 1020     473.5     0.643    0.1%

Quality and confidence:
param     error
n             0

Model:
Time ~=    239.7
    + n    0.231
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    242.6
    + r    56.69
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.6     0.143    0.0%
    1     302.7     8.037    2.6%

Quality and confidence:
param     error
r         2.679

Model:
Time ~=    242.6
    + r    60.09
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    251.7
    + r    238.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.8     0.234    0.1%
    1     485.9      0.65    0.1%
    2     737.6     9.981    1.3%
    3     972.9     9.702    0.9%
    4      1205      12.6    1.0%
    5      1445     12.96    0.8%
    6      1682     10.03    0.5%
    7      1928     13.39    0.6%
    8      2151     11.21    0.5%
    9      2400     13.25    0.5%
   10      2644     7.177    0.2%
   11      2876      8.42    0.2%
   12      3109     13.79    0.4%
   13      3362     17.64    0.5%
   14      3587     9.884    0.2%
   15      3825     14.31    0.3%
   16      4060     7.269    0.1%
   17      4327      16.2    0.3%
   18      4543     12.54    0.2%
   19      4770     11.94    0.2%
   20      5010     14.11    0.2%

Quality and confidence:
param     error
r         0.169

Model:
Time ~=    251.2
    + r    238.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    254.9
    + r    398.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.1     0.149    0.0%
    1     650.7     2.273    0.3%
    2      1050     3.009    0.2%
    3      1454     11.75    0.8%
    4      1859     13.48    0.7%
    5      2275     11.06    0.4%
    6      2642     8.966    0.3%
    7      3047     14.61    0.4%
    8      3443     10.71    0.3%
    9      3852     8.919    0.2%
   10      4306     4.059    0.0%
   11      4652     17.01    0.3%
   12      5044     21.97    0.4%
   13      5435     20.56    0.3%
   14      5835     11.88    0.2%
   15      6215        19    0.3%
   16      6616     14.54    0.2%
   17      7034     20.35    0.2%
   18      7434     25.05    0.3%
   19      7838     15.69    0.2%
   20      8219     18.88    0.2%

Quality and confidence:
param     error
r         0.263

Model:
Time ~=    258.9
    + r    398.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    697.5
    + t    405.5
    + n    87.94
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      2073     5.937    0.2%
    1    16      2529     20.53    0.8%
    2    16      2941     18.85    0.6%
    3    16      3339        18    0.5%
    4     0      2295     10.58    0.4%
    4     1      2403      15.5    0.6%
    4     2      2482      16.3    0.6%
    4     3      2544     11.33    0.4%
    4     4      2627     9.294    0.3%
    4     5      2720     11.52    0.4%
    4     6      2817     19.09    0.6%
    4     7      2883     7.957    0.2%
    4     8      2994     22.28    0.7%
    4     9      3046     17.01    0.5%
    4    10      3137     13.11    0.4%
    4    11      3247     16.16    0.4%
    4    12      3343     17.23    0.5%
    4    13      3432     16.89    0.4%
    4    14      3530     12.11    0.3%
    4    15      3610     18.27    0.5%
    4    16      3716     16.05    0.4%

Quality and confidence:
param     error
t          1.85
n         0.364

Model:
Time ~=    690.3
    + t    398.1
    + n    88.85
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    134.6
    + r     52.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     128.8     0.151    0.1%
    1     185.8     0.183    0.0%
    2     241.4     2.673    1.1%
    3     294.2     1.831    0.6%
    4     335.9     8.364    2.4%
    5     399.5     5.849    1.4%
    6     459.8     6.327    1.3%
    7     516.1     15.61    3.0%
    8     557.9     2.099    0.3%
    9     613.4     8.934    1.4%
   10     663.7     4.276    0.6%
   11       712     8.219    1.1%
   12     760.1     9.175    1.2%
   13     822.7     14.41    1.7%
   14     866.7     9.425    1.0%
   15     922.1     12.03    1.3%
   16     977.2      8.52    0.8%
   17      1041     13.04    1.2%
   18      1082     8.591    0.7%
   19      1137     11.06    0.9%
   20      1186     7.247    0.6%

Quality and confidence:
param     error
r         0.117

Model:
Time ~=    134.7
    + r    52.74
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    243.3
    + r    315.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.7     0.353    0.1%
    1     588.4     1.039    0.1%
    2     888.5     9.084    1.0%
    3      1208     10.64    0.8%
    4      1500     12.24    0.8%
    5      1820     11.93    0.6%
    6      2104     5.404    0.2%
    7      2399     11.67    0.4%
    8      2697     9.379    0.3%
    9      3102     13.16    0.4%
   10      3427     23.25    0.6%
   11      3706     18.07    0.4%
   12      4009     9.429    0.2%
   13      4301     13.01    0.3%
   14      4597     11.79    0.2%
   15      4914     19.99    0.4%
   16      5251     22.38    0.4%
   17      5587     17.76    0.3%
   18      6073     27.86    0.4%
   19      6360     32.75    0.5%
   20      6649     25.56    0.3%

Quality and confidence:
param     error
r         0.662

Model:
Time ~=    219.4
    + r    318.2
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    485.7
    + n    32.79
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     463.7      0.52    0.1%
    1     516.2     9.555    1.8%
    2     556.7     8.644    1.5%
    3     600.8     2.349    0.3%
    4     617.4     2.729    0.4%
    5     654.4     0.873    0.1%
    6     684.3     8.325    1.2%
    7     715.8     4.515    0.6%
    8       755     12.39    1.6%
    9     778.6     8.555    1.0%
   10     819.3     11.42    1.3%
   11     848.5     8.706    1.0%
   12     877.8     6.538    0.7%
   13     933.6     10.85    1.1%
   14     952.9        13    1.3%
   15       975     6.734    0.6%
   16      1000     10.66    1.0%

Quality and confidence:
param     error
n         0.196

Model:
Time ~=    485.3
    + n    33.09
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    843.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     244.4     0.198    0.0%
    1     919.5     12.21    1.3%
    2      1648     8.747    0.5%
    3      2428     19.15    0.7%
    4      3218     16.62    0.5%
    5      4050     13.92    0.3%
    6      4864      18.1    0.3%
    7      5680     17.97    0.3%
    8      6453     22.84    0.3%
    9      7345     39.84    0.5%
   10      8182     35.47    0.4%
   11      9055     45.32    0.5%
   12      9922     30.34    0.3%
   13     10750     41.06    0.3%
   14     11600      50.1    0.4%
   15     12480      28.2    0.2%
   16     13400     75.68    0.5%
   17     14200     51.16    0.3%
   18     15400     51.71    0.3%
   19     16280     52.23    0.3%
   20     17160     38.32    0.2%

Quality and confidence:
param     error
r           2.1

Model:
Time ~=        0
    + r    849.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    99.57
    + r    423.8
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     245.7     0.135    0.0%
    1     605.8     2.552    0.4%
    2     982.5     12.91    1.3%
    3      1388     11.16    0.8%
    4      1767     8.653    0.4%
    5      2178     17.11    0.7%
    6      2609     12.87    0.4%
    7      3014     6.861    0.2%
    8      3416     21.47    0.6%
    9      3857      10.3    0.2%
   10      4302     21.67    0.5%
   11      4715     27.53    0.5%
   12      5159     23.68    0.4%
   13      5552     31.24    0.5%
   14      6022     14.67    0.2%
   15      6447     20.73    0.3%
   16      6848      29.3    0.4%
   17      7349      34.1    0.4%
   18      7850     27.14    0.3%
   19      8221     37.03    0.4%
   20      8713     33.02    0.3%

Quality and confidence:
param     error
r         0.794

Model:
Time ~=     94.2
    + r    425.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.67
    + r    560.4
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     245.5     2.442    0.9%
    1     685.9     6.238    0.9%
    2      1187     7.227    0.6%
    3      1713     8.665    0.5%
    4      2268     16.81    0.7%
    5      2794     22.13    0.7%
    6      3342     23.32    0.6%
    7      3842     20.59    0.5%
    8      4431     11.86    0.2%
    9      4979     28.46    0.5%
   10      5571     31.67    0.5%
   11      6124     27.31    0.4%
   12      6727     31.69    0.4%
   13      7339     50.58    0.6%
   14      7977     63.69    0.7%
   15      8475     28.02    0.3%
   16      9086      30.9    0.3%
   17      9497     62.91    0.6%
   18     10140     59.74    0.5%
   19     10860     28.13    0.2%
   20     11380     48.41    0.4%

Quality and confidence:
param     error
r         1.102

Model:
Time ~=    25.09
    + r    562.6
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    439.5
    + n    60.14
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     418.2     4.753    1.1%
    1     490.7     0.902    0.1%
    2     561.1     1.312    0.2%
    3     620.3     1.377    0.2%
    4     681.2     0.568    0.0%
    5     757.2     15.55    2.0%
    6     807.2     11.23    1.3%
    7     857.6     4.964    0.5%
    8     925.6     12.01    1.2%
    9     980.2     12.69    1.2%
   10      1052     13.97    1.3%
   11      1101     11.95    1.0%
   12      1162     12.65    1.0%
   13      1225     13.86    1.1%
   14      1274     13.64    1.0%
   15      1356     14.74    1.0%
   16      1408     11.38    0.8%

Quality and confidence:
param     error
n         0.209

Model:
Time ~=      435
    + n    60.91
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    83.26
    + r      539
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     232.8     0.191    0.0%
    1     721.8     3.142    0.4%
    2      1215     7.592    0.6%
    3      1751     12.35    0.7%
    4      2227     10.96    0.4%
    5      2750     7.501    0.2%
    6      3246     13.08    0.4%
    7      3793     18.08    0.4%
    8      4262     12.86    0.3%
    9      4932     18.32    0.3%
   10      5444     13.09    0.2%
   11      5982     18.84    0.3%
   12      6511     13.85    0.2%
   13      7033     29.59    0.4%
   14      7557     25.24    0.3%
   15      8105     23.13    0.2%
   16      8675     43.18    0.4%
   17      9308     73.46    0.7%
   18     10030     28.87    0.2%
   19     10570     49.43    0.4%
   20     11120     73.63    0.6%

Quality and confidence:
param     error
r         1.278

Model:
Time ~=    58.07
    + r      544
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    802.5
    + n    71.17
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     717.3     1.858    0.2%
    1     854.5     4.116    0.4%
    2       973     11.62    1.1%
    3      1041     10.11    0.9%
    4      1104     11.64    1.0%
    5      1174     17.29    1.4%
    6      1224     6.113    0.4%
    7      1294     9.598    0.7%
    8      1349     2.051    0.1%
    9      1431     15.43    1.0%
   10      1487     5.679    0.3%
   11      1560     11.39    0.7%
   12      1657     6.691    0.4%
   13      1726     15.38    0.8%
   14      1786     12.91    0.7%
   15      1890     16.43    0.8%
   16      1959     19.36    0.9%

Quality and confidence:
param     error
n         0.449

Model:
Time ~=    787.7
    + n    72.36
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    164.5
    + r     2461
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     244.7     0.149    0.0%
    1      2677     23.19    0.8%
    2      5107     23.72    0.4%
    3      7578     19.18    0.2%
    4      9977     23.35    0.2%
    5     12360     25.02    0.2%
    6     14790     32.45    0.2%
    7     17340     86.34    0.4%
    8     19820     56.77    0.2%
    9     22250     32.37    0.1%
   10     24860     42.09    0.1%
   11     27180     43.12    0.1%
   12     29730     75.21    0.2%
   13     32070     35.87    0.1%
   14     34570     45.22    0.1%
   15     37080      82.8    0.2%
   16     39450     45.09    0.1%
   17     41790     43.28    0.1%
   18     44540      52.3    0.1%
   19     47170     86.76    0.1%
   20     49630     56.53    0.1%

Quality and confidence:
param     error
r         1.347

Model:
Time ~=    126.6
    + r     2464
              µs

Reads = 5 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    22260
              µs

Reads = 5 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     233.5     1.135    0.4%
    1     21000     51.95    0.2%
    2     41780      34.2    0.0%
    3     62500     29.34    0.0%
    4     88680     71.67    0.0%
    5    110900     87.72    0.0%
    6    133000     52.77    0.0%
    7    155200     112.3    0.0%
    8    176800      77.7    0.0%
    9    200100     100.9    0.0%
   10    222100     118.7    0.0%
   11    244200     132.1    0.0%
   12    266100     148.6    0.0%
   13    288400     74.91    0<truncated>...
```

</details>

ERROR: Unable to push ./frame/contracts/src/weights.rs",10617,2022-01-21T11:36:42Z,0
1729,athei,"> @athei, can i ask you to run benchbot manually so I can just update weights.rs file? I don't see any other options right now.

I think it will fail when committing but the file can be somehow recovered. Let's see what happens.",10617,2022-01-21T11:37:17Z,0
1730,yarikbratashchuk,"> Let's see what happens.

Okay",10617,2022-01-21T11:41:37Z,0
1731,yarikbratashchuk,"> ERROR: Unable to push ./frame/contracts/src/weights.rs

@athei, Unable to push :(",10617,2022-01-21T13:24:34Z,0
1732,athei,Yeah as I expected. I will need to ask around how to handle this. Please hang on.,10617,2022-01-24T08:32:44Z,0
1733,joao-paulo-parity,"FYI the weights were generated for the following tree:

```
> git log
commit e99c99d4a667b83032021ab08b6682c616132518 (HEAD -> delegatecall)
Author: Parity Bot <admin@parity.io>
Date:   Fri Jan 21 13:05:30 2022 +0000

    cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

commit 1b6dc66dc062bc95dfa1d60c58168021b1b204fc
Merge: c21d0f3aa4 48e0b415b9
Author: Parity Bot <admin@parity.io>
Date:   Fri Jan 21 11:36:44 2022 +0000

    Merge branch 'master' of https://github.com/paritytech/substrate into delegatecall

commit 48e0b415b94d8ce14e0ebbbdb813263afa27f02e (origin/master, origin/HEAD)
Author: Shawn Tabrizi <shawntabrizi@gmail.com>
Date:   Thu Jan 20 14:17:16 2022 -0400

    dont increase the allocated size of vec (#10701)

commit c21d0f3aa4161254942d96ce5543bd33ab99956f (pr/delegatecall)
Author: yarikbratashchuk <yarik.bratashchuk@gmail.com>
Date:   Thu Jan 20 15:13:22 2022 +0200
```

Notably I cut the output off at c21d0f3aa4161254942d96ce5543bd33ab99956f which is this PR's branch current HEAD.

https://gist.github.com/joao-paulo-parity/cb2ec45c9423a426aa4925da382263e7

```
git format-patch -1 HEAD --stdout > weights.patch
git diff HEAD~1 > weights.diff
cat ./frame/contracts/src/weights.rs > weights.rs
```


",10617,2022-01-24T09:22:12Z,0
1734,athei,Thanks alot. @yarikbratashchuk can you apply this patch?,10617,2022-01-24T09:25:07Z,0
1735,yarikbratashchuk,"@athei, updated weights.rs. Thanks, @joao-paulo-parity.",10617,2022-01-24T09:40:32Z,0
1736,athei,Nice. Need a second reviewer now.,10617,2022-01-24T11:03:09Z,0
1737,koute,"...look like our CI machines are failing due to the `uffd` being enabled, so they are probably running on the old kernel. I guess this is as good of a sign as any that we probably shouldn't enable it (at least not *yet*), so I'll just remove it for now.

I do wonder though if it'd be possible to perhaps close the speed gap here and get the benefits of `uffd` with some alternative method (e.g. taking advantage of copy-on-write pages, or using 2MB hugepages, etc.); that'd most likely require changes to `wasmtime`, but might be worth investigating.",10480,2021-12-15T05:22:08Z,0
1738,pepyakin,"Oh what a shame. Well, yeah, maybe it is a sign.

I was really under impression that COW should improve the situation. In fact, I actually did some experiments. What I did is that I created a file, set the right size and filled it with the initial data: i.e. data segments on top of zeroed data. Then for each instance I `mmap` that fd with `MAP_PRIVATE`. That was really long time ago though and I do not remember all details, but it was slow. Maybe that had something to do with copying the pages in CoW that was filled with zeroes instead of actually zero them. I imagine the latter may be faster. I did not really dig deep so I do not know. I am pretty sure that you may be able to dig deeper armed with perf and insight what happens in the kernel. 

UPDATE: I did find the lead to those experiments https://github.com/paritytech/substrate/pull/3011#pullrequestreview-263047088

Also, I was surprised that wasmtime folks went with `uffd` and not the COW, because in my mental model it COW should be quicker since it does not involve the userspace page fault handling. I am pretty sure they know something that I do not know.

Ideally, wasmtime provides an API similar (or maybe equivalent) to `InstancePre` that allows to instantaneously spawn copies of some pre-initialized instance, similarly to fork or Android's Zygote.

I am not sure about big pages though. They can help in case we have TLB pressure, but do we? If we mix UFFD or COW with 2MiB pages we may risk handling page faults that 2 MiB even though only a part of it was actually used.",10480,2021-12-15T17:55:21Z,0
1739,koute,"Hmm... well, now that I've looked through `wasmtime` code I could probably just make it so that enabling `uffd` and running on an old kernel degrades gracefully and acts just like if `uffd` wasn't enabled in the first place; shouldn't be too hard.

Anyway, I did some experiments on `wasmtime` with COW memory and... it actually looks promising. On our benchmarks with the Kusama runtime the invocation time dropped from ~48us (which is what we get with either fast instance reuse or instance pooling + `uffd`) to ~20us, so it might be worth it to investigate this even further. (Of course this is just a YOLO proof of concept implementation; doing this properly would require more work to handle all of the corner cases.) From the profiling I did it might be possible to go even lower, since now after COW-ing the linear memory I see a bunch of normal memory allocations related to imports which dominate the runtime and which should also be cacheable across invocations.

[edit]After switching to preinitializing the module the invocation time with COW'd memory goes down to ~14us.[/edit]",10480,2021-12-16T06:01:52Z,0
1740,andresilva,"I am not sure how to go about implementing 4) since it seems to me that the problem is clearing up stale senders whenever there's no one listening, this assumes that there is some central registry where subscribers are accumulated which isn't the case for 4). 

It seems to me that 3) is the most actionable way to go with https://github.com/paritytech/substrate/blob/master/client/utils/src/notification.rs being the ""registry"" types I alluded to above. I think it should be possible to extend the `NotificationStream` type to clear `SharedSenders` on drop. These types could then be re-used to implement the functionality in https://github.com/paritytech/substrate/blob/master/client/api/src/notifications.rs#L83-L123.

@koute Do you agree? I can extend this issue with more details once you confirm.",10576,2022-01-11T17:04:35Z,0
1741,koute,"> I am not sure how to go about implementing 4) since it seems to me that the problem is clearing up stale senders whenever there's no one listening, this assumes that there is some central registry where subscribers are accumulated which isn't the case for 4).

@andresilva By ""built-in"" I didn't mean that it will automatically work in every case; I meant that you won't be able create a channel without also providing some sort of an ""unsubscribe"" callback (or an `Arc`/`Weak` handle with such, etc.), so it wouldn't be possible to ignore this problem without *explicitly* passing in an empty one which does nothing.

Basically, make it harder to do the wrong thing by default. Not clearing the subscription on drop should require explicit effort, and *not* be an implicit default as it currently is.",10576,2022-01-12T13:19:05Z,0
1742,RGafiyatullin,"Can we opt into using `tokio::sync::broadcast::{Sender,Receiver}` to do the whole heavy lifting with subscribe/unsubscribe routines?

I understand that it has a completely different approach to handling slow-consumers: drop the items that haven't been consumed in-time and inform the consumer that it is lagging.

But configuring a large but predictable channel-capacity in my opinion is better that having  an unbounded buffer per each consumer.
",10576,2022-01-12T13:32:20Z,0
1743,koute,"Well, unbounded buffers are currently used where they're used for a reason (otherwise we would have made them bounded already I assume), so just blindly replacing them with bounded buffers will most likely not be appropriate without a deep case-by-case understanding of the consequences.

It's a worthwhile goal, but it's kinda out-of-scope of this issue, and I'm guessing it'd be orders of magnitude more work. As a first step we probably just want to make sure that we won't leak any subscriptions, and then we can think about getting rid of unbounded buffers.",10576,2022-01-12T13:41:25Z,0
1744,RGafiyatullin,"Within that issue nothing will be done to the pair of `::sc_utils::mpsc::{TracingUnboundedSender, TracingUnboundedReceiver}`: those are to remain just the MPSC channel with metrics.

As per @andresilva 's comment I will think what can be done in order to generalise the pub-sub in `sc_client_api::notifications` and `sc_utils::notification`, starting with the common way to perform un-subscription eagerly upon rx-side being dropped (so that the stream liveness would not be essential for ""garbage collection"" on the tx-side).",10576,2022-01-13T14:16:19Z,0
1745,andresilva,"I feel like that's the most straightforward way, it's essentially the same as @koute suggested in the chat earlier today but we re-use a type for the registry (from `sc_utils::notification` instead of creating a new trait) and we don't make any changes to the channels themselves.",10576,2022-01-13T17:49:07Z,0
1746,RGafiyatullin,"@bkchr,

> I did not yet analyzed the entire pr very close, but are there any implementation details besides the removal of this one clean up method?

Both `sc-utils::notification` and `sc-client-api::notifications` have been reworked so that
- they preserve the existing interface;
- the logic for subscription and sending the messages is moved into the implementaiton of the traits defined in `sc-utils::pubsub`;
- the logic for management of the underlying channels is moved to the implementation of `sc-utils::pubsub::Channel` (implemented by `sc-utils::pubsub::channels::TracingUnbounded<T>`).

Specifically, the `sc-utils::notification::Registry` implements:
- `Subscribe<()>` — any subscriber will receive all the messages from the hub;
- `Dispatch<Message, Item = Message> where Message: Clone` — each `Message` sent through this hub will be cloned and passed to all the subscribers.

Specifically, the `sc-client-api::notifications::Registry` implements:
- `Subscribe<( FilterKeys, ChildFilterKeys )>` — subscribers specify the keys they are interested in;
- `Dispatch<( Hash, ChangeSet, ChildChangeSet ), Item = ( Hash, StorageChangeSet )>` — the registry delivers the pair of Hash and StorageChangeSet only to those subscribers that are interested in the currently propagated changes.

> I also did not really followed the initial discussion about the issue that should be solved, but I would have expected that we also see changes outside of the definition of these utils because we want to simplify other code?

The original discussion raised the question of the same job (unsubscribe upon rx drop) is being solved in several places several different ways. 
Hence the PR addresses that particular issue by making the similar components to use the single generic backend.",10576,2022-01-24T12:28:56Z,0
1747,bkchr,CC @kianenigma @emostov ,10724,2022-01-24T10:10:36Z,0
1748,kianenigma,"Can you explain why you need this? There is a reason that we added that constraint, which is explained right above the line: 

```
// we only accept an election provider that has staking as data provider.
```

All in all, removing the bound might allow for more misconfiguration and footguns to happen. 

> that i can impl my cutom ElectionProvider

You can have any custom `ElectionProvider`, as long as its `DataProvider` is staking. ",10724,2022-01-24T10:30:14Z,0
1749,zzm-Zhong,"Sorry, i know how to do this.",10724,2022-01-24T10:52:37Z,0
1750,ggwpez,"> Contract weights look good to me. As for the code snippet you posted which is suppose to panic with a div by zero: When looking at the weights it does seem that:
> 
> ```
> on_initialize_per_queue_item(1) - on_initialize_per_queue_item(0) != 0
> ```
> 
> Not sure why it panics.

Okay thanks. I looked at the CI output and it seems to run now :+1:  ",10692,2022-01-20T09:26:49Z,0
1751,ggwpez,bot merge,10692,2022-01-24T12:35:16Z,0
1752,bkchr,@koute do you maybe want to work on this? ,10244,2021-11-12T11:30:49Z,0
1753,koute,Sure I can take a stab at it (since I'm in the area anyway); just one question - does anyone remember if we already have a benchmark for this? (If not I'll add one.),10244,2021-11-12T11:33:07Z,0
1754,bkchr,We don't have a benchmark for this yet. Feel free to add one 🙂,10244,2021-11-12T11:59:47Z,0
1755,koute,"So I've done some experiments. Here's a quick rundown of the numbers based on a simple benchmark (calls `new_instance` and then calls the `test_empty_return` within the runtime):

* Each iteration **with** fast instance reuse currently takes ~5us.
* Each iteration **without** fast instance reuse currently takes ~1ms.
* After https://github.com/paritytech/substrate/pull/10394 (plus one more PR that I'll put up after that one) is merged each iteration **without** fast instance reuse and **without** pooling strategy will take ~30us.
* And finally on top of that turning on the pooling only gives us an extra ~5us, so ~25us per iteration.

So pooling doesn't actually net that much extra speed (at least in this benchmark), however even without pooling after my PRs the codepath without fast instance reuse becomes pretty fast, although unfortunately not as fast as our own fast instance reuse method.

So now the question is - what do you want to do here? We could maybe close the gap even further with some optimization work on `wasmtime`'s side, we could just eat the ~25us loss, or we could keep it as-is (with the fast instance reuse being the default) and reinvestigate another day.",10244,2021-12-02T11:01:58Z,0
1756,pepyakin,"Thanks for so detailed investigation.
 
Could you try the same but with a real runtime? One of the biggest source of overhead for Fast Instance Reuse (FIR) is copying over the data segments. In a real runtime data segments could reach 200-300 KiB. I expect that it would also influence the pooling strategy, however, we can also try to use wasmtime's userfaultfd which may help. In that case we should be careful with a more representative workload. Also that would depend on a fresh Linux but that may be ok.

Besides that we could also try to see if things like `wasmtime::InstancePre` or register the functions in config can shave some more time. I wouldn't hold the breath for those though.

Admittedly, FIR is a hack and I'd be happy to get rid of it. At some point we may run out of tricks in our sleeves to keep it work in case changes related to new features. Ideally we improve wasmtime so that it works for this ultra low latency scenario. I am optimistic because AFAIU the folks behind wasmtime also value low-latency a lot.
",10244,2021-12-02T11:49:53Z,0
1757,koute,"Okay, here are some numbers calling into the Kusama runtime (the function called within the runtime is exactly the same - I copy-pasted it from the output of `cargo expand` for the test runtime and recompiled it as part of the full Kusama runtime):

* **With** fast instance reuse: ~49us
* **Without** fast instance reuse: ~4.9ms
* **Without** fast instance reuse, after my PRs, no pooling: ~83us
* **Without** fast instance reuse, after my PRs, with pooling, without `uffd`: ~83us
* **Without** fast instance reuse, after my PRs, with pooling, with `uffd`: ~48us

...so this does look promising if we enable both pooling and `uffd`, basically giving us the same performance as with fast instance reuse! (Enabling only one of them gives the normal ~83us.)

So it looks like we can probably just delete the fast instance reuse codepath? Before we commit it'd be nice to make one more test that's more real-world, e.g. importing a bunch of blocks from an actual production chain and timing that, or something along these lines. @pepyakin Any idea what would be good to run?",10244,2021-12-06T06:27:19Z,0
1758,pepyakin,"Ok, this is very useful and a good sign.

I think even without UFFD it is not that bad: it's 2x regression compared to 5x we witnessed before. 

Relying on UFFD is kind of annoying still though. I checked the code and it seems to require 4.11. It seems that we can afford to impose the minimum kernel version requirement. On the first glance it seems that in case we enable UFFD, executor will fail during the run time on <4.11, which is really annoying.

<s>While I was browsing the code, I stumbled upon the `paged_memory_initialization` configuration option which I completely forgot about. Did you enable it?</s> Nevermind, `paged_memory_initialization` is enabled by default with UFFD enabled.

Regarding the tests. I think block importing may be a good start, although once again it may be a bit deceiving, at least in case of the production chain. E.g. with UFFD we can basically skip the data segment initialization, however, at the price of a more costly access to the un-paged memory areas where data segments reside (or maybe even untouched/zeroed areas, I haven't dived into the implementation that deep). In a production chain the first many blocks will be empty and will hit only the same pattern, and as I imagine only a subset of data segments will be actually used. If that's the case, maybe it will be better to come up with a synthetic test.",10244,2021-12-06T16:07:40Z,0
1759,pepyakin,"For the record, there is a discussion going about using COW pages [here](https://github.com/paritytech/substrate/pull/10480#issuecomment-995464969). Quoting @koute :

> Anyway, I did some experiments on wasmtime with COW memory and... it actually looks promising. On our benchmarks with the Kusama runtime the invocation time dropped from ~48us (which is what we get with either fast instance reuse or instance pooling + uffd) to ~20us, so it might be worth it to investigate this even further. (Of course this is just a YOLO proof of concept implementation; doing this properly would require more work to handle all of the corner cases.) From the profiling I did it might be possible to go even lower, since now after COW-ing the linear memory I see a bunch of normal memory allocations related to imports which dominate the runtime and which should also be cacheable across invocations.
>
> [edit]After switching to preinitializing the module the invocation time with COW'd memory goes down to ~14us.[/edit]
",10244,2021-12-16T12:07:26Z,0
1760,koute,"Continuing the discussion from the PR, for now I'm thinking we should do this:

1. Merge in the refactoring from https://github.com/paritytech/substrate/pull/10480 but do not enable instance pooling (I'll update the PR to strip it out).
2. See if we can maybe contribute COW-based instance spawning to `wasmtime`, basically using @pepyakin 's idea to have an `InstancePre` which will also keep a fossilized copy of initialized memory and allow spawning cheap `Instance`s. (I'm already looking into this.)
3. If we can get COW-based spawning contributed then we'll switch to that, forget about instance pooling and rip out the fast instance reuse. (This will simplify our code *and* be faster.)
4. If (3) doesn't work out for some reason we can always get back to instance pooling with the current code from my PR (but first get the `uffd` feature to fail gracefully on older kernels, which should be easier and less controversial of the feature to contribute to `wasmtime`).",10244,2021-12-16T12:19:30Z,0
1761,koute,"For posterity, here I'm copy-pasting the results of final benchmarks of my new CoW-based instance reuse mechanism:

![149503025-f3d56896-5181-4fa0-8b26-ea9ba03fbeb2](https://user-images.githubusercontent.com/246574/150786154-172fd50d-4f4e-47fb-9270-1ed5f54fe644.png)

![149503033-0c7c48ad-64e4-4bb0-a0d4-dfaf2223cd9c](https://user-images.githubusercontent.com/246574/150786162-c2a6c5c1-7852-458a-a7d0-26eaa9ba4638.png)

Legend:
- `native_instance_reuse`: new CoW-based reuse
- `legacy_instance_reuse`: our current reuse mechanism
- `instance_pooling_with_uffd`: create a fresh instance with `InstanceAllocationStrategy::Pooling` strategy *with* `uffd` turned on
- `instance_pooling_without_uffd`: create a fresh instance with `InstanceAllocationStrategy::Pooling` strategy *without* `uffd` turned on
- `recreate_instance`: create a fresh instance with `InstanceAllocationStrategy::OnDemand` strategy
- `interpreted`: `wasmi`

The measurements are *only* for the main thread; thread count on the bottom signifies how many other threads were running in the background doing exactly the same thing as the main thread, e.g. for 4 threads there was 1 thread (the main thread) being benchmarked while other 3 threads were running in the background.

The benchmarks are not yet fully committed; I'll add them in a PR after the new instantiation mechanism will be merged-in to `wasmtime` and we can switch to it.",10244,2022-01-24T12:58:23Z,0
1762,koute,"There's also the `-C target-cpu` flag (mentioned in https://github.com/paritytech/polkadot/issues/4311); by default AFAIK it's set to `x86-64` (run `rustc -C target-cpu=help` for a full list), and I *think* we could use the `x86-64-v2` by default as CPUs which are a decade old should support it at this point.

The feature levels themselves are described here:

https://gitlab.com/x86-psABIs/x86-64-ABI/-/blob/master/x86-64-ABI/low-level-sys-info.tex",10608,2022-01-24T11:33:33Z,0
1763,ggwpez,"> There's also the `-C target-cpu` flag (mentioned in [paritytech/polkadot#4311](https://github.com/paritytech/polkadot/issues/4311)); by default AFAIK it's set to `x86-64` (run `rustc -C target-cpu=help` for a full list), and I _think_ we could use the `x86-64-v2` by default as CPUs which are a decade old should support it at this point.

Thanks for the idea!  
This was investigated as well for `wasmi` https://github.com/paritytech/wasmi/issues/339#issuecomment-1015761543  
I also tested it in Substrate on reference hardware, with no performance increase.  

I'm not sure if it makes sense to specify a concrete value (besides `native`) for it, since we are only concerned about the performance on reference hardware.",10608,2022-01-24T12:25:02Z,0
1764,koute,"That's good to know, thanks for checking!

I was wondering about the actual performance difference since the Moonbeam guys wrote that it gave them ""good results""; it's a bummer you've found no increase. (Although maybe it just makes a difference when a significantly newer target is specified, instead of just slightly bumping the baseline?)",10608,2022-01-24T13:09:38Z,0
1765,ggwpez,"> Although maybe it just makes a difference when a significantly newer target is specified, instead of just slightly bumping the baseline?

The reference hardware is a `i7-7700K` from 2017, so compiling on newer CPU should already make it faster than the weights that we have specified.  
I will still put this in my backlog to take another look, just to ensure that we get maximum performance.  
PS: We are looking to upgrading the ref hardware soon anyway, so everything here would change again :see_no_evil: ",10608,2022-01-24T13:17:32Z,0
1766,koute,"I can take this.

> So, my proposal is to add a new host function which only purpose is to handle such a panic case. I once created a pr for this with the proposed name `PanicHandler`, but @pepyakin didn't liked it. So, we should find a better name for this.

This one, correct? https://github.com/paritytech/substrate/pull/7954",10585,2022-01-24T12:50:17Z,0
1767,bkchr,"> I can take this.

Good 👍

> > So, my proposal is to add a new host function which only purpose is to handle such a panic case. I once created a pr for this with the proposed name `PanicHandler`, but @pepyakin didn't liked it. So, we should find a better name for this.
> 
> This one, correct? https://github.com/paritytech/substrate/pull/7954

Yeah that one ",10585,2022-01-24T13:37:37Z,0
1768,bernardoaraujor,same error with `monthly-2021-09` and `monthly-2021-08`,10027,2021-10-14T11:06:33Z,0
1769,bernardoaraujor,"slightly different error message on `monthly-2021-07`:

```
$ ./target/release/substrate benchmark --chain dev --wasm-execution=compiled --steps 50 --repeat 20 --pallet=pallet_offences --extrinsic=*
...
2021-10-15 16:48:54 Benchmarking report_offence_im_online 15/17, run 6/20    
2021-10-15 16:48:59 Benchmarking report_offence_im_online 16/17, run 5/20    

====================

Version: 2.0.0-83808aa815-x86_64-linux-gnu

   0: sp_panic_handler::set::{{closure}}
   1: std::panicking::rust_panic_with_hook
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:626:17
   2: std::panicking::begin_panic_handler::{{closure}}
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:519:13
   3: std::sys_common::backtrace::__rust_end_short_backtrace
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/sys_common/backtrace.rs:141:18
   4: rust_begin_unwind
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:515:5
   5: core::panicking::panic_fmt
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/core/src/panicking.rs:92:14
   6: core::panicking::assert_failed_inner
   7: core::panicking::assert_failed
   8: core::ops::function::FnOnce::call_once{{vtable.shim}}
   9: <pallet_offences_benchmarking::Pallet<T> as frame_benchmarking::utils::Benchmarking<frame_benchmarking::utils::BenchmarkResults>>::run_benchmark::{{closure}}
  10: <pallet_offences_benchmarking::Pallet<T> as frame_benchmarking::utils::Benchmarking<frame_benchmarking::utils::BenchmarkResults>>::run_benchmark
  11: <node_runtime::Runtime as frame_benchmarking::utils::runtime_decl_for_Benchmark::Benchmark<sp_runtime::generic::block::Block<sp_runtime::generic::header::Header<u32,sp_runtime::traits::BlakeTwo256>,sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic<sp_runtime::multiaddress::MultiAddress<<<sp_runtime::MultiSignature as sp_runtime::traits::Verify>::Signer as sp_runtime::traits::IdentifyAccount>::AccountId,u32>,node_runtime::Call,sp_runtime::MultiSignature,(frame_system::extensions::check_spec_version::CheckSpecVersion<node_runtime::Runtime>,frame_system::extensions::check_tx_version::CheckTxVersion<node_runtime::Runtime>,frame_system::extensions::check_genesis::CheckGenesis<node_runtime::Runtime>,frame_system::extensions::check_mortality::CheckMortality<node_runtime::Runtime>,frame_system::extensions::check_nonce::CheckNonce<node_runtime::Runtime>,frame_system::extensions::check_weight::CheckWeight<node_runtime::Runtime>,pallet_transaction_payment::ChargeTransactionPayment<node_runtime::Runtime>)>>>>::dispatch_benchmark
  12: node_runtime::api::dispatch
  13: std::thread::local::LocalKey<T>::with
  14: <node_executor::Executor as sc_executor::native_executor::NativeExecutionDispatch>::dispatch
  15: sc_executor::native_executor::WasmExecutor::with_instance::{{closure}}
  16: sc_executor::wasm_runtime::RuntimeCache::with_instance
  17: <sc_executor::native_executor::NativeExecutor<D> as sp_core::traits::CodeExecutor>::call
  18: sp_state_machine::execution::StateMachine<B,H,N,Exec>::execute_aux
  19: sp_state_machine::execution::StateMachine<B,H,N,Exec>::execute
  20: frame_benchmarking_cli::command::<impl frame_benchmarking_cli::BenchmarkCmd>::run
  21: node_cli::command::run
  22: substrate::main
  23: std::sys_common::backtrace::__rust_begin_short_backtrace
  24: std::rt::lang_start::{{closure}}
  25: core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/core/src/ops/function.rs:259:13
      std::panicking::try::do_call
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:401:40
      std::panicking::try
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:365:19
      std::panic::catch_unwind
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panic.rs:434:14
      std::rt::lang_start_internal::{{closure}}
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/rt.rs:45:48
      std::panicking::try::do_call
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:401:40
      std::panicking::try
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:365:19
      std::panic::catch_unwind
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panic.rs:434:14
      std::rt::lang_start_internal
             at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/rt.rs:45:20
  26: main
  27: __libc_start_main
  28: _start


Thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `1`,
 right: `4`', /home/bear/develop/parity/benchmark-report/substrate/frame/offences/benchmarking/src/lib.rs:336

This is a bug. Please report it at:

	https://github.com/paritytech/substrate/issues/new

Error: Input(""Error executing runtime benchmark: RuntimePanicked(\""assertion failed: `(left == right)`\\n  left: `1`,\\n right: `4`\"")"")
```

I was forced to add `--wasm-execution` here, otherwise I would run into the following:
```
error: 'Interpreted' isn't a valid value for '--wasm-execution <METHOD>'
	[possible values: compiled, interpreted-i-know-what-i-do]
```",10027,2021-10-15T20:25:17Z,0
1770,ferrell-code,I believe you need to use the flag `--features runtime-benchmarks` to benchmark pallets :),10027,2021-10-19T03:40:27Z,0
1771,bernardoaraujor,"
```
$ git show -s
commit bf9683eee40f82cc4e01a05cd375b0e8bba3c8ef (HEAD, tag: monthly-2021-10, tag: devhub/latest)
Author: Shawn Tabrizi <shawntabrizi@gmail.com>
Date:   Thu Sep 30 12:46:48 2021 -0400

    Simple Trait to Inspect Metadata (#9893)
    
    * simple trait to inspect metadata
    
    * import vec
    
    
$ ./target/release/substrate --version
substrate 3.0.0-dev-bf9683eee4-x86_64-linux-gnu


$ ./target/release/substrate benchmark --chain dev --steps 50 --repeat 20 --pallet=* --extrinsic=* --features runtime-benchmarks
error: Found argument '--features' which wasn't expected, or isn't valid in this context

USAGE:
    substrate benchmark --chain <CHAIN_SPEC> --extrinsic <extrinsic> --pallet <pallet> --repeat <repeat> --steps <steps>

For more information try --help
```",10027,2021-10-19T17:39:28Z,0
1772,ferrell-code,"Oh yeah the feature flag is for cargo to compile the substrate binary not a flag for substrate, see example command below

`cargo run --features runtime-benchmarks -- benchmark --chain dev --wasm-execution=compiled --steps 50 --repeat 20 --pallet=pallet_offences --extrinsic=*`
",10027,2021-10-19T17:58:43Z,0
1773,kianenigma,"> slightly different error message on `monthly-2021-07`:
> 
> ```
> $ ./target/release/substrate benchmark --chain dev --wasm-execution=compiled --steps 50 --repeat 20 --pallet=pallet_offences --extrinsic=*
> ...
> 2021-10-15 16:48:54 Benchmarking report_offence_im_online 15/17, run 6/20    
> 2021-10-15 16:48:59 Benchmarking report_offence_im_online 16/17, run 5/20    
> 
> ====================
> 
> Version: 2.0.0-83808aa815-x86_64-linux-gnu
> 
>    0: sp_panic_handler::set::{{closure}}
>    1: std::panicking::rust_panic_with_hook
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:626:17
>    2: std::panicking::begin_panic_handler::{{closure}}
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:519:13
>    3: std::sys_common::backtrace::__rust_end_short_backtrace
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/sys_common/backtrace.rs:141:18
>    4: rust_begin_unwind
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:515:5
>    5: core::panicking::panic_fmt
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/core/src/panicking.rs:92:14
>    6: core::panicking::assert_failed_inner
>    7: core::panicking::assert_failed
>    8: core::ops::function::FnOnce::call_once{{vtable.shim}}
>    9: <pallet_offences_benchmarking::Pallet<T> as frame_benchmarking::utils::Benchmarking<frame_benchmarking::utils::BenchmarkResults>>::run_benchmark::{{closure}}
>   10: <pallet_offences_benchmarking::Pallet<T> as frame_benchmarking::utils::Benchmarking<frame_benchmarking::utils::BenchmarkResults>>::run_benchmark
>   11: <node_runtime::Runtime as frame_benchmarking::utils::runtime_decl_for_Benchmark::Benchmark<sp_runtime::generic::block::Block<sp_runtime::generic::header::Header<u32,sp_runtime::traits::BlakeTwo256>,sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic<sp_runtime::multiaddress::MultiAddress<<<sp_runtime::MultiSignature as sp_runtime::traits::Verify>::Signer as sp_runtime::traits::IdentifyAccount>::AccountId,u32>,node_runtime::Call,sp_runtime::MultiSignature,(frame_system::extensions::check_spec_version::CheckSpecVersion<node_runtime::Runtime>,frame_system::extensions::check_tx_version::CheckTxVersion<node_runtime::Runtime>,frame_system::extensions::check_genesis::CheckGenesis<node_runtime::Runtime>,frame_system::extensions::check_mortality::CheckMortality<node_runtime::Runtime>,frame_system::extensions::check_nonce::CheckNonce<node_runtime::Runtime>,frame_system::extensions::check_weight::CheckWeight<node_runtime::Runtime>,pallet_transaction_payment::ChargeTransactionPayment<node_runtime::Runtime>)>>>>::dispatch_benchmark
>   12: node_runtime::api::dispatch
>   13: std::thread::local::LocalKey<T>::with
>   14: <node_executor::Executor as sc_executor::native_executor::NativeExecutionDispatch>::dispatch
>   15: sc_executor::native_executor::WasmExecutor::with_instance::{{closure}}
>   16: sc_executor::wasm_runtime::RuntimeCache::with_instance
>   17: <sc_executor::native_executor::NativeExecutor<D> as sp_core::traits::CodeExecutor>::call
>   18: sp_state_machine::execution::StateMachine<B,H,N,Exec>::execute_aux
>   19: sp_state_machine::execution::StateMachine<B,H,N,Exec>::execute
>   20: frame_benchmarking_cli::command::<impl frame_benchmarking_cli::BenchmarkCmd>::run
>   21: node_cli::command::run
>   22: substrate::main
>   23: std::sys_common::backtrace::__rust_begin_short_backtrace
>   24: std::rt::lang_start::{{closure}}
>   25: core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/core/src/ops/function.rs:259:13
>       std::panicking::try::do_call
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:401:40
>       std::panicking::try
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:365:19
>       std::panic::catch_unwind
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panic.rs:434:14
>       std::rt::lang_start_internal::{{closure}}
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/rt.rs:45:48
>       std::panicking::try::do_call
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:401:40
>       std::panicking::try
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:365:19
>       std::panic::catch_unwind
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panic.rs:434:14
>       std::rt::lang_start_internal
>              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/rt.rs:45:20
>   26: main
>   27: __libc_start_main
>   28: _start
> 
> 
> Thread 'main' panicked at 'assertion failed: `(left == right)`
>   left: `1`,
>  right: `4`', /home/bear/develop/parity/benchmark-report/substrate/frame/offences/benchmarking/src/lib.rs:336
> 
> This is a bug. Please report it at:
> 
> 	https://github.com/paritytech/substrate/issues/new
> 
> Error: Input(""Error executing runtime benchmark: RuntimePanicked(\""assertion failed: `(left == right)`\\n  left: `1`,\\n right: `4`\"")"")
> ```
> 
> I was forced to add `--wasm-execution` here, otherwise I would run into the following:
> 
> ```
> error: 'Interpreted' isn't a valid value for '--wasm-execution <METHOD>'
> 	[possible values: compiled, interpreted-i-know-what-i-do]
> ```

The last note clearly shows that your code is outdated. The default execution has been `compiled` for almost 4 months now: https://github.com/paritytech/substrate/blob/bd2e5f361a1dce513998ff1aeec9f2ace85b6da1/utils/frame/benchmarking-cli/src/lib.rs#L131",10027,2021-10-26T12:30:26Z,0
1774,bernardoaraujor,"> > slightly different error message on `monthly-2021-07`:
> > ```
> > $ ./target/release/substrate benchmark --chain dev --wasm-execution=compiled --steps 50 --repeat 20 --pallet=pallet_offences --extrinsic=*
> > ...
> > 2021-10-15 16:48:54 Benchmarking report_offence_im_online 15/17, run 6/20    
> > 2021-10-15 16:48:59 Benchmarking report_offence_im_online 16/17, run 5/20    
> > 
> > ====================
> > 
> > Version: 2.0.0-83808aa815-x86_64-linux-gnu
> > 
> >    0: sp_panic_handler::set::{{closure}}
> >    1: std::panicking::rust_panic_with_hook
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:626:17
> >    2: std::panicking::begin_panic_handler::{{closure}}
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:519:13
> >    3: std::sys_common::backtrace::__rust_end_short_backtrace
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/sys_common/backtrace.rs:141:18
> >    4: rust_begin_unwind
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:515:5
> >    5: core::panicking::panic_fmt
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/core/src/panicking.rs:92:14
> >    6: core::panicking::assert_failed_inner
> >    7: core::panicking::assert_failed
> >    8: core::ops::function::FnOnce::call_once{{vtable.shim}}
> >    9: <pallet_offences_benchmarking::Pallet<T> as frame_benchmarking::utils::Benchmarking<frame_benchmarking::utils::BenchmarkResults>>::run_benchmark::{{closure}}
> >   10: <pallet_offences_benchmarking::Pallet<T> as frame_benchmarking::utils::Benchmarking<frame_benchmarking::utils::BenchmarkResults>>::run_benchmark
> >   11: <node_runtime::Runtime as frame_benchmarking::utils::runtime_decl_for_Benchmark::Benchmark<sp_runtime::generic::block::Block<sp_runtime::generic::header::Header<u32,sp_runtime::traits::BlakeTwo256>,sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic<sp_runtime::multiaddress::MultiAddress<<<sp_runtime::MultiSignature as sp_runtime::traits::Verify>::Signer as sp_runtime::traits::IdentifyAccount>::AccountId,u32>,node_runtime::Call,sp_runtime::MultiSignature,(frame_system::extensions::check_spec_version::CheckSpecVersion<node_runtime::Runtime>,frame_system::extensions::check_tx_version::CheckTxVersion<node_runtime::Runtime>,frame_system::extensions::check_genesis::CheckGenesis<node_runtime::Runtime>,frame_system::extensions::check_mortality::CheckMortality<node_runtime::Runtime>,frame_system::extensions::check_nonce::CheckNonce<node_runtime::Runtime>,frame_system::extensions::check_weight::CheckWeight<node_runtime::Runtime>,pallet_transaction_payment::ChargeTransactionPayment<node_runtime::Runtime>)>>>>::dispatch_benchmark
> >   12: node_runtime::api::dispatch
> >   13: std::thread::local::LocalKey<T>::with
> >   14: <node_executor::Executor as sc_executor::native_executor::NativeExecutionDispatch>::dispatch
> >   15: sc_executor::native_executor::WasmExecutor::with_instance::{{closure}}
> >   16: sc_executor::wasm_runtime::RuntimeCache::with_instance
> >   17: <sc_executor::native_executor::NativeExecutor<D> as sp_core::traits::CodeExecutor>::call
> >   18: sp_state_machine::execution::StateMachine<B,H,N,Exec>::execute_aux
> >   19: sp_state_machine::execution::StateMachine<B,H,N,Exec>::execute
> >   20: frame_benchmarking_cli::command::<impl frame_benchmarking_cli::BenchmarkCmd>::run
> >   21: node_cli::command::run
> >   22: substrate::main
> >   23: std::sys_common::backtrace::__rust_begin_short_backtrace
> >   24: std::rt::lang_start::{{closure}}
> >   25: core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/core/src/ops/function.rs:259:13
> >       std::panicking::try::do_call
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:401:40
> >       std::panicking::try
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:365:19
> >       std::panic::catch_unwind
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panic.rs:434:14
> >       std::rt::lang_start_internal::{{closure}}
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/rt.rs:45:48
> >       std::panicking::try::do_call
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:401:40
> >       std::panicking::try
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panicking.rs:365:19
> >       std::panic::catch_unwind
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/panic.rs:434:14
> >       std::rt::lang_start_internal
> >              at /rustc/c8dfcfe046a7680554bf4eb612bad840e7631c4b/library/std/src/rt.rs:45:20
> >   26: main
> >   27: __libc_start_main
> >   28: _start
> > 
> > 
> > Thread 'main' panicked at 'assertion failed: `(left == right)`
> >   left: `1`,
> >  right: `4`', /home/bear/develop/parity/benchmark-report/substrate/frame/offences/benchmarking/src/lib.rs:336
> > 
> > This is a bug. Please report it at:
> > 
> > 	https://github.com/paritytech/substrate/issues/new
> > 
> > Error: Input(""Error executing runtime benchmark: RuntimePanicked(\""assertion failed: `(left == right)`\\n  left: `1`,\\n right: `4`\"")"")
> > ```
> > 
> > 
> >     
> >       
> >     
> > 
> >       
> >     
> > 
> >     
> >   
> > I was forced to add `--wasm-execution` here, otherwise I would run into the following:
> > ```
> > error: 'Interpreted' isn't a valid value for '--wasm-execution <METHOD>'
> > 	[possible values: compiled, interpreted-i-know-what-i-do]
> > ```
> 
> The last note clearly shows that your code is outdated. The default execution has been `compiled` for almost 4 months now:
> 
> https://github.com/paritytech/substrate/blob/bd2e5f361a1dce513998ff1aeec9f2ace85b6da1/utils/frame/benchmarking-cli/src/lib.rs#L131

yeah I'm aware.
I kept rolling back the tags and running the benchmarks again, to see whether the error message would go away.
When I hit `monthly-2021-07` the execution flag behavior changed.

But that's somewhat secondary to this issue. My original goal was just to report this error message I found when benchmarking `pallet_offences`.",10027,2021-10-26T14:32:30Z,0
1775,ferrell-code,"yeah my advice was useless :skull: apologies. https://github.com/paritytech/substrate/blob/732f0371c2d4da7b0ec326c681e0c1d360fc1bd8/frame/offences/benchmarking/src/lib.rs#L408 that is the assert that is failing in the benchmark  and the source of the panic, idk if it really matters though ",10027,2021-10-26T17:05:54Z,0
1776,thiolliere,"maybe the benchmark expect some specific configuration and the way you configured the runtime is inconsistent with this expectation.
So either the configuration of runtime is not sane and the expectation of the benchmark are good or the benchmark is not generic enough on the configuration and needs to be fixed.",10027,2021-11-01T12:07:35Z,0
1777,kianenigma,I get the same issue on current master. It needs a fix. Probably a configuration is broken in node-runtime (and is seemingly fine in `polkadot-runtime` because we run those benchmarks there and they are all fine? ),10027,2021-11-12T14:01:39Z,0
1778,thiolliere,sidenote: out of curiosity where is the result of those benchmark used ?,10027,2021-11-15T08:34:05Z,0
1779,shawntabrizi,@ggwpez,10027,2022-01-05T14:14:53Z,0
1780,ggwpez,"I will look into this now.  

> sidenote: out of curiosity where is the result of those benchmark used ?

*Babe* and *Grandpa*s benchmarks should depend on it, but currently don't. (They need fixing AFAIK)    
@thiolliere ",10027,2022-01-20T12:23:39Z,0
1781,ggwpez,"Somehow the one test that works, only checks the event emission when run in `test` config.  
https://github.com/paritytech/substrate/blob/542a8585339d2581e641df339d254d7dd22b1456/frame/offences/benchmarking/src/lib.rs#L365
If I add this to the failing event tests in `report_offence_grandpa`, then it also works.  
Does anyone know, why it is only checking correct event count for `test` config?",10027,2022-01-24T14:51:45Z,0
1782,ggwpez,"Hi @dharjeezy !  
The `weight.rs` files are calculated from the output of the benchmark results, they are auto-generated.  
It is not possible to just manually modify them.  
  
You would have to change the benchmarks (in baseline.rs) themselves.  
Once this is done, the benchmarking bot can re-calculate the weights.
",10644,2022-01-12T17:52:40Z,0
1783,dharjeezy,"> Hi @dharjeezy ! The `weight.rs` files are calculated from the output of the benchmark results, they are auto-generated. It is not possible to just manually modify them.
> 
> You would have to change the benchmarks (in baseline.rs) themselves. Once this is done, the benchmarking bot can re-calculate the weights.

Oh... My bad! @ggwpez I will fix this anomaly and revert.
Thanks",10644,2022-01-12T17:55:02Z,0
1784,dharjeezy,"Hello @ggwpez i tried writing the benchmarks by removing the iteration so as to remove the `i` parameter, but i am getting 0 as Weight generated(without the `i` parameter) when i run the benchmarks for addition, subtraction, multiplication, and division.",10644,2022-01-16T18:23:42Z,0
1785,ggwpez,"> Hello @ggwpez i tried writing the benchmarks by removing the iteration so as to remove the `i` parameter, but i am getting 0 as Weight generated(without the `i` parameter) when i run the benchmarks for addition, subtraction, multiplication, and division.

The compiler probably optimized it out. I suspect this is how we got the bogus value in there in the first place.  
When I have the time later I will try to find a solution.  
Maybe we need to use something slightly more complicated than just `+=`, or write the final result to storage, will see.",10644,2022-01-17T09:21:08Z,0
1786,dharjeezy,"> > Hello @ggwpez i tried writing the benchmarks by removing the iteration so as to remove the `i` parameter, but i am getting 0 as Weight generated(without the `i` parameter) when i run the benchmarks for addition, subtraction, multiplication, and division.
> 
> The compiler probably optimized it out. I suspect this is how we got the bogus value in there in the first place. When I have the time later I will try to find a solution. Maybe we need to use something slightly more complicated than just `+=`, or write the final result to storage, will see.

Alright. I should hold off on the solution you can come up with so I can implement yh?",10644,2022-01-17T10:30:59Z,0
1787,ggwpez,"> Alright. I should hold off on the solution you can come up with so I can implement yh?

You can also try to find out how to do it if you want, I will have other issues to work on.",10644,2022-01-17T11:01:28Z,0
1788,dharjeezy,"> > Alright. I should hold off on the solution you can come up with so I can implement yh?
> 
> You can also try to find out how to do it if you want, I will have other issues to work on.

Alright. I will try to. Thanks! ",10644,2022-01-17T14:18:46Z,0
1789,ggwpez,"Something like a `#[must_use]` for components would be nice. If the compiler then optimizes it out, we immediately notice it.  
What do you think @shawntabrizi ?  ",10644,2022-01-24T15:09:07Z,0
1790,kianenigma,/benchmark runtime pallet pallet-staking,10347,2021-11-23T08:32:27Z,0
1791,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""kiz-min-comission"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet-staking --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame//src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
2021-11-23 08:38:15 [0] 💸 generated 1 npos voters, 1 from validators and 0 nominators    
2021-11-23 08:38:21 Running Benchmark:pallet_stakingkick9/500/1    
2021-11-23 08:38:27 Running Benchmark:pallet_stakingkick24/500/1    
2021-11-23 08:38:32 Running Benchmark:pallet_stakingkick34/500/1    
2021-11-23 08:38:37 Running Benchmark:pallet_stakingkick42/500/1    
2021-11-23 08:38:43 Running Benchmark:pallet_stakingkick49/500/1    
2021-11-23 08:38:48 Running Benchmark:pallet_stakingkick55/500/1    
2021-11-23 08:38:54 Running Benchmark:pallet_stakingkick61/500/1    
2021-11-23 08:38:59 Running Benchmark:pallet_stakingforce_unstake10/500/1    
2021-11-23 08:39:05 Running Benchmark:pallet_stakingcancel_deferred_slash14/500/1    
2021-11-23 08:39:10 Running Benchmark:pallet_stakingcancel_deferred_slash26/500/1    
2021-11-23 08:39:15 Running Benchmark:pallet_stakingcancel_deferred_slash35/500/1    
2021-11-23 08:39:20 Running Benchmark:pallet_stakingcancel_deferred_slash43/500/1    
2021-11-23 08:39:26 Running Benchmark:pallet_stakingcancel_deferred_slash51/500/1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:26 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:26 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 2 npos voters, 1 from validators and 1 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:27 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:27 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 7 npos voters, 1 from validators and 6 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:28 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:28 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 12 npos voters, 1 from validators and 11 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:29 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:29 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 17 npos voters, 1 from validators and 16 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:30 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:30 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 22 npos voters, 1 from validators and 21 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 Running Benchmark:pallet_stakingpayout_stakers_dead_controller4/500/1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:31 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:31 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 27 npos voters, 1 from validators and 26 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:32 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:32 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 32 npos voters, 1 from validators and 31 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:33 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:33 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 37 npos voters, 1 from validators and 36 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators    
2021-11-23 08:39:34 [0] 💸 new validator set of size 1 has been processed for era 1    
2021-11-23 08:39:34 [0] 💸 generated 42 npos voters, 1 from validators and 41 nominators   <truncated>...
```

</details>

ERROR: Unable to commit file ./frame//src/weights.rs",10347,2021-11-23T08:32:28Z,0
1792,burdges,"Should we grandfather in existing validators?  Or just compute everyone's commission as `max(their_commission,minimum_commission)`?",10347,2021-11-23T12:21:11Z,0
1793,kianenigma,"> Should we grandfather in existing validators?  Or just compute everyone's commission as `max(their_commission,minimum_commission)`?

I don't think it is a good idea to change the preferences on the fly. Enforcing them upon ""validate"" should be enough to ensure all validators eventually comply. 

That being said, we can wrote a migration for that as well. But it will need to be a separate PR. ",10347,2021-11-23T16:24:52Z,0
1794,kianenigma,/benchmark runtime pallet pallet_staking,10347,2021-11-24T14:04:50Z,0
1795,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""kiz-min-comission"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_staking --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/staking/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_staking"", Extrinsic: ""bond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    62.76
              µs

Reads = 5
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    62.76
              µs

Reads = 5
Writes = 4

Pallet: ""pallet_staking"", Extrinsic: ""bond_extra"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: BagsList ListNodes (r:3 w:3)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    102.7
              µs

Reads = 8
Writes = 7

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    102.7
              µs

Reads = 8
Writes = 7

Pallet: ""pallet_staking"", Extrinsic: ""unbond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking Nominators (r:1 w:0)
Storage: Staking MinNominatorBond (r:1 w:0)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: BagsList ListNodes (r:3 w:3)
Storage: Staking Bonded (r:1 w:0)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    110.5
              µs

Reads = 12
Writes = 8

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    110.5
              µs

Reads = 12
Writes = 8

Pallet: ""pallet_staking"", Extrinsic: ""withdraw_unbonded_update"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    46.36
    + s    0.053
              µs

Reads = 4 + (0 * s)
Writes = 3 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    49.47
              µs

Reads = 4
Writes = 3

Pallet: ""pallet_staking"", Extrinsic: ""withdraw_unbonded_kill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    91.07
    + s        0
              µs

Reads = 13 + (0 * s)
Writes = 11 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    91.01
              µs

Reads = 13
Writes = 11

Pallet: ""pallet_staking"", Extrinsic: ""validate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking MinValidatorBond (r:1 w:0)
Storage: Staking MinCommission (r:1 w:0)
Storage: Staking Validators (r:1 w:1)
Storage: Staking MaxValidatorsCount (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: Staking CounterForValidators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     66.3
              µs

Reads = 12
Writes = 8

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     66.3
              µs

Reads = 12
Writes = 8

Pallet: ""pallet_staking"", Extrinsic: ""kick"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    26.32
    + k    13.52
              µs

Reads = 1 + (1 * k)
Writes = 0 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    906.3
              µs

Reads = 66
Writes = 65

Pallet: ""pallet_staking"", Extrinsic: ""nominate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking MinNominatorBond (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking MaxNominatorsCount (r:1 w:0)
Storage: Staking Validators (r:2 w:0)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: Staking Bonded (r:1 w:0)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    75.03
    + n    5.053
              µs

Reads = 12 + (1 * n)
Writes = 6 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    119.9
              µs

Reads = 21
Writes = 6

Pallet: ""pallet_staking"", Extrinsic: ""chill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    64.64
              µs

Reads = 8
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    64.64
              µs

Reads = 8
Writes = 6

Pallet: ""pallet_staking"", Extrinsic: ""set_payee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    11.71
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    11.71
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""set_controller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.59
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.59
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_staking"", Extrinsic: ""set_validator_count"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ValidatorCount (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.194
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.194
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_no_eras"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.43
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.43
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_new_era"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.471
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.471
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_new_era_always"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.41
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.41
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""set_invulnerables"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Invulnerables (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.923
    + v    0.052
              µs

Reads = 0 + (0 * v)
Writes = 1 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.86
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_unstake"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Ledger (r:0 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    86.84
    + s    1.766
              µs

Reads = 11 + (0 * s)
Writes = 12 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    178.2
              µs

Reads = 11
Writes = 62

Pallet: ""pallet_staking"", Extrinsic: ""cancel_deferred_slash"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking UnappliedSlashes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     3118
    + s     16.2
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    12180
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""payout_stakers_dead_controller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasValidatorReward (r:1 w:0)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking ErasStakersClipped (r:1 w:0)
Storage: Staking ErasRewardPoints (r:1 w:0)
Storage: Staking ErasValidatorPrefs (r:1 w:0)
Storage: Staking Payee (r:2 w:0)
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    108.8
    + n    43.06
              µs

Reads = 10 + (3 * n)
Writes = 2 + (1 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     5642
              µs

Reads = 403
Writes = 133

Pallet: ""pallet_staking"", Extrinsic: ""payout_stakers_alive_staked"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasValidatorReward (r:1 w:0)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:2 w:2)
Storage: Staking ErasStakersClipped (r:1 w:0)
Storage: Staking ErasRewardPoints (r:1 w:0)
Storage: Staking ErasValidatorPrefs (r:1 w:0)
Storage: Staking Payee (r:2 w:0)
Storage: System Account (r:2 w:2)
Storage: Balances Locks (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    160.8
    + n    55.85
              µs

Reads = 11 + (5 * n)
Writes = 3 + (3 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     7394
              µs

Reads = 666
Writes = 396

Pallet: ""pallet_staking"", Extrinsic: ""rebond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: BagsList ListNodes (r:3 w:3)
Storage: Staking Bonded (r:1 w:0)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    100.6
    + l    0.059
              µs

Reads = 9 + (0 * l)
Writes = 8 + (0 * l)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    101.8
              µs

Reads = 9
Writes = 8

Pallet: ""pallet_staking"", Extrinsic: ""set_history_depth"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:1)
Storage: Staking ErasStakersClipped (r:0 w:2)
Storage: Staking ErasValidatorPrefs (r:0 w:2)
Storage: Staking ErasValidatorReward (r:0 w:1)
Storage: Staking ErasRewardPoints (r:0 w:1)
Storage: Staking ErasStakers (r:0 w:2)
Storage: Staking ErasTotalStake (r:0 w:1)
Storage: Staking ErasStartSessionIndex (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + e    29.76
              µs

Reads = 2 + (0 * e)
Writes = 4 + (7 * e)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1312
              µs

Reads = 2
Writes = 361

Pallet: ""pallet_staking"", Extrinsic: ""reap_stash"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:1)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    96.17
    + s    1.766
              µs

Reads = 12 + (0 * s)
Writes = 12 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    189.1
              µs

Reads = 12
Writes = 63

Pallet: ""pallet_staking"", Extrinsic: ""new_era"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CounterForNominators (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:0)
Storage: Staking Validators (r:2 w:0)
Storage: Staking Bonded (r:101 w:0)
Storage: Staking Ledger (r:101 w:0)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: BagsList ListBags (r:200 w:0)
Storage: BagsList ListNodes (r:100 w:0)
Storage: Staking Nominators (r:100 w:0)
Storage: Staking ValidatorCount (r:1 w:0)
Storage: Staking MinimumValidatorCount (r:1 w:0)
Storage: Staking CurrentEra (r:1 w:1)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasStakersClipped (r:0 w:1)
Storage: Staking ErasValidatorPrefs (r:0 w:1)
Storage: Staking ErasStakers (r:0 w:1)
Storage: Staking ErasTotalStake (r:0 w:1)
Storage: Staking ErasStartSessionIndex (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    269.5
    + n    44.61
              µs

Reads = 208 + (3 * v) + (4 * n)
Writes = 3 + (3 * v) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v     n   mean µs  sigma µs       %
    1   100      3028     27.98    0.9%
    2   100      3309     17.63    0.5%
    3   100      3489     21.68    0.6%
    4   100      3720     16.64    0.4%
    5   100      4003     19.43    0.4%
    6   100      4241     14.98    0.3%
    7   100      4489     24.88    0.5%
    8   100      4779      15.2    0.3%
    9   100      5191     17.63    0.3%
   10     1      1087     13.84    1.2%
   10     2      1117     10.26    0.9%
   10     3      1159      11.6    1.0%
   10     4      1203      14.8    1.2%
   10     5      1257     11.18    0.8%
   10     6      1282      12.4    0.9%
   10     7      1347     7.814    0.5%
   10     8      1385     5.899    0.4%
   10     9      1441     15.36    1.0%
   10    10      1477     7.333    0.4%
   10    11      1529     10.37    0.6%
   10    12      1549     19.07    1.2%
   10    13      1596     2.383    0.1%
   10    14      1660     15.07    0.9%
   10    15      1714     10.77    0.6%
   10    16      1766     11.85    0.6%
   10    17      1759     11.85    0.6%
   10    18      1840     17.51    0.9%
   10    19      1872     3.961    0.2%
   10    20      1910     17.88    0.9%
   10    21      1952     16.77    0.8%
   10    22      1984     15.99    0.8%
   10    23      2026     6.684    0.3%
   10    24      2065     8.712    0.4%
   10    25      2126     16.91    0.7%
   10    26      2200     11.37    0.5%
   10    27      2235     21.65    0.9%
   10    28      2272     17.04    0.7%
   10    29      2327     18.78    0.8%
   10    30      2364     12.03    0.5%
   10    31      2399     8.436    0.3%
   10    32      2461     22.58    0.9%
   10    33      2514     17.92    0.7%
   10    34      2531     16.84    0.6%
   10    35      2589     13.54    0.5%
   10    36      2653     26.17    0.9%
   10    37      2651     13.49    0.5%
   10    38      2707     19.29    0.7%
   10    39      2758     26.32    0.9%
   10    40      2817     22.86    0.8%
   10    41      2850     11.82    0.4%
   10    42      2883     26.26    0.9%
   10    43      2967     17.07    0.5%
   10    44      2965     13.38    0.4%
   10    45      3008     19.79    0.6%
   10    46      3079     15.12    0.4%
   10    47      3143     16.59    0.5%
   10    48      3192      16.7    0.5%
   10    49      3203     20.16    0.6%
   10    50      3262     13.52    0.4%
   10    51      3309     22.12    0.6%
   10    52      3389     32.05    0.9%
   10    53      3430     25.89    0.7%
   10    54      3459     21.31    0.6%
   10    55      3509     22.92    0.6%
   10    56      3534     23.72    0.6%
   10    57      3569     9.322    0.2%
   10    58      3652     25.39    0.6%
   10    59      3683     15.97    0.4%
   10    60      3728     4.708    0.1%
   10    61      3771     17.68    0.4%
   10    62      3812     19.59    0.5%
   10    63      3883     24.71    0.6%
   10    64      3887     37.57    0.9%
   10    65      3989     25.18    0.6%
   10    66      3994     9.237    0.2%
   10    67      4028     26.46    0.6%
   10    68      4059      19.6    0.4%
   10    69      4069     16.76    0.4%
   10    70      4199     28.74    0.6%
   10    71      4211     43.35    1.0%
   10    72      4232      20.7    0.4%
   10    73      4271     16.72    0.3%
   10    74      4316     27.68    0.6%
   10    75      4398     20.69    0.4%
   10    76      4443     36.99    0.8%
   10    77      4480     8.371    0.1%
   10    78      4519     17.38    0.3%
   10    79      4525     25.86    0.5%
   10    80      4633     29.86    0.6%
   10    81      4627     15.43    0.3%
   10    82      4718     18.05    0.3%
   10    83      4764     18.18    0.3%
   10    84      4777     24.39    0.5%
   10    85      4812     17.42    0.3%
   10    86      4819     17.99    0.3%
   10    87      4900     23.19    0.4%
   10    88      4944     23.65    0.4%
   10    89      4996     32.59    0.6%
   10    90      5051     33.38    0.6%
   10    91      5055     14.06    0.2%
   10    92      5152     20.25    0.3%
   10    93      5151     31.57    0.6%
   10    94      5191     23.16    0.4%
   10    95      5299      26.6    0.5%
   10    96      5301     24.47    0.4%
   10    97      5397     34.27    0.6%
   10    98      5403     40.42    0.7%
   10    99      5404      25.6    0.4%
   10   100      5449     19.27    0.3%

Quality and confidence:
param     error
v         0.834
n         0.041

Model:
Time ~=        0
    + v    284.1
    + n    44.46
              µs

Reads = 208 + (3 * v) + (4 * n)
Writes = 3 + (3 * v) + (0 * n)

Pallet: ""pallet_staking"", Extrinsic: ""get_npos_voters"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CounterForNominators (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:0)
Storage: Staking Validators (r:501 w:0)
Storage: Staking Bonded (r:1500 w:0)
Storage: Staking Ledger (r:1500 w:0)
Storage: Staking SlashingSpans (r:21 w:0)
Storage: BagsList ListBags (r:200 w:0)
Storage: BagsList ListNodes (r:1000 w:0)
Storage: Staking Nominators (r:1000 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    25.05
    + n    27.81
    + s    35.37
              µs

Reads = 204 + (3 * v) + (4 * n) + (1 * s)
Writes = 0 + (0 * v) + (0 * n) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v     n     s   mean µs  sigma µs       %
  500  1000    20     38670     170.4    0.4%
  510  1000    20     38480     89.67    0.2%
  520  1000    20     38640     103.2    0.2%
  530  1000    20     38910     273.5    0.7%
  540  1000    20     39140     83.59    0.2%
  550  1000    20     40100     138.9    0.3%
  560  1000    20     40640     133.7    0.3%
  570  1000    20     40320     293.7    0.7%
  580  1000    20     40670     115.8    0.2%
  590  1000    20     40260     158.1    0.3%
  600  1000    20     41490     146.1    0.3%
  610  1000    20     41310     255.7    0.6%
  620  1000    20     41450     177.2    0.4%
  630  1000    20     41440     256.2    0.6%
  640  1000    20     41830     140.4    0.3%
  650  1000    20     42430     189.3    0.4%
  660  1000    20     42720     103.5    0.2%
  670  1000    20     42540     309.8    0.7%
  680  1000    20     42100     129.5    0.3%
  690  1000    20     42860     259.9    0.6%
  700  1000    20     43880     186.3    0.4%
  710  1000    20     44070     113.4    0.2%
  720  1000    20     43050     125.4    0.2%
  730  1000    20     44120     158.1    0.3%
  740  1000    20     44490     229.4    0.5%
  750  1000    20     44380     204.4    0.4%
  760  1000    20     45070     185.7    0.4%
  770  1000    20     45400     177.5    0.3%
  780  1000    20     44970     193.7    0.4%
  790  1000    20     45500     254.1    0.5%
  800  1000    20     45410     142.6    0.3%
  810  1000    20     46250     240.4    0.5%
  820  1000    20     46750     184.5    0.3%
  830  1000    20     47020     97.05    0.2%
  840  1000    20     46640     146.7    0.3%
  850  1000    20     47260     233.4    0.4%
  860  1000    20     47130     139.7    0.2%
  870  1000    20     47360     185.2    0.3%
  880  1000    20     47670     269.7    0.5%
  890  1000    20     47480     199.2    0.4%
  900  1000    20     49030     89.56    0.1%
  910  1000    20     48350     212.6    0.4%
  920  1000    20     48820       123    0.2%
  930  1000    20     49230     272.1    0.5%
  940  1000    20     49590     246.2    0.4%
  950  1000    20     49830     176.3    0.3%
  960  1000    20     49900     149.4    0.2%
  970  1000    20     50890     157.8    0.3%
  980  1000    20     49920     170.9    0.3%
  990  1000    20     50520     150.4    0.2%
 1000   500    20     36810     150.3    0.4%
 1000   510    20     37760     80.58    0.2%
 1000   520    20     37510     197.2    0.5%
 1000   530    20     37420     64.08    0.1%
 1000   540    20     38520     104.2    0.2%
 1000   550    20     38230     187.6    0.4%
 1000   560    20     38920     158.6    0.4%
 1000   570    20     39760     137.5    0.3%
 1000   580    20     39400     176.1    0.4%
 1000   590    20     39340     219.5    0.5%
 1000   600    20     39870     161.7    0.4%
 1000   610    20     40770     150.8    0.3%
 1000   620    20     41080       144    0.3%
 1000   630    20     40570     220.1    0.5%
 1000   640    20     40470     258.1    0.6%
 1000   650    20     40930     150.9    0.3%
 1000   660    20     40870     140.1    0.3%
 1000   670    20     41680     172.6    0.4%
 1000   680    20     42240     156.6    0.3%
 1000   690    20     42260     227.7    0.5%
 1000   700    20     42310     219.8    0.5%
 1000   710    20     42450     267.1    0.6%
 1000   720    20     42770       205    0.4%
 1000   730    20     43360     234.2    0.5%
 1000   740    20     43880       201    0.4%
 1000   750    20     43900     200.5    0.4%
 1000   760    20     44350     180.2    0.4%
 1000   770    20     45030     220.5    0.4%
 1000   780    20     44790     159.3    0.3%
 1000   790    20     45100     111.6    0.2%
 1000   800    20     45450     144.8    0.3%
 1000   810    20     45620     157.2    0.3%
 1000   820    20     46040     164.4    0.3%
 1000   830    20     45540     316.4    0.6%
 1000   840    20     46530     138.3    0.2%
 1000   850    20     46270       151    0.3%
 1000   860    20     46600     323.5    0.6%
 1000   870    20     47290     187.4    0.3%
 1000   880    20     47340     310.6    0.6%
 1000   890    20     48000       292    0.6%
 1000   900    20     47590     286.7    0.6%
 1000   910    20     48350     263.9    0.5%
 1000   920    20     48720     220.2    0.4%
 1000   930    20     48850     276.7    0.5%
 1000   940    20     49820     232.5    0.4%
 1000   950    20     49880     214.3    0.4%
 1000   960    20     50160     224.2    0.4%
 1000   970    20     50090     272.2    0.5%
 1000   980    20     49690       128    0.2%
 1000   990    20     51160     197.5    0.3%
 1000  1000     1     51230     260.2    0.5%
 1000  1000     2     50480     185.2    0.3%
 1000  1000     3     50520     219.2    0.4%
 1000  1000     4     50550     218.4    0.4%
 1000  1000     5     50720     323.9    0.6%
 1000  1000     6     50760     238.8    0.4%
 1000  1000     7     50150     200.1    0.3%
 1000  1000     8     50480       153    0.3%
 1000  1000     9     50720     242.7    0.4%
 1000  1000    10     50940     222.1    0.4%
 1000  1000    11     50740     208.1    0.4%
 1000  1000    12     51560     200.6    0.3%
 1000  1000    13     50960       300    0.5%
 1000  1000    14     51090     237.8    0.4%
 1000  1000    15     50830     220.4    0.4%
 1000  1000    16     51250       136    0.2%
 1000  1000    17     51130     334.8    0.6%
 1000  1000    18     50970     220.4    0.4%
 1000  1000    19     51290     229.6    0.4%
 1000  1000    20     51230     170.2    0.3%

Quality and confidence:
param     error
v         0.092
n         0.092
s         3.136

Model:
Time ~=        0
    + v    25.07
    + n     27.8
    + s    13.63
              µs

Reads = 204 + (3 * v) + (4 * n) + (1 * s)
Writes = 0 + (0 * v) + (0 * n) + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""get_npos_targets"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Validators (r:501 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    21.28
    + v     9.99
              µs

Reads = 1 + (1 * v)
Writes = 0 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     7508
              µs

Reads = 751
Writes = 0

Pallet: ""pallet_staking"", Extrinsic: ""set_staking_configs"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking MinCommission (r:0 w:1)
Storage: Staking MinValidatorBond (r:0 w:1)
Storage: Staking MaxValidatorsCount (r:0 w:1)
Storage: Staking ChillThreshold (r:0 w:1)
Storage: Staking MaxNominatorsCount (r:0 w:1)
Storage: Staking MinNominatorBond (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.099
              µs

Reads = 0
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.099
              µs

Reads = 0
Writes = 6

Pallet: ""pallet_staking"", Extrinsic: ""chill_other"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking ChillThreshold (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking MaxNominatorsCount (r:1 w:0)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: Staking MinNominatorBond (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    79.63
              µs

Reads = 11
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    79.63
              µs

Reads = 11
Writes = 6


```

</details>",10347,2021-11-24T14:04:52Z,0
1796,shawntabrizi,/benchmark runtime pallet pallet_staking,10347,2021-11-29T16:47:13Z,0
1797,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""kiz-min-comission"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_staking --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/staking/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_staking"", Extrinsic: ""bond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    63.66
              µs

Reads = 5
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    63.66
              µs

Reads = 5
Writes = 4

Pallet: ""pallet_staking"", Extrinsic: ""bond_extra"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: BagsList ListNodes (r:3 w:3)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    103.6
              µs

Reads = 8
Writes = 7

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    103.6
              µs

Reads = 8
Writes = 7

Pallet: ""pallet_staking"", Extrinsic: ""unbond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking Nominators (r:1 w:0)
Storage: Staking MinNominatorBond (r:1 w:0)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: BagsList ListNodes (r:3 w:3)
Storage: Staking Bonded (r:1 w:0)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    110.8
              µs

Reads = 12
Writes = 8

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    110.8
              µs

Reads = 12
Writes = 8

Pallet: ""pallet_staking"", Extrinsic: ""withdraw_unbonded_update"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    46.36
    + s    0.055
              µs

Reads = 4 + (0 * s)
Writes = 3 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     45.38     0.122    0.2%
    2     46.15     0.327    0.7%
    4     46.33     0.185    0.3%
    6     46.53     0.133    0.2%
    8     46.34     0.182    0.3%
   10     46.66      0.29    0.6%
   12     47.49     0.251    0.5%
   14     46.96     0.132    0.2%
   16     47.26     0.089    0.1%
   18     48.29     0.428    0.8%
   20     47.68     0.191    0.4%
   22     47.38     0.088    0.1%
   24     48.23     0.534    1.1%
   26     47.78     0.083    0.1%
   28     47.95     0.146    0.3%
   30     48.64     0.507    1.0%
   32      48.2     0.144    0.2%
   34      48.4     0.141    0.2%
   36     48.33     0.113    0.2%
   38     48.37     0.142    0.2%
   40      48.6     0.127    0.2%
   42     48.81     0.215    0.4%
   44     48.69     0.171    0.3%
   46     48.86      0.19    0.3%
   48     49.07     0.205    0.4%
   50     49.17     0.162    0.3%
   52     49.32     0.157    0.3%
   54     49.13     0.151    0.3%
   56     49.73     0.173    0.3%
   58      50.1     0.129    0.2%
   60     49.83     0.203    0.4%
   62     49.92     0.099    0.1%
   64     49.92     0.191    0.3%
   66     50.27     0.327    0.6%
   68     50.33     0.184    0.3%
   70     50.09      0.12    0.2%
   72     50.38     0.134    0.2%
   74     50.63     0.182    0.3%
   76     50.78     0.138    0.2%
   78     50.48     0.145    0.2%
   80     50.69     0.197    0.3%
   82     50.65      0.12    0.2%
   84     50.95     0.166    0.3%
   86     51.11     0.143    0.2%
   88     51.44     0.139    0.2%
   90     51.15     0.096    0.1%
   92      51.1     0.174    0.3%
   94     51.34     0.336    0.6%
   96     51.25     0.169    0.3%
   98     51.78     0.195    0.3%
  100     51.61     0.115    0.2%

Quality and confidence:
param     error
s             0

Model:
Time ~=    46.37
    + s    0.055
              µs

Reads = 4 + (0 * s)
Writes = 3 + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""withdraw_unbonded_kill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    91.25
    + s        0
              µs

Reads = 13 + (0 * s)
Writes = 11 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0      91.3     0.257    0.2%
    2     91.51     0.208    0.2%
    4     91.08     0.212    0.2%
    6     91.32     0.204    0.2%
    8     91.11     0.258    0.2%
   10     91.99       0.8    0.8%
   12     90.94     0.184    0.2%
   14     91.23     0.216    0.2%
   16     91.34     0.324    0.3%
   18     91.04     0.228    0.2%
   20     91.48     0.405    0.4%
   22     91.12     0.196    0.2%
   24     91.32     0.201    0.2%
   26      91.2     0.313    0.3%
   28     90.84     0.223    0.2%
   30     90.81     0.265    0.2%
   32     90.94     0.313    0.3%
   34     92.29      0.62    0.6%
   36     90.83     0.347    0.3%
   38     91.23       0.3    0.3%
   40     91.13     0.092    0.1%
   42     91.44     0.176    0.1%
   44     91.21     0.333    0.3%
   46     91.32      0.23    0.2%
   48     91.02      0.16    0.1%
   50      91.4     0.229    0.2%
   52     91.04     0.422    0.4%
   54     91.76     0.339    0.3%
   56     91.33     0.258    0.2%
   58     91.28     0.242    0.2%
   60     91.23     0.275    0.3%
   62      91.2     0.388    0.4%
   64     91.35     0.217    0.2%
   66     91.07     0.301    0.3%
   68     90.83      0.24    0.2%
   70     91.32     0.391    0.4%
   72     91.08     0.296    0.3%
   74     91.08     0.252    0.2%
   76     90.71     0.142    0.1%
   78     90.65     0.248    0.2%
   80     91.11     0.213    0.2%
   82     91.23     0.214    0.2%
   84     91.28     0.293    0.3%
   86     91.17     0.583    0.6%
   88     91.29     0.284    0.3%
   90     90.95     0.398    0.4%
   92     91.43     0.356    0.3%
   94      91.7     0.151    0.1%
   96     91.39     0.419    0.4%
   98     90.64     0.314    0.3%
  100     90.98     0.245    0.2%

Quality and confidence:
param     error
s             0

Model:
Time ~=     91.3
    + s        0
              µs

Reads = 13 + (0 * s)
Writes = 11 + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""validate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking MinValidatorBond (r:1 w:0)
Storage: Staking MinCommission (r:1 w:0)
Storage: Staking Validators (r:1 w:1)
Storage: Staking MaxValidatorsCount (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: Staking CounterForValidators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    66.58
              µs

Reads = 12
Writes = 8

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    66.58
              µs

Reads = 12
Writes = 8

Pallet: ""pallet_staking"", Extrinsic: ""kick"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.65
    + k    13.43
              µs

Reads = 1 + (1 * k)
Writes = 0 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    1     40.65     0.172    0.4%
    3     67.63     1.683    2.4%
    5     96.15     0.419    0.4%
    7       122     0.373    0.3%
    9     142.1     0.223    0.1%
   11     169.4     0.207    0.1%
   13     196.6     0.326    0.1%
   15       224     1.508    0.6%
   17     249.2      0.96    0.3%
   19     276.7     3.047    1.1%
   21     309.9     0.696    0.2%
   23     327.5     1.042    0.3%
   25     353.9     1.461    0.4%
   27     390.6     1.629    0.4%
   29     419.8     1.417    0.3%
   31     436.1     2.009    0.4%
   33     478.8     5.905    1.2%
   35     501.8     1.975    0.3%
   37     541.3     3.363    0.6%
   39     541.9     2.477    0.4%
   41     566.6     1.095    0.1%
   43     608.8     1.256    0.2%
   45     629.7       1.3    0.2%
   47     651.5     6.366    0.9%
   49     685.6     1.595    0.2%
   51     695.6     2.333    0.3%
   53     726.4     1.916    0.2%
   55     752.4     1.863    0.2%
   57     793.8      1.65    0.2%
   59       832     8.826    1.0%
   61     840.7     11.18    1.3%
   63       867     8.881    1.0%
   65     890.4     2.739    0.3%
   67     921.8     11.05    1.1%
   69     943.3     2.332    0.2%
   71     998.8     3.462    0.3%
   73      1026     3.016    0.2%
   75      1023     2.625    0.2%
   77      1075     4.121    0.3%
   79      1077     11.51    1.0%
   81      1099     3.085    0.2%
   83      1123     5.927    0.5%
   85      1149     10.34    0.9%
   87      1192     11.44    0.9%
   89      1198     5.142    0.4%
   91      1227     3.192    0.2%
   93      1253     1.392    0.1%
   95      1287     12.11    0.9%
   97      1313     1.704    0.1%
   99      1341     3.336    0.2%
  101      1385     14.68    1.0%
  103      1441      12.4    0.8%
  105      1438     9.696    0.6%
  107      1449     5.279    0.3%
  109      1493     11.32    0.7%
  111      1525      9.28    0.6%
  113      1558     15.13    0.9%
  115      1578     3.309    0.2%
  117      1657     14.31    0.8%
  119      1664     9.372    0.5%
  121      1649     10.07    0.6%
  123      1667     2.809    0.1%
  125      1721      14.3    0.8%
  127      1742     11.03    0.6%

Quality and confidence:
param     error
k         0.016

Model:
Time ~=    21.15
    + k     13.5
              µs

Reads = 1 + (1 * k)
Writes = 0 + (1 * k)

Pallet: ""pallet_staking"", Extrinsic: ""nominate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking MinNominatorBond (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking MaxNominatorsCount (r:1 w:0)
Storage: Staking Validators (r:2 w:0)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: Staking Bonded (r:1 w:0)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    75.51
    + n    5.049
              µs

Reads = 12 + (1 * n)
Writes = 6 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     78.92     0.355    0.4%
    2     85.82     0.161    0.1%
    3     91.28     0.705    0.7%
    4     95.91     0.144    0.1%
    5     101.3     0.491    0.4%
    6     105.9     0.303    0.2%
    7     110.7     0.115    0.1%
    8       116     0.241    0.2%
    9     120.9     0.312    0.2%
   10     126.6     0.259    0.2%
   11     130.9     0.483    0.3%
   12     135.7      0.18    0.1%
   13     140.6     0.268    0.1%
   14     144.8     0.299    0.2%
   15       152     0.601    0.3%
   16     156.4     0.442    0.2%

Quality and confidence:
param     error
n         0.012

Model:
Time ~=    75.45
    + n    5.051
              µs

Reads = 12 + (1 * n)
Writes = 6 + (0 * n)

Pallet: ""pallet_staking"", Extrinsic: ""chill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    65.33
              µs

Reads = 8
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    65.33
              µs

Reads = 8
Writes = 6

Pallet: ""pallet_staking"", Extrinsic: ""set_payee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    11.75
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    11.75
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""set_controller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.25
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.25
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_staking"", Extrinsic: ""set_validator_count"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ValidatorCount (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.252
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.252
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_no_eras"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.431
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.431
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_new_era"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.397
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.397
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_new_era_always"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.423
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.423
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""set_invulnerables"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Invulnerables (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.929
    + v    0.052
              µs

Reads = 0 + (0 * v)
Writes = 1 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v   mean µs  sigma µs       %
    0     2.515     0.016    0.6%
   20     3.903     0.051    1.3%
   40     4.994     0.065    1.3%
   60     6.104     0.034    0.5%
   80     7.181     0.047    0.6%
  100      8.27     0.052    0.6%
  120     9.371      0.04    0.4%
  140      10.5     0.076    0.7%
  160     11.46     0.058    0.5%
  180      12.5     0.061    0.4%
  200     13.48     0.043    0.3%
  220     14.65     0.029    0.1%
  240      15.6     0.035    0.2%
  260     16.59     0.061    0.3%
  280     17.81     0.071    0.3%
  300     18.76     0.102    0.5%
  320      19.3     0.069    0.3%
  340     20.89     0.072    0.3%
  360     21.85     0.233    1.0%
  380     22.76     0.243    1.0%
  400     23.65     0.059    0.2%
  420     25.37      0.11    0.4%
  440     25.78     0.088    0.3%
  460     26.86     0.051    0.1%
  480     28.29     0.262    0.9%
  500     29.05     0.204    0.7%
  520     29.79     0.044    0.1%
  540     30.95     0.057    0.1%
  560     32.69     0.276    0.8%
  580     33.32     0.084    0.2%
  600     34.68     0.178    0.5%
  620     35.54     0.071    0.1%
  640      36.6     0.079    0.2%
  660     37.51      0.11    0.2%
  680      38.6     0.063    0.1%
  700     39.63     0.087    0.2%
  720     41.12     0.074    0.1%
  740     41.93     0.062    0.1%
  760     42.95     0.075    0.1%
  780     44.21     0.114    0.2%
  800     45.13     0.045    0.0%
  820     46.11     0.066    0.1%
  840     47.19     0.087    0.1%
  860      48.5     0.368    0.7%
  880     49.17     0.136    0.2%
  900     50.32     0.117    0.2%
  920     51.33       0.1    0.1%
  940     52.42     0.061    0.1%
  960     53.63      0.08    0.1%
  980     54.57     0.047    0.0%
 1000     55.62     0.056    0.1%

Quality and confidence:
param     error
v             0

Model:
Time ~=    2.876
    + v    0.053
              µs

Reads = 0 + (0 * v)
Writes = 1 + (0 * v)

Pallet: ""pallet_staking"", Extrinsic: ""force_unstake"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Ledger (r:0 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    87.78
    + s    1.787
              µs

Reads = 11 + (0 * s)
Writes = 12 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     82.44     0.211    0.2%
    2     91.94      0.73    0.7%
    4     94.08     0.164    0.1%
    6     97.31     0.139    0.1%
    8     101.9     0.181    0.1%
   10     104.6     0.206    0.1%
   12     109.5     0.393    0.3%
   14     112.5     0.204    0.1%
   16       116     0.247    0.2%
   18     119.8      0.18    0.1%
   20     123.4     0.124    0.1%
   22     127.2     0.283    0.2%
   24     131.4     0.253    0.1%
   26     134.5     0.221    0.1%
   28     139.5     0.297    0.2%
   30     142.3     0.208    0.1%
   32     146.8     0.408    0.2%
   34     149.4     0.162    0.1%
   36     152.7     0.262    0.1%
   38     156.1     0.205    0.1%
   40     160.3     0.229    0.1%
   42       163     0.259    0.1%
   44     166.3     0.524    0.3%
   46     169.5     0.191    0.1%
   48     172.7     0.394    0.2%
   50     176.8     0.219    0.1%
   52     180.6     0.355    0.1%
   54       185     0.448    0.2%
   56     188.1     0.299    0.1%
   58     191.4      0.29    0.1%
   60     194.8     0.279    0.1%
   62     198.4     0.202    0.1%
   64     201.6       0.2    0.0%
   66     205.1     0.434    0.2%
   68     209.1     0.415    0.1%
   70     212.3     0.658    0.3%
   72     216.5     0.257    0.1%
   74     220.9     0.344    0.1%
   76     224.5     0.202    0.0%
   78     227.3      0.18    0.0%
   80     230.8      0.47    0.2%
   82     233.3     0.541    0.2%
   84     237.4      0.11    0.0%
   86     242.7     0.478    0.1%
   88     243.6     0.479    0.1%
   90     248.2     0.277    0.1%
   92       252     0.493    0.1%
   94     255.3     0.652    0.2%
   96       261     3.955    1.5%
   98     263.5     0.241    0.0%
  100     264.6     1.019    0.3%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    87.54
    + s    1.791
              µs

Reads = 11 + (0 * s)
Writes = 12 + (1 * s)

Pallet: ""pallet_staking"", Extrinsic: ""cancel_deferred_slash"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking UnappliedSlashes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     3104
    + s    16.26
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     219.3     0.335    0.1%
   20     825.8     11.22    1.3%
   39      1427     14.26    0.9%
   58      2005     15.97    0.7%
   77      2574     12.84    0.4%
   96      3131     4.693    0.1%
  115      3677     8.849    0.2%
  134      4212      12.5    0.2%
  153      4735     18.29    0.3%
  172      5233      10.3    0.1%
  191      5739     13.64    0.2%
  210      6241     17.55    0.2%
  229      6720     17.43    0.2%
  248      7157     12.06    0.1%
  267      7613     24.24    0.3%
  286      8063     21.53    0.2%
  305      8488     25.25    0.2%
  324      8911     15.68    0.1%
  343      9309     30.37    0.3%
  362      9705     21.26    0.2%
  381     10100     28.72    0.2%
  400     10460      23.4    0.2%
  419     10820     26.55    0.2%
  438     11170     23.82    0.2%
  457     11500     26.92    0.2%
  476     11830     26.31    0.2%
  495     12140     28.97    0.2%
  514     12460     14.24    0.1%
  533     12760     24.96    0.1%
  552     13020     18.24    0.1%
  571     13310     36.26    0.2%
  590     13570     33.07    0.2%
  609     13790     22.02    0.1%
  628     14020     25.73    0.1%
  647     14240     26.24    0.1%
  666     14470     20.75    0.1%
  685     14650     28.71    0.1%
  704     14850     31.68    0.2%
  723     15040     28.64    0.1%
  742     15180     32.29    0.2%
  761     15330     25.71    0.1%
  780     15490     30.72    0.1%
  799     15610     26.72    0.1%
  818     15730     29.36    0.1%
  837     15840     12.32    0.0%
  856     15910     26.96    0.1%
  875     16000     18.15    0.1%
  894     16080     41.15    0.2%
  913     16120     24.66    0.1%
  932     16160     26.63    0.1%
  951     16190     27.52    0.1%
  970     16250      36.3    0.2%
  989     16230      16.6    0.1%

Quality and confidence:
param     error
s         0.181

Model:
Time ~=     2769
    + s    16.22
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""payout_stakers_dead_controller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasValidatorReward (r:1 w:0)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking ErasStakersClipped (r:1 w:0)
Storage: Staking ErasRewardPoints (r:1 w:0)
Storage: Staking ErasValidatorPrefs (r:1 w:0)
Storage: Staking Payee (r:2 w:0)
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    107.5
    + n    42.84
              µs

Reads = 10 + (3 * n)
Writes = 2 + (1 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     151.2     0.961    0.6%
    6     406.9     4.399    1.0%
   11     584.5     6.924    1.1%
   16       797      5.42    0.6%
   21      1010     9.041    0.8%
   26      1226     13.86    1.1%
   31      1432     11.33    0.7%
   36      1645     3.433    0.2%
   41      1860     15.49    0.8%
   46      2064     12.57    0.6%
   51      2277     13.56    0.5%
   56      2486     12.99    0.5%
   61      2715     20.83    0.7%
   66      2922     11.65    0.3%
   71      3137     18.42    0.5%
   76      3357     12.21    0.3%
   81      3592     21.22    0.5%
   86      3790     13.63    0.3%
   91      3981     19.94    0.5%
   96      4183     16.62    0.3%
  101      4441     15.36    0.3%
  106      4639     18.66    0.4%
  111      4883     30.97    0.6%
  116      5074     9.816    0.1%
  121      5302     15.07    0.2%
  126      5508     17.94    0.3%
  131      5700     19.58    0.3%
  136      5945      23.1    0.3%
  141      6143     26.22    0.4%
  146      6410     28.11    0.4%
  151      6584     16.95    0.2%
  156      6836     28.38    0.4%
  161      6970     14.93    0.2%
  166      7215     35.56    0.4%
  171      7420     24.32    0.3%
  176      7649     27.27    0.3%
  181      7889     27.44    0.3%
  186      8130     52.69    0.6%
  191      8333      21.3    0.2%
  196      8506     26.39    0.3%
  201      8728     29.47    0.3%
  206      8952     35.37    0.3%
  211      9152      26.4    0.2%
  216      9365     42.26    0.4%
  221      9623     25.46    0.2%
  226      9847     49.99    0.5%
  231      9982      24.5    0.2%
  236     10240     42.37    0.4%
  241     10400     31.75    0.3%
  246     10610     31.68    0.2%
  251     10830     26.62    0.2%
  256     11130     28.27    0.2%

Quality and confidence:
param     error
n         0.019

Model:
Time ~=    103.4
    + n     42.9
              µs

Reads = 10 + (3 * n)
Writes = 2 + (1 * n)

Pallet: ""pallet_staking"", Extrinsic: ""payout_stakers_alive_staked"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasValidatorReward (r:1 w:0)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:2 w:2)
Storage: Staking ErasStakersClipped (r:1 w:0)
Storage: Staking ErasRewardPoints (r:1 w:0)
Storage: Staking ErasValidatorPrefs (r:1 w:0)
Storage: Staking Payee (r:2 w:0)
Storage: System Account (r:2 w:2)
Storage: Balances Locks (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    147.3
    + n    55.91
              µs

Reads = 11 + (5 * n)
Writes = 3 + (3 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     201.2      5.18    2.5%
    6     478.5     3.542    0.7%
   11     759.3     7.747    1.0%
   16      1035     2.381    0.2%
   21      1335     12.69    0.9%
   26      1599     11.64    0.7%
   31      1867     9.847    0.5%
   36      2162     9.398    0.4%
   41      2447     16.39    0.6%
   46      2738     21.01    0.7%
   51      2993     10.32    0.3%
   56      3325     15.91    0.4%
   61      3552     14.66    0.4%
   66      3850     9.634    0.2%
   71      4143     30.03    0.7%
   76      4414     19.02    0.4%
   81      4666     27.98    0.5%
   86      4931     23.41    0.4%
   91      5227     12.11    0.2%
   96      5537     24.77    0.4%
  101      5826     20.89    0.3%
  106      6068     36.33    0.5%
  111      6376      32.7    0.5%
  116      6617     27.34    0.4%
  121      6950     21.34    0.3%
  126      7188     16.97    0.2%
  131      7435     20.62    0.2%
  136      7708     19.02    0.2%
  141      8013     24.57    0.3%
  146      8382     18.39    0.2%
  151      8591     29.81    0.3%
  156      8847     35.32    0.3%
  161      9098     46.77    0.5%
  166      9402     39.18    0.4%
  171      9671     31.86    0.3%
  176      9978     22.97    0.2%
  181     10280     31.98    0.3%
  186     10630     28.83    0.2%
  191     10740     27.38    0.2%
  196     11110     30.39    0.2%
  201     11430     30.15    0.2%
  206     11680     34.63    0.2%
  211     12020     39.26    0.3%
  216     12330     53.76    0.4%
  221     12570     50.18    0.3%
  226     12820     65.25    0.5%
  231     13080     62.95    0.4%
  236     13270     36.41    0.2%
  241     13610     36.33    0.2%
  246     13890     32.95    0.2%
  251     14200     29.28    0.2%
  256     14470     29.59    0.2%

Quality and confidence:
param     error
n         0.027

Model:
Time ~=    145.9
    + n    55.97
              µs

Reads = 11 + (5 * n)
Writes = 3 + (3 * n)

Pallet: ""pallet_staking"", Extrinsic: ""rebond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: BagsList ListNodes (r:3 w:3)
Storage: Staking Bonded (r:1 w:0)
Storage: BagsList ListBags (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    101.5
    + l    0.064
              µs

Reads = 9 + (0 * l)
Writes = 8 + (0 * l)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    l   mean µs  sigma µs       %
    1       101     0.344    0.3%
    2     101.5     0.369    0.3%
    3     102.1     0.305    0.2%
    4       102      0.33    0.3%
    5     101.9     0.099    0.0%
    6     101.8     0.275    0.2%
    7     102.1     0.148    0.1%
    8     101.7     0.233    0.2%
    9     102.5     0.229    0.2%
   10     102.4     0.213    0.2%
   11     102.2     0.249    0.2%
   12     102.7     0.341    0.3%
   13     102.6     0.243    0.2%
   14     102.2     0.273    0.2%
   15       102     0.161    0.1%
   16     102.1     0.275    0.2%
   17     103.2     0.279    0.2%
   18     102.5     0.184    0.1%
   19     102.5     0.212    0.2%
   20     103.4      0.88    0.8%
   21     102.9       0.2    0.1%
   22     102.8     0.211    0.2%
   23     103.1     0.347    0.3%
   24     103.1     0.345    0.3%
   25     103.4     0.211    0.2%
   26     103.5     0.341    0.3%
   27     103.2     0.461    0.4%
   28     103.1     0.332    0.3%
   29     103.6     0.288    0.2%
   30     103.4     0.205    0.1%
   31     103.4     0.525    0.5%
   32     103.5     0.318    0.3%

Quality and confidence:
param     error
l         0.002

Model:
Time ~=    101.5
    + l    0.066
              µs

Reads = 9 + (0 * l)
Writes = 8 + (0 * l)

Pallet: ""pallet_staking"", Extrinsic: ""set_history_depth"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:1)
Storage: Staking ErasStakersClipped (r:0 w:2)
Storage: Staking ErasValidatorPrefs (r:0 w:2)
Storage: Staking ErasValidatorReward (r:0 w:1)
Storage: Staking ErasRewardPoints (r:0 w:1)
Storage: Staking ErasStakers (r:0 w:2)
Storage: Staking ErasTotalStake (r:0 w:1)
Storage: Staking ErasStartSessionIndex (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + e    29.79
              µs

Reads = 2 + (0 * e)
Writes = 4 + (7 * e)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    e   mean µs  sigma µs       %
    1     36.88     0.157    0.4%
    2     59.55     0.305    0.5%
    3     80.43     0.302    0.3%
    4     103.6     0.197    0.1%
    5     124.5     0.367    0.2%
    6     144.3     0.317    0.2%
    7     168.4     1.989    1.1%
    8       187     0.362    0.1%
    9     208.1     0.434    0.2%
   10     233.1     0.467    0.2%
   11     256.5     0.596    0.2%
   12     279.5     0.851    0.3%
   13     302.3     0.982    0.3%
   14     323.7     0.822    0.2%
   15     345.3     0.646    0.1%
   16     370.4     0.863    0.2%
   17     400.4     0.984    0.2%
   18       423     0.925    0.2%
   19     445.8     0.916    0.2%
   20     473.1     3.814    0.8%
   21     496.7     3.646    0.7%
   22     520.1     1.139    0.2%
   23     546.2     1.419    0.2%
   24     569.5     1.493    0.2%
   25     602.1     1.421    0.2%
   26     623.3     5.587    0.8%
   27     651.3     2.326    0.3%
   28     682.7      6.22    0.9%
   29     702.8      9.13    1.2%
   30     736.4     12.22    1.6%
   31     769.8     11.69    1.5%
   32     798.8     12.12    1.5%
   33       813     6.812    0.8%
   34     839.6     11.15    1.3%
   35     874.9     2.545    0.2%
   36     902.3     9.694    1.0%
   37     914.3     4.023    0.4%
   38     940.1     2.421    0.2%
   39       977     1.513    0.1%
   40      1003     14.51    1.4%
   41      1040     10.04    0.9%
   42      1045     3.333    0.3%
   43      1087     2.732    0.2%
   44      1122     11.77    1.0%
   45      1140     11.64    1.0%
   46      1171     6.791    0.5%
   47      1220     14.88    1.2%
   48      1226     8.505    0.6%
   49      1252     2.491    0.1%
   50      1291     11.76    0.9%
   51      1322     12.85    0.9%
   52      1350     7.567    0.5%
   53      1382     16.42    1.1%
   54      1410     10.52    0.7%
   55      1458     16.92    1.1%
   56      1483     17.69    1.1%
   57      1516     12.85    0.8%
   58      1537     5.625    0.3%
   59      1562     11.27    0.7%
   60      1587     9.995    0.6%
   61      1623     2.198    0.1%
   62      1668     13.74    0.8%
   63      1691     10.83    0.6%
   64      1760     8.724    0.4%
   65      1767      13.3    0.7%
   66      1788     12.96    0.7%
   67      1835     15.04    0.8%
   68      1860      11.4    0.6%
   69      1888     13.31    0.7%
   70      1925     13.15    0.6%
   71      1961     9.625    0.4%
   72      1985     7.872    0.3%
   73      2026     7.959    0.3%
   74      2089     3.855    0.1%
   75      2099     19.03    0.9%
   76      2107     3.013    0.1%
   77      2159     6.679    0.3%
   78      2213     17.25    0.7%
   79      2230      11.1    0.4%
   80      2264     13.99    0.6%
   81      2317     14.58    0.6%
   82      2346      15.2    0.6%
   83      2373     15.03    0.6%
   84      2394     10.59    0.4%
   85      2456     10.82    0.4%
   86      2478     11.22    0.4%
   87      2501     12.95    0.5%
   88      2555     11.15    0.4%
   89      2580     15.14    0.5%
   90      2627     7.728    0.2%
   91      2650     14.43    0.5%
   92      2688     17.01    0.6%
   93      2715     11.98    0.4%
   94      2748     12.77    0.4%
   95      2810     12.59    0.4%
   96      2843     13.23    0.4%
   97      2896     15.19    0.5%
   98      2919     9.966    0.3%
   99      2956     7.635    0.2%
  100      3002     14.37    0.4%

Quality and confidence:
param     error
e         0.069

Model:
Time ~=        0
    + e    29.93
              µs

Reads = 2 + (0 * e)
Writes = 4 + (7 * e)

Pallet: ""pallet_staking"", Extrinsic: ""reap_stash"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:1)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    96.79
    + s    1.791
              µs

Reads = 12 + (0 * s)
Writes = 12 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     98.19     0.194    0.1%
    2     100.1     0.301    0.3%
    3     102.1     0.291    0.2%
    4     103.7     0.199    0.1%
    5     105.9     0.282    0.2%
    6     107.3     0.187    0.1%
    7     109.3      0.18    0.1%
    8     110.9     0.243    0.2%
    9     114.5     0.683    0.5%
   10     114.3     0.162    0.1%
   11     116.1     0.221    0.1%
   12       118     0.178    0.1%
   13     119.3     0.186    0.1%
   14     121.6     0.152    0.1%
   15     123.6     0.326    0.2%
   16     125.3     0.306    0.2%
   17     126.7     0.162    0.1%
   18     129.5      0.82    0.6%
   19     130.1     0.186    0.1%
   20       132     0.348    0.2%
   21     134.1     0.364    0.2%
   22     136.2     0.533    0.3%
   23     137.8     0.276    0.2%
   24     139.6     0.236    0.1%
   25     142.2     0.523    0.3%
   26     143.4     0.232    0.1%
   27     144.6     0.294    0.2%
   28     146.8     0.591    0.4%
   29       148     0.298    0.2%
   30     150.5     0.351    0.2%
   31       153     0.413    0.2%
   32     154.5     0.383    0.2%
   33     155.9     0.416    0.2%
   34     157.7     0.514    0.3%
   35     160.2     0.597    0.3%
   36     162.4     0.343    0.2%
   37     163.5     0.303    0.1%
   38     165.2     0.673    0.4%
   39     165.9     0.573    0.3%
   40     168.9     0.325    0.1%
   41     170.5     0.182    0.1%
   42     171.9     0.475    0.2%
   43       175     0.247    0.1%
   44     175.3     0.427    0.2%
   45       178     0.286    0.1%
   46     179.5     0.314    0.1%
   47     181.9      0.17    0.0%
   48     182.9     0.293    0.1%
   49     184.1     0.329    0.1%
   50     185.7     0.412    0.2%
   51     187.4     0.327    0.1%
   52     190.2     0.201    0.1%
   53       192     0.238    0.1%
   54     194.1     0.459    0.2%
   55     195.7     0.227    0.1%
   56       198     0.207    0.1%
   57     199.1     0.442    0.2%
   58     200.7     0.357    0.1%
   59     202.5     0.149    0.0%
   60     204.7     0.224    0.1%
   61     205.7     0.471    0.2%
   62     209.1     3.989    1.9%
   63     209.3     0.302    0.1%
   64     211.1     0.407    0.1%
   65       212      0.22    0.1%
   66       215     0.297    0.1%
   67     216.9     0.526    0.2%
   68     218.6     0.239    0.1%
   69     220.3     0.317    0.1%
   70     221.8      0.59    0.2%
   71     222.6     0.288    0.1%
   72     224.9     0.367    0.1%
   73       228      0.28    0.1%
   74     229.8     0.467    0.2%
   75     231.9     0.258    0.1%
   76       234     0.296    0.1%
   77     235.4     0.455    0.1%
   78     236.7     0.259    0.1%
   79     238.9     0.307    0.1%
   80       240     0.322    0.1%
   81     243.3     4.463    1.8%
   82     242.2     0.202    0.0%
   83       246     0.457    0.1%
   84     247.1     0.337    0.1%
   85     249.6     0.423    0.1%
   86     251.2     0.477    0.1%
   87     252.5     0.565    0.2%
   88     253.4       0.3    0.1%
   89     257.2      0.33    0.1%
   90     257.2     0.197    0.0%
   91     259.4      0.26    0.1%
   92     260.5     0.512    0.1%
   93     261.5     0.432    0.1%
   94     264.4     1.305    0.4%
   95     267.8     0.726    0.2%
   96     268.1     0.697    0.2%
   97     270.6     0.367    0.1%
   98     272.5     0.441    0.1%
   99     274.1     0.317    0.1%
  100       274     0.355    0.1%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    96.88
    + s     1.79
              µs

Reads = 12 + (0 * s)
Writes = 12 + (1 * s)

Pallet: ""pallet_staking"", Extrinsic: ""new_era"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CounterForNominators (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:0)
Storage: Staking Validators (r:2 w:0)
Storage: Staking Bonded (r:101 w:0)
Storage: Staking Ledger (r:101 w:0)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: BagsList ListBags (r:200 w:0)
Storage: BagsList ListNodes (r:100 w:0)
Storage: Staking Nominators (r:100 w:0)
Storage: Staking ValidatorCount (r:1 w:0)
Storage: Staking MinimumValidatorCount (r:1 w:0)
Storage: Staking CurrentEra (r:1 w:1)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasStakersClipped (r:0 w:1)
Storage: Staking ErasValidatorPrefs (r:0 w:1)
Storage: Staking ErasStakers (r:0 w:1)
Storage: Staking ErasTotalStake (r:0 w:1)
Storage: Staking ErasStartSessionIndex (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    271.6
    + n    44.88
              µs

Reads = 208 + (3 * v) + (4 * n)
Writes = 3 + (3 * v) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v     n   mean µs  sigma µs       %
    1   100      3028     16.26    0.5%
    2   100      3323      16.1    0.4%
    3   100      3511     23.69    0.6%
    4   100      3681     12.43    0.3%
    5   100      4013     24.92    0.6%
    6   100      4245     13.47    0.3%
    7   100      4502     22.31    0.4%
    8   100      4804     17.18    0.3%
    9   100      5214     10.52    0.2%
   10     1      1062      12.4    1.1%
   10     2      1100     15.74    1.4%
   10     3      1162     12.85    1.1%
   10     4      1202     10.82    0.9%
   10     5      1263     9.405    0.7%
   10     6      1301     3.966    0.3%
   10     7      1356     8.105    0.5%
   10     8      1371     7.735    0.5%
   10     9      1435     9.036    0.6%
   10    10      1477     10.72    0.7%
   10    11      1510     12.41    0.8%
   10    12      1550     17.84    1.1%
   10    13      1620     5.671    0.3%
   10    14      1658      8.55    0.5%
   10    15      1694     14.87    0.8%
   10    16      1753     12.68    0.7%
   10    17      1773     11.34    0.6%
   10    18      1839     10.58    0.5%
   10    19      1884     8.096    0.4%
   10    20      1907     11.18    0.5%
   10    21      1934     14.39    0.7%
   10    22      1989     8.024    0.4%
   10    23      2048     18.98    0.9%
   10    24      2094     17.89    0.8%
   10    25      2121     15.95    0.7%
   10    26      2163     16.65    0.7%
   10    27      2215     14.26    0.6%
   10    28      2238     12.55    0.5%
   10    29      2324      19.6    0.8%
   10    30      2364     12.23    0.5%
   10    31      2383     15.25    0.6%
   10    32      2463     10.41    0.4%
   10    33      2502     17.08    0.6%
   10    34      2524     11.69    0.4%
   10    35      2582      15.9    0.6%
   10    36      2644     16.92    0.6%
   10    37      2666     17.32    0.6%
   10    38      2722     12.02    0.4%
   10    39      2734      13.5    0.4%
   10    40      2809     14.27    0.5%
   10    41      2891     9.463    0.3%
   10    42      2884     7.803    0.2%
   10    43      2921     13.33    0.4%
   10    44      2984     26.25    0.8%
   10    45      3036     13.63    0.4%
   10    46      3077     17.64    0.5%
   10    47      3134      11.4    0.3%
   10    48      3162     14.96    0.4%
   10    49      3233     14.15    0.4%
   10    50      3242     27.03    0.8%
   10    51      3301     29.82    0.9%
   10    52      3385     6.707    0.1%
   10    53      3425     19.81    0.5%
   10    54      3454     20.25    0.5%
   10    55      3534     11.56    0.3%
   10    56      3563     9.916    0.2%
   10    57      3565      15.7    0.4%
   10    58      3656     20.19    0.5%
   10    59      3687     15.23    0.4%
   10    60      3748     13.38    0.3%
   10    61      3798     15.32    0.4%
   10    62      3827     26.35    0.6%
   10    63      3892      20.6    0.5%
   10    64      3936     10.57    0.2%
   10    65      3933     17.75    0.4%
   10    66      3993     13.25    0.3%
   10    67      4054     16.61    0.4%
   10    68      4087     15.71    0.3%
   10    69      4125     21.55    0.5%
   10    70      4200      17.2    0.4%
   10    71      4187     11.54    0.2%
   10    72      4263     25.58    0.6%
   10    73      4331     16.82    0.3%
   10    74      4307     24.83    0.5%
   10    75      4412     21.32    0.4%
   10    76      4436     24.25    0.5%
   10    77      4472     20.78    0.4%
   10    78      4481      14.7    0.3%
   10    79      4595      20.2    0.4%
   10    80      4659     29.33    0.6%
   10    81      4693     21.94    0.4%
   10    82      4724     30.45    0.6%
   10    83      4782     15.47    0.3%
   10    84      4783     23.91    0.4%
   10    85      4853     20.85    0.4%
   10    86      4823      15.9    0.3%
   10    87      4936     17.33    0.3%
   10    88      4986     18.46    0.3%
   10    89      4956     16.55    0.3%
   10    90      5110     27.51    0.5%
   10    91      5056      23.1    0.4%
   10    92      5206     28.28    0.5%
   10    93      5188     18.91    0.3%
   10    94      5248     40.53    0.7%
   10    95      5241     20.73    0.3%
   10    96      5281      25.7    0.4%
   10    97      5339     21.15    0.3%
   10    98      5438     26.68    0.4%
   10    99      5428     18.45    0.3%
   10   100      5457     29.44    0.5%

Quality and confidence:
param     error
v         0.873
n         0.043

Model:
Time ~=        0
    + v    286.1
    + n    44.71
              µs

Reads = 208 + (3 * v) + (4 * n)
Writes = 3 + (3 * v) + (0 * n)

Pallet: ""pallet_staking"", Extrinsic: ""get_npos_voters"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CounterForNominators (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:0)
Storage: Staking Validators (r:501 w:0)
Storage: Staking Bonded (r:1500 w:0)
Storage: Staking Ledger (r:1500 w:0)
Storage: Staking SlashingSpans (r:21 w:0)
Storage: BagsList ListBags (r:200 w:0)
Storage: BagsList ListNodes (r:1000 w:0)
Storage: Staking Nominators (r:1000 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    23.84
    + n    27.68
    + s    22.58
              µs

Reads = 204 + (3 * v) + (4 * n) + (1 * s)
Writes = 0 + (0 * v) + (0 * n) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v     n     s   mean µs  sigma µs       %
  500  1000    20     38420       103    0.2%
  510  1000    20     38910     148.1    0.3%
  520  1000    20     38910     96.12    0.2%
  530  1000    20     39560     59.85    0.1%
  540  1000    20     38930       125    0.3%
  550  1000    20     39620     228.2    0.5%
  560  1000    20     39960     110.4    0.2%
  570  1000    20     40050     183.2    0.4%
  580  1000    20     40550     144.7    0.3%
  590  1000    20     40600     167.2    0.4%
  600  1000    20     41170     163.7    0.3%
  610  1000    20     41340     238.9    0.5%
  620  1000    20     41280     225.2    0.5%
  630  1000    20     41410     131.1    0.3%
  640  1000    20     41840     148.9    0.3%
  650  1000    20     41630     241.2    0.5%
  660  1000    20     42370     96.75    0.2%
  670  1000    20     42250     169.5    0.4%
  680  1000    20     42620     119.4    0.2%
  690  1000    20     43290     163.4    0.3%
  700  1000    20     43580     218.4    0.5%
  710  1000    20     43130     132.6    0.3%
  720  1000    20     43240     195.8    0.4%
  730  1000    20     43500       141    0.3%
  740  1000    20     44560       169    0.3%
  750  1000    20     43840     199.8    0.4%
  760  1000    20     44600     142.6    0.3%
  770  1000    20     44750     118.1    0.2%
  780  1000    20     44920       270    0.6%
  790  1000    20     44720     153.8    0.3%
  800  1000    20     45050       147    0.3%
  810  1000    20     45800     311.3    0.6%
  820  1000    20     45870     151.1    0.3%
  830  1000    20     46030       178    0.3%
  840  1000    20     46660     166.7    0.3%
  850  1000    20     46090     212.1    0.4%
  860  1000    20     47030     309.3    0.6%
  870  1000    20     47330     236.3    0.4%
  880  1000    20     47470     136.8    0.2%
  890  1000    20     47260     127.3    0.2%
  900  1000    20     48060     153.4    0.3%
  910  1000    20     47650     205.7    0.4%
  920  1000    20     48260     228.4    0.4%
  930  1000    20     49340     140.9    0.2%
  940  1000    20     49080       244    0.4%
  950  1000    20     49050       229    0.4%
  960  1000    20     49140     251.2    0.5%
  970  1000    20     49180     211.3    0.4%
  980  1000    20     49850     291.1    0.5%
  990  1000    20     50400     218.1    0.4%
 1000   500    20     37230       148    0.3%
 1000   510    20     36970     158.5    0.4%
 1000   520    20     37010       155    0.4%
 1000   530    20     37270     232.8    0.6%
 1000   540    20     38120     167.2    0.4%
 1000   550    20     38160     179.7    0.4%
 1000   560    20     38260       168    0.4%
 1000   570    20     39030     105.4    0.2%
 1000   580    20     38980     131.3    0.3%
 1000   590    20     39160     186.3    0.4%
 1000   600    20     38880     97.15    0.2%
 1000   610    20     39880     153.8    0.3%
 1000   620    20     40560     125.4    0.3%
 1000   630    20     40320     163.5    0.4%
 1000   640    20     40210     177.3    0.4%
 1000   650    20     40210     195.8    0.4%
 1000   660    20     41080     198.3    0.4%
 1000   670    20     41300     209.4    0.5%
 1000   680    20     40750     133.3    0.3%
 1000   690    20     41530     67.59    0.1%
 1000   700    20     41710     192.3    0.4%
 1000   710    20     42910     134.3    0.3%
 1000   720    20     42450     101.2    0.2%
 1000   730    20     43150     197.2    0.4%
 1000   740    20     43300     139.7    0.3%
 1000   750    20     43350     137.9    0.3%
 1000   760    20     43720     172.7    0.3%
 1000   770    20     44360     123.7    0.2%
 1000   780    20     44780     137.4    0.3%
 1000   790    20     44650     99.16    0.2%
 1000   800    20     44570     265.6    0.5%
 1000   810    20     44730     175.3    0.3%
 1000   820    20     45590     144.3    0.3%
 1000   830    20     45010     129.2    0.2%
 1000   840    20     45590     218.2    0.4%
 1000   850    20     46150     262.1    0.5%
 1000   860    20     45820     140.7    0.3%
 1000   870    20     46690     143.2    0.3%
 1000   880    20     47720     220.6    0.4%
 1000   890    20     47030     196.7    0.4%
 1000   900    20     47870     207.6    0.4%
 1000   910    20     47910     104.1    0.2%
 1000   920    20     47950     270.9    0.5%
 1000   930    20     48470     232.8    0.4%
 1000   940    20     49000     140.4    0.2%
 1000   950    20     49020     149.7    0.3%
 1000   960    20     49470     156.7    0.3%
 1000   970    20     49500     294.9    0.5%
 1000   980    20     49600     154.4    0.3%
 1000   990    20     51010     236.3    0.4%
 1000  1000     1     50410     170.5    0.3%
 1000  1000     2     50210     277.7    0.5%
 1000  1000     3     50730     343.1    0.6%
 1000  1000     4     50390     213.8    0.4%
 1000  1000     5     50540       254    0.5%
 1000  1000     6     50460     260.9    0.5%
 1000  1000     7     50520       113    0.2%
 1000  1000     8     50630     208.8    0.4%
 1000  1000     9     50320     164.8    0.3%
 1000  1000    10     50680     173.2    0.3%
 1000  1000    11     50480     188.9    0.3%
 1000  1000    12     50700     146.4    0.2%
 1000  1000    13     50460     319.2    0.6%
 1000  1000    14     50790     411.7    0.8%
 1000  1000    15     50790     147.1    0.2%
 1000  1000    16     51130     136.7    0.2%
 1000  1000    17     50380     136.4    0.2%
 1000  1000    18     50910     135.4    0.2%
 1000  1000    19     50360       145    0.2%
 1000  1000    20     50910     201.1    0.3%

Quality and confidence:
param     error
v         0.087
n         0.087
s         2.972

Model:
Time ~=        0
    + v    24.04
    + n    27.51
    + s        0
              µs

Reads = 204 + (3 * v) + (4 * n) + (1 * s)
Writes = 0 + (0 * v) + (0 * n) + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""get_npos_targets"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Validators (r:501 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    10.07
              µs

Reads = 1 + (1 * v)
Writes = 0 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v   mean µs  sigma µs       %
  500      5059     43.56    0.8%
  510      4990     26.51    0.5%
  520      5063     41.77    0.8%
  530      5248     28.36    0.5%
  540      5472     31.41    0.5%
  550      5486     51.51    0.9%
  560      5504     30.55    0.5%
  570      5654     38.49    0.6%
  580      5756     65.19    1.1%
  590      5904     46.26    0.7%
  600      5924      57.7    0.9%
  610      6012     27.91    0.4%
  620      6020     32.17    0.5%
  630      6250     44.23    0.7%
  640      6172     35.49    0.5%
  650      6399     38.02    0.5%
  660      6425     26.94    0.4%
  670      6644     48.56    0.7%
  680      6607     45.11    0.6%
  690      6782      52.4    0.7%
  700      6821     42.07    0.6%
  710      7021     44.43    0.6%
  720      7127     36.11    0.5%
  730      7107     46.77    0.6%
  740      7163     41.39    0.5%
  750      7304     51.92    0.7%
  760      7621     37.73    0.4%
  770      7589     27.32    0.3%
  780      7795     54.45    0.6%
  790      7875      40.1    0.5%
  800      7786     34.63    0.4%
  810      8079     29.19    0.3%
  820      8205     35.55    0.4%
  830      8196     50.75    0.6%
  840      8359      47.8    0.5%
  850      8414     43.19    0.5%
  860      8584     46.49    0.5%
  870      8626     50.09    0.5%
  880      8843     56.91    0.6%
  890      9007     22.47    0.2%
  900      8820     89.62    1.0%
  910      8996     55.01    0.6%
  920      9429     29.39    0.3%
  930      9144     64.56    0.7%
  940      9371     36.15    0.3%
  950      9514     89.92    0.9%
  960      9714     65.66    0.6%
  970      9646     103.1    1.0%
  980      9614     31.08    0.3%
  990      9956     92.64    0.9%
 1000      9978     70.26    0.7%

Quality and confidence:
param     error
v         0.032

Model:
Time ~=        0
    + v    10.12
              µs

Reads = 1 + (1 * v)
Writes = 0 + (0 * v)

Pallet: ""pallet_staking"", Extrinsic: ""set_staking_configs"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking MinCommission (r:0 w:1)
Storage: Staking MinValidatorBond (r:0 w:1)
Storage: Staking MaxValidatorsCount (r:0 w:1)
Storage: Staking ChillThreshold (r:0 w:1)
Storage: Staking MaxNominatorsCount (r:0 w:1)
Storage: Staking MinNominatorBond (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.187
              µs

Reads = 0
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.187
              µs

Reads = 0
Writes = 6

Pallet: ""pallet_staking"", Extrinsic: ""chill_other"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking ChillThreshold (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking MaxNominatorsCount (r:1 w:0)
Storage: Staking CounterForNominators (r:1 w:1)
Storage: Staking MinNominatorBond (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: BagsList ListNodes (r:2 w:2)
Storage: BagsList ListBags (r:1 w:1)
Storage: BagsList CounterForListNodes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    78.28
              µs

Reads = 11
Writes = 6

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    78.28
              µs

Reads = 11
Writes = 6


```

</details>",10347,2021-11-29T16:47:14Z,0
1798,kianenigma,bot merge,10347,2021-12-02T08:03:20Z,0
1799,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/polkadot/pull/4413 is not mergeable,10347,2021-12-02T08:03:30Z,0
1800,kianenigma,bot merge,10347,2021-12-02T08:10:58Z,0
1801,apopiak,"I've thought about something similar a few times, really like this idea! :+1: 
I've also thought that it could be introduced as a macro and then we could capture the surrounding context (line number etc.).",10626,2022-01-10T15:27:02Z,0
1802,emostov,"This makes sense to me and I think it would improve ergonomics, at least with the style of code I have gotten used to writing the last few months.",10626,2022-01-10T20:45:54Z,0
1803,ggwpez,"> Bit unsure about the naming (what does `defensive` really mean in such a context? `conservative`?) but the idea makes sense.

I wondered the same. `assert` is often used in other languages.",10626,2022-01-19T16:14:18Z,0
1804,kianenigma,"@ggwpez @KiChjang https://en.wikipedia.org/wiki/Defensive_programming#:~:text=Defensive%20programming%20is%20a%20form,of%20software%20under%20unforeseen%20circumstances.&text=Making%20the%20software%20behave%20in,unexpected%20inputs%20or%20user%20actions.",10626,2022-01-19T16:19:21Z,0
1805,ggwpez,"> https://en.wikipedia.org/wiki/Defensive_programming#:~:text=Defensive%20programming%20is%20a%20form,of%20software%20under%20unforeseen%20circumstances.&text=Making%20the%20software%20behave%20in,unexpected%20inputs%20or%20user%20actions.

Okay thanks. I normally use that term if you do error-checking where you don't expect it…  
Well kinda fits your approach :+1: @kianenigma ",10626,2022-01-19T16:21:49Z,0
1806,kianenigma,bot merge,10626,2022-01-24T16:18:03Z,0
1807,kianenigma,bot merge,10626,2022-01-24T16:18:36Z,0
1808,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/substrate/pull/10626 is not mergeable,10626,2022-01-24T16:18:42Z,0
1809,kianenigma,bot merge,10626,2022-01-24T16:18:54Z,0
1810,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/substrate/pull/10626 is not mergeable,10626,2022-01-24T16:19:00Z,0
1811,KiChjang,Leave it be; @paritytech-processbot is stubborn.,10626,2022-01-24T16:22:47Z,0
1812,kianenigma,main reason is that I am on a weak Wifi and a consequence of that seems to be github send my comments multiple times :/ ,10626,2022-01-24T16:24:13Z,0
1813,dependabot[bot],"Dependabot tried to update this pull request, but something went wrong. We're looking into it, but in the meantime you can retry the update by commenting `@dependabot rebase`.",10723,2022-01-24T16:41:16Z,0
1814,KiChjang,bot merge,10723,2022-01-24T16:51:16Z,0
1815,paritytech-processbot[bot],Waiting for commit status.,10723,2022-01-24T16:51:25Z,0
1816,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 2b59a0581118032773e58ba8915f295db9c95e4d,10723,2022-01-24T17:40:20Z,0
1817,shawntabrizi,/benchmark runtime pallet pallet_balances,9675,2021-09-02T03:52:16Z,0
1818,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    75.87
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    75.87
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    58.42
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    58.42
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.51
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.51
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.92
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.92
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    77.39
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    77.39
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    71.44
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    71.44
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-02T03:52:18Z,0
1819,shawntabrizi,/benchmark runtime pallet pallet_staking,9675,2021-09-02T03:53:34Z,0
1820,parity-benchapp[bot],"Starting benchmark for branch: shawntabrizi-test-bench (vs master)

 Comment will be updated.",9675,2021-09-02T03:53:36Z,0
1821,shawntabrizi,/benchmark runtime pallet pallet_staking,9675,2021-09-02T04:17:26Z,0
1822,shawntabrizi,/benchmark runtime pallet pallet_staking,9675,2021-09-02T04:48:46Z,0
1823,joao-paulo-parity,/benchmark runtime pallet pallet_staking,9675,2021-09-02T04:55:58Z,0
1824,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_staking --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/staking/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_staking"", Extrinsic: ""bond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.27
              µs

Reads = 5
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.27
              µs

Reads = 5
Writes = 4

Pallet: ""pallet_staking"", Extrinsic: ""bond_extra"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:1)
Storage: Balances Locks (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    57.38
              µs

Reads = 3
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    57.38
              µs

Reads = 3
Writes = 2

Pallet: ""pallet_staking"", Extrinsic: ""unbond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking Nominators (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    61.62
              µs

Reads = 6
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    61.62
              µs

Reads = 6
Writes = 3

Pallet: ""pallet_staking"", Extrinsic: ""withdraw_unbonded_update"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    52.69
    + s    0.055
              µs

Reads = 4 + (0 * s)
Writes = 3 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     52.28     0.371    0.7%
    2        53      0.51    0.9%
    4     52.46     0.343    0.6%
    6     53.77     0.185    0.3%
    8     52.55     0.187    0.3%
   10     53.51     0.218    0.4%
   12     54.08     0.147    0.2%
   14     53.23       0.1    0.1%
   16     53.01     0.203    0.3%
   18     54.49     0.142    0.2%
   20     53.53     0.157    0.2%
   22     54.48     0.416    0.7%
   24     53.69     0.204    0.3%
   26     53.87     0.291    0.5%
   28     53.61     0.192    0.3%
   30     54.21     0.113    0.2%
   32     54.85     0.142    0.2%
   34     54.56     0.165    0.3%
   36     54.69     0.091    0.1%
   38     54.72     0.194    0.3%
   40     55.06     0.114    0.2%
   42     55.16     0.143    0.2%
   44      55.3     0.101    0.1%
   46     55.23      0.09    0.1%
   48     56.49     0.204    0.3%
   50     55.22     0.133    0.2%
   52      55.2     0.141    0.2%
   54     55.48     0.348    0.6%
   56     55.93     0.098    0.1%
   58     56.22     0.158    0.2%
   60     56.33     0.148    0.2%
   62     56.14     0.176    0.3%
   64     55.56     0.174    0.3%
   66     55.72     0.385    0.6%
   68     56.69     0.408    0.7%
   70        57     0.221    0.3%
   72     56.89     0.142    0.2%
   74     56.41     1.053    1.8%
   76     57.11     0.246    0.4%
   78     57.78     0.282    0.4%
   80     56.57     0.702    1.2%
   82     57.05     0.237    0.4%
   84     57.35     0.397    0.6%
   86     57.28     0.145    0.2%
   88     56.71     0.546    0.9%
   90     57.33      0.64    1.1%
   92     58.01     0.194    0.3%
   94     58.27     0.471    0.8%
   96     57.74     0.153    0.2%
   98     58.24     0.076    0.1%
  100     58.42     0.202    0.3%

Quality and confidence:
param     error
s             0

Model:
Time ~=    52.72
    + s    0.055
              µs

Reads = 4 + (0 * s)
Writes = 3 + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""withdraw_unbonded_kill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    84.57
    + s    2.522
              µs

Reads = 8 + (0 * s)
Writes = 6 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     81.13      0.13    0.1%
    2     89.76     0.208    0.2%
    4      94.9     0.289    0.3%
    6     100.1     0.243    0.2%
    8     105.1     0.239    0.2%
   10     109.4     0.183    0.1%
   12     114.7     0.187    0.1%
   14     120.4     0.132    0.1%
   16     125.5      0.14    0.1%
   18     129.8     0.285    0.2%
   20     134.7     0.236    0.1%
   22     141.7     0.725    0.5%
   24     144.8      0.27    0.1%
   26     150.7     0.219    0.1%
   28     155.8     0.282    0.1%
   30       160     0.426    0.2%
   32     165.1     0.368    0.2%
   34     169.2      0.22    0.1%
   36     175.1     0.489    0.2%
   38     179.1     0.338    0.1%
   40     187.8     1.035    0.5%
   42     189.5     0.392    0.2%
   44     194.3     0.189    0.0%
   46       199     0.151    0.0%
   48     204.1     0.541    0.2%
   50     207.9     0.479    0.2%
   52     212.5     0.531    0.2%
   54     220.1     4.078    1.8%
   56     223.3     0.434    0.1%
   58     228.2     0.536    0.2%
   60     231.8     0.357    0.1%
   62     238.2      0.68    0.2%
   64     242.9     0.864    0.3%
   66     248.1     1.034    0.4%
   68     252.7     0.252    0.0%
   70     264.2     4.401    1.6%
   72     267.6     0.252    0.0%
   74     273.5      0.58    0.2%
   76     280.1     1.046    0.3%
   78     287.6     1.327    0.4%
   80     289.6     0.941    0.3%
   82     292.9     0.412    0.1%
   84     296.8     0.723    0.2%
   86     306.8     1.068    0.3%
   88     313.4     2.435    0.7%
   90     319.4     2.634    0.8%
   92     322.3     1.447    0.4%
   94     325.7      5.56    1.7%
   96       324     3.512    1.0%
   98     326.4      0.72    0.2%
  100     332.4     0.943    0.2%

Quality and confidence:
param     error
s         0.004

Model:
Time ~=    83.57
    + s    2.545
              µs

Reads = 8 + (0 * s)
Writes = 6 + (1 * s)

Pallet: ""pallet_staking"", Extrinsic: ""validate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking MinValidatorBond (r:1 w:0)
Storage: Staking Validators (r:1 w:1)
Storage: Staking MaxValidatorsCount (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    34.67
              µs

Reads = 6
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    34.67
              µs

Reads = 6
Writes = 2

Pallet: ""pallet_staking"", Extrinsic: ""kick"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.26
    + k    16.83
              µs

Reads = 1 + (1 * k)
Writes = 0 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    1      43.1     1.271    2.9%
    3     75.43     0.135    0.1%
    5     111.6     0.232    0.2%
    7     142.6     2.109    1.4%
    9     177.1      0.45    0.2%
   11     211.7     1.223    0.5%
   13     238.1     0.895    0.3%
   15     278.3     1.255    0.4%
   17     310.3     2.645    0.8%
   19     340.5     4.018    1.1%
   21     368.8     1.671    0.4%
   23       404     1.853    0.4%
   25     453.3     11.14    2.4%
   27     466.4     0.817    0.1%
   29     503.7     2.269    0.4%
   31     544.2     0.738    0.1%
   33       579     2.989    0.5%
   35     615.5     6.217    1.0%
   37     648.5     5.232    0.8%
   39     681.2     2.162    0.3%
   41     718.4     8.136    1.1%
   43     745.6     6.208    0.8%
   45     775.2     3.412    0.4%
   47     808.3     1.272    0.1%
   49     833.8       4.5    0.5%
   51     869.5     10.87    1.2%
   53     915.9     2.103    0.2%
   55     966.5     6.181    0.6%
   57     990.4     13.98    1.4%
   59      1018     5.602    0.5%
   61      1047     1.541    0.1%
   63      1089     7.869    0.7%
   65      1122     7.794    0.6%
   67      1171     11.95    1.0%
   69      1174     9.925    0.8%
   71      1223     3.341    0.2%
   73      1232      4.16    0.3%
   75      1272     11.04    0.8%
   77      1308     6.017    0.4%
   79      1331     12.48    0.9%
   81      1368     11.04    0.8%
   83      1434     13.43    0.9%
   85      1453     7.939    0.5%
   87      1459     7.389    0.5%
   89      1516     15.25    1.0%
   91      1525     5.934    0.3%
   93      1592     11.07    0.6%
   95      1614      10.7    0.6%
   97      1655     4.542    0.2%
   99      1701     10.01    0.5%
  101      1723     9.628    0.5%
  103      1767     12.11    0.6%
  105      1810      15.7    0.8%
  107      1806     12.47    0.6%
  109      1861     17.89    0.9%
  111      1916     14.95    0.7%
  113      1923     6.883    0.3%
  115      1979     9.442    0.4%
  117      1978     6.922    0.3%
  119      2057     10.79    0.5%
  121      2089     12.41    0.5%
  123      2087     12.28    0.5%
  125      2119     14.62    0.6%
  127      2191     9.744    0.4%

Quality and confidence:
param     error
k         0.016

Model:
Time ~=    20.07
    + k    16.88
              µs

Reads = 1 + (1 * k)
Writes = 0 + (1 * k)

Pallet: ""pallet_staking"", Extrinsic: ""nominate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking MinNominatorBond (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking MaxNominatorsCount (r:1 w:0)
Storage: Staking Validators (r:2 w:0)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking CounterForNominators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    42.67
    + n    5.816
              µs

Reads = 7 + (1 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     46.83     0.316    0.6%
    2      54.9     0.234    0.4%
    3     59.91     0.172    0.2%
    4     65.86     0.302    0.4%
    5     71.81     0.282    0.3%
    6     77.87     0.204    0.2%
    7     83.32     0.108    0.1%
    8      89.3     0.287    0.3%
    9     94.68      0.26    0.2%
   10     101.4     0.293    0.2%
   11       107     0.469    0.4%
   12     113.1     0.241    0.2%
   13     119.3     0.262    0.2%
   14     123.1     0.353    0.2%
   15     128.8     0.102    0.0%
   16     134.7     0.339    0.2%

Quality and confidence:
param     error
n         0.013

Model:
Time ~=    42.61
    + n    5.813
              µs

Reads = 7 + (1 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_staking"", Extrinsic: ""chill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    18.21
              µs

Reads = 3
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    18.21
              µs

Reads = 3
Writes = 0

Pallet: ""pallet_staking"", Extrinsic: ""set_payee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.31
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.31
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""set_controller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.55
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.55
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_staking"", Extrinsic: ""set_validator_count"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ValidatorCount (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.543
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.543
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_no_eras"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.804
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.804
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_new_era"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.81
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     2.81
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_new_era_always"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.864
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.864
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""set_invulnerables"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Invulnerables (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.447
    + v    0.055
              µs

Reads = 0 + (0 * v)
Writes = 1 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v   mean µs  sigma µs       %
    0     2.882     0.029    1.0%
   20     4.399     0.032    0.7%
   40      5.56     0.018    0.3%
   60     6.785     0.043    0.6%
   80     7.903      0.05    0.6%
  100     9.026     0.034    0.3%
  120     10.14     0.035    0.3%
  140     11.27     0.034    0.3%
  160     12.38     0.038    0.3%
  180     13.49     0.053    0.3%
  200     14.79     0.055    0.3%
  220     15.65     0.043    0.2%
  240      16.5     0.031    0.1%
  260     18.07     0.088    0.4%
  280     19.16     0.053    0.2%
  300     20.31     0.047    0.2%
  320     21.06     0.073    0.3%
  340     22.51     0.154    0.6%
  360     23.24     0.046    0.1%
  380     24.77     0.042    0.1%
  400     25.36     0.036    0.1%
  420     26.59     0.035    0.1%
  440     27.68     0.071    0.2%
  460     28.85     0.082    0.2%
  480     30.57     0.078    0.2%
  500     31.04     0.059    0.1%
  520     32.05      0.06    0.1%
  540     33.06     0.063    0.1%
  560     34.29     0.032    0.0%
  580     35.37     0.083    0.2%
  600     37.29      0.07    0.1%
  620     37.89     0.044    0.1%
  640     38.94     0.071    0.1%
  660     39.98     0.048    0.1%
  680     41.14     0.067    0.1%
  700     42.12     0.088    0.2%
  720     43.32     0.048    0.1%
  740     44.35     0.059    0.1%
  760     45.82     0.441    0.9%
  780      46.9     0.051    0.1%
  800     47.79     0.058    0.1%
  820     48.85     0.055    0.1%
  840     49.94     0.049    0.0%
  860     51.06     0.068    0.1%
  880     52.16     0.055    0.1%
  900      53.3     0.046    0.0%
  920     54.35     0.071    0.1%
  940      55.5     0.048    0.0%
  960     56.59     0.078    0.1%
  980     57.72     0.064    0.1%
 1000     58.74     0.034    0.0%

Quality and confidence:
param     error
v             0

Model:
Time ~=     3.44
    + v    0.055
              µs

Reads = 0 + (0 * v)
Writes = 1 + (0 * v)

Pallet: ""pallet_staking"", Extrinsic: ""force_unstake"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Ledger (r:0 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    62.54
    + s    2.427
              µs

Reads = 6 + (0 * s)
Writes = 6 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     58.78     0.166    0.2%
    2     67.07     0.116    0.1%
    4     70.64     0.262    0.3%
    6     78.05     0.209    0.2%
    8     81.61     0.681    0.8%
   10      86.5     0.117    0.1%
   12      91.5       0.7    0.7%
   14     97.55     0.937    0.9%
   16     101.2     0.199    0.1%
   18     108.4     0.233    0.2%
   20     113.4     0.221    0.1%
   22       116     0.377    0.3%
   24     120.8     0.229    0.1%
   26     125.4     0.438    0.3%
   28     130.1     0.294    0.2%
   30     134.9     0.282    0.2%
   32       142     1.288    0.9%
   34     144.6     0.355    0.2%
   36     150.2     0.179    0.1%
   38     157.9     0.427    0.2%
   40     159.5     0.164    0.1%
   42     164.7     0.206    0.1%
   44     169.4     0.416    0.2%
   46     174.7     0.457    0.2%
   48     178.9     0.274    0.1%
   50     183.4     0.441    0.2%
   52     188.4     0.414    0.2%
   54       194      0.26    0.1%
   56     197.7      0.23    0.1%
   58     203.6     0.412    0.2%
   60     207.2     0.455    0.2%
   62     212.8     0.377    0.1%
   64     217.5     0.677    0.3%
   66     222.3     0.583    0.2%
   68     225.7     0.509    0.2%
   70     232.2     0.362    0.1%
   72     237.8     0.307    0.1%
   74       243     0.442    0.1%
   76     249.2     1.748    0.7%
   78     253.3     5.304    2.0%
   80     257.2     1.045    0.4%
   82     261.5     0.609    0.2%
   84     265.5     0.858    0.3%
   86       270     0.298    0.1%
   88     275.7     0.847    0.3%
   90     280.2     1.428    0.5%
   92     286.6     0.466    0.1%
   94     290.9     0.692    0.2%
   96     296.7     0.757    0.2%
   98     300.1      0.39    0.1%
  100     305.5     0.753    0.2%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    62.51
    + s     2.43
              µs

Reads = 6 + (0 * s)
Writes = 6 + (1 * s)

Pallet: ""pallet_staking"", Extrinsic: ""cancel_deferred_slash"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking UnappliedSlashes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     3827
    + s       20
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1       258     0.419    0.1%
   20      1007     17.46    1.7%
   39      1742     15.95    0.9%
   58      2459     21.18    0.8%
   77      3166     13.16    0.4%
   96      3842     10.09    0.2%
  115      4522     13.93    0.3%
  134      5175     14.31    0.2%
  153      5818     14.23    0.2%
  172      6434     24.58    0.3%
  191      7052     10.92    0.1%
  210      7661     21.48    0.2%
  229      8249     19.76    0.2%
  248      8815     14.04    0.1%
  267      9386     16.57    0.1%
  286      9949     17.83    0.1%
  305     10480     27.55    0.2%
  324     11010     26.69    0.2%
  343     11490      36.5    0.3%
  362     11960     21.13    0.1%
  381     12440     24.12    0.1%
  400     12890     35.67    0.2%
  419     13370     35.12    0.2%
  438     13790     32.63    0.2%
  457     14180     42.79    0.3%
  476     14590     43.85    0.3%
  495     14980     38.67    0.2%
  514     15320     26.13    0.1%
  533     15670      24.1    0.1%
  552     16040     37.01    0.2%
  571     16370     41.16    0.2%
  590     16680     34.78    0.2%
  609     17050     53.71    0.3%
  628     17250     33.72    0.1%
  647     17550     31.75    0.1%
  666     17840     26.99    0.1%
  685     18030     39.96    0.2%
  704     18280     20.01    0.1%
  723     18500     38.07    0.2%
  742     18700     49.15    0.2%
  761     18940     32.53    0.1%
  780     19090     42.51    0.2%
  799     19210     41.47    0.2%
  818     19390     42.54    0.2%
  837     19470      42.6    0.2%
  856     19600     39.84    0.2%
  875     19710     43.59    0.2%
  894     19800     27.69    0.1%
  913     19880        58    0.2%
  932     19930     41.68    0.2%
  951     19940     38.65    0.1%
  970     19980     32.96    0.1%
  989     20010     26.46    0.1%

Quality and confidence:
param     error
s         0.224

Model:
Time ~=     3407
    + s    19.99
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""payout_stakers_dead_controller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasValidatorReward (r:1 w:0)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking ErasStakersClipped (r:1 w:0)
Storage: Staking ErasRewardPoints (r:1 w:0)
Storage: Staking ErasValidatorPrefs (r:1 w:0)
Storage: Staking Payee (r:2 w:0)
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    136.8
    + n    47.56
              µs

Reads = 10 + (3 * n)
Writes = 2 + (1 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     210.7     1.653    0.7%
    6     411.7     6.554    1.5%
   11     650.6     6.999    1.0%
   16     891.1     10.84    1.2%
   21      1144     4.196    0.3%
   26      1367     11.62    0.8%
   31      1589     14.63    0.9%
   36      1845     6.811    0.3%
   41      2080     11.89    0.5%
   46      2330      11.8    0.5%
   51      2558     16.22    0.6%
   56      2788     17.14    0.6%
   61      3056     20.89    0.6%
   66      3262     13.59    0.4%
   71      3535     21.04    0.5%
   76      3757     13.16    0.3%
   81      3989     8.778    0.2%
   86      4205     18.93    0.4%
   91      4513      23.3    0.5%
   96      4712     14.48    0.3%
  101      4939     24.45    0.4%
  106      5176     30.49    0.5%
  111      5404     32.04    0.5%
  116      5627     33.18    0.5%
  121      5897     21.56    0.3%
  126      6141     16.02    0.2%
  131      6357     26.98    0.4%
  136      6574     25.89    0.3%
  141      6872     23.11    0.3%
  146      7112     35.67    0.5%
  151      7292     24.39    0.3%
  156      7547     34.46    0.4%
  161      7752     14.71    0.1%
  166      8052     35.38    0.4%
  171      8303     21.54    0.2%
  176      8556     29.17    0.3%
  181      8722     21.57    0.2%
  186      8977      19.1    0.2%
  191      9264     26.37    0.2%
  196      9456      30.9    0.3%
  201      9699      15.9    0.1%
  206      9946     23.83    0.2%
  211     10170      29.5    0.2%
  216     10400     34.49    0.3%
  221     10650     30.39    0.2%
  226     10850     38.77    0.3%
  231     11190     37.41    0.3%
  236     11320     32.13    0.2%
  241     11660     31.97    0.2%
  246     11840     41.88    0.3%
  251     12020     38.16    0.3%
  256     12300     45.23    0.3%

Quality and confidence:
param     error
n          0.02

Model:
Time ~=    135.4
    + n    47.58
              µs

Reads = 10 + (3 * n)
Writes = 2 + (1 * n)

Pallet: ""pallet_staking"", Extrinsic: ""payout_stakers_alive_staked"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasValidatorReward (r:1 w:0)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:2 w:2)
Storage: Staking ErasStakersClipped (r:1 w:0)
Storage: Staking ErasRewardPoints (r:1 w:0)
Storage: Staking ErasValidatorPrefs (r:1 w:0)
Storage: Staking Payee (r:2 w:0)
Storage: System Account (r:2 w:2)
Storage: Balances Locks (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    187.7
    + n    61.58
              µs

Reads = 11 + (5 * n)
Writes = 3 + (3 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     219.7     3.304    1.5%
    6     532.7         4    0.7%
   11     839.5     10.27    1.2%
   16      1183        12    1.0%
   21      1479     13.09    0.8%
   26      1802     18.11    1.0%
   31      2100      11.7    0.5%
   36      2381     11.91    0.5%
   41      2684     11.07    0.4%
   46      3046     15.56    0.5%
   51      3331     21.23    0.6%
   56      3662     12.52    0.3%
   61      3961     26.35    0.6%
   66      4261     23.88    0.5%
   71      4579     19.41    0.4%
   76      4897     19.69    0.4%
   81      5177     27.43    0.5%
   86      5517     20.53    0.3%
   91      5780     22.89    0.3%
   96      6164     25.29    0.4%
  101      6426     37.77    0.5%
  106      6707     31.02    0.4%
  111      7019     29.29    0.4%
  116      7283     25.98    0.3%
  121      7670     16.91    0.2%
  126      7937     30.16    0.3%
  131      8288     26.54    0.3%
  136      8573     16.08    0.1%
  141      8850      32.3    0.3%
  146      9153     20.85    0.2%
  151      9490      36.9    0.3%
  156      9807     13.94    0.1%
  161     10110     28.44    0.2%
  166     10380     30.22    0.2%
  171     10720     55.36    0.5%
  176     11050     36.27    0.3%
  181     11410     57.07    0.5%
  186     11650     34.82    0.2%
  191     11960     27.41    0.2%
  196     12270     32.64    0.2%
  201     12510     29.32    0.2%
  206     12900     22.18    0.1%
  211     13080      32.4    0.2%
  216     13450      32.2    0.2%
  221     13720     31.38    0.2%
  226     14110     29.16    0.2%
  231     14410     27.76    0.1%
  236     14740     31.79    0.2%
  241     15060     55.88    0.3%
  246     15280      31.8    0.2%
  251     15670     48.69    0.3%
  256     15980     37.92    0.2%

Quality and confidence:
param     error
n         0.025

Model:
Time ~=    190.6
    + n    61.57
              µs

Reads = 11 + (5 * n)
Writes = 3 + (3 * n)

Pallet: ""pallet_staking"", Extrinsic: ""rebond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    50.21
    + l    0.066
              µs

Reads = 3 + (0 * l)
Writes = 3 + (0 * l)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    l   mean µs  sigma µs       %
    1     49.04     0.139    0.2%
    2     49.38       0.3    0.6%
    3     50.21     0.187    0.3%
    4     50.28     0.108    0.2%
    5     50.61     0.253    0.4%
    6     50.69     0.138    0.2%
    7     50.45     0.122    0.2%
    8     49.55     0.089    0.1%
    9      51.1     0.232    0.4%
   10     51.21      0.09    0.1%
   11      51.1     0.111    0.2%
   12     51.56     0.156    0.3%
   13     51.38     0.145    0.2%
   14     50.58      0.37    0.7%
   15     50.92     0.468    0.9%
   16     51.71     0.103    0.1%
   17     50.73     0.186    0.3%
   18     52.12     0.202    0.3%
   19      52.3     0.167    0.3%
   20     50.86     0.115    0.2%
   21     52.16     0.207    0.3%
   22     52.12     0.244    0.4%
   23     50.97     0.229    0.4%
   24     51.99     0.274    0.5%
   25     52.38     0.161    0.3%
   26     50.91     0.131    0.2%
   27     52.38     0.139    0.2%
   28     51.07     0.205    0.4%
   29     50.81     0.155    0.3%
   30     51.75     0.519    1.0%
   31     51.44      0.44    0.8%
   32     51.48      0.31    0.6%

Quality and confidence:
param     error
l         0.004

Model:
Time ~=    50.11
    + l     0.06
              µs

Reads = 3 + (0 * l)
Writes = 3 + (0 * l)

Pallet: ""pallet_staking"", Extrinsic: ""set_history_depth"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:1)
Storage: Staking ErasStakersClipped (r:0 w:2)
Storage: Staking ErasValidatorPrefs (r:0 w:2)
Storage: Staking ErasValidatorReward (r:0 w:1)
Storage: Staking ErasRewardPoints (r:0 w:1)
Storage: Staking ErasStakers (r:0 w:2)
Storage: Staking ErasTotalStake (r:0 w:1)
Storage: Staking ErasStartSessionIndex (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + e    34.94
              µs

Reads = 2 + (0 * e)
Writes = 4 + (7 * e)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    e   mean µs  sigma µs       %
    1     43.48     0.182    0.4%
    2     69.57     0.203    0.2%
    3     96.25     0.808    0.8%
    4     128.1     0.382    0.2%
    5     151.3     2.745    1.8%
    6     176.7     0.478    0.2%
    7     202.2     0.527    0.2%
    8       228     0.554    0.2%
    9       255     0.639    0.2%
   10     283.5     0.947    0.3%
   11     309.9     0.498    0.1%
   12     337.9     0.745    0.2%
   13     363.8     1.205    0.3%
   14     399.8     2.946    0.7%
   15     421.7     0.677    0.1%
   16     457.4     4.283    0.9%
   17     478.4     0.861    0.1%
   18     511.1     6.686    1.3%
   19     540.8     6.187    1.1%
   20     567.3     1.457    0.2%
   21     594.4     1.117    0.1%
   22     627.9     1.799    0.2%
   23     653.7     1.029    0.1%
   24       687     2.058    0.2%
   25     729.5     6.039    0.8%
   26     755.1     6.904    0.9%
   27     789.6     11.39    1.4%
   28     819.2     8.761    1.0%
   29     852.7     12.16    1.4%
   30     890.1     11.17    1.2%
   31     914.5      12.6    1.3%
   32       946     8.493    0.8%
   33     979.3     10.43    1.0%
   34      1012     10.58    1.0%
   35      1047     13.29    1.2%
   36      1077     8.254    0.7%
   37      1110     14.63    1.3%
   38      1125     8.608    0.7%
   39      1167     11.11    0.9%
   40      1194     12.43    1.0%
   41      1226     11.37    0.9%
   42      1252     7.736    0.6%
   43      1304     14.02    1.0%
   44      1334     13.24    0.9%
   45      1379     13.78    0.9%
   46      1401     11.51    0.8%
   47      1430     8.526    0.5%
   48      1465     4.146    0.2%
   49      1505     13.23    0.8%
   50      1533     5.416    0.3%
   51      1597     4.877    0.3%
   52      1601     5.062    0.3%
   53      1647      10.4    0.6%
   54      1669     10.28    0.6%
   55      1710     10.33    0.6%
   56      1769     12.55    0.7%
   57      1790     18.05    1.0%
   58      1833     14.68    0.8%
   59      1888     20.72    1.0%
   60      1910     10.87    0.5%
   61      1958     12.99    0.6%
   62      1975      12.4    0.6%
   63      2009     6.922    0.3%
   64      2062     15.83    0.7%
   65      2098     13.11    0.6%
   66      2130     12.15    0.5%
   67      2170     14.97    0.6%
   68      2204     9.311    0.4%
   69      2240     10.93    0.4%
   70      2273     10.49    0.4%
   71      2309      6.09    0.2%
   72      2357     12.31    0.5%
   73      2387        17    0.7%
   74      2403      12.9    0.5%
   75      2475     8.177    0.3%
   76      2532     7.856    0.3%
   77      2574     12.55    0.4%
   78      2619     17.39    0.6%
   79      2635     11.51    0.4%
   80      2674     10.58    0.3%
   81      2722     12.28    0.4%
   82      2731     12.81    0.4%
   83      2796      13.8    0.4%
   84      2836      15.4    0.5%
   85      2890     18.45    0.6%
   86      2918     7.816    0.2%
   87      2984      18.3    0.6%
   88      2988     10.31    0.3%
   89      3069     16.61    0.5%
   90      3073     12.37    0.4%
   91      3125     9.747    0.3%
   92      3177     11.28    0.3%
   93      3226     9.061    0.2%
   94      3281     15.33    0.4%
   95      3267     9.036    0.2%
   96      3325     8.047    0.2%
   97      3382     9.648    0.2%
   98      3406      13.5    0.3%
   99      3467     5.566    0.1%
  100      3525     15.38    0.4%

Quality and confidence:
param     error
e         0.073

Model:
Time ~=        0
    + e    35.11
              µs

Reads = 2 + (0 * e)
Writes = 4 + (7 * e)

Pallet: ""pallet_staking"", Extrinsic: ""reap_stash"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:1)
Storage: Staking Validators (r:1 w:1)
Storage: Staking CounterForValidators (r:1 w:1)
Storage: Staking Nominators (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Ledger (r:0 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.01
    + s    2.438
              µs

Reads = 7 + (0 * s)
Writes = 8 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     73.24     0.135    0.1%
    2     76.47     0.225    0.2%
    3     78.77     0.385    0.4%
    4     83.36     0.692    0.8%
    5      84.5      0.17    0.2%
    6     87.66     0.793    0.9%
    7     89.09     0.113    0.1%
    8     91.82     0.163    0.1%
    9     94.44     0.232    0.2%
   10     96.82     0.445    0.4%
   11     101.3     0.204    0.2%
   12     102.1     0.196    0.1%
   13     105.4     0.252    0.2%
   14     107.2     0.229    0.2%
   15     109.5     0.197    0.1%
   16     111.8     0.156    0.1%
   17     114.1     0.235    0.2%
   18     116.7     0.228    0.1%
   19       119     0.169    0.1%
   20     121.2     0.157    0.1%
   21     123.9     0.191    0.1%
   22     127.2     0.515    0.4%
   23       129     0.286    0.2%
   24     132.4     0.368    0.2%
   25     134.5     0.365    0.2%
   26     137.8     0.483    0.3%
   27     138.8     0.422    0.3%
   28     141.9     0.558    0.3%
   29     144.6     0.372    0.2%
   30     146.7     0.213    0.1%
   31     149.3     0.305    0.2%
   32     152.5     1.271    0.8%
   33     153.9     0.352    0.2%
   34     155.8     0.324    0.2%
   35     158.8     0.215    0.1%
   36     161.7     0.603    0.3%
   37     163.2     0.483    0.2%
   38     165.7      0.36    0.2%
   39     168.7     0.329    0.1%
   40     174.2     1.354    0.7%
   41     173.7     0.335    0.1%
   42     175.8     0.389    0.2%
   43     177.6     0.245    0.1%
   44     180.3     0.371    0.2%
   45     183.1     0.335    0.1%
   46     185.6     0.482    0.2%
   47     187.6     0.184    0.0%
   48     194.6     1.352    0.6%
   49     196.8     0.419    0.2%
   50     197.3     1.139    0.5%
   51     196.2      0.45    0.2%
   52     198.7     0.351    0.1%
   53     202.2     0.568    0.2%
   54     203.6     0.581    0.2%
   55       208     0.455    0.2%
   56     209.1     0.511    0.2%
   57     211.9       0.4    0.1%
   58     214.3     0.322    0.1%
   59     217.4     0.369    0.1%
   60     218.6     0.532    0.2%
   61     221.6     0.648    0.2%
   62     224.7     0.398    0.1%
   63     227.6     0.415    0.1%
   64     228.5     0.575    0.2%
   65       232     0.479    0.2%
   66     233.9     0.452    0.1%
   67     236.6     0.365    0.1%
   68     239.1     0.528    0.2%
   69     240.8     0.593    0.2%
   70     242.8     0.477    0.1%
   71     246.1     0.359    0.1%
   72     247.2     0.398    0.1%
   73     250.3     0.759    0.3%
   74       254     0.701    0.2%
   75     255.8      0.79    0.3%
   76     258.2     0.408    0.1%
   77     259.5     0.673    0.2%
   78     262.7     0.316    0.1%
   79     265.1     0.534    0.2%
   80     266.7     0.531    0.1%
   81     268.6     0.459    0.1%
   82     272.7     0.574    0.2%
   83     274.4     0.451    0.1%
   84     276.3     0.276    0.0%
   85     279.6     0.343    0.1%
   86     291.3     2.222    0.7%
   87     291.7     3.558    1.2%
   88       286     0.664    0.2%
   89       290     0.875    0.3%
   90     292.1     0.826    0.2%
   91     293.8     0.939    0.3%
   92     298.3     0.527    0.1%
   93       301     1.381    0.4%
   94     302.2     0.656    0.2%
   95       303      0.27    0.0%
   96     307.6     0.778    0.2%
   97     310.1     0.696    0.2%
   98     313.1     0.964    0.3%
   99     315.5     0.917    0.2%
  100     317.1     0.567    0.1%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    73.01
    + s    2.443
              µs

Reads = 7 + (0 * s)
Writes = 8 + (1 * s)

Pallet: ""pallet_staking"", Extrinsic: ""new_era"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CounterForNominators (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:0)
Storage: Staking Validators (r:2 w:0)
Storage: Staking Bonded (r:101 w:0)
Storage: Staking Ledger (r:101 w:0)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Nominators (r:101 w:0)
Storage: Staking ValidatorCount (r:1 w:0)
Storage: Staking MinimumValidatorCount (r:1 w:0)
Storage: Staking CurrentEra (r:1 w:1)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasStakersClipped (r:0 w:1)
Storage: Staking ErasValidatorPrefs (r:0 w:1)
Storage: Staking ErasStakers (r:0 w:1)
Storage: Staking ErasTotalStake (r:0 w:1)
Storage: Staking ErasStartSessionIndex (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    290.7
    + n    48.98
              µs

Reads = 9 + (3 * v) + (3 * n)
Writes = 3 + (3 * v) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v     n   mean µs  sigma µs       %
    1   100      2784     10.91    0.3%
    2   100      3092     10.36    0.3%
    3   100      3300     13.07    0.3%
    4   100      3531        11    0.3%
    5   100      3846     18.83    0.4%
    6   100      4141     19.19    0.4%
    7   100      4399      15.7    0.3%
    8   100      4647     12.99    0.2%
    9   100      5132     9.902    0.1%
   10     1     626.7     2.202    0.3%
   10     2     679.1     2.975    0.4%
   10     3     732.1     1.433    0.1%
   10     4     785.6      3.83    0.4%
   10     5     835.8     1.607    0.1%
   10     6       875     2.119    0.2%
   10     7     933.4     1.238    0.1%
   10     8     985.8      11.6    1.1%
   10     9      1037     3.367    0.3%
   10    10      1083     5.339    0.4%
   10    11      1134     7.093    0.6%
   10    12      1170     3.179    0.2%
   10    13      1250     2.815    0.2%
   10    14      1294     3.794    0.2%
   10    15      1327     13.42    1.0%
   10    16      1370     10.83    0.7%
   10    17      1428     9.082    0.6%
   10    18      1463     11.44    0.7%
   10    19      1521     4.761    0.3%
   10    20      1577     9.951    0.6%
   10    21      1603     4.611    0.2%
   10    22      1658     6.251    0.3%
   10    23      1707     16.47    0.9%
   10    24      1763     3.597    0.2%
   10    25      1817     16.35    0.8%
   10    26      1873     6.701    0.3%
   10    27      1908     7.158    0.3%
   10    28      1964     13.49    0.6%
   10    29      2027     10.05    0.4%
   10    30      2079     7.317    0.3%
   10    31      2087     11.73    0.5%
   10    32      2158     11.95    0.5%
   10    33      2227     10.92    0.4%
   10    34      2266     11.47    0.5%
   10    35      2316     7.451    0.3%
   10    36      2377     11.94    0.5%
   10    37      2406     14.14    0.5%
   10    38      2451     9.209    0.3%
   10    39      2495     8.072    0.3%
   10    40      2563     18.91    0.7%
   10    41      2669     5.978    0.2%
   10    42      2632      9.76    0.3%
   10    43      2700     11.44    0.4%
   10    44      2769     15.28    0.5%
   10    45      2808     10.74    0.3%
   10    46      2847     18.96    0.6%
   10    47      2851     4.499    0.1%
   10    48      2937     17.28    0.5%
   10    49      2958      8.51    0.2%
   10    50      3003      15.7    0.5%
   10    51      3060     9.099    0.2%
   10    52      3130     11.22    0.3%
   10    53      3192     17.51    0.5%
   10    54      3206     11.98    0.3%
   10    55      3310     8.678    0.2%
   10    56      3325     18.31    0.5%
   10    57      3376     6.376    0.1%
   10    58      3471     12.48    0.3%
   10    59      3498     12.36    0.3%
   10    60      3562     17.45    0.4%
   10    61      3629     12.06    0.3%
   10    62      3646     15.45    0.4%
   10    63      3712     11.96    0.3%
   10    64      3764     5.434    0.1%
   10    65      3842     16.56    0.4%
   10    66      3848     9.369    0.2%
   10    67      3943     10.74    0.2%
   10    68      3961     7.595    0.1%
   10    69      3984     16.85    0.4%
   10    70      4058     8.604    0.2%
   10    71      4082     15.53    0.3%
   10    72      4144     16.14    0.3%
   10    73      4159     10.11    0.2%
   10    74      4194     11.27    0.2%
   10    75      4320     7.104    0.1%
   10    76      4324     9.695    0.2%
   10    77      4401     22.69    0.5%
   10    78      4415      9.65    0.2%
   10    79      4445     6.257    0.1%
   10    80      4531     7.266    0.1%
   10    81      4549     18.69    0.4%
   10    82      4639     20.13    0.4%
   10    83      4692     17.78    0.3%
   10    84      4661     14.92    0.3%
   10    85      4770     12.93    0.2%
   10    86      4748     23.53    0.4%
   10    87      4900      20.9    0.4%
   10    88      4883     17.15    0.3%
   10    89      4901     21.71    0.4%
   10    90      4972     9.339    0.1%
   10    91      5045     11.94    0.2%
   10    92      5109     12.49    0.2%
   10    93      5133     11.34    0.2%
   10    94      5142      14.7    0.2%
   10    95      5224     25.07    0.4%
   10    96      5296      20.5    0.3%
   10    97      5344     19.12    0.3%
   10    98      5374     16.36    0.3%
   10    99      5403     14.17    0.2%
   10   100      5410     14.41    0.2%

Quality and confidence:
param     error
v         0.901
n         0.045

Model:
Time ~=        0
    + v    311.5
    + n    48.68
              µs

Reads = 9 + (3 * v) + (3 * n)
Writes = 3 + (3 * v) + (0 * n)

Pallet: ""pallet_staking"", Extrinsic: ""get_npos_voters"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Validators (r:501 w:0)
Storage: Staking Bonded (r:1500 w:0)
Storage: Staking Ledger (r:1500 w:0)
Storage: Staking SlashingSpans (r:21 w:0)
Storage: Staking Nominators (r:1001 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    25.35
    + n    28.01
    + s    20.46
              µs

Reads = 3 + (3 * v) + (3 * n) + (1 * s)
Writes = 0 + (0 * v) + (0 * n) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v     n     s   mean µs  sigma µs       %
  500  1000    20     40440     248.2    0.6%
  510  1000    20     40740     277.6    0.6%
  520  1000    20     40960     189.5    0.4%
  530  1000    20     41330     205.7    0.4%
  540  1000    20     41880       180    0.4%
  550  1000    20     41940     202.2    0.4%
  560  1000    20     42500     146.6    0.3%
  570  1000    20     42540     75.06    0.1%
  580  1000    20     42560     120.7    0.2%
  590  1000    20     42380     116.2    0.2%
  600  1000    20     43130     270.7    0.6%
  610  1000    20     43640     149.5    0.3%
  620  1000    20     43760     184.9    0.4%
  630  1000    20     43870     133.9    0.3%
  640  1000    20     44370     155.4    0.3%
  650  1000    20     43930     234.4    0.5%
  660  1000    20     44760     154.7    0.3%
  670  1000    20     44720     297.8    0.6%
  680  1000    20     44450     175.4    0.3%
  690  1000    20     45390     130.4    0.2%
  700  1000    20     46510     261.3    0.5%
  710  1000    20     45960     223.1    0.4%
  720  1000    20     45610     197.3    0.4%
  730  1000    20     46350     134.8    0.2%
  740  1000    20     46440     261.9    0.5%
  750  1000    20     46480     176.9    0.3%
  760  1000    20     47170     141.1    0.2%
  770  1000    20     47290     170.3    0.3%
  780  1000    20     47440     222.6    0.4%
  790  1000    20     48270     268.5    0.5%
  800  1000    20     48800     208.3    0.4%
  810  1000    20     48460     192.2    0.3%
  820  1000    20     48360       292    0.6%
  830  1000    20     49300     301.5    0.6%
  840  1000    20     49370     203.5    0.4%
  850  1000    20     49050     107.1    0.2%
  860  1000    20     50210     128.9    0.2%
  870  1000    20     50490     166.4    0.3%
  880  1000    20     50490     149.6    0.2%
  890  1000    20     50000     140.1    0.2%
  900  1000    20     51080     232.4    0.4%
  910  1000    20     50520     214.3    0.4%
  920  1000    20     50900     177.6    0.3%
  930  1000    20     51320     126.3    0.2%
  940  1000    20     51710     183.9    0.3%
  950  1000    20     52770       225    0.4%
  960  1000    20     52080     193.9    0.3%
  970  1000    20     51870     164.6    0.3%
  980  1000    20     52910     203.6    0.3%
  990  1000    20     53040     229.3    0.4%
 1000   500    20     39430     127.8    0.3%
 1000   510    20     39610     243.9    0.6%
 1000   520    20     40210     64.69    0.1%
 1000   530    20     40180     131.7    0.3%
 1000   540    20     40160     418.3    1.0%
 1000   550    20     41140     71.01    0.1%
 1000   560    20     40460     275.8    0.6%
 1000   570    20     41970     175.9    0.4%
 1000   580    20     41660     361.7    0.8%
 1000   590    20     41820       259    0.6%
 1000   600    20     41860     178.1    0.4%
 1000   610    20     41930     160.8    0.3%
 1000   620    20     42790     180.4    0.4%
 1000   630    20     43760     187.1    0.4%
 1000   640    20     42840     165.9    0.3%
 1000   650    20     44100     165.9    0.3%
 1000   660    20     43400     103.2    0.2%
 1000   670    20     44650     89.71    0.2%
 1000   680    20     44280     107.5    0.2%
 1000   690    20     45480     157.4    0.3%
 1000   700    20     44560     218.8    0.4%
 1000   710    20     45420     229.5    0.5%
 1000   720    20     45770     187.7    0.4%
 1000   730    20     45550       235    0.5%
 1000   740    20     46070       234    0.5%
 1000   750    20     46130     269.3    0.5%
 1000   760    20     46360     153.5    0.3%
 1000   770    20     46900     136.6    0.2%
 1000   780    20     46670     135.3    0.2%
 1000   790    20     47650     211.3    0.4%
 1000   800    20     48010     220.3    0.4%
 1000   810    20     48110     211.3    0.4%
 1000   820    20     48150     142.3    0.2%
 1000   830    20     48880     239.3    0.4%
 1000   840    20     48330     235.3    0.4%
 1000   850    20     49420       312    0.6%
 1000   860    20     49680     196.5    0.3%
 1000   870    20     49230     157.5    0.3%
 1000   880    20     49970     197.7    0.3%
 1000   890    20     50000     208.5    0.4%
 1000   900    20     50180     212.4    0.4%
 1000   910    20     51210     236.5    0.4%
 1000   920    20     50420       202    0.4%
 1000   930    20     51360     298.7    0.5%
 1000   940    20     52580     257.9    0.4%
 1000   950    20     52570     336.1    0.6%
 1000   960    20     52740     267.7    0.5%
 1000   970    20     52320     250.1    0.4%
 1000   980    20     52820     168.9    0.3%
 1000   990    20     53280     170.5    0.3%
 1000  1000     1     52920     166.3    0.3%
 1000  1000     2     52470     120.2    0.2%
 1000  1000     3     52830     278.8    0.5%
 1000  1000     4     52720     230.6    0.4%
 1000  1000     5     52790     297.3    0.5%
 1000  1000     6     53150     90.63    0.1%
 1000  1000     7     52640     252.1    0.4%
 1000  1000     8     53410     234.3    0.4%
 1000  1000     9     53000     349.1    0.6%
 1000  1000    10     53830     318.6    0.5%
 1000  1000    11     53550     276.8    0.5%
 1000  1000    12     52950     195.1    0.3%
 1000  1000    13     53370       220    0.4%
 1000  1000    14     52620     258.9    0.4%
 1000  1000    15     52900     158.4    0.2%
 1000  1000    16     52400       242    0.4%
 1000  1000    17     53090     261.5    0.4%
 1000  1000    18     53200     105.5    0.1%
 1000  1000    19     53430     116.9    0.2%
 1000  1000    20     53240     215.6    0.4%

Quality and confidence:
param     error
v         0.095
n         0.095
s         3.252

Model:
Time ~=        0
    + v    25.49
    + n    27.79
    + s    26.74
              µs

Reads = 3 + (3 * v) + (3 * n) + (1 * s)
Writes = 0 + (0 * v) + (0 * n) + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""get_npos_targets"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Validators (r:501 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    76.44
    + v    11.19
              µs

Reads = 1 + (1 * v)
Writes = 0 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v   mean µs  sigma µs       %
  500      5745     23.71    0.4%
  510      5636     32.35    0.5%
  520      5764     34.39    0.5%
  530      5905      37.8    0.6%
  540      6167     32.52    0.5%
  550      6118     50.31    0.8%
  560      6401     29.59    0.4%
  570      6454     26.02    0.4%
  580      6727     34.16    0.5%
  590      6581      27.4    0.4%
  600      6924     29.86    0.4%
  610      6917      48.4    0.6%
  620      6997     34.57    0.4%
  630      7078     37.68    0.5%
  640      7355     26.42    0.3%
  650      7534      37.6    0.4%
  660      7421     29.59    0.3%
  670      7773     48.51    0.6%
  680      7691     60.13    0.7%
  690      7783     45.12    0.5%
  700      7853     50.21    0.6%
  710      8025     61.49    0.7%
  720      8017     29.79    0.3%
  730      8321      53.1    0.6%
  740      8349     31.61    0.3%
  750      8566     38.28    0.4%
  760      8698     34.89    0.4%
  770      8649     23.19    0.2%
  780      8771     51.86    0.5%
  790      8964     35.54    0.3%
  800      8871     22.54    0.2%
  810      9270     54.19    0.5%
  820      9306     88.15    0.9%
  830      9364     31.03    0.3%
  840      9419     66.03    0.7%
  850      9472     46.26    0.4%
  860      9787     74.87    0.7%
  870      9814     67.23    0.6%
  880      9858     86.47    0.8%
  890      9968     64.79    0.6%
  900     10030     83.76    0.8%
  910     10500     62.16    0.5%
  920     10240       111    1.0%
  930     10640      43.7    0.4%
  940     10590     81.36    0.7%
  950     10630     69.22    0.6%
  960     10820     48.88    0.4%
  970     10890     79.31    0.7%
  980     11000     64.09    0.5%
  990     11250     63.99    0.5%
 1000     11240     69.24    0.6%

Quality and confidence:
param     error
v         0.033

Model:
Time ~=    79.94
    + v    11.19
              µs

Reads = 1 + (1 * v)
Writes = 0 + (0 * v)

Pallet: ""pallet_staking"", Extrinsic: ""set_staking_limits"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking MinValidatorBond (r:0 w:1)
Storage: Staking MaxValidatorsCount (r:0 w:1)
Storage: Staking ChillThreshold (r:0 w:1)
Storage: Staking MaxNominatorsCount (r:0 w:1)
Storage: Staking MinNominatorBond (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.636
              µs

Reads = 0
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.636
              µs

Reads = 0
Writes = 5

Pallet: ""pallet_staking"", Extrinsic: ""chill_other"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking ChillThreshold (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)
Storage: Staking Validators (r:1 w:1)
Storage: Staking MaxValidatorsCount (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:1)
Storage: Staking MinValidatorBond (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     57.6
              µs

Reads = 7
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     57.6
              µs

Reads = 7
Writes = 2


```

</details>",9675,2021-09-02T04:56:00Z,0
1825,shawntabrizi,/benchmark runtime pallet pallet_balances,9675,2021-09-02T13:29:41Z,0
1826,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.88
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.88
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.38
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.38
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.76
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.76
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.18
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.18
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    74.73
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    74.73
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.56
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.56
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-02T13:29:43Z,0
1827,shawntabrizi,/benchmark runtime pallet pallet_democracy,9675,2021-09-02T15:42:39Z,0
1828,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_democracy --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/democracy/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_democracy"", Extrinsic: ""propose"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy PublicPropCount (r:1 w:1)
Storage: Democracy PublicProps (r:1 w:1)
Storage: Democracy Blacklist (r:1 w:0)
Storage: Democracy DepositOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.31
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.31
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_democracy"", Extrinsic: ""second"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy DepositOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.21
    + s    0.198
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     39.83     0.162    0.4%
    2     40.53     0.261    0.6%
    4     41.36     0.179    0.4%
    6     41.77      0.14    0.3%
    8     42.46     0.317    0.7%
   10     42.82     0.164    0.3%
   12     43.53     0.245    0.5%
   14     43.77     0.118    0.2%
   16     44.21     0.099    0.2%
   18     44.48     0.139    0.3%
   20     44.87     0.122    0.2%
   22     45.58       0.1    0.2%
   24     45.77     0.112    0.2%
   26     46.15     0.196    0.4%
   28     47.35     0.248    0.5%
   30      47.9     0.389    0.8%
   32     48.31     0.159    0.3%
   34     48.96     0.482    0.9%
   36     49.08     0.264    0.5%
   38     49.54     0.812    1.6%
   40     49.75     0.963    1.9%
   42     50.34     0.163    0.3%
   44     50.65     0.251    0.4%
   46     51.52     0.239    0.4%
   48      51.8     0.309    0.5%
   50     51.53     0.238    0.4%
   52     50.98     0.385    0.7%
   54     52.16     0.368    0.7%
   56     52.86     0.613    1.1%
   58     53.92     0.229    0.4%
   60     52.97     0.716    1.3%
   62     54.06     0.093    0.1%
   64     53.79     0.682    1.2%
   66     54.07     0.869    1.6%
   68     53.68     0.708    1.3%
   70     55.28     0.211    0.3%
   72     56.01     0.229    0.4%
   74     56.41     0.136    0.2%
   76     56.15     0.164    0.2%
   78     56.06      0.33    0.5%
   80      54.7     0.183    0.3%
   82     57.29      0.22    0.3%
   84     57.95     0.137    0.2%
   86     58.37     0.245    0.4%
   88     58.83     0.224    0.3%
   90     58.79     0.141    0.2%
   92     59.22      0.21    0.3%
   94     59.59     0.466    0.7%
   96     59.38     0.772    1.3%
   98     60.23     0.256    0.4%
  100     60.88     0.078    0.1%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    41.22
    + s    0.198
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Pallet: ""pallet_democracy"", Extrinsic: ""vote_new"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy ReferendumInfoOf (r:1 w:1)
Storage: Democracy VotingOf (r:1 w:1)
Storage: Balances Locks (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    46.04
    + r    0.277
              µs

Reads = 3 + (0 * r)
Writes = 3 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1     45.11     0.078    0.1%
    2     46.75     0.107    0.2%
    3     47.02     0.434    0.9%
    4     46.86     0.104    0.2%
    5     47.02     0.395    0.8%
    6     48.15     0.126    0.2%
    7     47.82     0.107    0.2%
    8     48.25     0.123    0.2%
    9     48.78     0.096    0.1%
   10     49.09     0.154    0.3%
   11     49.22     0.096    0.1%
   12      49.5     0.155    0.3%
   13     49.57     0.131    0.2%
   14     49.71     0.304    0.6%
   15     50.49     0.149    0.2%
   16     50.93     0.292    0.5%
   17     50.99     0.178    0.3%
   18     51.55     0.084    0.1%
   19     51.65     0.146    0.2%
   20     51.82     0.235    0.4%
   21     52.48     0.456    0.8%
   22     52.37     0.119    0.2%
   23     52.09     0.216    0.4%
   24     52.19       0.1    0.1%
   25     52.63     0.195    0.3%
   26     52.96     0.101    0.1%
   27     53.24     0.171    0.3%
   28     53.59     0.126    0.2%
   29     53.48      0.13    0.2%
   30     53.62     0.102    0.1%
   31     53.98     0.173    0.3%
   32     54.54     0.175    0.3%
   33     55.01     0.254    0.4%
   34     55.28     0.157    0.2%
   35     54.27     0.624    1.1%
   36     55.35     0.049    0.0%
   37     54.47     0.797    1.4%
   38     55.63     0.149    0.2%
   39     54.41     0.727    1.3%
   40     56.43      0.17    0.3%
   41     56.58     0.101    0.1%
   42     56.71     0.164    0.2%
   43     57.18     0.106    0.1%
   44     54.88     0.234    0.4%
   45     57.81     0.114    0.1%
   46     57.94     0.078    0.1%
   47     56.89     1.073    1.8%
   48     58.51     0.092    0.1%
   49     56.18     0.565    1.0%
   50     59.16      0.13    0.2%
   51     61.07     0.126    0.2%
   52     61.96     0.595    0.9%
   53     63.32     0.835    1.3%
   54      64.4     0.083    0.1%
   55     64.67     0.302    0.4%
   56     63.65     0.193    0.3%
   57     63.88     0.362    0.5%
   58     64.75     0.326    0.5%
   59     62.39     0.819    1.3%
   60     63.54     0.296    0.4%
   61     65.26     1.433    2.1%
   62     62.57     1.384    2.2%
   63     64.86      0.27    0.4%
   64     65.74     0.411    0.6%
   65     66.13     1.333    2.0%
   66     67.55     0.352    0.5%
   67     64.92     0.978    1.5%
   68     66.94     0.161    0.2%
   69     67.14     0.131    0.1%
   70     65.25     0.913    1.3%
   71     67.62     0.309    0.4%
   72     68.41      1.72    2.5%
   73     67.26     1.328    1.9%
   74     69.16     0.839    1.2%
   75     67.58     0.717    1.0%
   76      68.4      0.64    0.9%
   77     66.92     0.523    0.7%
   78     65.32     1.295    1.9%
   79     68.86     0.802    1.1%
   80     68.17     0.682    1.0%
   81      69.5     1.277    1.8%
   82     68.59     1.115    1.6%
   83     69.72     1.805    2.5%
   84     70.24     1.139    1.6%
   85     68.85     1.733    2.5%
   86     66.26     2.468    3.7%
   87     70.09     0.459    0.6%
   88     66.41     0.616    0.9%
   89     70.48      2.06    2.9%
   90     71.21     0.627    0.8%
   91     66.29     0.566    0.8%
   92     74.71     2.624    3.5%
   93     72.01      0.54    0.7%
   94     71.59     1.017    1.4%
   95     72.77     1.116    1.5%
   96     70.59     0.552    0.7%
   97     68.08     0.939    1.3%
   98     77.25     11.98   15.5%
   99     71.73     1.483    2.0%

Quality and confidence:
param     error
r         0.002

Model:
Time ~=    45.96
    + r     0.28
              µs

Reads = 3 + (0 * r)
Writes = 3 + (0 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""vote_existing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy ReferendumInfoOf (r:1 w:1)
Storage: Democracy VotingOf (r:1 w:1)
Storage: Balances Locks (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    46.27
    + r    0.264
              µs

Reads = 3 + (0 * r)
Writes = 3 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1      46.1     0.129    0.2%
    2     46.87     0.114    0.2%
    3      48.2       0.3    0.6%
    4     47.64      0.24    0.5%
    5     83.29     0.312    0.3%
    6     49.01     0.457    0.9%
    7     49.19     0.358    0.7%
    8     48.62     0.322    0.6%
    9     48.54     0.153    0.3%
   10     48.51     0.168    0.3%
   11     48.97     0.102    0.2%
   12     48.89     0.143    0.2%
   13     49.38     0.131    0.2%
   14     49.61     0.112    0.2%
   15     49.76     0.212    0.4%
   16      50.8     0.114    0.2%
   17      50.2     0.111    0.2%
   18     51.39     0.128    0.2%
   19     51.01      0.15    0.2%
   20      51.4     0.216    0.4%
   21     51.27     0.142    0.2%
   22     52.32     0.169    0.3%
   23        52     0.145    0.2%
   24     51.84     0.064    0.1%
   25     51.75     0.176    0.3%
   26     52.86     0.089    0.1%
   27     52.89     0.392    0.7%
   28      53.4     0.395    0.7%
   29     53.53     0.161    0.3%
   30     54.03     0.118    0.2%
   31     53.83      0.49    0.9%
   32     54.95     0.158    0.2%
   33      54.8     0.145    0.2%
   34     55.16     0.122    0.2%
   35     53.45     0.113    0.2%
   36     54.26     0.795    1.4%
   37     55.63     0.104    0.1%
   38     53.58     0.155    0.2%
   39     54.26     0.158    0.2%
   40     56.48     0.143    0.2%
   41     56.68     0.076    0.1%
   42     56.89     0.102    0.1%
   43     57.55     0.129    0.2%
   44     57.92     0.112    0.1%
   45     58.11     0.411    0.7%
   46        57     0.938    1.6%
   47     58.16     0.617    1.0%
   48     58.33     0.132    0.2%
   49     56.82     1.009    1.7%
   50     59.91     0.193    0.3%
   51     61.21     0.356    0.5%
   52     60.11     1.002    1.6%
   53      62.3     0.365    0.5%
   54     61.63     0.545    0.8%
   55     62.59     0.319    0.5%
   56     61.77     0.245    0.3%
   57      62.4     0.327    0.5%
   58     63.03     0.495    0.7%
   59     63.39     0.371    0.5%
   60      64.1      0.16    0.2%
   61     63.72     1.174    1.8%
   62     63.34     0.153    0.2%
   63     64.11     0.099    0.1%
   64     64.33     0.236    0.3%
   65      64.8     0.238    0.3%
   66     71.42     12.54   17.5%
   67     65.83     0.948    1.4%
   68     61.98     0.885    1.4%
   69     65.46     0.252    0.3%
   70      65.8     0.454    0.6%
   71     65.56     0.174    0.2%
   72     67.36     0.223    0.3%
   73     66.16     0.343    0.5%
   74     66.96     1.308    1.9%
   75     67.28     0.518    0.7%
   76     67.04     0.487    0.7%
   77     67.14     1.055    1.5%
   78     67.03     0.241    0.3%
   79     68.85     0.676    0.9%
   80     66.41     1.494    2.2%
   81     64.92     1.206    1.8%
   82     69.32     0.908    1.3%
   83     68.23     0.258    0.3%
   84     66.43      1.16    1.7%
   85     64.08     0.533    0.8%
   86      65.9     1.053    1.5%
   87     69.03     0.314    0.4%
   88     68.92     0.291    0.4%
   89     67.58     1.472    2.1%
   90     71.35     1.701    2.3%
   91     72.85     3.002    4.1%
   92     71.28     0.732    1.0%
   93     70.61     0.236    0.3%
   94     68.44     2.747    4.0%
   95     67.01     1.568    2.3%
   96      66.1     1.109    1.6%
   97     68.47     2.514    3.6%
   98     66.73     1.314    1.9%
   99     67.49     2.935    4.3%

Quality and confidence:
param     error
r         0.004

Model:
Time ~=    47.97
    + r    0.234
              µs

Reads = 3 + (0 * r)
Writes = 3 + (0 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""emergency_cancel"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy ReferendumInfoOf (r:1 w:1)
Storage: Democracy Cancellations (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.33
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.33
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_democracy"", Extrinsic: ""blacklist"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy PublicProps (r:1 w:1)
Storage: Democracy NextExternal (r:1 w:1)
Storage: Democracy ReferendumInfoOf (r:1 w:1)
Storage: Democracy Blacklist (r:0 w:1)
Storage: Democracy DepositOf (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    82.63
    + p    0.516
              µs

Reads = 5 + (0 * p)
Writes = 6 + (0 * p)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    p   mean µs  sigma µs       %
    1     42.02     0.117    0.2%
    2     82.07     0.574    0.6%
    3     82.84     0.206    0.2%
    4      82.1     0.798    0.9%
    5     82.64     0.263    0.3%
    6     83.62     0.218    0.2%
    7     83.29     0.085    0.1%
    8     85.43     0.791    0.9%
    9     85.46      0.24    0.2%
   10     88.77     0.428    0.4%
   11     86.98     0.196    0.2%
   12     87.24     0.131    0.1%
   13     89.81     0.417    0.4%
   14     88.49     0.225    0.2%
   15     89.61     0.328    0.3%
   16      90.3     0.173    0.1%
   17     90.67      0.16    0.1%
   18     91.75     0.317    0.3%
   19     92.96     0.121    0.1%
   20     93.05     0.204    0.2%
   21     94.08      0.19    0.2%
   22      94.4     0.177    0.1%
   23     95.28     0.228    0.2%
   24     95.67     0.231    0.2%
   25     96.01     0.374    0.3%
   26     96.92     0.246    0.2%
   27     96.19     0.105    0.1%
   28     96.08     0.597    0.6%
   29     96.48      0.49    0.5%
   30     98.08     0.489    0.4%
   31     98.82     0.228    0.2%
   32     99.97     0.446    0.4%
   33     99.86     0.805    0.8%
   34      99.7     0.924    0.9%
   35       101     0.314    0.3%
   36     101.1     0.713    0.7%
   37     101.4     0.661    0.6%
   38     101.9     0.521    0.5%
   39     103.1     0.897    0.8%
   40     103.6     0.951    0.9%
   41     102.9     0.408    0.3%
   42     106.1     0.307    0.2%
   43     103.3     0.429    0.4%
   44     106.8     0.196    0.1%
   45       107     0.433    0.4%
   46     107.4     0.287    0.2%
   47     106.2     0.992    0.9%
   48     107.8     1.041    0.9%
   49     107.6     1.082    1.0%
   50     106.6     0.262    0.2%
   51     108.9     0.727    0.6%
   52     108.8     1.213    1.1%
   53     109.5     1.536    1.4%
   54     110.3     0.272    0.2%
   55     110.5     0.971    0.8%
   56     111.9     0.927    0.8%
   57       111     1.076    0.9%
   58     112.6     0.591    0.5%
   59     110.5     0.358    0.3%
   60     114.8      0.18    0.1%
   61     111.2     0.358    0.3%
   62     112.3     0.278    0.2%
   63     116.4     0.375    0.3%
   64     113.2     1.411    1.2%
   65     114.4     1.588    1.3%
   66     118.3     0.336    0.2%
   67     118.2     0.239    0.2%
   68       116     1.632    1.4%
   69     115.4     1.814    1.5%
   70     116.2      2.04    1.7%
   71       120     0.275    0.2%
   72     121.3     0.404    0.3%
   73     120.8     0.271    0.2%
   74     121.3     0.187    0.1%
   75     120.2     1.637    1.3%
   76       122     0.273    0.2%
   77     122.6     0.306    0.2%
   78     122.9     1.329    1.0%
   79       125     1.461    1.1%
   80     119.3     0.326    0.2%
   81     125.4     0.364    0.2%
   82     126.1     0.311    0.2%
   83     126.7     0.137    0.1%
   84     120.8     0.195    0.1%
   85     121.8     0.184    0.1%
   86     125.2     2.694    2.1%
   87     127.9      0.25    0.1%
   88     125.1     2.436    1.9%
   89     124.9     2.693    2.1%
   90       130     0.204    0.1%
   91     130.5     0.287    0.2%
   92     129.1     2.545    1.9%
   93     131.2     0.273    0.2%
   94       129     2.424    1.8%
   95     126.5     0.375    0.2%
   96     131.3     2.329    1.7%
   97     127.4     0.261    0.2%
   98     127.4     0.334    0.2%
   99     129.3     1.337    1.0%
  100     132.6     2.746    2.0%

Quality and confidence:
param     error
p         0.004

Model:
Time ~=    80.91
    + p    0.528
              µs

Reads = 5 + (0 * p)
Writes = 6 + (0 * p)

Pallet: ""pallet_democracy"", Extrinsic: ""external_propose"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy NextExternal (r:1 w:1)
Storage: Democracy Blacklist (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.62
    + v    0.094
              µs

Reads = 2 + (0 * v)
Writes = 1 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v   mean µs  sigma µs       %
    1     13.26     0.043    0.3%
    2     13.38     0.051    0.3%
    3     13.59     0.036    0.2%
    4     13.84     0.117    0.8%
    5     14.03      0.09    0.6%
    6     13.98     0.073    0.5%
    7     14.12     0.043    0.3%
    8     14.34     0.078    0.5%
    9      14.2     0.073    0.5%
   10     14.52     0.079    0.5%
   11     14.42     0.083    0.5%
   12     14.78     0.128    0.8%
   13     14.86      0.14    0.9%
   14     14.83     0.058    0.3%
   15      14.7       0.1    0.6%
   16      14.9     0.172    1.1%
   17     15.02     0.111    0.7%
   18     15.03     0.138    0.9%
   19     15.24     0.125    0.8%
   20     15.21     0.086    0.5%
   21     15.56       0.1    0.6%
   22     15.55     0.081    0.5%
   23     15.67     0.109    0.6%
   24     15.82      0.13    0.8%
   25     15.97     0.216    1.3%
   26     16.16     0.112    0.6%
   27     16.09     0.151    0.9%
   28     16.15      0.04    0.2%
   29      16.1      0.07    0.4%
   30      16.5     0.193    1.1%
   31     16.47     0.084    0.5%
   32     16.87     0.118    0.6%
   33     17.07     0.137    0.8%
   34     17.09     0.092    0.5%
   35     17.22     0.122    0.7%
   36     17.37     0.056    0.3%
   37     17.36     0.172    0.9%
   38     17.63      0.09    0.5%
   39     17.51     0.083    0.4%
   40     17.87      0.09    0.5%
   41     17.79     0.086    0.4%
   42     17.79     0.071    0.3%
   43     17.95     0.122    0.6%
   44     17.89     0.117    0.6%
   45     17.83     0.058    0.3%
   46     17.98     0.085    0.4%
   47     18.21     0.062    0.3%
   48     18.36     0.119    0.6%
   49     18.38     0.073    0.3%
   50     18.55     0.117    0.6%
   51     18.93     0.058    0.3%
   52     18.85     0.065    0.3%
   53     19.09     0.149    0.7%
   54     19.34     0.168    0.8%
   55     18.82     0.092    0.4%
   56     18.95     0.093    0.4%
   57     19.19     0.119    0.6%
   58     19.21     0.085    0.4%
   59     19.08     0.127    0.6%
   60     19.32     0.065    0.3%
   61     19.52      0.11    0.5%
   62     19.69     0.103    0.5%
   63     19.54     0.104    0.5%
   64      19.9      0.12    0.6%
   65     19.71     0.057    0.2%
   66      19.8     0.169    0.8%
   67     19.73     0.069    0.3%
   68      20.1     0.133    0.6%
   69     20.18     0.123    0.6%
   70     20.17     0.082    0.4%
   71     20.26     0.096    0.4%
   72     20.21     0.045    0.2%
   73     20.26     0.133    0.6%
   74     20.53     0.083    0.4%
   75     20.81     0.096    0.4%
   76     20.63      0.09    0.4%
   77     20.91       0.1    0.4%
   78     20.69     0.081    0.3%
   79     21.07     0.148    0.7%
   80     21.39     0.098    0.4%
   81     21.27     0.158    0.7%
   82     21.29     0.156    0.7%
   83     21.34     0.095    0.4%
   84     21.68     0.149    0.6%
   85     21.47      0.11    0.5%
   86     21.48     0.205    0.9%
   87     21.71     0.145    0.6%
   88     21.86     0.092    0.4%
   89     21.77     0.155    0.7%
   90     21.97      0.11    0.5%
   91     22.12     0.083    0.3%
   92     22.13     0.067    0.3%
   93     22.21     0.103    0.4%
   94     22.44     0.127    0.5%
   95      22.4     0.132    0.5%
   96     22.17     0.076    0.3%
   97     22.78     0.104    0.4%
   98     22.73     0.133    0.5%
   99     22.75      0.09    0.3%
  100     22.96     0.067    0.2%

Quality and confidence:
param     error
v             0

Model:
Time ~=     13.6
    + v    0.095
              µs

Reads = 2 + (0 * v)
Writes = 1 + (0 * v)

Pallet: ""pallet_democracy"", Extrinsic: ""external_propose_majority"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy NextExternal (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.909
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.909
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_democracy"", Extrinsic: ""external_propose_default"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy NextExternal (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.937
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.937
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_democracy"", Extrinsic: ""fast_track"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy NextExternal (r:1 w:1)
Storage: Democracy ReferendumCount (r:1 w:1)
Storage: Democracy ReferendumInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=       29
              µs

Reads = 2
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=       29
              µs

Reads = 2
Writes = 3

Pallet: ""pallet_democracy"", Extrinsic: ""veto_external"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy NextExternal (r:1 w:1)
Storage: Democracy Blacklist (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.77
    + v    0.137
              µs

Reads = 2 + (0 * v)
Writes = 2 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v   mean µs  sigma µs       %
    0     28.99      0.16    0.5%
    2      29.6     0.116    0.3%
    4     30.19      0.13    0.4%
    6     30.47     0.097    0.3%
    8     30.64     0.091    0.2%
   10     30.84     0.123    0.3%
   12     31.38     0.249    0.7%
   14     31.49     0.118    0.3%
   16        32     0.291    0.9%
   18     31.99     0.133    0.4%
   20     31.98     0.099    0.3%
   22      32.6     0.064    0.1%
   24     32.99     0.123    0.3%
   26     32.83     0.185    0.5%
   28     33.09     0.442    1.3%
   30     33.44     0.095    0.2%
   32     34.54      0.19    0.5%
   34     35.18     0.284    0.8%
   36     35.37      0.21    0.5%
   38     35.66      0.23    0.6%
   40     35.05     0.388    1.1%
   42     36.18     0.151    0.4%
   44     36.49     0.304    0.8%
   46     37.18     0.375    1.0%
   48     36.81     0.176    0.4%
   50     37.01     0.205    0.5%
   52     37.46     0.233    0.6%
   54     37.28     0.109    0.2%
   56     37.15     0.133    0.3%
   58     38.25     0.131    0.3%
   60     38.14     0.075    0.1%
   62      38.5     0.141    0.3%
   64     38.78     0.143    0.3%
   66     39.06     0.256    0.6%
   68     39.12     0.134    0.3%
   70     39.71     0.158    0.3%
   72     39.88     0.102    0.2%
   74     40.01      0.12    0.2%
   76     40.58     0.136    0.3%
   78     40.66     0.199    0.4%
   80     40.53     0.096    0.2%
   82     41.07     0.099    0.2%
   84     41.19      0.36    0.8%
   86     41.64     0.077    0.1%
   88     41.99     0.203    0.4%
   90     41.84     0.116    0.2%
   92     41.33     0.127    0.3%
   94     42.15     0.152    0.3%
   96     42.85     0.175    0.4%
   98        43     0.148    0.3%
  100     42.95     0.084    0.1%

Quality and confidence:
param     error
v             0

Model:
Time ~=    29.74
    + v    0.138
              µs

Reads = 2 + (0 * v)
Writes = 2 + (0 * v)

Pallet: ""pallet_democracy"", Extrinsic: ""cancel_proposal"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy PublicProps (r:1 w:1)
Storage: Democracy DepositOf (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.62
    + p    0.476
              µs

Reads = 3 + (0 * p)
Writes = 3 + (0 * p)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    p   mean µs  sigma µs       %
    1     51.47     0.138    0.2%
    2     53.38     0.144    0.2%
    3     53.26     0.427    0.8%
    4     54.41     0.678    1.2%
    5     55.96      0.19    0.3%
    6     55.42       0.1    0.1%
    7     55.68     0.266    0.4%
    8     57.75     0.309    0.5%
    9     57.52     0.218    0.3%
   10     58.23     0.194    0.3%
   11      58.9     0.325    0.5%
   12     59.72     0.202    0.3%
   13     60.04     0.338    0.5%
   14     61.17      0.48    0.7%
   15     61.15     0.415    0.6%
   16     62.31     0.389    0.6%
   17     62.74     0.194    0.3%
   18     63.55     0.251    0.3%
   19     63.06     0.191    0.3%
   20     64.41     0.259    0.4%
   21     65.46     0.237    0.3%
   22     65.28     0.352    0.5%
   23     66.06     0.209    0.3%
   24     67.48     0.851    1.2%
   25     67.65     0.177    0.2%
   26     67.84     0.909    1.3%
   27     67.96     0.228    0.3%
   28     68.07      0.21    0.3%
   29     69.13     0.499    0.7%
   30     70.92     0.661    0.9%
   31     69.99     0.412    0.5%
   32     70.45     0.427    0.6%
   33     70.67     0.394    0.5%
   34      72.2     0.482    0.6%
   35     73.54     0.137    0.1%
   36     75.03     0.833    1.1%
   37     73.62     0.922    1.2%
   38     73.02      0.32    0.4%
   39     75.17     0.466    0.6%
   40     74.75     0.826    1.1%
   41      76.4      0.15    0.1%
   42     75.02     0.982    1.3%
   43     77.45     0.257    0.3%
   44     77.84     0.288    0.3%
   45     76.21     0.783    1.0%
   46     78.84     0.292    0.3%
   47     78.81     0.181    0.2%
   48     78.21     0.998    1.2%
   49     78.16     0.904    1.1%
   50     80.51     0.231    0.2%
   51     79.66     0.879    1.1%
   52      79.4      0.99    1.2%
   53     80.18     0.624    0.7%
   54     79.49     0.223    0.2%
   55     82.45     0.265    0.3%
   56     82.33     0.898    1.0%
   57     82.43     0.828    1.0%
   58     83.54     0.873    1.0%
   59     83.84      0.73    0.8%
   60     85.77      0.17    0.1%
   61     83.53     0.368    0.4%
   62     83.74     1.019    1.2%
   63     87.19     0.135    0.1%
   64     84.28     0.165    0.1%
   65     84.79     0.175    0.2%
   66     84.97     0.241    0.2%
   67     84.94     0.169    0.1%
   68     89.73     0.222    0.2%
   69     88.33      2.02    2.2%
   70     88.39     1.724    1.9%
   71     87.56     0.551    0.6%
   72     87.89     0.924    1.0%
   73     88.21     0.369    0.4%
   74     92.73     0.197    0.2%
   75     93.08     0.245    0.2%
   76     91.43     1.927    2.1%
   77     91.47     1.799    1.9%
   78     94.73      0.17    0.1%
   79     95.47     0.429    0.4%
   80      93.4     1.884    2.0%
   81     95.15     1.688    1.7%
   82     92.87     1.266    1.3%
   83     94.69     2.692    2.8%
   84     93.31     0.202    0.2%
   85     93.34     0.234    0.2%
   86     98.54     1.563    1.5%
   87     93.94     0.244    0.2%
   88     94.89     0.409    0.4%
   89     95.37     0.203    0.2%
   90     95.56      0.38    0.3%
   91     96.16     0.164    0.1%
   92      96.1     0.176    0.1%
   93     100.5     2.309    2.2%
   94     96.92     0.204    0.2%
   95     97.64     0.157    0.1%
   96     104.6      0.21    0.2%
   97     98.93     0.149    0.1%
   98     99.41     0.286    0.2%
   99     99.29     0.297    0.2%
  100     101.1     2.599    2.5%

Quality and confidence:
param     error
p         0.002

Model:
Time ~=    54.67
    + p    0.479
              µs

Reads = 3 + (0 * p)
Writes = 3 + (0 * p)

Pallet: ""pallet_democracy"", Extrinsic: ""cancel_referendum"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy ReferendumInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17.82
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17.82
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_democracy"", Extrinsic: ""cancel_queued"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Scheduler Lookup (r:1 w:1)
Storage: Scheduler Agenda (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.41
    + r    1.737
              µs

Reads = 2 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1     31.23     0.149    0.4%
    2     32.89     0.101    0.3%
    3     33.85     0.088    0.2%
    4      37.5     0.318    0.8%
    5     39.14     0.163    0.4%
    6     40.89     0.097    0.2%
    7     42.71     0.123    0.2%
    8     45.28     0.144    0.3%
    9     46.95     0.378    0.8%
   10     47.68     0.269    0.5%
   11     48.57     0.113    0.2%
   12        51     0.137    0.2%
   13     52.16     0.151    0.2%
   14     53.81     0.143    0.2%
   15     55.38     0.134    0.2%
   16     57.73     0.181    0.3%
   17     59.12     0.316    0.5%
   18     61.53     0.641    1.0%
   19     62.81     0.135    0.2%
   20     64.36     0.241    0.3%
   21     67.91     0.192    0.2%
   22     69.03     0.396    0.5%
   23      69.1      0.33    0.4%
   24     70.13     0.176    0.2%
   25     72.23     0.102    0.1%
   26     74.42     0.152    0.2%
   27     76.32     0.186    0.2%
   28      76.2     0.571    0.7%
   29     79.11     0.147    0.1%
   30     80.97     0.392    0.4%
   31     82.26     0.185    0.2%
   32     83.14     0.436    0.5%
   33     85.75     0.082    0.0%
   34     87.34     0.172    0.1%
   35     87.25     0.493    0.5%
   36     90.23      0.16    0.1%
   37     92.88     0.189    0.2%
   38     94.33     0.194    0.2%
   39     95.12     0.174    0.1%
   40     95.53     0.694    0.7%
   41     96.19      0.44    0.4%
   42        99     0.898    0.9%
   43     99.64     0.071    0.0%
   44     101.9     0.975    0.9%
   45       104     0.722    0.6%
   46     105.7     0.812    0.7%
   47     107.2     0.906    0.8%
   48     109.2     0.705    0.6%
   49       111     0.206    0.1%
   50     113.4     0.188    0.1%
   51     116.1     0.902    0.7%
   52     122.8     1.742    1.4%
   53     122.2     0.243    0.1%
   54     124.5     0.284    0.2%
   55     125.2     1.021    0.8%
   56     125.5     0.626    0.4%
   57     128.3     0.981    0.7%
   58     128.3     0.871    0.6%
   59     129.6     0.669    0.5%
   60       133      1.15    0.8%
   61       136     0.908    0.6%
   62       191     40.86   21.3%
   63       136     0.409    0.3%
   64     139.4     1.343    0.9%
   65     144.5     6.427    4.4%
   66     143.9     0.443    0.3%
   67     146.8      1.47    1.0%
   68     148.9     0.386    0.2%
   69     163.3     9.816    6.0%
   70     148.9     0.363    0.2%
   71     155.3      2.02    1.3%
   72     154.9     1.787    1.1%
   73     162.1     12.29    7.5%
   74     173.1     28.94   16.7%
   75     180.1     11.51    6.3%
   76       160     0.872    0.5%
   77     198.5      37.7   18.9%
   78     165.4     1.097    0.6%
   79     162.3     0.651    0.4%
   80     165.5     1.407    0.8%
   81     236.8     43.92   18.5%
   82     166.5      1.42    0.8%
   83     228.7     41.65   18.2%
   84     174.1     0.434    0.2%
   85     173.8     1.435    0.8%
   86     226.6     45.55   20.0%
   87       213     51.29   24.0%
   88     187.4     3.277    1.7%
   89       184     2.293    1.2%
   90     188.6     3.622    1.9%
   91     192.9     3.244    1.6%
   92     301.2     29.43    9.7%
   93     194.9     11.32    5.8%
   94     216.4     18.45    8.5%
   95     201.2     6.419    3.1%
   96     196.7     1.112    0.5%
   97     199.7      1.24    0.6%
   98     210.5     8.496    4.0%
   99       209     9.055    4.3%

Quality and confidence:
param     error
r         0.021

Model:
Time ~=    23.67
    + r    1.946
              µs

Reads = 2 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""on_initialize_base"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy LastTabledWasExternal (r:1 w:0)
Storage: Democracy NextExternal (r:1 w:0)
Storage: Democracy PublicProps (r:1 w:0)
Storage: Democracy LowestUnbaked (r:1 w:0)
Storage: Democracy ReferendumCount (r:1 w:0)
Storage: Democracy ReferendumInfoOf (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    5.615
    + r    5.313
              µs

Reads = 5 + (1 * r)
Writes = 0 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1     22.72     1.567    6.8%
    2     28.47     1.962    6.8%
    3     30.24     0.073    0.2%
    4     36.55     0.824    2.2%
    5     45.77     3.062    6.6%
    6     47.32     2.081    4.3%
    7     49.65     0.178    0.3%
    8     53.36     0.245    0.4%
    9     63.34     2.998    4.7%
   10     68.42     3.402    4.9%
   11     69.27     0.132    0.1%
   12     74.69     0.143    0.1%
   13     79.09     0.373    0.4%
   14        85     0.304    0.3%
   15        88     0.246    0.2%
   16     93.96     0.273    0.2%
   17     97.63     0.245    0.2%
   18     100.8     0.186    0.1%
   19     106.2     0.599    0.5%
   20     111.5     1.413    1.2%
   21     116.3     0.303    0.2%
   22     121.2     0.262    0.2%
   23     128.7     2.972    2.3%
   24     131.3     0.206    0.1%
   25     138.1     0.429    0.3%
   26     143.1     0.472    0.3%
   27     146.6      0.22    0.1%
   28     151.5     0.335    0.2%
   29     156.5     0.394    0.2%
   30     163.6     0.685    0.4%
   31     166.9     0.347    0.2%
   32       171      0.63    0.3%
   33     176.4     0.523    0.2%
   34     183.8     0.602    0.3%
   35     185.8     0.468    0.2%
   36     190.7     0.587    0.3%
   37     197.3     0.463    0.2%
   38     200.7     0.521    0.2%
   39     205.9     0.561    0.2%
   40     211.1     0.552    0.2%
   41     215.5     0.443    0.2%
   42     218.4     0.399    0.1%
   43     225.7     0.607    0.2%
   44     230.9     0.254    0.1%
   45     234.1     0.903    0.3%
   46     240.4     1.412    0.5%
   47     244.7     0.838    0.3%
   48     251.7     0.342    0.1%
   49     256.2     0.469    0.1%
   50     262.4      0.51    0.1%
   51       268     0.524    0.1%
   52     279.9     0.575    0.2%
   53     286.1     0.635    0.2%
   54     292.2     0.972    0.3%
   55     296.1     0.993    0.3%
   56     303.3     0.676    0.2%
   57     307.7     1.196    0.3%
   58     314.8     3.077    0.9%
   59     315.6      1.31    0.4%
   60     319.4     0.657    0.2%
   61     332.4     5.773    1.7%
   62     332.3     2.235    0.6%
   63     345.2     2.363    0.6%
   64     345.5     1.373    0.3%
   65     350.5     2.903    0.8%
   66     352.4     1.343    0.3%
   67     364.8     4.641    1.2%
   68     363.8     0.717    0.1%
   69     366.5     1.357    0.3%
   70     372.4     0.792    0.2%
   71     381.4     4.277    1.1%
   72     387.8     3.218    0.8%
   73     414.6     39.65    9.5%
   74     393.2     1.747    0.4%
   75     405.5     2.438    0.6%
   76       413     8.076    1.9%
   77     410.1      3.17    0.7%
   78     419.5      3.21    0.7%
   79     438.9     2.747    0.6%
   80     428.3     1.734    0.4%
   81     463.9     26.95    5.8%
   82     610.2     155.4   25.4%
   83       447     1.589    0.3%
   84     798.1     39.95    5.0%
   85     468.1     11.21    2.3%
   86     514.2     44.59    8.6%
   87     475.4     5.057    1.0%
   88     474.3     3.402    0.7%
   89     485.2     2.747    0.5%
   90     773.2     147.4   19.0%
   91     494.1     6.224    1.2%
   92     508.4     12.31    2.4%
   93       510     9.316    1.8%
   94     622.3     145.5   23.3%
   95     541.1     22.57    4.1%
   96     531.2     6.037    1.1%
   97     594.9     101.2   17.0%
   98     545.7     21.45    3.9%
   99     537.4     4.199    0.7%

Quality and confidence:
param     error
r         0.062

Model:
Time ~=        0
    + r    5.834
              µs

Reads = 5 + (1 * r)
Writes = 0 + (0 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""delegate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy VotingOf (r:3 w:3)
Storage: Democracy ReferendumInfoOf (r:1 w:1)
Storage: Balances Locks (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.38
    + r    7.487
              µs

Reads = 4 + (1 * r)
Writes = 4 + (1 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1     72.29     0.224    0.3%
    2     80.37     0.129    0.1%
    3     87.87     0.253    0.2%
    4     94.16     0.612    0.6%
    5      99.5     0.146    0.1%
    6       107     0.236    0.2%
    7     113.9     0.145    0.1%
    8     120.9      0.41    0.3%
    9     226.2     5.877    2.5%
   10     134.8     1.323    0.9%
   11     139.5     0.257    0.1%
   12     146.7     0.692    0.4%
   13     152.7     0.401    0.2%
   14     160.8      0.29    0.1%
   15     166.7     0.442    0.2%
   16     174.5     0.898    0.5%
   17     181.6     0.538    0.2%
   18     186.6     0.505    0.2%
   19     194.6     0.462    0.2%
   20     203.3     0.592    0.2%
   21     209.8     0.697    0.3%
   22       219     3.867    1.7%
   23     223.8     0.892    0.3%
   24     228.5     0.555    0.2%
   25       236     1.013    0.4%
   26     241.7     0.531    0.2%
   27       249     0.719    0.2%
   28     258.7     0.609    0.2%
   29     265.7     0.766    0.2%
   30     270.9     0.719    0.2%
   31     280.8     0.341    0.1%
   32     287.6     0.355    0.1%
   33       296     2.441    0.8%
   34     301.2      1.01    0.3%
   35     310.5     1.004    0.3%
   36     314.4     0.903    0.2%
   37     318.4     1.452    0.4%
   38     328.7     1.579    0.4%
   39     336.8     1.301    0.3%
   40     342.7     1.184    0.3%
   41     346.5     1.474    0.4%
   42     355.1     0.801    0.2%
   43       365     1.138    0.3%
   44     370.4     0.786    0.2%
   45     393.8     4.406    1.1%
   46     387.8     1.132    0.2%
   47     392.6     1.698    0.4%
   48     404.2       1.6    0.3%
   49     416.5     0.859    0.2%
   50     422.1     2.264    0.5%
   51     424.2     0.748    0.1%
   52     446.7     1.761    0.3%
   53     456.2     3.033    0.6%
   54     457.9     1.243    0.2%
   55     466.8     1.378    0.2%
   56     479.2     3.572    0.7%
   57     483.2     2.464    0.5%
   58       492     3.683    0.7%
   59     502.3     3.061    0.6%
   60     501.8     2.006    0.3%
   61     512.1     2.547    0.4%
   62     525.7     2.311    0.4%
   63     538.8     2.609    0.4%
   64     548.9     6.729    1.2%
   65     546.9     4.248    0.7%
   66     553.3     5.585    1.0%
   67     560.1     3.589    0.6%
   68     566.3     2.593    0.4%
   69     578.3     4.605    0.7%
   70     576.8     1.911    0.3%
   71     583.2     0.965    0.1%
   72     589.5      2.26    0.3%
   73     601.9     3.007    0.4%
   74     607.5     3.969    0.6%
   75     618.1     3.929    0.6%
   76       623     1.913    0.3%
   77     628.3     1.692    0.2%
   78     644.1     4.799    0.7%
   79     645.2     2.348    0.3%
   80     646.8     1.756    0.2%
   81     661.3     4.587    0.6%
   82     689.8     27.52    3.9%
   83     670.5     3.032    0.4%
   84     679.6      4.51    0.6%
   85     688.1     7.565    1.0%
   86     709.3     18.52    2.6%
   87      1304     297.4   22.7%
   88     717.1     12.17    1.6%
   89     725.2     4.162    0.5%
   90     767.6     54.18    7.0%
   91     738.9     15.62    2.1%
   92     795.9     37.76    4.7%
   93     763.2      9.62    1.2%
   94     765.8     5.574    0.7%
   95     769.1      3.71    0.4%
   96     768.9     4.481    0.5%
   97     789.1     4.549    0.5%
   98     794.3     4.121    0.5%
   99     795.7     4.837    0.6%

Quality and confidence:
param     error
r         0.075

Model:
Time ~=    47.19
    + r    7.788
              µs

Reads = 4 + (1 * r)
Writes = 4 + (1 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""undelegate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy VotingOf (r:2 w:2)
Storage: Democracy ReferendumInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.19
    + r    7.484
              µs

Reads = 2 + (1 * r)
Writes = 2 + (1 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1     42.42     0.285    0.6%
    2      50.3     0.469    0.9%
    3     56.14     0.134    0.2%
    4     63.22     0.096    0.1%
    5     70.04     0.313    0.4%
    6     76.14     0.262    0.3%
    7     83.23     0.427    0.5%
    8     90.25     0.226    0.2%
    9     96.85     0.342    0.3%
   10     104.6      0.96    0.9%
   11     111.4     0.557    0.4%
   12     117.2     0.423    0.3%
   13     125.3     0.602    0.4%
   14     131.9     0.299    0.2%
   15     138.9     0.374    0.2%
   16     145.6     0.925    0.6%
   17     153.6     0.428    0.2%
   18     158.6     0.748    0.4%
   19     161.4      0.23    0.1%
   20     168.4     0.538    0.3%
   21     178.6      0.84    0.4%
   22     183.7     0.478    0.2%
   23     193.2     0.874    0.4%
   24     199.7     0.486    0.2%
   25     206.6     0.193    0.0%
   26     212.8     0.821    0.3%
   27     220.2     0.605    0.2%
   28     230.9     1.237    0.5%
   29     327.5     68.01   20.7%
   30       360     91.91   25.5%
   31     252.2     2.268    0.8%
   32     256.5      0.85    0.3%
   33     262.7     1.263    0.4%
   34       271     0.438    0.1%
   35     278.1     0.848    0.3%
   36     284.3     1.886    0.6%
   37     293.6     1.123    0.3%
   38     297.1     0.615    0.2%
   39     305.5     0.756    0.2%
   40     314.3     1.309    0.4%
   41     320.6     1.165    0.3%
   42     327.9     1.362    0.4%
   43     333.7     1.045    0.3%
   44     343.9     0.914    0.2%
   45     349.1     1.303    0.3%
   46     361.7     1.326    0.3%
   47     367.4     4.535    1.2%
   48     371.3     0.922    0.2%
   49     376.9     1.349    0.3%
   50       389     1.075    0.2%
   51     396.6     0.815    0.2%
   52     416.8     0.986    0.2%
   53     426.2     3.119    0.7%
   54     429.8     3.272    0.7%
   55     438.1     1.036    0.2%
   56     452.3     5.662    1.2%
   57     451.3      1.47    0.3%
   58     727.9     215.5   29.6%
   59       470     4.359    0.9%
   60     468.8     2.889    0.6%
   61     475.8     2.428    0.5%
   62       765     54.38    7.1%
   63     495.8     1.517    0.3%
   64     505.9     2.907    0.5%
   65     513.3     1.886    0.3%
   66     521.7     5.035    0.9%
   67     521.4     2.287    0.4%
   68     540.5     2.489    0.4%
   69       548     15.85    2.8%
   70     558.3     3.873    0.6%
   71     563.9     7.936    1.4%
   72     571.6     9.077    1.5%
   73     571.6     1.663    0.2%
   74     578.9     3.724    0.6%
   75     582.2     4.417    0.7%
   76       592     3.372    0.5%
   77     603.3     5.097    0.8%
   78     612.7     4.548    0.7%
   79     621.1     18.18    2.9%
   80     622.1     3.024    0.4%
   81     642.1     7.668    1.1%
   82     633.1     3.515    0.5%
   83     657.5     7.349    1.1%
   84     655.5     3.904    0.5%
   85     672.2     3.462    0.5%
   86     685.1     8.109    1.1%
   87     677.6      3.17    0.4%
   88     734.6     51.58    7.0%
   89     731.9     42.55    5.8%
   90     714.8     4.814    0.6%
   91     716.1     28.76    4.0%
   92     710.9     4.137    0.5%
   93       713     2.397    0.3%
   94     732.8     5.649    0.7%
   95       741     7.807    1.0%
   96     748.5     10.44    1.3%
   97     750.7     7.194    0.9%
   98     758.1     22.01    2.9%
   99     785.8     9.446    1.2%

Quality and confidence:
param     error
r         0.054

Model:
Time ~=    27.46
    + r    7.597
              µs

Reads = 2 + (1 * r)
Writes = 2 + (1 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""clear_public_proposals"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy PublicProps (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     3.31
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     3.31
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_democracy"", Extrinsic: ""note_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy Preimages (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    47.79
    + b    0.002
              µs

Reads = 1 + (0 * b)
Writes = 1 + (0 * b)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b   mean µs  sigma µs       %
    0     26.45      0.35    1.3%
  327     48.52     0.824    1.6%
  654     49.56     0.345    0.6%
  981     51.35     0.577    1.1%
 1308     51.71     0.242    0.4%
 1635     52.81     0.506    0.9%
 1962     53.76     0.212    0.3%
 2289        56     1.301    2.3%
 2616     55.48     0.257    0.4%
 2943     56.41     0.173    0.3%
 3270     57.14     0.111    0.1%
 3597     58.25      0.19    0.3%
 3924      59.1     0.259    0.4%
 4251     60.36     0.227    0.3%
 4578     60.96     0.108    0.1%
 4905     61.63     0.366    0.5%
 5232     62.82     0.145    0.2%
 5559     64.06      0.33    0.5%
 5886       105     19.38   18.4%
 6213     65.54     0.342    0.5%
 6540     67.18     0.197    0.2%
 6867     67.85     0.149    0.2%
 7194      69.2     0.147    0.2%
 7521     68.32     0.228    0.3%
 7848     70.81     0.105    0.1%
 8175      71.7     0.124    0.1%
 8502     72.71     0.183    0.2%
 8829      73.7     0.133    0.1%
 9156     74.89     0.057    0.0%
 9483     74.93     0.558    0.7%
 9810     76.87     0.155    0.2%
10137     77.51     0.254    0.3%
10464     78.39     0.125    0.1%
10791     79.49     0.119    0.1%
11118     80.41      0.23    0.2%
11445     81.49     0.269    0.3%
11772     82.47     0.156    0.1%
12099      83.5     0.109    0.1%
12426      84.3     0.147    0.1%
12753     83.38      0.16    0.1%
13080        86     0.152    0.1%
13407     87.22     0.289    0.3%
13734     88.19     0.078    0.0%
14061     88.69     0.643    0.7%
14388     88.26     0.308    0.3%
14715     89.97     1.064    1.1%
15042     91.99     0.198    0.2%
15369     92.81     0.172    0.1%
15696     93.78     0.157    0.1%
16023     95.02     0.165    0.1%
16350     95.52     0.603    0.6%

Quality and confidence:
param     error
b             0

Model:
Time ~=     47.7
    + b    0.003
              µs

Reads = 1 + (0 * b)
Writes = 1 + (0 * b)

Pallet: ""pallet_democracy"", Extrinsic: ""note_imminent_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy Preimages (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.72
    + b    0.002
              µs

Reads = 1 + (0 * b)
Writes = 1 + (0 * b)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b   mean µs  sigma µs       %
    0     29.12     0.116    0.3%
  327     30.28     0.105    0.3%
  654     31.32     0.163    0.5%
  981     32.65     0.135    0.4%
 1308     33.83     0.118    0.3%
 1635     34.72     0.123    0.3%
 1962     35.46     0.135    0.3%
 2289     36.56     0.098    0.2%
 2616     37.48     0.133    0.3%
 2943     38.33     0.171    0.4%
 3270     39.04     0.103    0.2%
 3597     40.42     0.081    0.2%
 3924     41.36     0.133    0.3%
 4251     42.73     0.776    1.8%
 4578     43.33      0.09    0.2%
 4905     44.37     0.107    0.2%
 5232     45.23     0.122    0.2%
 5559     46.35     0.141    0.3%
 5886     46.74     0.048    0.1%
 6213     48.12     0.121    0.2%
 6540     49.18     0.139    0.2%
 6867     49.88     0.132    0.2%
 7194     50.81     0.132    0.2%
 7521     51.78     0.128    0.2%
 7848     52.57     0.108    0.2%
 8175     54.32     0.142    0.2%
 8502     54.61      0.13    0.2%
 8829     55.57     0.126    0.2%
 9156     56.76     0.172    0.3%
 9483     58.01     0.081    0.1%
 9810     58.56     0.085    0.1%
10137     59.39     0.136    0.2%
10464     60.26      0.13    0.2%
10791     61.47     0.133    0.2%
11118      62.5      0.14    0.2%
11445     63.75     0.113    0.1%
11772     64.44     0.124    0.1%
12099     65.54     0.156    0.2%
12426     66.06     0.219    0.3%
12753     66.21     0.078    0.1%
13080     68.46     0.167    0.2%
13407     69.33     0.124    0.1%
13734     69.51      0.66    0.9%
14061     71.42     0.113    0.1%
14388     72.24     0.077    0.1%
14715     73.02     0.107    0.1%
15042     73.71     0.204    0.2%
15369     74.34     0.613    0.8%
15696     76.18     0.093    0.1%
16023     77.08     0.096    0.1%
16350     78.24     0.211    0.2%

Quality and confidence:
param     error
b             0

Model:
Time ~=    29.71
    + b    0.003
              µs

Reads = 1 + (0 * b)
Writes = 1 + (0 * b)

Pallet: ""pallet_democracy"", Extrinsic: ""reap_preimage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy Preimages (r:1 w:1)
Storage: System Account (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    42.27
    + b    0.002
              µs

Reads = 2 + (0 * b)
Writes = 1 + (0 * b)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    b   mean µs  sigma µs       %
    0     30.19     0.087    0.2%
  327     42.63      0.14    0.3%
  654     42.77     0.122    0.2%
  981     44.81     0.173    0.3%
 1308     45.07     0.082    0.1%
 1635     45.69     0.253    0.5%
 1962     46.47     0.142    0.3%
 2289      47.5     0.127    0.2%
 2616     48.02     0.123    0.2%
 2943     48.82     0.141    0.2%
 3270     48.84     0.398    0.8%
 3597     49.78     0.187    0.3%
 3924     50.46     0.123    0.2%
 4251     50.59      0.14    0.2%
 4578     51.94     0.132    0.2%
 4905     51.54     0.509    0.9%
 5232      52.9      0.17    0.3%
 5559     53.17     0.201    0.3%
 5886     54.24     0.119    0.2%
 6213     53.92     0.279    0.5%
 6540      56.2      0.12    0.2%
 6867     55.49     0.145    0.2%
 7194     56.66      0.55    0.9%
 7521     59.15     0.093    0.1%
 7848     58.22     0.116    0.1%
 8175     58.23     0.082    0.1%
 8502     60.23     0.128    0.2%
 8829     60.42     0.481    0.7%
 9156     59.62     0.195    0.3%
 9483      61.9     0.142    0.2%
 9810     62.96     0.107    0.1%
10137      62.3     0.218    0.3%
10464     63.11     0.637    1.0%
10791     64.38     0.328    0.5%
11118     65.38     0.122    0.1%
11445     66.04     0.219    0.3%
11772     66.38     0.106    0.1%
12099     65.69      0.15    0.2%
12426     66.22     0.206    0.3%
12753     67.14     0.566    0.8%
13080     68.69      0.77    1.1%
13407     69.29     0.457    0.6%
13734     70.55     0.178    0.2%
14061     71.47     0.237    0.3%
14388      71.5     0.117    0.1%
14715     72.73     0.147    0.2%
15042     72.14     0.175    0.2%
15369     74.24     0.137    0.1%
15696     74.93     0.128    0.1%
16023     75.75      0.14    0.1%
16350     76.05     0.203    0.2%

Quality and confidence:
param     error
b             0

Model:
Time ~=    41.31
    + b    0.002
              µs

Reads = 2 + (0 * b)
Writes = 1 + (0 * b)

Pallet: ""pallet_democracy"", Extrinsic: ""unlock_remove"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy VotingOf (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    39.47
    + r    0.133
              µs

Reads = 3 + (0 * r)
Writes = 3 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1     39.86     0.073    0.1%
    2     39.63     0.098    0.2%
    3     39.71     0.146    0.3%
    4      39.7      0.16    0.4%
    5     40.15     0.076    0.1%
    6     40.14     0.099    0.2%
    7     40.59     0.185    0.4%
    8     40.92     0.139    0.3%
    9      41.1     0.181    0.4%
   10     40.95     0.089    0.2%
   11     41.24     0.117    0.2%
   12     41.43     0.111    0.2%
   13     41.44     0.205    0.4%
   14     41.68     0.164    0.3%
   15     41.57      0.25    0.6%
   16     41.67      0.22    0.5%
   17     42.19     0.243    0.5%
   18     42.82     0.182    0.4%
   19     43.24      0.13    0.3%
   20      42.3      0.11    0.2%
   21     42.32     0.082    0.1%
   22     42.66     0.076    0.1%
   23     42.67     0.071    0.1%
   24     42.13      0.42    0.9%
   25     42.99     0.107    0.2%
   26     42.06     0.451    1.0%
   27     41.82     0.179    0.4%
   28     43.19     0.055    0.1%
   29     43.47     0.198    0.4%
   30     43.24     0.197    0.4%
   31     43.54     0.089    0.2%
   32      43.4     0.191    0.4%
   33     43.55     0.197    0.4%
   34     43.63     0.173    0.3%
   35     42.45     0.552    1.3%
   36     42.67     0.549    1.2%
   37     42.59     0.486    1.1%
   38     43.48     0.693    1.5%
   39     43.79      0.44    1.0%
   40     43.97      0.19    0.4%
   41     43.55     0.561    1.2%
   42      44.3     0.236    0.5%
   43     43.01     0.618    1.4%
   44     44.35     0.159    0.3%
   45     44.57     0.075    0.1%
   46     42.92     0.656    1.5%
   47     44.03     0.841    1.9%
   48     45.03     0.131    0.2%
   49      43.8     1.053    2.4%
   50     43.42     1.061    2.4%
   51      45.2     0.148    0.3%
   52     47.62      0.75    1.5%
   53     47.79     0.277    0.5%
   54     46.44     0.924    1.9%
   55     45.92     1.052    2.2%
   56     47.46     0.621    1.3%
   57     48.01     0.475    0.9%
   58      47.5     0.191    0.4%
   59     48.82     0.504    1.0%
   60     50.32     1.626    3.2%
   61     47.59      1.37    2.8%
   62     48.12      0.23    0.4%
   63     48.55     0.127    0.2%
   64     46.21     1.245    2.6%
   65     73.92      15.2   20.5%
   66      49.8     1.208    2.4%
   67     51.99     2.683    5.1%
   68     50.17      2.72    5.4%
   69     49.79     1.434    2.8%
   70     48.95      0.24    0.4%
   71     50.47     1.347    2.6%
   72     46.55     1.638    3.5%
   73     49.24     0.138    0.2%
   74      48.7     0.171    0.3%
   75     49.66     0.874    1.7%
   76     50.25     0.398    0.7%
   77     49.27     2.914    5.9%
   78     56.34     12.32   21.8%
   79     51.37     0.946    1.8%
   80     52.78     2.366    4.4%
   81     62.78      16.1   25.6%
   82     52.81     1.346    2.5%
   83      46.7     0.877    1.8%
   84     52.42     0.726    1.3%
   85     50.97     0.445    0.8%
   86     52.37     3.875    7.3%
   87     46.84     0.685    1.4%
   88     51.91     1.565    3.0%
   89     51.08      0.49    0.9%
   90     50.66     2.084    4.1%
   91     51.17     0.366    0.7%
   92     56.29      3.62    6.4%
   93      53.1     1.425    2.6%
   94     48.83     2.437    4.9%
   95     65.67     14.28   21.7%
   96     52.74     1.002    1.8%
   97     56.09      2.65    4.7%
   98     46.56     0.492    1.0%
   99        51      1.72    3.3%

Quality and confidence:
param     error
r         0.005

Model:
Time ~=     38.9
    + r    0.154
              µs

Reads = 3 + (0 * r)
Writes = 3 + (0 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""unlock_set"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy VotingOf (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    38.71
    + r    0.227
              µs

Reads = 3 + (0 * r)
Writes = 3 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1      37.8     0.206    0.5%
    2     41.01     2.259    5.5%
    3     42.08     2.215    5.2%
    4     38.71     0.055    0.1%
    5     39.42     0.363    0.9%
    6     40.23     0.421    1.0%
    7     40.83     0.561    1.3%
    8     40.35     0.215    0.5%
    9     40.78     0.418    1.0%
   10     40.61     0.079    0.1%
   11     41.02     0.185    0.4%
   12      41.1     0.227    0.5%
   13     40.94     0.186    0.4%
   14     44.38      2.15    4.8%
   15     41.99     0.126    0.3%
   16     42.15     0.618    1.4%
   17     43.41     0.332    0.7%
   18     43.17     0.486    1.1%
   19     43.63     0.346    0.7%
   20     43.02      0.16    0.3%
   21     44.06     0.145    0.3%
   22      43.4     0.214    0.4%
   23     44.33     0.195    0.4%
   24     43.74     0.294    0.6%
   25     44.29     0.364    0.8%
   26      44.2     0.134    0.3%
   27     44.98     0.177    0.3%
   28     45.22     0.253    0.5%
   29     45.24     0.462    1.0%
   30      44.9     0.253    0.5%
   31     44.79     0.227    0.5%
   32     45.25     0.072    0.1%
   33     45.83     0.526    1.1%
   34     46.39     0.096    0.2%
   35     46.74     0.181    0.3%
   36     45.72     0.633    1.3%
   37     44.76     0.083    0.1%
   38     46.05     0.673    1.4%
   39     46.61     0.641    1.3%
   40     45.29     0.129    0.2%
   41     46.51     0.974    2.0%
   42     45.69     0.105    0.2%
   43     47.59     0.238    0.5%
   44     47.43     0.786    1.6%
   45     48.48      0.83    1.7%
   46     47.81     0.932    1.9%
   47     47.97      1.09    2.2%
   48     47.63     0.922    1.9%
   49     49.27     0.205    0.4%
   50     49.78     0.125    0.2%
   51     51.26     0.251    0.4%
   52     52.84     0.218    0.4%
   53     52.04     0.935    1.7%
   54     51.97      0.19    0.3%
   55     53.06     0.937    1.7%
   56     51.36     0.952    1.8%
   57     55.43     2.026    3.6%
   58     52.26     0.869    1.6%
   59     56.27     1.952    3.4%
   60      52.8     1.098    2.0%
   61     59.94     10.78   17.9%
   62     54.68     0.871    1.5%
   63     57.31     1.556    2.7%
   64     52.47     0.395    0.7%
   65     56.25     1.102    1.9%
   66     54.58      0.58    1.0%
   67     55.13     0.247    0.4%
   68     55.43     0.273    0.4%
   69     55.26     0.318    0.5%
   70     55.81     0.497    0.8%
   71     54.25     0.717    1.3%
   72     54.61     1.607    2.9%
   73      54.7     1.316    2.4%
   74     56.19     0.262    0.4%
   75     56.61     0.323    0.5%
   76     70.29     13.55   19.2%
   77     57.04     1.518    2.6%
   78     54.57     1.583    2.9%
   79     56.78     1.536    2.7%
   80     58.63     0.867    1.4%
   81     57.57     1.077    1.8%
   82     59.26     0.789    1.3%
   83     57.93     0.166    0.2%
   84     53.32     0.786    1.4%
   85     53.53      0.82    1.5%
   86     58.87     3.529    5.9%
   87     54.53     1.649    3.0%
   88      56.4     1.739    3.0%
   89     54.32     0.495    0.9%
   90     65.34     11.06   16.9%
   91      55.2     0.562    1.0%
   92     64.09        12   18.7%
   93     54.74     0.143    0.2%
   94     57.63     1.742    3.0%
   95     61.09     2.038    3.3%
   96     61.45     1.412    2.2%
   97     62.08     1.666    2.6%
   98     62.39     0.508    0.8%
   99     61.22     0.386    0.6%

Quality and confidence:
param     error
r         0.003

Model:
Time ~=    38.71
    + r    0.231
              µs

Reads = 3 + (0 * r)
Writes = 3 + (0 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""remove_vote"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy ReferendumInfoOf (r:1 w:1)
Storage: Democracy VotingOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    21.47
    + r    0.235
              µs

Reads = 2 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1     19.59     0.094    0.4%
    2     20.24     0.085    0.4%
    3     21.78     0.391    1.7%
    4     22.24     0.203    0.9%
    5     38.35     0.182    0.4%
    6     22.32     0.137    0.6%
    7     22.83     0.092    0.4%
    8     23.78     0.379    1.5%
    9     23.68     0.212    0.8%
   10     24.02     0.055    0.2%
   11     23.73     0.119    0.5%
   12     33.55     7.753   23.1%
   13     24.17     0.229    0.9%
   14     24.72     0.402    1.6%
   15     25.59      0.31    1.2%
   16     25.39     0.408    1.6%
   17     28.66     2.127    7.4%
   18     25.02      0.12    0.4%
   19     36.31      8.49   23.3%
   20     26.39       0.4    1.5%
   21     27.32      0.49    1.7%
   22     25.92     0.461    1.7%
   23     26.51     0.267    1.0%
   24     26.75     0.258    0.9%
   25     27.04     0.065    0.2%
   26     27.01     0.317    1.1%
   27     27.88     0.225    0.8%
   28     27.79     0.161    0.5%
   29     28.58     0.771    2.6%
   30     28.56     0.135    0.4%
   31     28.56     0.206    0.7%
   32      28.8     0.112    0.3%
   33     29.59     0.357    1.2%
   34     29.79     0.128    0.4%
   35     30.23     0.343    1.1%
   36     29.35     0.507    1.7%
   37     32.48       5.3   16.3%
   38     30.48     0.093    0.3%
   39     30.38     0.098    0.3%
   40     28.22      0.08    0.2%
   41     31.57     2.428    7.6%
   42     28.59     0.136    0.4%
   43     28.78      0.15    0.5%
   44     29.21     0.124    0.4%
   45     29.54     0.112    0.3%
   46     32.08     0.953    2.9%
   47     32.32       0.3    0.9%
   48     31.75     0.891    2.8%
   49     32.45     0.125    0.3%
   50     32.52     0.154    0.4%
   51     32.61     0.864    2.6%
   52     33.47     0.843    2.5%
   53     32.91     0.701    2.1%
   54     32.97     0.735    2.2%
   55     33.84     1.235    3.6%
   56     39.26       1.4    3.5%
   57     35.77     0.301    0.8%
   58     57.63     0.412    0.7%
   59     39.35     1.782    4.5%
   60     38.01      0.64    1.6%
   61     36.05     0.165    0.4%
   62     33.55      1.09    3.2%
   63     37.24     0.438    1.1%
   64     37.36     0.571    1.5%
   65     36.58     0.517    1.4%
   66     42.64     6.859   16.0%
   67      39.6     1.781    4.4%
   68     38.78     1.231    3.1%
   69     38.81     0.365    0.9%
   70     39.04     1.708    4.3%
   71     38.77     0.399    1.0%
   72     39.84     0.443    1.1%
   73     40.84     1.286    3.1%
   74     41.78     3.071    7.3%
   75     43.73     4.609   10.5%
   76     40.15     0.495    1.2%
   77     37.62      0.94    2.4%
   78      40.2     0.343    0.8%
   79     40.42     0.276    0.6%
   80      41.1     0.921    2.2%
   81     40.88     0.331    0.8%
   82     40.83     0.343    0.8%
   83     43.41     2.463    5.6%
   84     36.29     0.395    1.0%
   85     42.21       0.2    0.4%
   86     41.19     0.188    0.4%
   87     37.23     0.215    0.5%
   88     37.88     0.353    0.9%
   89     42.49     0.751    1.7%
   90     42.77     0.299    0.6%
   91     38.58     1.694    4.3%
   92     38.35     0.516    1.3%
   93     37.87     0.316    0.8%
   94     38.38      0.36    0.9%
   95     48.06     7.351   15.2%
   96     46.02     3.151    6.8%
   97     45.39      0.89    1.9%
   98      44.9     0.207    0.4%
   99     45.65     0.589    1.2%

Quality and confidence:
param     error
r         0.004

Model:
Time ~=    22.75
    + r     0.22
              µs

Reads = 2 + (0 * r)
Writes = 2 + (0 * r)

Pallet: ""pallet_democracy"", Extrinsic: ""remove_other_vote"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Democracy ReferendumInfoOf (r:1 w:1)
Storage: Democracy VotingOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    21.77
    + r    0.233
              µs

Reads = 2 + (0 * r)
Writes = 2 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    1     19.63     0.052    0.2%
    2     20.56     0.075    0.3%
    3      21.6     0.076    0.3%
    4     22.31     0.079    0.3%
    5     22.24     0.091    0.4%
    6     27.17     5.318   19.5%
    7     36.98     5.012   13.5%
    8      23.2     0.116    0.4%
    9     23.68     0.069    0.2%
   10      24.2     0.123    0.5%
   11     42.09     0.447    1.0%
   12     24.62     0.144    0.5%
   13     24.37     0.175    0.7%
   14     27.35     1.288    4.7%
   15     25.43      0.16    0.6%
   16     25.12     0.278    1.1%
   17     26.82     0.137    0.5%
   18     25.88      0.37    1.4%
   19     26.85     0.393    1.4%
   20     26.79      0.69 <truncated>...
```

</details>",9675,2021-09-02T15:42:40Z,0
1829,joao-paulo-parity,/benchmark runtime pallet pallet_balances,9675,2021-09-02T23:10:46Z,0
1830,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     73.8
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     73.8
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.37
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.37
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.07
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    31.07
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.56
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    37.56
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    74.36
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    74.36
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.87
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.87
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-02T23:10:47Z,0
1831,athei,/benchmark runtime pallet pallet_contracts,9675,2021-09-03T12:58:00Z,0
1832,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.245
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.245
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.267
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     57.44     0.444    0.7%
   20      61.2     0.217    0.3%
   40     102.4     0.984    0.9%
   60       142     1.098    0.7%
   80     176.5     2.163    1.2%
  100     218.6     2.389    1.0%
  120     256.6     1.906    0.7%
  140     295.6     2.323    0.7%
  160     346.3     2.109    0.6%
  180       381     2.024    0.5%
  200     423.6     1.904    0.4%
  220       466     2.617    0.5%
  240     510.9     4.313    0.8%
  260     548.7     2.623    0.4%
  280     608.9     7.073    1.1%
  300     646.8     9.908    1.5%
  320     702.5     9.244    1.3%
  340     747.3     10.89    1.4%
  360     789.6     9.869    1.2%
  380     831.7     8.226    0.9%
  400     891.3     6.186    0.6%
  420     925.2     7.497    0.8%
  440     970.5     14.37    1.4%
  460      1011     8.569    0.8%
  480      1068     8.515    0.7%
  500      1114     2.814    0.2%
  520      1172     6.502    0.5%
  540      1183       8.9    0.7%
  560      1250     23.02    1.8%
  580      1292      13.4    1.0%
  600      1326     13.27    1.0%
  620      1381     13.62    0.9%
  640      1414     9.275    0.6%
  660      1479     11.51    0.7%
  680      1531     17.56    1.1%
  700      1577     18.36    1.1%
  720      1623      13.8    0.8%
  740      1660     11.38    0.6%
  760      1718     18.96    1.1%
  780      1754     14.59    0.8%
  800      1808     14.34    0.7%
  820      1858     18.73    1.0%
  840      1900     4.924    0.2%
  860      1945     11.27    0.5%
  880      2001     11.72    0.5%
  900      2066     12.41    0.6%
  920      2066     10.29    0.4%
  940      2123     22.33    1.0%
  960      2165     10.99    0.5%
  980      2218     15.16    0.6%
 1000      2274     15.41    0.6%
 1020      2320     14.59    0.6%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.274
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     69.4
    + q    41.41
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     3.359     0.026    0.7%
   20     860.3     15.14    1.7%
   40      1676     11.47    0.6%
   60      2515     14.41    0.5%
   80      3327     9.656    0.2%
  100      4183     13.07    0.3%
  120      5020     19.71    0.3%
  140      5841        21    0.3%
  160      6701     20.59    0.3%
  180      7507     10.23    0.1%
  200      8348     15.52    0.1%
  220      9239     30.73    0.3%
  240     10040     11.51    0.1%
  260     10850     23.71    0.2%
  280     11720     45.26    0.3%
  300     12560     21.74    0.1%
  320     13370     28.66    0.2%
  340     14180     26.52    0.1%
  360     15000     21.76    0.1%
  380     15860     21.98    0.1%
  400     16660     14.81    0.0%
  420     17500     25.71    0.1%
  440     18290     23.58    0.1%
  460     19210        30    0.1%
  480     20020     46.26    0.2%
  500     20760     29.09    0.1%
  520     21650     37.28    0.1%
  540     22410      24.1    0.1%
  560     23300     16.61    0.0%
  580     24130     28.72    0.1%
  600     24960        49    0.1%
  620     25750     41.88    0.1%
  640     26610     39.98    0.1%
  660     27360     27.86    0.1%
  680     28180     41.81    0.1%
  700     29010     39.13    0.1%
  720     29850     51.28    0.1%
  740     30660     50.32    0.1%
  760     31530     52.78    0.1%
  780     32300     45.93    0.1%
  800     33160     18.72    0.0%
  820     33870     31.73    0.0%
  840     34880     45.67    0.1%
  860     35700     29.93    0.0%
  880     36490     54.72    0.1%
  900     37380     54.34    0.1%
  920     38180     31.09    0.0%
  940     38970     29.04    0.0%
  960     39810     43.58    0.1%
  980     40570      58.6    0.1%
 1000     41480     55.19    0.1%

Quality and confidence:
param     error
q         0.008

Model:
Time ~=    78.97
    + q    41.39
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""instrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    77.71
    + c     80.7
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     85.14      0.34    0.3%
    2     254.5      5.23    2.0%
    4     407.1     0.429    0.1%
    6       556      4.78    0.8%
    8     729.8     12.23    1.6%
   10     868.4     10.82    1.2%
   12      1024     14.13    1.3%
   14      1225     16.48    1.3%
   16      1369     13.23    0.9%
   18      1532     15.41    1.0%
   20      1674     14.13    0.8%
   22      1803     16.94    0.9%
   24      1947     15.21    0.7%
   26      2238     3.873    0.1%
   28      2355     13.87    0.5%
   30      2499     18.77    0.7%
   32      2644     9.994    0.3%
   34      2837     12.97    0.4%
   36      2970     19.09    0.6%
   38      3133     18.27    0.5%
   40      3251     20.67    0.6%
   42      3396      11.9    0.3%
   44      3533     11.14    0.3%
   46      3700     15.67    0.4%
   48      3792     10.32    0.2%
   50      4214     7.765    0.1%
   52      4357     12.31    0.2%
   54      4485     11.18    0.2%
   56      4623     11.27    0.2%
   58      4772     11.47    0.2%
   60      4907     21.63    0.4%
   62      5038     14.95    0.2%
   64      5230     18.31    0.3%
   66      5436     13.26    0.2%
   68      5573     23.46    0.4%
   70      5728     16.66    0.2%
   72      5917     45.91    0.7%
   74      5999     18.45    0.3%
   76      6142     22.95    0.3%
   78      6278     21.25    0.3%
   80      6402     17.42    0.2%
   82      6555     13.72    0.2%
   84      6668     7.909    0.1%
   86      6834      17.2    0.2%
   88      6975     25.22    0.3%
   90      7110     18.34    0.2%
   92      7255     14.43    0.1%
   94      7384     26.01    0.3%
   96      7537     20.23    0.2%
   98      8216     25.15    0.3%
  100      8400     27.57    0.3%
  102      8506     27.63    0.3%
  104      8634     12.79    0.1%
  106      8802      29.9    0.3%
  108      8935     30.88    0.3%
  110      9073     24.91    0.2%
  112      9221      24.4    0.2%
  114      9325     21.81    0.2%
  116      9476     34.09    0.3%
  118      9635     28.85    0.2%
  120      9793     16.36    0.1%
  122      9905     28.61    0.2%
  124     10030     39.42    0.3%
  126     10280     38.67    0.3%
  128     10310     28.64    0.2%

Quality and confidence:
param     error
c         0.117

Model:
Time ~=    53.92
    + c    80.84
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_load"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.673
    + c    2.011
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     6.082     0.052    0.8%
    2     10.67      0.06    0.5%
    4     14.91     0.059    0.3%
    6     19.09     0.063    0.3%
    8     22.99     0.066    0.2%
   10     26.45     0.102    0.3%
   12     31.21     0.084    0.2%
   14     34.73     0.117    0.3%
   16     38.75     0.339    0.8%
   18     43.26     0.263    0.6%
   20     47.19     0.338    0.7%
   22     51.22     0.036    0.0%
   24     55.04     0.073    0.1%
   26     58.82     0.123    0.2%
   28     63.17     0.116    0.1%
   30     66.93     0.065    0.0%
   32     70.93     0.057    0.0%
   34     74.91     0.076    0.1%
   36     79.22       0.1    0.1%
   38     82.68     0.063    0.0%
   40     86.89     0.071    0.0%
   42     90.49     0.105    0.1%
   44     95.24     0.131    0.1%
   46     99.33     0.111    0.1%
   48     103.1     0.139    0.1%
   50     107.2     0.106    0.0%
   52     111.1     0.217    0.1%
   54     115.4     0.183    0.1%
   56     119.4      0.07    0.0%
   58     123.3     0.187    0.1%
   60     127.3     0.117    0.0%
   62     131.4     0.099    0.0%
   64     136.3     1.417    1.0%
   66     139.4     0.097    0.0%
   68     143.2     0.061    0.0%
   70     147.3     0.121    0.0%
   72     151.2      0.12    0.0%
   74     155.2     0.113    0.0%
   76     159.3     0.184    0.1%
   78     163.3     0.137    0.0%
   80     167.6     0.098    0.0%
   82     171.6     0.123    0.0%
   84     175.6       0.4    0.2%
   86     179.7     0.112    0.0%
   88     183.6     0.093    0.0%
   90     187.5     0.182    0.0%
   92     191.5     0.235    0.1%
   94     195.4     0.147    0.0%
   96     199.4     0.143    0.0%
   98     203.3     0.166    0.0%
  100     207.4     0.227    0.1%
  102     211.6     0.156    0.0%
  104     215.7     0.179    0.0%
  106     219.7     0.173    0.0%
  108     223.9     0.103    0.0%
  110     227.7      0.06    0.0%
  112     232.1     0.458    0.1%
  114     235.9     0.116    0.0%
  116     240.1      0.15    0.0%
  118     244.4     0.106    0.0%
  120     248.2     0.114    0.0%
  122       252     0.125    0.0%
  124     256.1     0.139    0.0%
  126     260.3     0.174    0.0%
  128     265.4     0.329    0.1%

Quality and confidence:
param     error
c             0

Model:
Time ~=     6.64
    + c    2.012
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_refcount"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    10.77
    + c    3.035
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     9.938     0.049    0.4%
    2      16.5     0.084    0.5%
    4     23.19     0.124    0.5%
    6     29.25      0.07    0.2%
    8     35.09     0.355    1.0%
   10     41.27     0.085    0.2%
   12     47.63      0.05    0.1%
   14     54.25     0.093    0.1%
   16     60.39     0.189    0.3%
   18     66.67     0.622    0.9%
   20     71.56       0.1    0.1%
   22     78.03     0.126    0.1%
   24     83.82     0.053    0.0%
   26     89.57     0.089    0.0%
   28      95.7     0.099    0.1%
   30     101.7      0.14    0.1%
   32     107.8     0.168    0.1%
   34     113.5     0.147    0.1%
   36     120.2     0.146    0.1%
   38     125.5     0.292    0.2%
   40     131.7     0.167    0.1%
   42     137.1     0.299    0.2%
   44     146.8      0.86    0.5%
   46     150.2     0.118    0.0%
   48     156.5     0.197    0.1%
   50     162.1     0.244    0.1%
   52     168.9     0.139    0.0%
   54     174.6      0.34    0.1%
   56     181.1     0.247    0.1%
   58     186.8     0.408    0.2%
   60     193.2     0.163    0.0%
   62     198.6     0.376    0.1%
   64     204.6     0.225    0.1%
   66     210.8     0.246    0.1%
   68     216.6     0.138    0.0%
   70     222.8     0.167    0.0%
   72     228.8     0.236    0.1%
   74       235     0.161    0.0%
   76       241     0.138    0.0%
   78       247     0.282    0.1%
   80     253.2     0.152    0.0%
   82     259.4     0.064    0.0%
   84     265.5     0.266    0.1%
   86     271.8     0.332    0.1%
   88     277.7     0.572    0.2%
   90     283.6     0.061    0.0%
   92     289.7     0.143    0.0%
   94     295.9     0.176    0.0%
   96     301.7      0.12    0.0%
   98     307.6     0.113    0.0%
  100     313.9     0.095    0.0%
  102     320.2     0.194    0.0%
  104     326.4     0.307    0.0%
  106     332.5     0.307    0.0%
  108     338.9     0.165    0.0%
  110     344.7     0.136    0.0%
  112     352.7     2.929    0.8%
  114     357.4     0.671    0.1%
  116     368.5     10.09    2.7%
  118     368.8     0.188    0.0%
  120     374.9     0.397    0.1%
  122     381.1     0.172    0.0%
  124       389     3.349    0.8%
  126       394     0.709    0.1%
  128     400.1     0.305    0.0%

Quality and confidence:
param     error
c         0.001

Model:
Time ~=    10.66
    + c     3.04
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    820.2
    + c    199.9
    + s    2.448
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      3320     10.82    0.3%
    1  1024      3532     17.03    0.4%
    2  1024      3721     7.627    0.2%
    3  1024      3923     13.27    0.3%
    4  1024      4130     13.04    0.3%
    5  1024      4332     16.35    0.3%
    6  1024      4487     12.08    0.2%
    7  1024      4721     11.27    0.2%
    8  1024      4885     10.65    0.2%
    9  1024      5156     22.18    0.4%
   10  1024      5309     15.94    0.3%
   11  1024      5481     16.94    0.3%
   12  1024      5651     22.14    0.3%
   13  1024      5939     24.56    0.4%
   14  1024      6089     13.77    0.2%
   15  1024      6281      17.1    0.2%
   16  1024      6453     20.38    0.3%
   17  1024      6791     18.96    0.2%
   18  1024      6959      10.7    0.1%
   19  1024      7141     27.71    0.3%
   20  1024      7311      21.9    0.2%
   21  1024      7502     23.32    0.3%
   22  1024      7648     29.96    0.3%
   23  1024      7830     17.57    0.2%
   24  1024      7985     12.95    0.1%
   25  1024      8373     32.37    0.3%
   26  1024      8586     42.75    0.4%
   27  1024      8733     24.49    0.2%
   28  1024      8888     15.51    0.1%
   29  1024      9054     14.13    0.1%
   30  1024      9214     13.83    0.1%
   31  1024      9420     31.89    0.3%
   32  1024      9559     30.81    0.3%
   33  1024     10160     28.15    0.2%
   34  1024     10310     18.84    0.1%
   35  1024     10480      28.7    0.2%
   36  1024     10680     35.38    0.3%
   37  1024     10830      31.5    0.2%
   38  1024     11020     26.54    0.2%
   39  1024     11210     32.31    0.2%
   40  1024     11360      41.3    0.3%
   41  1024     11550     24.96    0.2%
   42  1024     11720     25.17    0.2%
   43  1024     11880     29.22    0.2%
   44  1024     12080     28.07    0.2%
   45  1024     12210      35.4    0.2%
   46  1024     12390     34.77    0.2%
   47  1024     12590      32.1    0.2%
   48  1024     12960     39.12    0.3%
   49  1024     13310     12.69    0.0%
   50  1024     13520     20.57    0.1%
   51  1024     13700      34.1    0.2%
   52  1024     13870     45.03    0.3%
   53  1024     14030     34.15    0.2%
   54  1024     14180     41.96    0.2%
   55  1024     14370     26.07    0.1%
   56  1024     14550     27.71    0.1%
   57  1024     14730     34.41    0.2%
   58  1024     14920     38.04    0.2%
   59  1024     15060     31.61    0.2%
   60  1024     15250     29.84    0.1%
   61  1024     15410     25.66    0.1%
   62  1024     15580     22.24    0.1%
   63  1024     15760     43.48    0.2%
   64     0     13400     20.55    0.1%
   64    20     13400     17.56    0.1%
   64    40     13520     32.14    0.2%
   64    60     13550     30.73    0.2%
   64    80     13590     31.92    0.2%
   64   100     13630     28.08    0.2%
   64   120     13670     30.03    0.2%
   64   140     13750     37.08    0.2%
   64   160     13790     33.12    0.2%
   64   180     13840     44.83    0.3%
   64   200     13910     16.21    0.1%
   64   220     13920     36.44    0.2%
   64   240     13980     38.11    0.2%
   64   260     14050     29.58    0.2%
   64   280     14070     35.02    0.2%
   64   300     14120     29.99    0.2%
   64   320     14210     40.14    0.2%
   64   340     14210     26.83    0.1%
   64   360     14290     28.29    0.1%
   64   380     14340     25.71    0.1%
   64   400     14380     17.23    0.1%
   64   420     14400     30.78    0.2%
   64   440     14470     29.78    0.2%
   64   460     14530     22.48    0.1%
   64   480     14550     26.49    0.1%
   64   500     14780     114.1    0.7%
   64   520     14660     22.15    0.1%
   64   540     14720     33.08    0.2%
   64   560     14740     20.45    0.1%
   64   580     14800     33.63    0.2%
   64   600     14870     32.73    0.2%
   64   620     14910     25.44    0.1%
   64   640     14930     24.63    0.1%
   64   660     15020     61.37    0.4%
   64   680     15060     37.38    0.2%
   64   700     15130     28.34    0.1%
   64   720     15150      39.4    0.2%
   64   740     15200     28.56    0.1%
   64   760     15270     39.09    0.2%
   64   780     15320     23.12    0.1%
   64   800     15370     48.08    0.3%
   64   820     15430     49.45    0.3%
   64   840     15450     45.39    0.2%
   64   860     15490     38.59    0.2%
   64   880     15550     36.31    0.2%
   64   900     15630     46.08    0.2%
   64   920     15650     35.09    0.2%
   64   940     15710     43.38    0.2%
   64   960     15740     25.19    0.1%
   64   980     15780     16.42    0.1%
   64  1000     15830     23.52    0.1%
   64  1020     15890     38.38    0.2%
   64  1024     15910     21.45    0.1%

Quality and confidence:
param     error
c         0.166
s          0.01

Model:
Time ~=    680.5
    + c    197.8
    + s    2.626
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    270.6
    + s    2.386
              µs

Reads = 5 + (0 * s)
Writes = 3 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     266.6     0.252    0.0%
   20     315.8     0.444    0.1%
   40     364.2      0.27    0.0%
   60     419.6     4.134    0.9%
   80       460     0.461    0.1%
  100     510.2     7.208    1.4%
  120     555.4     0.729    0.1%
  140     605.8     5.507    0.9%
  160     659.7     13.89    2.1%
  180     697.9     0.658    0.0%
  200     751.3     8.987    1.1%
  220     801.6     14.37    1.7%
  240     846.6     11.63    1.3%
  260     901.7     15.08    1.6%
  280     935.7     0.638    0.0%
  300      1005     17.06    1.6%
  320      1042     16.95    1.6%
  340      1092     16.89    1.5%
  360      1138     14.69    1.2%
  380      1195        14    1.1%
  400      1235     12.97    1.0%
  420      1289     10.97    0.8%
  440      1325     15.27    1.1%
  460      1374     13.69    0.9%
  480      1430     14.31    1.0%
  500      1471     13.79    0.9%
  520      1527     14.41    0.9%
  540      1571     15.51    0.9%
  560      1620     15.32    0.9%
  580      1657     12.45    0.7%
  600      1709     13.59    0.7%
  620      1752     15.54    0.8%
  640      1795      9.61    0.5%
  660      1872     3.531    0.1%
  680      1920     2.949    0.1%
  700      1962     9.095    0.4%
  720      1995     11.92    0.5%
  740      2035     9.404    0.4%
  760      2094     13.43    0.6%
  780      2144     12.58    0.5%
  800      2213     13.47    0.6%
  820      2241     12.67    0.5%
  840      2293     14.18    0.6%
  860      2349     9.281    0.3%
  880      2395     8.538    0.3%
  900      2441     17.96    0.7%
  920      2486     11.05    0.4%
  940      2537     9.285    0.3%
  960      2572     16.76    0.6%
  980      2622      15.1    0.5%
 1000      2672     15.19    0.5%
 1020      2728     9.609    0.3%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    270.5
    + s    2.407
              µs

Reads = 5 + (0 * s)
Writes = 3 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    248.4
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    248.4
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""claim_surcharge"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acafbc76efb655f52a2] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a45e3386f1a83f00b28] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a96e4ef3ab80b5c3a5f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3d24875569a319056f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ad561e495f01c762] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3b624bb134596373c1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aadbe519bace97698b4] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7e33b1a343f33065bd] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a626f271ae6979bbffe] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ce585fd4ae98b830b] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac889c022f51a43b527] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f6353225ab0496d48] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab578892d355575c3e4] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a02b4c8040b81dc785d] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a8d13a70c1e380292ea] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2e4d2fc709d989c778] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a6df81b28bd3ec99a3a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af54f74589657eac0fd] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a1849a3092175db4a2f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f05ecdc6c2c42c9fb] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a24c3c0036dfb085bb9] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a44d725ac77836eb10b] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad04db6c692ab73d90d] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a873009d6cdb99c5a4c] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa958795fbfc2b5fa41] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a205b6f659d219c8cbc] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ade54b3bc3d3cdb1aeb] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a538b748c1c5f92be98] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad50de2ad89aaa1e067] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a0576917f19ecaf2a3f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a5b44bd2793555a71e7] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc874645f7bbf62e62] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ae1b958a847e98bc8] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a396ae49d5311ee6bd1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa5d56999a2ebd1c4c9] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a72f370c054587f81a5] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3a32934e459acb2ceb] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac10fd56a5e084aae1c] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2ba8e27fcdbc3ab4f2] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4a75b804eec44f3f2a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ebb181fc616bfdb4] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a9aaf019a62fd907a8a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a19730285453eb7702a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acced4c24d0ebee7c29] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae458a57da6a2a6280a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a83b9f09b407c57d07e] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc9fc095b3aaaef755] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a587ccf84053d9950ff] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a13d53bcf137f3784e9] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abb79d34fb381ebd7c1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a935ea70a3e699d23b6] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a109fcd63aefdae75a1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abca8d937a761f2eb46] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a314c97ff9e866a835b] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a691e4b5f67da0dea8e] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a127c680b864ee61620] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a148df8dfd47b4493f3] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a57c606ebe91374fcee] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acec20322704f7bec44] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abf6a27e09c6d0a9f0f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae2e8bdcf5850e20836] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab8399645bc39338a47] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a658619de90cae5dbe1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aeb9db1dfeed3a7b47b] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abdc9db5edf43ffcb0d] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    132.3
    + c    3.164
              µs

Reads = 5 + (0 * c)
Writes = 4 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     129.3     0.523    0.4%
    2     138.6     1.132    0.8%
    4     144.5     0.194    0.1%
    6     150.4     0.653    0.4%
    8     157.4      0.91    0.5%
   10     163.3     0.812    0.4%
   12     169.5     0.624    0.3%
   14     176.5      1.26    0.7%
   16     184.1     2.057    1.1%
   18       190     0.615    0.3%
   20     195.5     0.961    0.4%
   22     203.4     0.809    0.3%
   24     210.6     2.145    1.0%
   26     214.5     0.592    0.2%
   28     222.3     1.207    0.5%
   30     228.3     0.696    0.3%
   32     235.6     4.079    1.7%
   34     247.4     11.67    4.7%
   36       249     9.274    3.7%
   38     254.1     2.064    0.8%
   40     259.9     1.318    0.5%
   42     267.1     2.816    1.0%
   44     271.7     1.006    0.3%
   46       280     5.101    1.8%
   48     284.8     1.285    0.4%
   50       293     5.931    2.0%
   52     296.7     1.074    0.3%
   54     302.3     0.359    0.1%
   56     308.9     0.757    0.2%
   58     316.7     1.797    0.5%
   60     322.8     2.077    0.6%
   62     327.1     0.952    0.2%
   64     341.4     5.061    1.4%
   66       342      1.21    0.3%
   68     350.5      5.61    1.6%
   70       353     1.398    0.3%
   72     361.5     5.918    1.6%
   74     371.4     11.74    3.1%
   76     373.1     5.516    1.4%
   78       378     2.325    0.6%
   80     383.6     1.198    0.3%
   82     391.2     0.912    0.2%
   84     397.8     1.109    0.2%
   86     405.7      0.91    0.2%
   88     414.4     9.353    2.2%
   90     418.6     4.347    1.0%
   92     422.2     0.534    0.1%
   94     432.2     5.713    1.3%
   96     434.7     0.558    0.1%
   98     445.2     7.834    1.7%
  100     451.2     4.731    1.0%
  102     455.9     2.767    0.6%
  104       462     2.546    0.5%
  106     470.3      3.62    0.7%
  108     473.1     1.451    0.3%
  110     482.1     4.543    0.9%
  112     488.1     3.859    0.7%
  114     492.5     0.975    0.1%
  116     509.5     11.07    2.1%
  118     531.8     8.126    1.5%
  120     511.9     2.579    0.5%
  122       517     1.546    0.2%
  124     523.9     1.223    0.2%
  126     531.4     0.943    0.1%
  128     550.6     11.65    2.1%

Quality and confidence:
param     error
c         0.006

Model:
Time ~=    131.9
    + c    3.194
              µs

Reads = 5 + (0 * c)
Writes = 4 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    706.3
    + r    141.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       696     9.974    1.4%
    1     842.4     13.92    1.6%
    2     980.5      8.68    0.8%
    3      1118     10.27    0.9%
    4      1265      10.1    0.7%
    5      1415     13.82    0.9%
    6      1544      15.3    0.9%
    7      1708     11.36    0.6%
    8      1841     14.82    0.8%
    9      1982     11.27    0.5%
   10      2135     11.55    0.5%
   11      2268     13.67    0.6%
   12      2412     12.81    0.5%
   13      2541     4.853    0.1%
   14      2686     14.63    0.5%
   15      2827     14.16    0.5%
   16      2965     13.52    0.4%
   17      3103     7.032    0.2%
   18      3240     9.649    0.2%
   19      3397     12.42    0.3%
   20      3514     8.959    0.2%

Quality and confidence:
param     error
r         0.168

Model:
Time ~=      704
    + r    141.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    712.7
    + r    139.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     690.7     0.219    0.0%
    1       835     5.879    0.7%
    2       978     9.527    0.9%
    3      1159     14.61    1.2%
    4      1291     1.195    0.0%
    5      1398     12.97    0.9%
    6      1534     12.57    0.8%
    7      1700     14.77    0.8%
    8      1827     14.46    0.7%
    9      1981     14.43    0.7%
   10      2124     10.11    0.4%
   11      2260     9.773    0.4%
   12      2390     4.695    0.1%
   13      2532     14.19    0.5%
   14      2689     11.83    0.4%
   15      2809     3.533    0.1%
   16      2945     11.08    0.3%
   17      3073     10.07    0.3%
   18      3215     12.01    0.3%
   19      3374      19.8    0.5%
   20      3516     17.55    0.4%

Quality and confidence:
param     error
r         0.206

Model:
Time ~=    709.5
    + r    140.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    713.5
    + r    139.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     698.5     11.11    1.5%
    1     848.3     13.37    1.5%
    2       985     13.42    1.3%
    3      1131     13.27    1.1%
    4      1252     6.757    0.5%
    5      1412     13.75    0.9%
    6      1538     14.54    0.9%
    7      1698     10.54    0.6%
    8      1834     14.07    0.7%
    9      1972     11.66    0.5%
   10      2108     3.123    0.1%
   11      2251     9.648    0.4%
   12      2383     3.785    0.1%
   13      2515     13.44    0.5%
   14      2668     6.328    0.2%
   15      2815     14.77    0.5%
   16      2947     6.812    0.2%
   17      3077     6.342    0.2%
   18      3219     6.944    0.2%
   19      3358     11.06    0.3%
   20      3482     9.997    0.2%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    709.2
    + r    139.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    705.4
    + r    390.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     691.5     0.241    0.0%
    1      1095      15.2    1.3%
    2      1483      13.7    0.9%
    3      1869     11.97    0.6%
    4      2267     10.83    0.4%
    5      2641     12.96    0.4%
    6      3042      6.45    0.2%
    7      3454     12.69    0.3%
    8      3848     10.73    0.2%
    9      4256     14.96    0.3%
   10      4607     9.431    0.2%
   11      4998     16.21    0.3%
   12      5387     12.45    0.2%
   13      5776     13.44    0.2%
   14      6193     7.954    0.1%
   15      6566     21.52    0.3%
   16      6962     12.91    0.1%
   17      7343     18.02    0.2%
   18      7688     7.564    0.0%
   19      8110     18.69    0.2%
   20      8497     25.02    0.2%

Quality and confidence:
param     error
r         0.246

Model:
Time ~=    708.3
    + r      390
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    700.7
    + r    139.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     694.4     8.922    1.2%
    1       835     1.149    0.1%
    2     980.1     11.39    1.1%
    3      1125     12.38    1.1%
    4      1252     6.735    0.5%
    5      1399     13.57    0.9%
    6      1530     13.73    0.8%
    7      1697     12.12    0.7%
    8      1829     13.15    0.7%
    9      1971     10.87    0.5%
   10      2111     8.156    0.3%
   11      2240      11.8    0.5%
   12      2363     13.56    0.5%
   13      2516     15.49    0.6%
   14      2681      9.46    0.3%
   15      2802     17.32    0.6%
   16      2960     8.948    0.3%
   17      3074     2.842    0.0%
   18      3211     10.18    0.3%
   19      3352     11.49    0.3%
   20      3493     10.21    0.2%

Quality and confidence:
param     error
r         0.174

Model:
Time ~=      701
    + r      140
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    702.9
    + r    138.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     691.5     0.238    0.0%
    1     832.9     1.577    0.1%
    2     981.8     12.81    1.3%
    3      1111     10.18    0.9%
    4      1250     2.195    0.1%
    5      1390     10.75    0.7%
    6      1525     16.15    1.0%
    7      1700     15.14    0.8%
    8      1824     16.16    0.8%
    9      1963     14.68    0.7%
   10      2097     10.38    0.4%
   11      2229     10.48    0.4%
   12      2382     11.02    0.4%
   13      2506     13.24    0.5%
   14      2648     12.94    0.4%
   15      2789     14.52    0.5%
   16      2932     12.68    0.4%
   17      3069     8.878    0.2%
   18      3207     7.007    0.2%
   19      3346     5.161    0.1%
   20      3463     11.33    0.3%

Quality and confidence:
param     error
r         0.169

Model:
Time ~=      700
    + r    139.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_tombstone_deposit"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    700.7
    + r      139
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     693.3     5.728    0.8%
    1       838     10.69    1.2%
    2     981.6     11.08    1.1%
    3      1115     14.81    1.3%
    4      1248     8.431    0.6%
    5      1389     13.62    0.9%
    6      1522     10.38    0.6%
    7      1693     13.61    0.8%
    8      1818     14.69    0.8%
    9      1980     12.71    0.6%
   10      2105     12.82    0.6%
   11      2218     16.85    0.7%
   12      2346     11.32    0.4%
   13      2503     9.542    0.3%
   14      2666     10.68    0.4%
   15      2792     16.87    0.6%
   16      2938     10.01    0.3%
   17      3077     14.19    0.4%
   18      3202     16.93    0.5%
   19      3380     8.789    0.2%
   20      3464     17.34    0.5%

Quality and confidence:
param     error
r         0.222

Model:
Time ~=    697.4
    + r    139.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_rent_allowance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    705.1
    + r    141.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     694.6     7.093    1.0%
    1     840.5     7.484    0.8%
    2       981     4.632    0.4%
    3      1126     7.986    0.7%
    4      1274     10.01    0.7%
    5      1411     10.63    0.7%
    6      1548     11.88    0.7%
    7      1714     8.933    0.5%
    8      1850     4.909    0.2%
    9      1987     5.177    0.2%
   10      2118     3.044    0.1%
   11      2265      6.98    0.3%
   12      2398     4.776    0.1%
   13      2533     6.632    0.2%
   14      2694     14.44    0.5%
   15      2830     5.222    0.1%
   16      2965     12.65    0.4%
   17      3106     5.451    0.1%
   18      3251     11.57    0.3%
   19      3394     11.49    0.3%
   20      3530     6.918    0.1%

Quality and confidence:
param     error
r          0.13

Model:
Time ~=    704.1
    + r    141.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    705.5
    + r    140.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     695.6     8.218    1.1%
    1     852.3     13.52    1.5%
    2     983.9     10.62    1.0%
    3      1124     10.47    0.9%
    4      1271     9.621    0.7%
    5      1404     6.069    0.4%
    6      1546     5.471    0.3%
    7      1711     5.746    0.3%
    8      1841     5.325    0.2%
    9      1979     4.885    0.2%
   10      2111      1.36    0.0%
   11      2250     4.173    0.1%
   12      2396     8.947    0.3%
   13      2534     8.652    0.3%
   14      2684      9.21    0.3%
   15      2828      8.46    0.2%
   16      2968      8.34    0.2%
   17      3115     11.73    0.3%
   18      3245     9.216    0.2%
   19      3371     13.44    0.3%
   20      3519     7.139    0.2%

Quality and confidence:
param     error
r         0.133

Model:
Time ~=    705.1
    + r      141
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    714.8
    + r    138.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     694.5     5.958    0.8%
    1     843.3      12.6    1.4%
    2     989.2      16.5    1.6%
    3      1121     14.69    1.3%
    4      1265     17.93    1.4%
    5      1401     13.62    0.9%
    6      1544     15.06    0.9%
    7      1695     16.58    0.9%
    8      1832     11.26    0.6%
    9      1975     14.37    0.7%
   10      2086     13.63    0.6%
   11      2248     11.16    0.4%
   12      2394     9.108    0.3%
   13      2526     10.09    0.3%
   14      2667     11.96    0.4%
   15      2799     3.514    0.1%
   16      2946     15.31    0.5%
   17      3078     13.19    0.4%
   18      3216     7.592    0.2%
   19      3322     13.57    0.4%
   20      3470     7.536    0.2%

Quality and confidence:
param     error
r         0.198

Model:
Time ~=    710.7
    + r      139
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    708.1
    + r    333.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     701.9     15.56    2.2%
    1      1039     15.25    1.4%
    2      1367     13.75    1.0%
    3      1712     10.97    0.6%
    4      2045     9.288    0.4%
    5      2369     12.95    0.5%
    6      2712     7.815    0.2%
    7      3036     4.155    0.1%
    8      3372     10.32    0.3%
    9      3701     10.55    0.2%
   10      4033     6.943    0.1%
   11      4389     10.67    0.2%
   12      4716     14.04    0.2%
   13      5037     13.22    0.2%
   14      5373     21.14    0.3%
   15      5722     19.07    0.3%
   16      6057     18.89    0.3%
   17      6401     13.04    0.2%
   18      6715     10.27    0.1%
   19      7025     25.78    0.3%
   20      7335     17.12    0.2%

Quality and confidence:
param     error
r         0.222

Model:
Time ~=      708
    + r    333.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    205.6
    + r    63.02
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     202.7      0.17    0.0%
    1     267.9     0.214    0.0%
    2     330.2     0.224    0.0%
    3     394.7     0.352    0.0%
    4     458.2     7.659    1.6%
    5       517     1.361    0.2%
    6     585.5     1.431    0.2%
    7     646.3     2.049    0.3%
    8     710.5     7.935    1.1%
    9     774.1     13.55    1.7%
   10     833.1     12.02    1.4%
   11     911.7     12.48    1.3%
   12     967.6     2.802    0.2%
   13      1028     3.016    0.2%
   14      1103     15.43    1.3%
   15      1160     15.02    1.2%
   16      1235     2.369    0.1%
   17      1289     10.02    0.7%
   18      1333     9.365    0.7%
   19      1404     10.98    0.7%
   20      1456     8.818    0.6%

Quality and confidence:
param     error
r         0.126

Model:
Time ~=    204.7
    + r    63.39
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    690.9
    + r    3.132
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     692.7     4.446    0.6%
    1     694.4     1.308    0.1%

Quality and confidence:
param     error
r         1.544

Model:
Time ~=    692.7
    + r    1.666
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    696.8
    + n    1.377
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     700.8     8.886    1.2%
   20     723.8     4.171    0.5%
   40       753      7.27    0.9%
   60     777.6     0.282    0.0%
   80     814.4     14.16    1.7%
  100     841.8     11.66    1.3%
  120     888.2     12.77    1.4%
  140     888.1     0.376    0.0%
  160     922.6     12.41    1.3%
  180     948.7     9.104    0.9%
  200     977.5      10.9    1.1%
  220      1004     11.72    1.1%
  240      1034      12.3    1.1%
  260      1062     11.55    1.0%
  280      1087      11.4    1.0%
  300      1112     10.84    0.9%
  320      1138     8.867    0.7%
  340      1180     13.88    1.1%
  360      1200     15.13    1.2%
  380      1225     10.46    0.8%
  400      1251     10.71    0.8%
  420      1281     14.72    1.1%
  440      1306     11.42    0.8%
  460      1327     1.138    0.0%
  480      1372      14.7    1.0%
  500      1392     14.22    1.0%
  520      1417     10.29    0.7%
  540      1460     15.21    1.0%
  560      1480     16.44    1.1%
  580      1504     15.45    1.0%
  600      1541      14.6    0.9%
  620      1563     13.85    0.8%
  640      1587     15.81    0.9%
  660      1614     15.64    0.9%
  680      1638     13.71    0.8%
  700      1680     14.57    0.8%
  720      1697     14.22    0.8%
  740      1737     13.93    0.8%
  760      1758     15.73    0.8%
  780      1784     16.47    0.9%
  800      1808     15.06    0.8%
  820      1842     15.61    0.8%
  840      1874     15.82    0.8%
  860      1908     3.036    0.1%
  880      1929     11.98    0.6%
  900      1954     14.55    0.7%
  920      1982     18.93    0.9%
  940      2005     12.36    0.6%
  960      2038     12.12    0.5%
  980      2079     8.289    0.3%
 1000      2085     16.53    0.7%
 1020      2118      15.6    0.7%

Quality and confidence:
param     error
n         0.002

Model:
Time ~=    698.5
    + n    1.395
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    675.3
    + r    2.161
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     678.2     8.093    1.1%
    1     677.9     1.448    0.2%

Quality and confidence:
param     error
r          2.74

Model:
Time ~=    678.2
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    678.1
    + n    0.914
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     682.4     8.317    1.2%
   20     700.2     8.429    1.2%
   40     723.6     13.92    1.9%
   60     735.8     8.135    1.1%
   80     751.4     1.036    0.1%
  100     778.1     13.61    1.7%
  120     787.3     0.247    0.0%
  140     815.4     12.86    1.5%
  160       827     5.172    0.6%
  180     853.2     16.29    1.9%
  200     878.3     17.48    1.9%
  220     885.1     12.18    1.3%
  240     896.4     0.325    0.0%
  260     917.8     8.399    0.9%
  280     939.4     9.405    1.0%
  300     961.8     12.62    1.3%
  320       970     0.222    0.0%
  340      1002     14.54    1.4%
  360      1006     0.159    0.0%
  380      1025     0.243    0.0%
  400      1059     15.63    1.4%
  420      1064     9.039    0.8%
  440      1088     12.41    1.1%
  460      1108     14.98    1.3%
  480      1130     16.08    1.4%
  500      1152     12.86    1.1%
  520      1167     17.11    1.4%
  540      1186     14.91    1.2%
  560      1205     16.67    1.3%
  580      1221     16.23    1.3%
  600      1236     16.06    1.2%
  620      1256     14.86    1.1%
  640      1276     14.94    1.1%
  660      1287     12.07    0.9%
  680      1323      12.3    0.9%
  700      1337     16.74    1.2%
  720      1353     16.87    1.2%
  740      1367     15.62    1.1%
  760      1387     15.08    1.0%
  780      1408     17.75    1.2%
  800      1433     13.27    0.9%
  820      1432     10.57    0.7%
  840      1462     14.98    1.0%
  860      1476     13.61    0.9%
  880      1504     14.08    0.9%
  900      1521     13.81    0.9%
  920      1532     16.94    1.1%
  940      1557     17.25    1.1%
  960      1573     14.36    0.9%
  980      1593     17.14    1.0%
 1000      1614        15    0.9%
 1020      1627     14.39    0.8%

Quality and confidence:
param     error
n         0.002

Model:
Time ~=    680.9
    + n    0.931
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    691.3
    + r    85.96
              µs

Reads = 4 + (2 * r)
Writes = 1 + (4 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     691.2     0.211    0.0%
    1     777.5     0.876    0.1%

Quality and confidence:
param     error
r           0.3

Model:
Time ~=    691.2
    + r    86.34
              µs

Reads = 4 + (2 * r)
Writes = 1 + (4 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_restore_to"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af3fd4cc2fc8d170b6d] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    728.3
    + r    94.53
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     729.7     3.644    0.4%
    1     827.6     9.629    1.1%

Quality and confidence:
param     error
r         3.432

Model:
Time ~=    729.7
    + r     97.9
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_restore_to_per_delta"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    525.5
    + d     2718
              µs

Reads = 7 + (100 * d)
Writes = 7 + (100 * d)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    d   mean µs  sigma µs       %
    0     870.4      13.4    1.5%
    1      3404     25.58    0.7%
    2      6016      12.9    0.2%
    3      8704     18.26    0.2%
    4     11390     24.69    0.2%
    5     14090     34.45    0.2%
    6     16700     18.91    0.1%
    7     19480     45.78    0.2%
    8     22180      40.9    0.1%
    9     24940     38.91    0.1%
   10     27570     37.91    0.1%
   11     30300     40.22    0.1%
   12     33010      43.5    0.1%
   13     35810     47.34    0.1%
   14     38510     56.19    0.1%
   15     41240     60.58    0.1%
   16     44040     47.61    0.1%
   17     46720     32.92    0.0%
   18     49660     60.88    0.1%
   19     52440      56.5    0.1%
   20     55220     87.42    0.1%

Quality and confidence:
param     error
d         1.752

Model:
Time ~=    523.3
    + d     2720
              µs

Reads = 7 + (100 * d)
Writes = 7 + (100 * d)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    701.6
    + r    445.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     695.4     5.911    0.8%
    1      1149      8.48    0.7%
    2      1595     11.29    0.7%
    3      2045     14.71    0.7%
    4      2481      4.03    0.1%
    5      2935     6.608    0.2%
    6      3387     8.197    0.2%
    7      3831     19.07    0.4%
    8      4255     16.23    0.3%
    9      4746      22.3    0.4%
   10      5166     19.46    0.3%
   11      5611     20.06    0.3%
   12      6016     17.56    0.2%
   13      6487     16.62    0.2%
   14      6888     13.13    0.1%
   15      7334     39.41    0.5%
   16      7791     31.15    0.3%
   17      8317      20.3    0.2%
   18      8775     22.57    0.2%
   19      9198     34.52    0.3%
   20      9646     29.63    0.3%

Quality and confidence:
param     error
r         0.393

Model:
Time ~=    698.7
    + r    446.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    694.3
    + r    729.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     674.9     0.395    0.0%
    1      1436     15.73    1.0%
    2      2172     10.91    0.5%
    3      2901     14.84    0.5%
    4      3607     10.47    0.2%
    5      4356     11.56    0.2%
    6      5080     21.45    0.4%
    7      5762     9.091    0.1%
    8      6508     25.69    0.3%
    9      7259     24.25    0.3%
   10      8028     14.47    0.1%
   11      8749     18.84    0.2%
   12      9426     40.94    0.4%
   13     10140     36.22    0.3%
   14     10890     35.09    0.3%
   15     11570     29.62    0.2%
   16     12340     33.42    0.2%
   17     13130     33.77    0.2%
   18     13850        28    0.2%
   19     14610     36.56    0.2%
   20     15300     53.03    0.3%

Quality and confidence:
param     error
r         0.456

Model:
Time ~=    690.4
    + r    730.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1566
    + t    534.7
    + n    212.6
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      4897     13.42    0.2%
    1    16      5537     11.14    0.2%
    2    16      6070     20.36    0.3%
    3    16      6571     25.86    0.3%
    4     0      3659      16.5    0.4%
    4     1      3863      7.23    0.1%
    4     2      4061      9.79    0.2%
    4     3      4313      11.5    0.2%
    4     4      4507     16.41    0.3%
    4     5      4703     14.75    0.3%
    4     6      4921     10.22    0.2%
    4     7      5138      16.4    0.3%
    4     8      5317     15.34    0.2%
    4     9      5543      15.4    0.2%
    4    10      5749     10.74    0.1%
    4    11      5961     15.05    0.2%
    4    12      6239     20.05    0.3%
    4    13      6391     14.66    0.2%
    4    14      6601     11.64    0.1%
    4    15      6844     16.39    0.2%
    4    16      7083     19.69    0.2%

Quality and confidence:
param     error
t         2.459
n         0.484

Model:
Time ~=     1543
    + t    524.1
    + n      214
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_rent_allowance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      255
    + r    95.52
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     253.1     0.222    0.0%
    1     350.6     0.188    0.0%
    2     446.1     0.854    0.1%
    3     540.1     1.606    0.2%
    4     648.8     12.38    1.9%
    5     734.4      8.49    1.1%
    6     821.2     10.81    1.3%
    7     929.5     9.205    0.9%
    8      1018     8.255    0.8%
    9      1119     12.55    1.1%
   10      1205     12.97    1.0%
   11      1300     12.24    0.9%
   12      1395     15.85    1.1%
   13      1479     10.46    0.7%
   14      1607     9.295    0.5%
   15      1690     11.93    0.7%
   16      1799     15.04    0.8%
   17      1903     7.621    0.4%
   18      1971     11.72    0.5%
   19      2082     11.52    0.5%
   20      2165     13.13    0.6%

Quality and confidence:
param     error
r         0.156

Model:
Time ~=    253.2
    + r    95.92
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    239.4
    + r    80.67
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
=====<truncated>...
```

</details>",9675,2021-09-03T12:58:01Z,0
1833,joao-paulo-parity,/benchmark runtime pallet pallet_contracts,9675,2021-09-03T20:32:11Z,0
1834,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.025
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.025
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.179
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     58.32     0.311    0.5%
   20     59.84      0.54    0.9%
   40     97.55      0.79    0.8%
   60     133.8     0.943    0.7%
   80     169.3     1.482    0.8%
  100     206.8     1.109    0.5%
  120     246.4     1.668    0.6%
  140     291.8     1.939    0.6%
  160     329.6     3.085    0.9%
  180     379.4     5.989    1.5%
  200     420.1     4.896    1.1%
  220     465.2      3.27    0.7%
  240     503.3     5.762    1.1%
  260     542.2     5.027    0.9%
  280     580.9     3.722    0.6%
  300     635.1     7.408    1.1%
  320     669.2     10.92    1.6%
  340     719.6     10.09    1.4%
  360     763.2     10.31    1.3%
  380     798.4     5.557    0.6%
  400     858.3     12.26    1.4%
  420     900.8     13.36    1.4%
  440     944.4     7.312    0.7%
  460     994.2      9.87    0.9%
  480      1031     6.379    0.6%
  500      1071     14.04    1.3%
  520      1119     7.914    0.7%
  540      1168     12.69    1.0%
  560      1206      11.2    0.9%
  580      1273     19.07    1.4%
  600      1306     8.725    0.6%
  620      1345     14.11    1.0%
  640      1374     15.03    1.0%
  660      1429     12.96    0.9%
  680      1471     22.75    1.5%
  700      1509     17.97    1.1%
  720      1530      15.3    0.9%
  740      1600      5.28    0.3%
  760      1628     16.11    0.9%
  780      1687     13.11    0.7%
  800      1730     6.992    0.4%
  820      1772     18.86    1.0%
  840      1806     19.86    1.0%
  860      1877      7.11    0.3%
  880      1946     14.96    0.7%
  900      1958     8.451    0.4%
  920      2027     15.78    0.7%
  940      2065     10.37    0.5%
  960      2105     22.33    1.0%
  980      2134     18.69    0.8%
 1000      2200     11.33    0.5%
 1020      2243      9.85    0.4%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.188
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.42
    + q    40.55
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     3.068     0.023    0.7%
   19     791.4     0.844    0.1%
   38      1566     12.12    0.7%
   57      2347     10.89    0.4%
   76      3126     16.91    0.5%
   95      3878     8.422    0.2%
  114      4669     12.25    0.2%
  133      5438     16.06    0.2%
  152      6206     15.65    0.2%
  171      6981     22.19    0.3%
  190      7758     11.98    0.1%
  209      8569      25.5    0.2%
  228      9344     22.53    0.2%
  247     10090     18.87    0.1%
  266     10870     14.54    0.1%
  285     11640     14.39    0.1%
  304     12380      32.6    0.2%
  323     13180     27.89    0.2%
  342     13970     71.41    0.5%
  361     14730     23.09    0.1%
  380     15460     26.52    0.1%
  399     16280     19.51    0.1%
  418     17000     46.64    0.2%
  437     17800     39.19    0.2%
  456     18600     39.85    0.2%
  475     19320      29.9    0.1%
  494     20120     33.78    0.1%
  513     20880     69.45    0.3%
  532     21680     44.53    0.2%
  551     22410     44.32    0.1%
  570     23160     25.07    0.1%
  589     23930     39.29    0.1%
  608     24750     29.12    0.1%
  627     25440     41.47    0.1%
  646     26270     56.24    0.2%
  665     27010     18.19    0.0%
  684     27810     28.79    0.1%
  703     28530     43.58    0.1%
  722     29350     23.83    0.0%
  741     30110     40.09    0.1%
  760     30800     47.33    0.1%
  779     31610     53.05    0.1%
  798     32370     51.45    0.1%
  817     33130     73.09    0.2%
  836     33910     37.51    0.1%
  855     34670     27.33    0.0%
  874     35430     35.39    0.0%
  893     36210     52.09    0.1%
  912     37030     26.76    0.0%
  931     37850     31.23    0.0%
  950     38660      33.3    0.0%

Quality and confidence:
param     error
q         0.008

Model:
Time ~=    63.11
    + q    40.54
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""instrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    56.22
    + c    67.64
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0      58.5     0.222    0.3%
    2     199.5     1.302    0.6%
    4     331.9      1.65    0.4%
    6     456.2     7.638    1.6%
    8     599.2     12.87    2.1%
   10     715.9       0.4    0.0%
   12     842.2     15.24    1.8%
   14      1003     4.135    0.4%
   16      1146      15.3    1.3%
   18      1288     9.772    0.7%
   20      1394     15.58    1.1%
   22      1514     14.57    0.9%
   24      1627     16.95    1.0%
   26      1856     13.96    0.7%
   28      1961     16.09    0.8%
   30      2083     16.21    0.7%
   32      2207     12.72    0.5%
   34      2370     12.65    0.5%
   36      2488      15.4    0.6%
   38      2597     16.83    0.6%
   40      2719     11.96    0.4%
   42      2853     20.07    0.7%
   44      2951     14.73    0.4%
   46      3079     7.415    0.2%
   48      3183     7.858    0.2%
   50      3541     12.24    0.3%
   52      3655     13.49    0.3%
   54      3754     17.95    0.4%
   56      3873     11.51    0.2%
   58      3992     9.158    0.2%
   60      4107     9.306    0.2%
   62      4224     23.75    0.5%
   64      4328     10.66    0.2%
   66      4568     12.65    0.2%
   68      4683     12.42    0.2%
   70      4857     9.744    0.2%
   72      4906     13.77    0.2%
   74      5039     27.86    0.5%
   76      5139     7.216    0.1%
   78      5272     26.67    0.5%
   80      5380      14.7    0.2%
   82      5502     19.53    0.3%
   84      5609     14.27    0.2%
   86      5730     16.36    0.2%
   88      5851     17.45    0.2%
   90      5979     11.82    0.1%
   92      6091     11.66    0.1%
   94      6217      13.1    0.2%
   96      6309     13.91    0.2%
   98      6852     20.12    0.2%
  100      6975     15.34    0.2%
  102      7108     26.25    0.3%
  104      7282        17    0.2%
  106      7344     27.08    0.3%
  108      7566     40.22    0.5%
  110      7582     26.09    0.3%
  112      7700     22.58    0.2%
  114      7794     18.17    0.2%
  116      7925      30.5    0.3%
  118      8035     21.25    0.2%
  120      8889     12.49    0.1%
  122      8267     24.38    0.2%
  124      8385     25.42    0.3%
  126      8518     32.55    0.3%
  128      8651     41.97    0.4%

Quality and confidence:
param     error
c         0.131

Model:
Time ~=    24.48
    + c    68.13
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_load"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.405
    + c    1.428
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     5.769     0.043    0.7%
    2     9.272     0.074    0.7%
    4     12.16     0.032    0.2%
    6     14.92     0.056    0.3%
    8     17.61     0.048    0.2%
   10     20.26     0.114    0.5%
   12     23.11     0.091    0.3%
   14     26.13     0.229    0.8%
   16     29.63     0.077    0.2%
   18     32.95     0.129    0.3%
   20     35.84     0.087    0.2%
   22     38.77     0.046    0.1%
   24     40.83     0.072    0.1%
   26     44.61     0.101    0.2%
   28     46.18     0.052    0.1%
   30     50.07     0.281    0.5%
   32     52.86     0.552    1.0%
   34     54.66     0.139    0.2%
   36     58.83     0.093    0.1%
   38     60.37     0.114    0.1%
   40     63.39     0.079    0.1%
   42      66.1     0.106    0.1%
   44     69.47     0.609    0.8%
   46     71.97     0.088    0.1%
   48     74.93     0.088    0.1%
   50     77.71     0.073    0.0%
   52     80.82     0.155    0.1%
   54     83.47     0.068    0.0%
   56     86.31     0.039    0.0%
   58        89     0.106    0.1%
   60     91.79     0.087    0.0%
   62     94.82     0.194    0.2%
   64     97.48     0.089    0.0%
   66     100.6     0.702    0.6%
   68     103.1      0.12    0.1%
   70     106.1     0.078    0.0%
   72     109.2     0.301    0.2%
   74     112.1      0.17    0.1%
   76     114.9     0.224    0.1%
   78     117.6     0.186    0.1%
   80     120.7     0.145    0.1%
   82     123.5     0.298    0.2%
   84     126.1      0.25    0.1%
   86       129     0.209    0.1%
   88       132     0.073    0.0%
   90       135     0.122    0.0%
   92       138     0.099    0.0%
   94     140.6     0.129    0.0%
   96     143.6     0.168    0.1%
   98     146.4     0.067    0.0%
  100     149.4     0.176    0.1%
  102     152.5       0.1    0.0%
  104       155     0.113    0.0%
  106     158.1     0.128    0.0%
  108     161.1       0.1    0.0%
  110     163.9     0.132    0.0%
  112     167.1     0.164    0.0%
  114       169     0.298    0.1%
  116     171.9     0.257    0.1%
  118     174.4     0.068    0.0%
  120     177.6      0.48    0.2%
  122     180.1     0.113    0.0%
  124     182.9     0.182    0.0%
  126     185.4     0.087    0.0%
  128     190.3     0.118    0.0%

Quality and confidence:
param     error
c             0

Model:
Time ~=    6.517
    + c    1.427
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_refcount"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    10.36
    + c    2.281
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     9.825     0.052    0.5%
    2     15.11     0.102    0.6%
    4     19.49     0.046    0.2%
    6     24.02      0.05    0.2%
    8     28.27     0.157    0.5%
   10     32.93     0.076    0.2%
   12     37.57     0.541    1.4%
   14     42.35     0.149    0.3%
   16     47.43     0.093    0.1%
   18     52.11     0.095    0.1%
   20     57.09     0.183    0.3%
   22     61.29     0.652    1.0%
   24     65.39     0.147    0.2%
   26     69.26     0.084    0.1%
   28     74.16     0.156    0.2%
   30     78.88     0.084    0.1%
   32     83.37     0.186    0.2%
   34     87.57     0.166    0.1%
   36     91.76     0.123    0.1%
   38      96.5     0.132    0.1%
   40     101.5     0.491    0.4%
   42     106.1     0.184    0.1%
   44     110.9     0.268    0.2%
   46     115.2     0.165    0.1%
   48     119.9     0.184    0.1%
   50     126.5     0.648    0.5%
   52     128.9      0.14    0.1%
   54     132.9       0.1    0.0%
   56     138.4     0.443    0.3%
   58     144.7     0.513    0.3%
   60     146.5     0.277    0.1%
   62     151.5      0.13    0.0%
   64     156.3     0.426    0.2%
   66     160.9     0.251    0.1%
   68     165.4     0.227    0.1%
   70     170.1     0.403    0.2%
   72       175     0.113    0.0%
   74     178.7     0.203    0.1%
   76     183.8     0.163    0.0%
   78     188.3     0.353    0.1%
   80     192.5     0.515    0.2%
   82       197     0.379    0.1%
   84     202.2     0.201    0.0%
   86     206.8     0.524    0.2%
   88     211.4     0.211    0.0%
   90     215.5     0.188    0.0%
   92     220.4     0.715    0.3%
   94       225     0.274    0.1%
   96     234.8     11.16    4.7%
   98       234     0.225    0.0%
  100       239     0.146    0.0%
  102     243.3      0.13    0.0%
  104     247.5     0.157    0.0%
  106     252.3     0.128    0.0%
  108     256.9     0.164    0.0%
  110     261.6      0.12    0.0%
  112       265      0.11    0.0%
  114     272.1     0.232    0.0%
  116     274.5     0.327    0.1%
  118     278.3     0.235    0.0%
  120       283     0.603    0.2%
  122     287.7     0.292    0.1%
  124     292.8     0.165    0.0%
  126     298.6     0.545    0.1%
  128     302.1     0.217    0.0%

Quality and confidence:
param     error
c         0.001

Model:
Time ~=    10.46
    + c    2.282
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    548.9
    + c    180.2
    + s    2.042
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2640     19.24    0.7%
    1  1024      2825     18.23    0.6%
    2  1024      3010     7.573    0.2%
    3  1024      3168     7.714    0.2%
    4  1024      3342     4.352    0.1%
    5  1024      3526     7.053    0.1%
    6  1024      3693     9.156    0.2%
    7  1024      3899     10.41    0.2%
    8  1024      4058     20.67    0.5%
    9  1024      4260     9.728    0.2%
   10  1024      4444     16.36    0.3%
   11  1024      4596     19.51    0.4%
   12  1024      4750     13.75    0.2%
   13  1024      4998     8.768    0.1%
   14  1024      5139      14.3    0.2%
   15  1024      5333      8.35    0.1%
   16  1024      5453     10.05    0.1%
   17  1024      5759     15.17    0.2%
   18  1024      5916     15.84    0.2%
   19  1024      6085     16.18    0.2%
   20  1024      6262     17.16    0.2%
   21  1024      6420     16.56    0.2%
   22  1024      6598     19.99    0.3%
   23  1024      6739     24.33    0.3%
   24  1024      6884     17.98    0.2%
   25  1024      7190     15.51    0.2%
   26  1024      7378     20.38    0.2%
   27  1024      7525     20.19    0.2%
   28  1024      7650      24.2    0.3%
   29  1024      7850     15.99    0.2%
   30  1024      7985     33.62    0.4%
   31  1024      8150     24.73    0.3%
   32  1024      8336     36.72    0.4%
   33  1024      8748     18.84    0.2%
   34  1024      8925     23.09    0.2%
   35  1024      9091     44.46    0.4%
   36  1024      9250      33.9    0.3%
   37  1024      9395     18.74    0.1%
   38  1024      9565     16.07    0.1%
   39  1024      9725     16.18    0.1%
   40  1024      9873     27.05    0.2%
   41  1024     10020     34.75    0.3%
   42  1024     10210     30.77    0.3%
   43  1024     10370     24.44    0.2%
   44  1024     10500     25.58    0.2%
   45  1024     10800     52.14    0.4%
   46  1024     10820     31.32    0.2%
   47  1024     10970     49.08    0.4%
   48  1024     11120     48.63    0.4%
   49  1024     11670     46.35    0.3%
   50  1024     11830     18.62    0.1%
   51  1024     11970     36.57    0.3%
   52  1024     12160     26.74    0.2%
   53  1024     12270      35.3    0.2%
   54  1024     12440     50.81    0.4%
   55  1024     12650     30.36    0.2%
   56  1024     12780     51.72    0.4%
   57  1024     12930     41.53    0.3%
   58  1024     13030     40.68    0.3%
   59  1024     13220     50.17    0.3%
   60  1024     13360     35.06    0.2%
   61  1024     13510     31.87    0.2%
   62  1024     13750     35.41    0.2%
   63  1024     13850     73.75    0.5%
   64     0     11910     37.03    0.3%
   64    20     11940     48.26    0.4%
   64    40     12010     34.51    0.2%
   64    60     12010     39.34    0.3%
   64    80     12050     70.76    0.5%
   64   100     12110     36.43    0.3%
   64   120     12200     31.27    0.2%
   64   140     12200     47.09    0.3%
   64   160     12260      32.3    0.2%
   64   180     12280     30.98    0.2%
   64   200     12310     26.54    0.2%
   64   220     12360     40.25    0.3%
   64   240     12410      23.1    0.1%
   64   260     12400     38.45    0.3%
   64   280     12550     46.77    0.3%
   64   300     12520     41.78    0.3%
   64   320     12530     59.44    0.4%
   64   340     12590     38.94    0.3%
   64   360     12580     67.07    0.5%
   64   380     12680     45.35    0.3%
   64   400     12700     32.33    0.2%
   64   420     12740     49.46    0.3%
   64   440     12770     61.79    0.4%
   64   460     12860     33.61    0.2%
   64   480     12860     32.11    0.2%
   64   500     12940     34.29    0.2%
   64   520     12970     28.86    0.2%
   64   540     13010     34.77    0.2%
   64   560     13070     45.04    0.3%
   64   580     13090     29.57    0.2%
   64   600     13100     41.68    0.3%
   64   620     13150     32.57    0.2%
   64   640     13230     41.65    0.3%
   64   660     13280     42.16    0.3%
   64   680     13270     51.09    0.3%
   64   700     13370     43.14    0.3%
   64   720     13340     42.28    0.3%
   64   740     13420     38.41    0.2%
   64   760     13460     31.97    0.2%
   64   780     13550      41.3    0.3%
   64   800     13500     35.05    0.2%
   64   820     13610     52.07    0.3%
   64   840     13610     48.64    0.3%
   64   860     13650     34.11    0.2%
   64   880     13730     40.12    0.2%
   64   900     13740      31.6    0.2%
   64   920     13800     25.77    0.1%
   64   940     13800     26.95    0.1%
   64   960     13860     45.83    0.3%
   64   980     13930     65.63    0.4%
   64  1000     13970     37.26    0.2%
   64  1020     13990     47.21    0.3%
   64  1024     14030     34.59    0.2%

Quality and confidence:
param     error
c         0.144
s         0.009

Model:
Time ~=    440.1
    + c    178.4
    + s    2.189
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.2
    + s    1.985
              µs

Reads = 5 + (0 * s)
Writes = 3 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     215.5     0.381    0.1%
   20       270     0.394    0.1%
   40     310.8     0.757    0.2%
   60     352.6     5.058    1.4%
   80     390.4     1.001    0.2%
  100     430.8     1.055    0.2%
  120     469.4     0.343    0.0%
  140     512.4     8.617    1.6%
  160     548.8     0.398    0.0%
  180     591.9     5.509    0.9%
  200     629.7     0.396    0.0%
  220       669     0.814    0.1%
  240     710.8     8.153    1.1%
  260       757     14.96    1.9%
  280       798     11.39    1.4%
  300     831.9     9.637    1.1%
  320     873.3     12.22    1.3%
  340     908.4     7.742    0.8%
  360     949.7     8.059    0.8%
  380      1010     15.37    1.5%
  400      1055     9.721    0.9%
  420      1074     12.46    1.1%
  440      1117     16.16    1.4%
  460      1163     15.93    1.3%
  480      1198      17.1    1.4%
  500      1233      10.8    0.8%
  520      1266     16.63    1.3%
  540      1302     15.65    1.2%
  560      1341     15.33    1.1%
  580      1388     16.33    1.1%
  600      1425      15.2    1.0%
  620      1462     13.97    0.9%
  640      1503     16.81    1.1%
  660      1543     15.73    1.0%
  680      1585     15.52    0.9%
  700      1626     15.22    0.9%
  720      1669     12.91    0.7%
  740      1710     14.44    0.8%
  760      1755     9.968    0.5%
  780      1790     13.88    0.7%
  800      1814     14.63    0.8%
  820      1853     13.44    0.7%
  840      1903     18.24    0.9%
  860      1944     15.65    0.8%
  880      1974     16.24    0.8%
  900      2008     13.65    0.6%
  920      2123     27.93    1.3%
  940      2141     4.531    0.2%
  960      2152     12.41    0.5%
  980      2191     14.17    0.6%
 1000      2210     13.22    0.5%
 1020      2274     21.73    0.9%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    231.6
    + s    1.998
              µs

Reads = 5 + (0 * s)
Writes = 3 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    214.1
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    214.1
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""claim_surcharge"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acafbc76efb655f52a2] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a45e3386f1a83f00b28] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a96e4ef3ab80b5c3a5f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3d24875569a319056f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ad561e495f01c762] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3b624bb134596373c1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aadbe519bace97698b4] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7e33b1a343f33065bd] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a626f271ae6979bbffe] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ce585fd4ae98b830b] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac889c022f51a43b527] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f6353225ab0496d48] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab578892d355575c3e4] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a02b4c8040b81dc785d] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a8d13a70c1e380292ea] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2e4d2fc709d989c778] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a6df81b28bd3ec99a3a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af54f74589657eac0fd] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a1849a3092175db4a2f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f05ecdc6c2c42c9fb] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a24c3c0036dfb085bb9] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a44d725ac77836eb10b] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad04db6c692ab73d90d] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a873009d6cdb99c5a4c] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa958795fbfc2b5fa41] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a205b6f659d219c8cbc] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ade54b3bc3d3cdb1aeb] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a538b748c1c5f92be98] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad50de2ad89aaa1e067] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a0576917f19ecaf2a3f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a5b44bd2793555a71e7] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc874645f7bbf62e62] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ae1b958a847e98bc8] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a396ae49d5311ee6bd1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa5d56999a2ebd1c4c9] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a72f370c054587f81a5] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3a32934e459acb2ceb] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac10fd56a5e084aae1c] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2ba8e27fcdbc3ab4f2] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4a75b804eec44f3f2a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ebb181fc616bfdb4] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a9aaf019a62fd907a8a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a19730285453eb7702a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acced4c24d0ebee7c29] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae458a57da6a2a6280a] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a83b9f09b407c57d07e] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc9fc095b3aaaef755] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a587ccf84053d9950ff] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a13d53bcf137f3784e9] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abb79d34fb381ebd7c1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a935ea70a3e699d23b6] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a109fcd63aefdae75a1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abca8d937a761f2eb46] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a314c97ff9e866a835b] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a691e4b5f67da0dea8e] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a127c680b864ee61620] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a148df8dfd47b4493f3] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a57c606ebe91374fcee] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acec20322704f7bec44] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abf6a27e09c6d0a9f0f] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae2e8bdcf5850e20836] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab8399645bc39338a47] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a658619de90cae5dbe1] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aeb9db1dfeed3a7b47b] (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abdc9db5edf43ffcb0d] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    131.5
    + c      2.4
              µs

Reads = 5 + (0 * c)
Writes = 4 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0       129     0.451    0.3%
    2     136.6     0.741    0.5%
    4     140.7     1.315    0.9%
    6     145.3     0.452    0.3%
    8     149.4     0.501    0.3%
   10     154.4     0.684    0.4%
   12     158.7     0.946    0.5%
   14     164.2     0.783    0.4%
   16       169     0.464    0.2%
   18     175.1     1.332    0.7%
   20       180     1.504    0.8%
   22     184.7     0.928    0.5%
   24     189.8     0.548    0.2%
   26       195     0.721    0.3%
   28       199     0.702    0.3%
   30     204.7      1.09    0.5%
   32     210.5     3.641    1.7%
   34     213.4     0.269    0.1%
   36     219.8     0.927    0.4%
   38     224.5     3.106    1.3%
   40     231.8     6.551    2.8%
   42     231.9     1.273    0.5%
   44     238.9     2.382    0.9%
   46       242      1.19    0.4%
   48     245.9     1.171    0.4%
   50     251.9     1.287    0.5%
   52       257     1.509    0.5%
   54     260.1     0.683    0.2%
   56     287.7     15.28    5.3%
   58       271     0.723    0.2%
   60     275.8      1.13    0.4%
   62     280.1     1.017    0.3%
   64     288.2     4.038    1.4%
   66     289.5     1.001    0.3%
   68     299.5      5.44    1.8%
   70     299.8     1.298    0.4%
   72     305.1     0.736    0.2%
   74     311.8     3.371    1.0%
   76     316.9     3.679    1.1%
   78     318.1     0.871    0.2%
   80     325.3     5.761    1.7%
   82     329.1      0.81    0.2%
   84     332.3     0.844    0.2%
   86     339.5     1.982    0.5%
   88     343.2     0.672    0.1%
   90     348.4     1.204    0.3%
   92     351.9     0.905    0.2%
   94     358.2     6.594    1.8%
   96     361.4     1.134    0.3%
   98     368.6     5.376    1.4%
  100       371     1.932    0.5%
  102     374.6     1.258    0.3%
  104       380     0.946    0.2%
  106     383.9     0.778    0.2%
  108     395.3     9.584    2.4%
  110     396.2     1.604    0.4%
  112       403     3.371    0.8%
  114     404.6     1.985    0.4%
  116     408.9     1.279    0.3%
  118     419.2     9.617    2.2%
  120       422      3.82    0.9%
  122     425.1     2.482    0.5%
  124       433     10.49    2.4%
  126     435.6     4.269    0.9%
  128     441.8     4.473    1.0%

Quality and confidence:
param     error
c         0.005

Model:
Time ~=    131.7
    + c    2.412
              µs

Reads = 5 + (0 * c)
Writes = 4 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    447.3
    + r    131.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     439.6     4.898    1.1%
    1       572     0.419    0.0%
    2       715     6.767    0.9%
    3     839.5     8.596    1.0%
    4     973.5     9.301    0.9%
    5      1102     10.93    0.9%
    6      1236     10.28    0.8%
    7      1374     16.03    1.1%
    8      1502     7.022    0.4%
    9      1625     10.71    0.6%
   10      1756     8.276    0.4%
   11      1889     7.758    0.4%
   12      2055     9.016    0.4%
   13      2162     16.27    0.7%
   14      2286     10.04    0.4%
   15      2432     12.54    0.5%
   16      2548     11.09    0.4%
   17      2672     11.36    0.4%
   18      2806     10.85    0.3%
   19      2936     13.16    0.4%
   20      3077     14.15    0.4%

Quality and confidence:
param     error
r         0.158

Model:
Time ~=    447.2
    + r    131.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    446.4
    + r    131.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     437.6     0.271    0.0%
    1     581.5     12.59    2.1%
    2     705.9     0.978    0.1%
    3     841.7     12.38    1.4%
    4     971.5     4.051    0.4%
    5      1105        12    1.0%
    6      1240     11.38    0.9%
    7      1369     12.17    0.8%
    8      1508     11.08    0.7%
    9      1633     10.14    0.6%
   10      1762     10.87    0.6%
   11      1887     14.17    0.7%
   12      2016     6.402    0.3%
   13      2158     4.654    0.2%
   14      2295     7.096    0.3%
   15      2421     10.35    0.4%
   16      2562      9.95    0.3%
   17      2681     12.46    0.4%
   18      2811     10.75    0.3%
   19      2949     14.62    0.4%
   20      3080     12.55    0.4%

Quality and confidence:
param     error
r         0.131

Model:
Time ~=    445.5
    + r    131.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    445.8
    + r    130.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     438.1      0.14    0.0%
    1     571.9     0.695    0.1%
    2       706     4.134    0.5%
    3     832.3     1.098    0.1%
    4     975.9     11.03    1.1%
    5      1098     8.525    0.7%
    6      1225     10.46    0.8%
    7      1370     11.25    0.8%
    8      1491      11.1    0.7%
    9      1624      10.6    0.6%
   10      1754      11.7    0.6%
   11      1878     11.93    0.6%
   12      2013     17.08    0.8%
   13      2136     15.52    0.7%
   14      2275      11.2    0.4%
   15      2419     9.557    0.3%
   16      2533     9.302    0.3%
   17      2669     11.93    0.4%
   18      2800     9.395    0.3%
   19      2927     15.59    0.5%
   20      3058     17.14    0.5%

Quality and confidence:
param     error
r         0.139

Model:
Time ~=    443.9
    + r    130.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    461.4
    + r    385.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     438.1     0.255    0.0%
    1     832.1     8.334    1.0%
    2      1235      15.4    1.2%
    3      1618     12.59    0.7%
    4      2010     6.459    0.3%
    5      2384     14.66    0.6%
    6      2767     12.75    0.4%
    7      3159     12.49    0.3%
    8      3577     15.18    0.4%
    9      3937     20.49    0.5%
   10      4320     16.07    0.3%
   11      4727     9.932    0.2%
   12      5112     16.67    0.3%
   13      5471     12.15    0.2%
   14      5847      12.6    0.2%
   15      6280     9.163    0.1%
   16      6642      19.1    0.2%
   17      6988     10.79    0.1%
   18      7376     13.83    0.1%
   19      7817     29.97    0.3%
   20      8160     14.56    0.1%

Quality and confidence:
param     error
r         0.267

Model:
Time ~=    459.5
    + r    385.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    439.4
    + r    132.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     423.6     0.122    0.0%
    1     566.6     12.13    2.1%
    2     693.6     4.262    0.6%
    3     833.7     15.95    1.9%
    4       972     2.787    0.2%
    5      1108     14.15    1.2%
    6      1243     13.37    1.0%
    7      1391     11.77    0.8%
    8      1501     8.725    0.5%
    9      1638      10.5    0.6%
   10      1777     7.138    0.4%
   11      1900     11.42    0.6%
   12      2036     13.78    0.6%
   13      2149     11.42    0.5%
   14      2303     11.05    0.4%
   15      2420     9.907    0.4%
   16      2573     14.42    0.5%
   17      2696     10.82    0.4%
   18      2819     14.52    0.5%
   19      2947     10.61    0.3%
   20      3086     7.323    0.2%

Quality and confidence:
param     error
r         0.167

Model:
Time ~=    439.6
    + r    132.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      434
    + r    132.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     424.3     0.217    0.0%
    1     558.5     0.493    0.0%
    2       690     1.464    0.2%
    3     822.7     11.46    1.3%
    4     970.8      13.4    1.3%
    5      1100     11.15    1.0%
    6      1225     12.71    1.0%
    7      1367     3.828    0.2%
    8      1512     12.34    0.8%
    9      1637     12.58    0.7%
   10      1758     11.07    0.6%
   11      1902     8.601    0.4%
   12      2024     12.88    0.6%
   13      2153     9.171    0.4%
   14      2305     7.368    0.3%
   15      2409     8.101    0.3%
   16      2560     13.42    0.5%
   17      2687      10.4    0.3%
   18      2820        15    0.5%
   19      2938     21.72    0.7%
   20      3072     10.12    0.3%

Quality and confidence:
param     error
r         0.164

Model:
Time ~=    433.9
    + r    132.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_tombstone_deposit"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    440.6
    + r    131.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     424.1     0.177    0.0%
    1     564.4     12.37    2.1%
    2     694.3     6.869    0.9%
    3     831.6     11.23    1.3%
    4     981.4     13.27    1.3%
    5      1106     15.31    1.3%
    6      1233     14.67    1.1%
    7      1376     13.15    0.9%
    8      1511     14.27    0.9%
    9      1645     10.79    0.6%
   10      1762     14.39    0.8%
   11      1895     13.42    0.7%
   12      2021     11.44    0.5%
   13      2155     9.174    0.4%
   14      2283      11.8    0.5%
   15      2416     9.908    0.4%
   16      2558     13.04    0.5%
   17      2675     13.93    0.5%
   18      2822     11.07    0.3%
   19      2940     16.53    0.5%
   20      3066     10.78    0.3%

Quality and confidence:
param     error
r         0.175

Model:
Time ~=    441.3
    + r    131.9
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_rent_allowance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      439
    + r    132.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       424     0.222    0.0%
    1     570.5     15.62    2.7%
    2     698.1     12.51    1.7%
    3     821.2     7.237    0.8%
    4     983.5     14.49    1.4%
    5      1102     9.175    0.8%
    6      1236     14.55    1.1%
    7      1384     12.46    0.9%
    8      1505     10.45    0.6%
    9      1637     8.663    0.5%
   10      1762     8.886    0.5%
   11      1884     10.71    0.5%
   12      2021        10    0.4%
   13      2206     5.343    0.2%
   14      2312     12.38    0.5%
   15      2414      10.7    0.4%
   16      2557     8.594    0.3%
   17      2688     11.76    0.4%
   18      2823     12.39    0.4%
   19      2944     11.86    0.4%
   20      3072     16.41    0.5%

Quality and confidence:
param     error
r         0.207

Model:
Time ~=    440.1
    + r    132.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    439.3
    + r    131.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     424.4     0.885    0.2%
    1       563     10.52    1.8%
    2     697.6     12.64    1.8%
    3     821.3     7.986    0.9%
    4     969.2      9.29    0.9%
    5      1107     11.98    1.0%
    6      1232     14.29    1.1%
    7      1364     8.968    0.6%
    8      1500      12.3    0.8%
    9      1633     14.85    0.9%
   10      1762     12.32    0.6%
   11      1884     8.541    0.4%
   12      2025     9.699    0.4%
   13      2139     12.41    0.5%
   14      2297     8.198    0.3%
   15      2410      14.1    0.5%
   16      2543     11.98    0.4%
   17      2666     11.24    0.4%
   18      2794     9.411    0.3%
   19      2928     12.15    0.4%
   20      3063     10.75    0.3%

Quality and confidence:
param     error
r         0.162

Model:
Time ~=    439.3
    + r    131.4
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      445
    + r    130.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     425.5     4.285    1.0%
    1     570.9     0.778    0.1%
    2     702.8     1.223    0.1%
    3       842     15.23    1.8%
    4     973.1     13.11    1.3%
    5      1106     13.45    1.2%
    6      1234     13.65    1.1%
    7      1378     17.29    1.2%
    8      1504     16.46    1.0%
    9      1633     12.32    0.7%
   10      1752     12.48    0.7%
   11      1883     9.483    0.5%
   12      2014     13.73    0.6%
   13      2147      15.7    0.7%
   14      2270     6.664    0.2%
   15      2422     12.62    0.5%
   16      2547     8.077    0.3%
   17      2663     13.59    0.5%
   18      2800     10.68    0.3%
   19      2929     6.275    0.2%
   20      3042      13.1    0.4%

Quality and confidence:
param     error
r         0.173

Model:
Time ~=    447.1
    + r    130.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    451.9
    + r    304.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     424.2      0.17    0.0%
    1       756     10.98    1.4%
    2      1066     13.07    1.2%
    3      1368     14.13    1.0%
    4      1675      12.8    0.7%
    5      1985     11.46    0.5%
    6      2302       5.9    0.2%
    7      2585     7.928    0.3%
    8      2885     6.992    0.2%
    9      3175      14.7    0.4%
   10      3481     14.98    0.4%
   11      3813     13.34    0.3%
   12      4105     9.822    0.2%
   13      4440     17.87    0.4%
   14      4695      11.8    0.2%
   15      5008     13.21    0.2%
   16      5300     14.39    0.2%
   17      5630     9.524    0.1%
   18      5958     8.121    0.1%
   19      6231     7.224    0.1%
   20      6543      23.4    0.3%

Quality and confidence:
param     error
r         0.224

Model:
Time ~=    451.1
    + r    304.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    169.3
    + r    58.27
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     164.8     0.161    0.0%
    1     230.1     2.199    0.9%
    2     289.4     3.042    1.0%
    3     348.6     0.392    0.1%
    4       407     0.779    0.1%
    5     449.5     0.853    0.1%
    6       513     1.115    0.2%
    7     569.1     1.572    0.2%
    8     628.6     6.695    1.0%
    9     693.8     10.98    1.5%
   10     745.4     9.214    1.2%
   11     817.5     10.97    1.3%
   12     871.4     9.505    1.0%
   13     925.6     3.088    0.3%
   14     988.2      8.82    0.8%
   15      1049        13    1.2%
   16      1118     8.195    0.7%
   17      1164     13.72    1.1%
   18      1222     8.867    0.7%
   19      1282     10.96    0.8%
   20      1335     10.25    0.7%

Quality and confidence:
param     error
r         0.111

Model:
Time ~=    166.1
    + r     58.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    437.4
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     437.4     0.423    0.0%
    1     426.8     0.275    0.0%

Quality and confidence:
param     error
r         0.168

Model:
Time ~=    437.4
    + r        0
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    426.4
    + n    1.021
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     426.7     0.304    0.0%
   20       447      0.17    0.0%
   40     467.4     0.178    0.0%
   60     487.4     0.433    0.0%
   80     514.5     12.17    2.3%
  100     527.6     0.151    0.0%
  120       558     16.04    2.8%
  140     567.4     0.263    0.0%
  160       590     5.677    0.9%
  180     613.9     12.57    2.0%
  200     627.1     0.188    0.0%
  220     654.1     13.76    2.1%
  240     670.7      10.2    1.5%
  260     695.5     12.27    1.7%
  280     710.9      9.15    1.2%
  300     731.1     9.716    1.3%
  320     750.7     9.096    1.2%
  340     777.3     15.46    1.9%
  360     787.1     0.516    0.0%
  380     813.4     12.05    1.4%
  400     835.9     13.06    1.5%
  420     855.1     13.37    1.5%
  440     868.8     5.525    0.6%
  460       890     10.57    1.1%
  480       918     14.14    1.5%
  500     941.9     14.86    1.5%
  520       965       8.6    0.8%
  540     980.6     0.597    0.0%
  560      1009     14.41    1.4%
  580      1028     13.98    1.3%
  600      1050     13.88    1.3%
  620      1068     12.41    1.1%
  640      1096     15.72    1.4%
  660      1105     9.087    0.8%
  680      1128     13.09    1.1%
  700      1154      14.3    1.2%
  720      1171     14.32    1.2%
  740      1194     12.97    1.0%
  760      1213     14.63    1.2%
  780      1230     12.92    1.0%
  800      1257     17.94    1.4%
  820      1281     18.63    1.4%
  840      1303      15.6    1.1%
  860      1318      14.1    1.0%
  880      1331     15.98    1.2%
  900      1351     14.61    1.0%
  920      1374     15.68    1.1%
  940      1401      19.5    1.3%
  960      1417        14    0.9%
  980      1432     13.81    0.9%
 1000      1456      16.7    1.1%
 1020      1483     15.36    1.0%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    424.2
    + n    1.036
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    414.6
    + r    16.08
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     414.6     0.174    0.0%
    1     434.7     4.597    1.0%

Quality and confidence:
param     error
r         1.533

Model:
Time ~=    414.6
    + r    20.08
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    430.8
    + n    0.622
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     429.7     0.307    0.0%
   20     445.8     5.705    1.2%
   40     456.7     3.735    0.8%
   60     467.6      0.22    0.0%
   80       482     4.299    0.8%
  100     494.6     4.854    0.9%
  120     505.3     0.311    0.0%
  140     517.9     0.163    0.0%
  160     530.6     0.205    0.0%
  180       543     0.651    0.1%
  200     566.3     12.42    2.1%
  220     569.1     4.733    0.8%
  240     579.5     0.324    0.0%
  260     594.1     5.188    0.8%
  280     606.1     4.075    0.6%
  300     627.1     10.94    1.7%
  320     629.5     0.127    0.0%
  340     642.1     0.182    0.0%
  360     663.5     9.345    1.4%
  380     669.3     6.634    0.9%
  400     683.1     10.16    1.4%
  420     698.9     9.034    1.2%
  440     710.1     10.91    1.5%
  460     720.3     9.417    1.3%
  480     731.8     5.069    0.6%
  500     745.4     7.163    0.9%
  520     755.7     12.53    1.6%
  540       769     10.13    1.3%
  560     778.9     10.35    1.3%
  580     796.2      12.4    1.5%
  600     797.6     5.939    0.7%
  620     817.2     12.78    1.5%
  640     823.8     5.916    0.7%
  660     848.1     13.69    1.6%
  680     851.7     11.68    1.3%
  700     869.4     14.73    1.6%
  720     880.2     12.07    1.3%
  740     902.8      12.2    1.3%
  760     918.3     13.44    1.4%
  780     919.1      12.6    1.3%
  800     934.8     15.51    1.6%
  820     949.6     13.15    1.3%
  840     954.9     10.84    1.1%
  860     977.7     12.28    1.2%
  880     976.8     7.165    0.7%
  900     994.5      10.9    1.0%
  920      1005       9.2    0.9%
  940      1021     12.72    1.2%
  960      1030     6.859    0.6%
  980      1040     11.36    1.0%
 1000      1059     12.79    1.2%
 1020      1071     12.36    1.1%

Quality and confidence:
param     error
n         0.001

Model:
Time ~=    431.9
    + n    0.626
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    438.3
    + r    83.56
              µs

Reads = 4 + (2 * r)
Writes = 1 + (4 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     438.2     0.224    0.0%
    1     530.2     14.45    2.7%

Quality and confidence:
param     error
r         4.817

Model:
Time ~=    438.2
    + r    91.98
              µs

Reads = 4 + (2 * r)
Writes = 1 + (4 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_restore_to"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af3fd4cc2fc8d170b6d] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    474.2
    + r    80.46
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       474     0.705    0.1%
    1     554.9     1.596    0.2%

Quality and confidence:
param     error
r         0.581

Model:
Time ~=      474
    + r    80.83
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_restore_to_per_delta"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    257.6
    + d     2228
              µs

Reads = 7 + (100 * d)
Writes = 7 + (100 * d)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    d   mean µs  sigma µs       %
    0     584.5      11.4    1.9%
    1      2627     13.67    0.5%
    2      4794     13.67    0.2%
    3      6958     26.69    0.3%
    4      9165      32.2    0.3%
    5     11390     26.17    0.2%
    6     13540     26.67    0.1%
    7     15790     46.19    0.2%
    8     17940     22.47    0.1%
    9     20230     36.63    0.1%
   10     22470      49.2    0.2%
   11     24610     41.91    0.1%
   12     26830      30.2    0.1%
   13     29170     39.99    0.1%
   14     31440     52.53    0.1%
   15     33690     33.98    0.1%
   16     36000     85.59    0.2%
   17     38120     42.25    0.1%
   18     40670     99.57    0.2%
   19     42800     50.95    0.1%
   20     45210     55.48    0.1%

Quality and confidence:
param     error
d           1.8

Model:
Time ~=    244.9
    + d     2233
              µs

Reads = 7 + (100 * d)
Writes = 7 + (100 * d)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    455.8
    + r    429.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     437.9     1.482    0.3%
    1     880.6     11.22    1.2%
    2      1310     12.72    0.9%
    3      1757     13.01    0.7%
    4      2167     13.83    0.6%
    5      2616     8.792    0.3%
    6      3031     12.77    0.4%
    7      3461     13.16    0.3%
    8      3888     10.52    0.2%
    9      4341     6.454    0.1%
   10      4752     18.63    0.3%
   11      5187     8.638    0.1%
   12      5622     31.81    0.5%
   13      6027      16.3    0.2%
   14      6460     15.61    0.2%
   15      6843     17.88    0.2%
   16      7320     21.47    0.2%
   17      7766      27.7    0.3%
   18      8175     25.41    0.3%
   19      8629     17.27    0.2%
   20      9041     24.76    0.2%

Quality and confidence:
param     error
r         0.264

Model:
Time ~=    455.8
    + r    429.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    449.4
    + r    724.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     427.5     0.423    0.0%
    1      1187     11.52    0.9%
    2      1896     9.935    0.5%
    3      2625     10.43    0.3%
    4      3326     11.59    0.3%
    5      4075     18.65    0.4%
    6      4801     11.09    0.2%
    7      5503     23.29    0.4%
    8      6241     20.38    0.3%
    9      6978     20.42    0.2%
   10      7714     19.48    0.2%
   11      8459     30.04    0.3%
   12      9141      33.5    0.3%
   13      9878     47.59    0.4%
   14     10590     30.06    0.2%
   15     11330     27.45    0.2%
   16     12080     35.95    0.2%
   17     12770     24.79    0.1%
   18     13480     41.82    0.3%
   19     14190     27.62    0.1%
   20     14880     39.44    0.2%

Quality and confidence:
param     error
r         0.383

Model:
Time ~=    451.8
    + r    724.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1285
    + t    513.3
    + n    165.8
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3878     14.43    0.3%
    1    16      4481     13.67    0.3%
    2    16      5015      13.7    0.2%
    3    16      5627     24.43    0.4%
    4     0      3251      7.47    0.2%
    4     1      3452     8.338    0.2%
    4     2      3614     10.72    0.2%
    4     3      3762     8.031    0.2%
    4     4      3941     13.09    0.3%
    4     5      4087     19.28    0.4%
    4     6      4248     11.61    0.2%
    4     7      4401     5.133    0.1%
    4     8      4559      11.7    0.2%
    4     9      4739     21.91    0.4%
    4    10      4921     21.32    0.4%
    4    11      5066     9.476    0.1%
    4    12      5245     19.47    0.3%
    4    13      5416     14.88    0.2%
    4    14      5584     5.048    0.0%
    4    15      5748     9.436    0.1%
    4    16      5941     17.78    0.2%

Quality and confidence:
param     error
t         3.659
n         0.721

Model:
Time ~=     1267
    + t    494.9
    + n    168.6
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_rent_allowance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    196.7
    + r    91.09
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     181.2     0.225    0.1%
    1     274.8      0.51    0.1%
    2       380       1.2    0.3%
    3       468     1.804    0.3%
    4     565.9     5.074    0.8%
    5     649.9     1.858    0.2%
    6     746.7     13.33    1.7%
    7     848.1     13.17    1.5%
    8     936.9     8.828    0.9%
    9      1037     15.77    1.5%
   10      1111     13.29    1.1%
   11      1204     13.52    1.1%
   12      1278     11.51    0.9%
   13      1375     14.99    1.0%
   14      1483     14.78    0.9%
   15      1571     15.53    0.9%
   16      1662     11.54    0.6%
   17      1744     10.74    0.6%
   18      1834     14.51    0.7%
   19      1928     15.06    0.7%
   20      2012      9.94    0.4%

Quality and confidence:
param     error
r         0.163

Model:
Time ~=    195.9
    + r    91.33
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: System Account (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    180.7
    + r    74.92
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
=====<truncated>...
```

</details>",9675,2021-09-03T20:32:12Z,0
1835,athei,Contracts benchmarks run really long. I always meant to work on this. Sorry for this.,9675,2021-09-03T21:46:07Z,0
1836,joao-paulo-parity,/benchmark runtime pallet pallet_contracts,9675,2021-09-04T00:40:02Z,0
1837,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""instantiate_with_code"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    554.5
    + c    180.7
    + s    2.042
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2621     15.07    0.5%
    1  1024      2837     12.05    0.4%
    2  1024      3002     17.14    0.5%
    3  1024      3167     12.74    0.4%
    4  1024      3364     16.78    0.4%
    5  1024      3542      16.7    0.4%
    6  1024      3695     14.05    0.3%
    7  1024      3888     12.86    0.3%
    8  1024      4050     17.23    0.4%
    9  1024      4284     14.43    0.3%
   10  1024      4443     19.28    0.4%
   11  1024      4592     18.06    0.3%
   12  1024      4757     9.378    0.1%
   13  1024      5005     12.05    0.2%
   14  1024      5155     12.85    0.2%
   15  1024      5313     14.71    0.2%
   16  1024      5480     21.37    0.3%
   17  1024      5787     15.33    0.2%
   18  1024      5922     20.82    0.3%
   19  1024      6116     19.48    0.3%
   20  1024      6274     28.85    0.4%
   21  1024      6411     12.71    0.1%
   22  1024      6565     11.98    0.1%
   23  1024      6728     20.66    0.3%
   24  1024      6907     22.01    0.3%
   25  1024      7232     19.09    0.2%
   26  1024      7402     14.96    0.2%
   27  1024      7533     10.57    0.1%
   28  1024      7705     16.69    0.2%
   29  1024      7875     24.42    0.3%
   30  1024      8001     12.05    0.1%
   31  1024      8170     23.76    0.2%
   32  1024      8351     23.94    0.2%
   33  1024      8807     24.91    0.2%
   34  1024      8914     13.53    0.1%
   35  1024      9075     13.62    0.1%
   36  1024      9252     23.51    0.2%
   37  1024      9401     21.21    0.2%
   38  1024      9563     29.74    0.3%
   39  1024      9790     49.66    0.5%
   40  1024      9953     35.14    0.3%
   41  1024     10070     28.72    0.2%
   42  1024     10240     26.17    0.2%
   43  1024     10380     31.06    0.2%
   44  1024     10550     28.88    0.2%
   45  1024     10690     23.09    0.2%
   46  1024     10840     18.31    0.1%
   47  1024     11000        27    0.2%
   48  1024     11180     24.79    0.2%
   49  1024     11660      32.1    0.2%
   50  1024     11810     33.45    0.2%
   51  1024     12000     22.37    0.1%
   52  1024     12150     34.13    0.2%
   53  1024     12280     36.35    0.2%
   54  1024     12470     24.91    0.1%
   55  1024     12630     30.29    0.2%
   56  1024     12770     26.31    0.2%
   57  1024     12940     45.88    0.3%
   58  1024     13120      22.4    0.1%
   59  1024     13250     37.21    0.2%
   60  1024     13390     26.19    0.1%
   61  1024     13560     30.61    0.2%
   62  1024     13710     43.47    0.3%
   63  1024     13880     26.02    0.1%
   64     0     11940     29.27    0.2%
   64    20     11970     39.39    0.3%
   64    40     12050     34.94    0.2%
   64    60     12050     21.07    0.1%
   64    80     12110     43.61    0.3%
   64   100     12150     38.85    0.3%
   64   120     12190     28.54    0.2%
   64   140     12220     32.42    0.2%
   64   160     12250     25.19    0.2%
   64   180     12310     27.63    0.2%
   64   200     12330     22.51    0.1%
   64   220     12370     24.26    0.1%
   64   240     12450     36.61    0.2%
   64   260     12460     22.41    0.1%
   64   280     12510     30.66    0.2%
   64   300     12540        30    0.2%
   64   320     12590      42.7    0.3%
   64   340     12650     19.25    0.1%
   64   360     12660     37.24    0.2%
   64   380     12720     18.32    0.1%
   64   400     12900     39.39    0.3%
   64   420     12780     21.01    0.1%
   64   440     12830     33.18    0.2%
   64   460     12870     26.35    0.2%
   64   480     12910      32.8    0.2%
   64   500     12950        17    0.1%
   64   520     12970      18.9    0.1%
   64   540     13030     30.54    0.2%
   64   560     13080     41.98    0.3%
   64   580     13110      24.8    0.1%
   64   600     13170     17.15    0.1%
   64   620     13180     34.67    0.2%
   64   640     13250     30.43    0.2%
   64   660     13250     28.89    0.2%
   64   680     13310     46.15    0.3%
   64   700     13360     44.96    0.3%
   64   720     13390     25.19    0.1%
   64   740     13440     35.06    0.2%
   64   760     13460     29.38    0.2%
   64   780     13500     27.79    0.2%
   64   800     13590     39.55    0.2%
   64   820     13620     34.22    0.2%
   64   840     13620     23.56    0.1%
   64   860     13690     35.52    0.2%
   64   880     13730     36.93    0.2%
   64   900     13750     18.77    0.1%
   64   920     14060      21.4    0.1%
   64   940     13840     20.16    0.1%
   64   960     13980     71.48    0.5%
   64   980     13940      20.3    0.1%
   64  1000     13970     39.33    0.2%
   64  1020     14000     35.67    0.2%
   64  1024     14090     72.31    0.5%

Quality and confidence:
param     error
c         0.139
s         0.009

Model:
Time ~=    443.4
    + c    178.9
    + s    2.186
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)


```

</details>",9675,2021-09-04T00:40:04Z,0
1838,joao-paulo-parity,/benchmark runtime pallet pallet_contracts,9675,2021-09-04T00:57:57Z,0
1839,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""instantiate_with_code"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    573.4
    + c    175.3
    + s    2.026
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2617     14.06    0.5%
    1  1024      2821     8.709    0.3%
    2  1024      3003     20.92    0.6%
    3  1024      3160     21.41    0.6%
    4  1024      3330      21.1    0.6%
    5  1024      3515     12.96    0.3%
    6  1024      3670     18.94    0.5%
    7  1024      3865     12.25    0.3%
    8  1024      4010     9.655    0.2%
    9  1024      4224     5.874    0.1%
   10  1024      4390     16.12    0.3%
   11  1024      4546     19.63    0.4%
   12  1024      4711     31.96    0.6%
   13  1024      4929     11.35    0.2%
   14  1024      5080     18.57    0.3%
   15  1024      5227     17.71    0.3%
   16  1024      5378      17.5    0.3%
   17  1024      5704     15.81    0.2%
   18  1024      5858     9.735    0.1%
   19  1024      5992     12.11    0.2%
   20  1024      6167     21.99    0.3%
   21  1024      6317     11.51    0.1%
   22  1024      6480     16.75    0.2%
   23  1024      6639     13.95    0.2%
   24  1024      6786     10.63    0.1%
   25  1024      7111     17.13    0.2%
   26  1024      7266     17.45    0.2%
   27  1024      7421     23.02    0.3%
   28  1024      7579     18.52    0.2%
   29  1024      7726      22.3    0.2%
   30  1024      7894     16.56    0.2%
   31  1024      8044     22.99    0.2%
   32  1024      8202     22.36    0.2%
   33  1024      8601     25.98    0.3%
   34  1024      8763     24.56    0.2%
   35  1024      8903     26.37    0.2%
   36  1024      9046     15.79    0.1%
   37  1024      9204     21.33    0.2%
   38  1024      9363     16.41    0.1%
   39  1024      9532     34.38    0.3%
   40  1024      9683     24.07    0.2%
   41  1024      9838     19.42    0.1%
   42  1024     10020     26.93    0.2%
   43  1024     10170      42.7    0.4%
   44  1024     10310     28.14    0.2%
   45  1024     10460     38.77    0.3%
   46  1024     10610     29.04    0.2%
   47  1024     10770     34.51    0.3%
   48  1024     10890     42.43    0.3%
   49  1024     11420     26.27    0.2%
   50  1024     11540     31.91    0.2%
   51  1024     11720      30.9    0.2%
   52  1024     11860     31.52    0.2%
   53  1024     12040     27.21    0.2%
   54  1024     12160     19.65    0.1%
   55  1024     12310     34.53    0.2%
   56  1024     12460      32.4    0.2%
   57  1024     12620     14.87    0.1%
   58  1024     12810     33.17    0.2%
   59  1024     12940     23.31    0.1%
   60  1024     13060     12.45    0.0%
   61  1024     13360     66.48    0.4%
   62  1024     13410        22    0.1%
   63  1024     13550     44.03    0.3%
   64     0     11600     37.56    0.3%
   64    20     11660     14.72    0.1%
   64    40     11680     31.66    0.2%
   64    60     11710      36.5    0.3%
   64    80     11760     24.39    0.2%
   64   100     11810     29.24    0.2%
   64   120     12040     49.79    0.4%
   64   140     11870     30.86    0.2%
   64   160     11900      33.8    0.2%
   64   180     11990     30.82    0.2%
   64   200     11990     16.24    0.1%
   64   220     12040     48.61    0.4%
   64   240     12090     50.25    0.4%
   64   260     12110     31.04    0.2%
   64   280     12140     35.65    0.2%
   64   300     12160     28.57    0.2%
   64   320     12200     29.51    0.2%
   64   340     12270     23.62    0.1%
   64   360     12290     15.07    0.1%
   64   380     12350     26.53    0.2%
   64   400     12380     38.48    0.3%
   64   420     12450      26.3    0.2%
   64   440     12450     12.06    0.0%
   64   460     12510        42    0.3%
   64   480     12570     29.57    0.2%
   64   500     12620     35.74    0.2%
   64   520     12670     22.65    0.1%
   64   540     12670     34.21    0.2%
   64   560     12730     39.94    0.3%
   64   580     12770     43.82    0.3%
   64   600     12790     31.99    0.2%
   64   620     12850     37.58    0.2%
   64   640     12900     58.29    0.4%
   64   660     12960     34.52    0.2%
   64   680     12990     34.26    0.2%
   64   700     13020     17.95    0.1%
   64   720     13070     24.09    0.1%
   64   740     13100     35.09    0.2%
   64   760     13150      30.6    0.2%
   64   780     13150     15.08    0.1%
   64   800     13360     46.52    0.3%
   64   820     13250     23.65    0.1%
   64   840     13300     14.76    0.1%
   64   860     13320     28.39    0.2%
   64   880     13370     24.14    0.1%
   64   900     13400      25.1    0.1%
   64   920     13450     32.01    0.2%
   64   940     13540     29.54    0.2%
   64   960     13530     36.28    0.2%
   64   980     13560     22.35    0.1%
   64  1000     13610     25.92    0.1%
   64  1020     13650     24.43    0.1%
   64  1024     13690        27    0.1%

Quality and confidence:
param     error
c         0.142
s         0.009

Model:
Time ~=    465.8
    + c    173.2
    + s    2.176
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)


```

</details>",9675,2021-09-04T00:57:59Z,0
1840,joao-paulo-parity,/benchmark runtime pallet pallet_contracts,9675,2021-09-04T01:09:00Z,0
1841,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""instantiate_with_code"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    557.4
    + c    175.7
    + s    2.043
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2675      3.25    0.1%
    1  1024      2828      12.1    0.4%
    2  1024      2994     21.01    0.7%
    3  1024      3158     9.735    0.3%
    4  1024      3333     18.49    0.5%
    5  1024      3509      10.9    0.3%
    6  1024      3655     7.886    0.2%
    7  1024      3862     13.05    0.3%
    8  1024      4014     14.58    0.3%
    9  1024      4231     15.35    0.3%
   10  1024      4382     15.03    0.3%
   11  1024      4549     20.33    0.4%
   12  1024      4705      18.2    0.3%
   13  1024      4900     12.84    0.2%
   14  1024      5109     20.24    0.3%
   15  1024      5255     21.31    0.4%
   16  1024      5386     23.41    0.4%
   17  1024      5699     16.27    0.2%
   18  1024      5832     12.65    0.2%
   19  1024      6012     23.62    0.3%
   20  1024      6170     30.32    0.4%
   21  1024      6338     22.72    0.3%
   22  1024      6499      21.1    0.3%
   23  1024      6631     13.51    0.2%
   24  1024      6825     55.38    0.8%
   25  1024      7118     25.04    0.3%
   26  1024      7265     17.05    0.2%
   27  1024      7528     20.03    0.2%
   28  1024      7622     49.69    0.6%
   29  1024      7726     16.89    0.2%
   30  1024      7853     15.73    0.2%
   31  1024      8030     15.46    0.1%
   32  1024      8185     13.16    0.1%
   33  1024      8603     26.44    0.3%
   34  1024      8777     22.03    0.2%
   35  1024      8904     15.96    0.1%
   36  1024      9083     29.74    0.3%
   37  1024      9227     28.18    0.3%
   38  1024      9379     15.22    0.1%
   39  1024      9544     30.27    0.3%
   40  1024      9723     45.19    0.4%
   41  1024      9873      25.3    0.2%
   42  1024     10030     29.84    0.2%
   43  1024     10150        16    0.1%
   44  1024     10310     24.97    0.2%
   45  1024     10470     29.65    0.2%
   46  1024     10620     33.15    0.3%
   47  1024     10770     24.08    0.2%
   48  1024     10920     26.26    0.2%
   49  1024     11410     26.52    0.2%
   50  1024     11580     20.01    0.1%
   51  1024     11750     38.65    0.3%
   52  1024     11900     21.85    0.1%
   53  1024     12050     25.02    0.2%
   54  1024     12220     20.37    0.1%
   55  1024     12370     23.06    0.1%
   56  1024     12510     10.12    0.0%
   57  1024     12670     36.53    0.2%
   58  1024     12830     23.79    0.1%
   59  1024     12960     24.25    0.1%
   60  1024     13130     21.67    0.1%
   61  1024     13310     23.53    0.1%
   62  1024     13420        32    0.2%
   63  1024     13580     26.23    0.1%
   64     0     11640     33.84    0.2%
   64    20     11660     31.16    0.2%
   64    40     11730     28.22    0.2%
   64    60     11740     31.55    0.2%
   64    80     11790      36.2    0.3%
   64   100     11840     43.34    0.3%
   64   120     11880     33.12    0.2%
   64   140     11910     28.12    0.2%
   64   160     11950      22.6    0.1%
   64   180     11990     35.76    0.2%
   64   200     12040     30.69    0.2%
   64   220     12080     29.35    0.2%
   64   240     12110     27.75    0.2%
   64   260     12170     43.66    0.3%
   64   280     12220     28.01    0.2%
   64   300     12250     46.65    0.3%
   64   320     12280     35.63    0.2%
   64   340     12350     21.05    0.1%
   64   360     12350     19.02    0.1%
   64   380     12430     23.27    0.1%
   64   400     12450     31.62    0.2%
   64   420     12490     20.19    0.1%
   64   440     12510     28.27    0.2%
   64   460     12570     35.83    0.2%
   64   480     12580     16.13    0.1%
   64   500     12640     26.15    0.2%
   64   520     12680     24.45    0.1%
   64   540     12730     29.45    0.2%
   64   560     12760     33.24    0.2%
   64   580     12810     30.29    0.2%
   64   600     12860     39.07    0.3%
   64   620     12930     50.53    0.3%
   64   640     12920     23.77    0.1%
   64   660     12970     26.67    0.2%
   64   680     13030     27.98    0.2%
   64   700     13090     31.69    0.2%
   64   720     13100     19.59    0.1%
   64   740     13160     30.93    0.2%
   64   760     13200     25.64    0.1%
   64   780     13230     19.21    0.1%
   64   800     13290     29.44    0.2%
   64   820     13290     24.43    0.1%
   64   840     13350     37.57    0.2%
   64   860     13370     22.66    0.1%
   64   880     13430     25.45    0.1%
   64   900     13460     36.43    0.2%
   64   920     13630     56.27    0.4%
   64   940     13540     30.41    0.2%
   64   960     13580     21.34    0.1%
   64   980     13630     23.94    0.1%
   64  1000     13630     26.75    0.1%
   64  1020     13720     30.68    0.2%
   64  1024     13740     15.74    0.1%

Quality and confidence:
param     error
c         0.133
s         0.008

Model:
Time ~=      453
    + c    173.9
    + s    2.182
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)


```

</details>",9675,2021-09-04T01:09:01Z,0
1842,joao-paulo-parity,/benchmark runtime pallet pallet_contracts,9675,2021-09-04T01:25:26Z,0
1843,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""instantiate_with_code"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    557.2
    + c    178.4
    + s    2.046
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2635     14.18    0.5%
    1  1024      2829     8.107    0.2%
    2  1024      3009     10.42    0.3%
    3  1024      3178     15.45    0.4%
    4  1024      3348     12.62    0.3%
    5  1024      3537     14.72    0.4%
    6  1024      3686     11.23    0.3%
    7  1024      3887     13.54    0.3%
    8  1024      4051     15.73    0.3%
    9  1024      4265     14.81    0.3%
   10  1024      4419     12.36    0.2%
   11  1024      4579     14.24    0.3%
   12  1024      4741     15.39    0.3%
   13  1024      4981     15.15    0.3%
   14  1024      5159     12.84    0.2%
   15  1024      5301     17.33    0.3%
   16  1024      5473      19.4    0.3%
   17  1024      5760     19.44    0.3%
   18  1024      5911     7.931    0.1%
   19  1024      6057     13.03    0.2%
   20  1024      6237     16.55    0.2%
   21  1024      6385     23.42    0.3%
   22  1024      6561     17.74    0.2%
   23  1024      6698     20.99    0.3%
   24  1024      6854     22.82    0.3%
   25  1024      7177     17.98    0.2%
   26  1024      7339     29.24    0.3%
   27  1024      7487     14.53    0.1%
   28  1024      7657     23.03    0.3%
   29  1024      7815     15.58    0.1%
   30  1024      7966     25.72    0.3%
   31  1024      8118     15.41    0.1%
   32  1024      8298     30.67    0.3%
   33  1024      8715     16.85    0.1%
   34  1024      8884     18.13    0.2%
   35  1024      9048        21    0.2%
   36  1024      9183     32.99    0.3%
   37  1024      9358     25.33    0.2%
   38  1024      9493     20.24    0.2%
   39  1024      9672     23.34    0.2%
   40  1024      9864     41.04    0.4%
   41  1024      9982     35.72    0.3%
   42  1024     10130     30.41    0.3%
   43  1024     10270      19.6    0.1%
   44  1024     10450     31.98    0.3%
   45  1024     10610     29.15    0.2%
   46  1024     10760     19.34    0.1%
   47  1024     10910     29.94    0.2%
   48  1024     11080     41.24    0.3%
   49  1024     11590     15.44    0.1%
   50  1024     11770     21.87    0.1%
   51  1024     11920     33.23    0.2%
   52  1024     12060     24.52    0.2%
   53  1024     12410     69.07    0.5%
   54  1024     12370     16.98    0.1%
   55  1024     12510     36.53    0.2%
   56  1024     12650     30.21    0.2%
   57  1024     12830     23.57    0.1%
   58  1024     12980     28.12    0.2%
   59  1024     13120        21    0.1%
   60  1024     13300     24.57    0.1%
   61  1024     13450     21.71    0.1%
   62  1024     13600     38.38    0.2%
   63  1024     13780     42.39    0.3%
   64     0     11810     28.13    0.2%
   64    20     11840     49.12    0.4%
   64    40     11880     27.95    0.2%
   64    60     11930     31.78    0.2%
   64    80     11950     26.74    0.2%
   64   100     12070     59.12    0.4%
   64   120     12040     25.24    0.2%
   64   140     12090     42.96    0.3%
   64   160     12130     25.09    0.2%
   64   180     12150     15.38    0.1%
   64   200     12200     22.11    0.1%
   64   220     12220     16.89    0.1%
   64   240     12290        46    0.3%
   64   260     12340     24.84    0.2%
   64   280     12380     30.63    0.2%
   64   300     12420     26.73    0.2%
   64   320     12460     27.08    0.2%
   64   340     12470      29.9    0.2%
   64   360     12540     42.38    0.3%
   64   380     12580     44.33    0.3%
   64   400     12630     25.24    0.1%
   64   420     12680     37.92    0.2%
   64   440     12700      21.9    0.1%
   64   460     12690     37.99    0.2%
   64   480     12790     37.56    0.2%
   64   500     12820     26.21    0.2%
   64   520     12880      25.3    0.1%
   64   540     12930     35.14    0.2%
   64   560     12950     15.78    0.1%
   64   580     12960     33.57    0.2%
   64   600     13020     29.69    0.2%
   64   620     13070     28.54    0.2%
   64   640     13120     29.94    0.2%
   64   660     13130     36.78    0.2%
   64   680     13190     35.04    0.2%
   64   700     13210     21.82    0.1%
   64   720     13290     15.39    0.1%
   64   740     13310     34.56    0.2%
   64   760     13340     19.74    0.1%
   64   780     13400     48.99    0.3%
   64   800     13460     27.77    0.2%
   64   820     13490     20.98    0.1%
   64   840     13510     32.92    0.2%
   64   860     13560      28.7    0.2%
   64   880     13580     29.55    0.2%
   64   900     13640     37.82    0.2%
   64   920     13690     26.01    0.1%
   64   940     13740     19.03    0.1%
   64   960     13770     35.66    0.2%
   64   980     13810     23.31    0.1%
   64  1000     13840     19.94    0.1%
   64  1020     13870     19.36    0.1%
   64  1024     13940     20.33    0.1%

Quality and confidence:
param     error
c         0.147
s         0.009

Model:
Time ~=    443.7
    + c    176.7
    + s    2.198
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)


```

</details>

ERROR: Unable to commit file ./frame/contracts/src/weights.rs",9675,2021-09-04T01:25:28Z,0
1844,joao-paulo-parity,/benchmark runtime pallet pallet_contracts,9675,2021-09-04T01:46:29Z,0
1845,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""instantiate_with_code"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    585.1
    + c    175.9
    + s    2.024
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2634     16.13    0.6%
    1  1024      2830     16.99    0.6%
    2  1024      3006     10.82    0.3%
    3  1024      3164     21.35    0.6%
    4  1024      3335     18.12    0.5%
    5  1024      3517     11.34    0.3%
    6  1024      3669     7.044    0.1%
    7  1024      3883     22.99    0.5%
    8  1024      4007     18.18    0.4%
    9  1024      4239     9.055    0.2%
   10  1024      4419      17.6    0.3%
   11  1024      4559     16.52    0.3%
   12  1024      4750     17.93    0.3%
   13  1024      4954     22.97    0.4%
   14  1024      5106     21.22    0.4%
   15  1024      5261     15.25    0.2%
   16  1024      5410     13.55    0.2%
   17  1024      5702     16.63    0.2%
   18  1024      5857     15.58    0.2%
   19  1024      6030     33.33    0.5%
   20  1024      6190     14.48    0.2%
   21  1024      6322     17.17    0.2%
   22  1024      6514     24.36    0.3%
   23  1024      6627     13.45    0.2%
   24  1024      6807     22.42    0.3%
   25  1024      7142     27.54    0.3%
   26  1024      7259     17.39    0.2%
   27  1024      7431     20.99    0.2%
   28  1024      7590     17.45    0.2%
   29  1024      7740     20.29    0.2%
   30  1024      7894     17.19    0.2%
   31  1024      8090     40.95    0.5%
   32  1024      8210     21.46    0.2%
   33  1024      8646     16.31    0.1%
   34  1024      8920     6.426    0.0%
   35  1024      8946     22.41    0.2%
   36  1024      9084     10.52    0.1%
   37  1024      9254     39.24    0.4%
   38  1024      9382     21.64    0.2%
   39  1024      9579     41.05    0.4%
   40  1024      9720      33.1    0.3%
   41  1024      9903     36.31    0.3%
   42  1024     10040      39.4    0.3%
   43  1024     10170      28.9    0.2%
   44  1024     10330     27.09    0.2%
   45  1024     10490      22.9    0.2%
   46  1024     10640      38.7    0.3%
   47  1024     10800     37.08    0.3%
   48  1024     10920     21.06    0.1%
   49  1024     11430     39.43    0.3%
   50  1024     11570     23.45    0.2%
   51  1024     11760     33.97    0.2%
   52  1024     11920     34.35    0.2%
   53  1024     12070     31.64    0.2%
   54  1024     12280      57.4    0.4%
   55  1024     12370     17.42    0.1%
   56  1024     12520     18.51    0.1%
   57  1024     12710     18.23    0.1%
   58  1024     12840     41.64    0.3%
   59  1024     12970     25.74    0.1%
   60  1024     13150     39.66    0.3%
   61  1024     13280     43.94    0.3%
   62  1024     13440     42.94    0.3%
   63  1024     13590     33.88    0.2%
   64     0     11660     30.14    0.2%
   64    20     11720     16.52    0.1%
   64    40     11720     33.72    0.2%
   64    60     11770     41.05    0.3%
   64    80     11820     41.13    0.3%
   64   100     11830     22.66    0.1%
   64   120     11880     33.26    0.2%
   64   140     11910     23.91    0.2%
   64   160     11980     26.59    0.2%
   64   180     12000     29.57    0.2%
   64   200     12050     29.97    0.2%
   64   220     12050     16.45    0.1%
   64   240     12100     29.91    0.2%
   64   260     12180     19.27    0.1%
   64   280     12190     20.43    0.1%
   64   300     12250     27.91    0.2%
   64   320     12290     28.77    0.2%
   64   340     12320     25.54    0.2%
   64   360     12350     40.11    0.3%
   64   380     12440     31.56    0.2%
   64   400     12430     41.57    0.3%
   64   420     12530     29.03    0.2%
   64   440     12520     28.83    0.2%
   64   460     12570        12    0.0%
   64   480     12580      41.8    0.3%
   64   500     12660     34.49    0.2%
   64   520     12700     21.43    0.1%
   64   540     12740     23.95    0.1%
   64   560     12780      28.4    0.2%
   64   580     12820     30.48    0.2%
   64   600     12840     17.25    0.1%
   64   620     12890     21.26    0.1%
   64   640     12900     22.82    0.1%
   64   660     12980     40.23    0.3%
   64   680     13010     21.45    0.1%
   64   700     13080     54.08    0.4%
   64   720     13190     77.93    0.5%
   64   740     13130     19.69    0.1%
   64   760     13190     25.44    0.1%
   64   780     13220     30.61    0.2%
   64   800     13280     39.78    0.2%
   64   820     13310     26.08    0.1%
   64   840     13330     22.31    0.1%
   64   860     13370     22.28    0.1%
   64   880     13430     33.86    0.2%
   64   900     13440     26.97    0.2%
   64   920     13510     43.58    0.3%
   64   940     13550     28.92    0.2%
   64   960     13590     24.85    0.1%
   64   980     13610     36.15    0.2%
   64  1000     13670     32.06    0.2%
   64  1020     13710      28.4    0.2%
   64  1024     13720     22.16    0.1%

Quality and confidence:
param     error
c         0.147
s         0.009

Model:
Time ~=    469.3
    + c    173.8
    + s    2.182
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)


```

</details>

ERROR: Unable to commit file ./frame/contracts/src/weights.rs",9675,2021-09-04T01:46:31Z,0
1846,joao-paulo-parity,/benchmark runtime pallet pallet_contracts,9675,2021-09-04T01:58:19Z,0
1847,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""instantiate_with_code"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: System Account (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    568.8
    + c    174.5
    + s    2.039
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2619     15.46    0.5%
    1  1024      2829     3.838    0.1%
    2  1024      2995      12.2    0.4%
    3  1024      3162     12.39    0.3%
    4  1024      3324     8.136    0.2%
    5  1024      3505     13.97    0.3%
    6  1024      3654     7.854    0.2%
    7  1024      3855     17.35    0.4%
    8  1024      4002     8.143    0.2%
    9  1024      4229      16.9    0.3%
   10  1024      4428     22.05    0.4%
   11  1024      4543     12.58    0.2%
   12  1024      4685     22.34    0.4%
   13  1024      4923     13.16    0.2%
   14  1024      5059     19.48    0.3%
   15  1024      5239     15.61    0.2%
   16  1024      5376     9.569    0.1%
   17  1024      5679     17.93    0.3%
   18  1024      5842     15.31    0.2%
   19  1024      6001     24.05    0.4%
   20  1024      6161     14.75    0.2%
   21  1024      6296     11.49    0.1%
   22  1024      6469     16.04    0.2%
   23  1024      6714     3.358    0.0%
   24  1024      6782     13.92    0.2%
   25  1024      7089     15.27    0.2%
   26  1024      7243     17.87    0.2%
   27  1024      7398      16.7    0.2%
   28  1024      7550     20.57    0.2%
   29  1024      7714     11.08    0.1%
   30  1024      7864     32.87    0.4%
   31  1024      8023     20.64    0.2%
   32  1024      8176     30.78    0.3%
   33  1024      8569     14.47    0.1%
   34  1024      8720     14.63    0.1%
   35  1024      8889     17.47    0.1%
   36  1024      9034     18.25    0.2%
   37  1024      9181     21.05    0.2%
   38  1024      9352     12.21    0.1%
   39  1024      9505     32.43    0.3%
   40  1024      9677     21.78    0.2%
   41  1024      9816     22.59    0.2%
   42  1024      9972     32.12    0.3%
   43  1024     10100     23.87    0.2%
   44  1024     10280        35    0.3%
   45  1024     10420     35.59    0.3%
   46  1024     10580     31.56    0.2%
   47  1024     10710     19.97    0.1%
   48  1024     10880     22.32    0.2%
   49  1024     11370     17.07    0.1%
   50  1024     11520     22.09    0.1%
   51  1024     11670     21.71    0.1%
   52  1024     11820     26.54    0.2%
   53  1024     11990     26.79    0.2%
   54  1024     12140     23.33    0.1%
   55  1024     12300     27.66    0.2%
   56  1024     12420     28.46    0.2%
   57  1024     12600      27.2    0.2%
   58  1024     12750     29.32    0.2%
   59  1024     12870     17.38    0.1%
   60  1024     13050     31.56    0.2%
   61  1024     13190     48.58    0.3%
   62  1024     13350     32.72    0.2%
   63  1024     13490     37.21    0.2%
   64     0     11560     30.96    0.2%
   64    20     11610     30.99    0.2%
   64    40     11630     17.23    0.1%
   64    60     11710     24.13    0.2%
   64    80     11690     23.69    0.2%
   64   100     11750     39.95    0.3%
   64   120     11770      22.4    0.1%
   64   140     11800     30.97    0.2%
   64   160     11850     12.66    0.1%
   64   180     11900     44.44    0.3%
   64   200     11950     25.17    0.2%
   64   220     12000     27.87    0.2%
   64   240     12010     24.35    0.2%
   64   260     12060     29.87    0.2%
   64   280     12110     32.46    0.2%
   64   300     12150     23.59    0.1%
   64   320     12180      24.1    0.1%
   64   340     12230     22.64    0.1%
   64   360     12410     89.45    0.7%
   64   380     12320     22.19    0.1%
   64   400     12410     30.17    0.2%
   64   420     12420     22.55    0.1%
   64   440     12420     24.89    0.2%
   64   460     12450     24.61    0.1%
   64   480     12500     24.05    0.1%
   64   500     12560     20.13    0.1%
   64   520     12590     19.51    0.1%
   64   540     12630     15.64    0.1%
   64   560     12690     32.15    0.2%
   64   580     12750     32.81    0.2%
   64   600     12760     23.17    0.1%
   64   620     12810     26.29    0.2%
   64   640     12840     16.93    0.1%
   64   660     12880     14.13    0.1%
   64   680     12920        44    0.3%
   64   700     12960     25.69    0.1%
   64   720     13010     24.84    0.1%
   64   740     13070     13.58    0.1%
   64   760     13100     29.93    0.2%
   64   780     13130     29.53    0.2%
   64   800     13180        35    0.2%
   64   820     13200     38.36    0.2%
   64   840     13250     31.61    0.2%
   64   860     13310     36.77    0.2%
   64   880     13340     22.21    0.1%
   64   900     13390     30.14    0.2%
   64   920     13430     37.41    0.2%
   64   940     13450     30.17    0.2%
   64   960     13470     36.65    0.2%
   64   980     13550     43.29    0.3%
   64  1000     13760     67.82    0.4%
   64  1020     13630     63.07    0.4%
   64  1024     13640     40.61    0.2%

Quality and confidence:
param     error
c         0.135
s         0.008

Model:
Time ~=    457.9
    + c    172.5
    + s    2.186
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 4 + (0 * c) + (0 * s)


```

</details>",9675,2021-09-04T01:58:20Z,0
1848,joao-paulo-parity,/benchmark runtime pallet pallet_balances,9675,2021-09-04T22:58:16Z,0
1849,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.11
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.11
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.74
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.74
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.14
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.14
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     36.1
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     36.1
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.84
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.84
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    67.79
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    67.79
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-04T22:58:18Z,0
1850,joao-paulo-parity,See https://github.com/paritytech/bench-bot/pull/53,9675,2021-09-04T23:08:10Z,0
1851,shawntabrizi,/benchmark runtime pallet pallet_balances,9675,2021-09-05T00:04:40Z,0
1852,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    70.82
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    70.82
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.18
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.18
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.44
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    29.44
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.79
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.79
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    71.55
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    71.55
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    66.37
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    66.37
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-05T00:04:41Z,0
1853,shawntabrizi,/benchmark runtime pallet pallet_staking,9675,2021-09-05T04:15:59Z,0
1854,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_staking --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/staking/src/weights.rs --template=./.maintain/frame-weight-template.hbs 

<details>
<summary>Results</summary>

```
Pallet: ""pallet_staking"", Extrinsic: ""bond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    71.19
              µs

Reads = 5
Writes = 4

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    71.19
              µs

Reads = 5
Writes = 4

Pallet: ""pallet_staking"", Extrinsic: ""bond_extra"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:0)
Storage: Staking Ledger (r:1 w:1)
Storage: Balances Locks (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.71
              µs

Reads = 3
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.71
              µs

Reads = 3
Writes = 2

Pallet: ""pallet_staking"", Extrinsic: ""unbond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking Nominators (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    59.45
              µs

Reads = 6
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    59.45
              µs

Reads = 6
Writes = 3

Pallet: ""pallet_staking"", Extrinsic: ""withdraw_unbonded_update"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    51.22
    + s     0.05
              µs

Reads = 4 + (0 * s)
Writes = 3 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     50.53     0.178    0.3%
    2     51.28       0.3    0.5%
    4     50.89     0.488    0.9%
    6     51.58     0.367    0.7%
    8     51.29     0.186    0.3%
   10     51.27     0.347    0.6%
   12     52.59     0.103    0.1%
   14     53.14     0.177    0.3%
   16     53.37     0.108    0.2%
   18     52.02     0.201    0.3%
   20     52.63     0.349    0.6%
   22     52.17     0.095    0.1%
   24     52.88     0.555    1.0%
   26     52.73     0.133    0.2%
   28     52.19     0.134    0.2%
   30     52.22     0.129    0.2%
   32     53.05     0.316    0.5%
   34     53.16     0.142    0.2%
   36     53.04      0.18    0.3%
   38        53     0.174    0.3%
   40     53.12     0.136    0.2%
   42     53.09     0.164    0.3%
   44     52.78     0.269    0.5%
   46     53.78     0.125    0.2%
   48      53.7     0.163    0.3%
   50      53.5      0.13    0.2%
   52     53.42     0.213    0.3%
   54     54.01      0.09    0.1%
   56     54.17     0.202    0.3%
   58     54.39     0.189    0.3%
   60     54.22     0.186    0.3%
   62     54.52     0.198    0.3%
   64     54.06     0.316    0.5%
   66     54.59     0.142    0.2%
   68     54.91     0.192    0.3%
   70     54.76     0.257    0.4%
   72     54.51     0.169    0.3%
   74      54.2     0.511    0.9%
   76     54.91     0.123    0.2%
   78     55.43     0.191    0.3%
   80     55.79     0.245    0.4%
   82     55.49     0.211    0.3%
   84     55.36     0.308    0.5%
   86     55.34     0.221    0.3%
   88     54.73      0.57    1.0%
   90     56.71     0.507    0.8%
   92     55.91     0.327    0.5%
   94     56.06     0.257    0.4%
   96     56.18     0.192    0.3%
   98     55.84      0.17    0.3%
  100     55.95     0.178    0.3%

Quality and confidence:
param     error
s             0

Model:
Time ~=    51.27
    + s    0.049
              µs

Reads = 4 + (0 * s)
Writes = 3 + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""withdraw_unbonded_kill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    82.55
    + s    2.373
              µs

Reads = 8 + (0 * s)
Writes = 6 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     78.37     0.211    0.2%
    2     87.09     0.243    0.2%
    4     91.98     0.197    0.2%
    6     96.49     0.215    0.2%
    8     101.6     0.206    0.2%
   10     105.8     0.214    0.2%
   12       111      0.34    0.3%
   14     115.5     0.247    0.2%
   16     120.6     0.258    0.2%
   18     125.3     0.268    0.2%
   20     130.3     0.304    0.2%
   22     134.2     0.234    0.1%
   24     139.5     0.223    0.1%
   26     145.3     0.236    0.1%
   28     149.1     0.441    0.2%
   30     154.3     0.423    0.2%
   32     158.8     0.807    0.5%
   34     163.1     0.291    0.1%
   36     168.9      0.23    0.1%
   38     172.8     0.393    0.2%
   40       178     0.315    0.1%
   42     182.9     0.277    0.1%
   44     190.2     1.375    0.7%
   46       192     0.451    0.2%
   48     197.2     0.612    0.3%
   50       200     0.391    0.1%
   52     205.5     0.423    0.2%
   54     210.9     0.324    0.1%
   56     214.7     0.448    0.2%
   58     222.6     4.275    1.9%
   60     225.4     3.813    1.6%
   62     229.9     0.864    0.3%
   64     234.4     0.634    0.2%
   66     239.6     0.602    0.2%
   68     243.6     0.496    0.2%
   70     248.2     0.609    0.2%
   72     253.4     1.248    0.4%
   74     259.3     1.312    0.5%
   76     262.8     0.919    0.3%
   78       267     0.629    0.2%
   80     272.5     0.545    0.1%
   82     276.9      0.78    0.2%
   84     281.2     1.219    0.4%
   86     285.5     0.974    0.3%
   88     290.6     0.557    0.1%
   90     294.8     0.397    0.1%
   92     302.5     1.488    0.4%
   94     306.8      0.99    0.3%
   96     310.6     1.138    0.3%
   98     315.2      0.49    0.1%
  100     320.4     0.555    0.1%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    82.41
    + s    2.378
              µs

Reads = 8 + (0 * s)
Writes = 6 + (1 * s)

Pallet: ""pallet_staking"", Extrinsic: ""validate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking MinValidatorBond (r:1 w:0)
Storage: Staking Validators (r:1 w:1)
Storage: Staking MaxValidatorsCount (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.58
              µs

Reads = 6
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.58
              µs

Reads = 6
Writes = 2

Pallet: ""pallet_staking"", Extrinsic: ""kick"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.55
    + k    15.64
              µs

Reads = 1 + (1 * k)
Writes = 0 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    1     42.23     0.258    0.6%
    3     73.85     1.875    2.5%
    5     101.1     0.375    0.3%
    7     136.1     0.276    0.2%
    9       164     2.004    1.2%
   11     197.3     1.696    0.8%
   13     227.3     0.359    0.1%
   15     253.8     0.541    0.2%
   17     291.3     0.997    0.3%
   19     321.6     0.781    0.2%
   21     352.6     0.929    0.2%
   23     384.4     2.445    0.6%
   25     414.4     0.889    0.2%
   27     445.2     1.403    0.3%
   29       477     4.082    0.8%
   31     510.4     2.178    0.4%
   33     541.8     1.515    0.2%
   35     569.4     1.348    0.2%
   37     604.2       3.8    0.6%
   39     635.6     2.688    0.4%
   41     671.8     8.203    1.2%
   43     702.2     4.131    0.5%
   45     734.7     6.406    0.8%
   47     753.1     3.522    0.4%
   49     786.1     1.515    0.1%
   51     810.4     8.353    1.0%
   53     860.5     6.451    0.7%
   55     889.4      9.65    1.0%
   57     918.2     12.82    1.3%
   59     936.3     7.544    0.8%
   61     984.4     7.686    0.7%
   63      1031     1.429    0.1%
   65      1028      3.47    0.3%
   67      1049     1.458    0.1%
   69      1083     3.102    0.2%
   71      1118     11.51    1.0%
   73      1149     9.667    0.8%
   75      1209     12.09    1.0%
   77      1224     13.67    1.1%
   79      1240     6.865    0.5%
   81      1288     7.138    0.5%
   83      1321     2.267    0.1%
   85      1332     9.757    0.7%
   87      1373     13.99    1.0%
   89      1415     6.895    0.4%
   91      1454      9.15    0.6%
   93      1485     7.092    0.4%
   95      1500     14.19    0.9%
   97      1521     8.425    0.5%
   99      1554     10.53    0.6%
  101      1627     8.967    0.5%
  103      1619      9.57    0.5%
  105      1648     11.53    0.7%
  107      1705     9.497    0.5%
  109      1714      13.5    0.7%
  111      1757     14.27    0.8%
  113      1835     14.98    0.8%
  115      1818     16.46    0.9%
  117      1855     10.89    0.5%
  119      1917     9.588    0.4%
  121      1911     11.85    0.6%
  123      1973     12.95    0.6%
  125      2011     13.56    0.6%
  127      2029     8.698    0.4%

Quality and confidence:
param     error
k         0.016

Model:
Time ~=    20.95
    + k    15.68
              µs

Reads = 1 + (1 * k)
Writes = 0 + (1 * k)

Pallet: ""pallet_staking"", Extrinsic: ""nominate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking MinNominatorBond (r:1 w:0)
Storage: Staking Nominators (r:1 w:1)
Storage: Staking MaxNominatorsCount (r:1 w:0)
Storage: Staking Validators (r:2 w:0)
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking CounterForNominators (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    40.79
    + n      5.5
              µs

Reads = 7 + (1 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     45.76     0.374    0.8%
    2     51.57      0.24    0.4%
    3     56.62     0.167    0.2%
    4     62.63     0.204    0.3%
    5      68.4     0.202    0.2%
    6     74.33     0.429    0.5%
    7     79.32     0.272    0.3%
    8     85.14       0.2    0.2%
    9     91.58     0.268    0.2%
   10     96.69     0.177    0.1%
   11     102.2     0.614    0.6%
   12     106.8     0.758    0.7%
   13     112.1     0.592    0.5%
   14       117     0.427    0.3%
   15     121.8     0.426    0.3%
   16       128     0.239    0.1%

Quality and confidence:
param     error
n         0.013

Model:
Time ~=    40.94
    + n    5.479
              µs

Reads = 7 + (1 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_staking"", Extrinsic: ""chill"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17.41
              µs

Reads = 3
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17.41
              µs

Reads = 3
Writes = 0

Pallet: ""pallet_staking"", Extrinsic: ""set_payee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking Payee (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.18
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.18
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""set_controller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking Ledger (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    26.94
              µs

Reads = 3
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    26.94
              µs

Reads = 3
Writes = 3

Pallet: ""pallet_staking"", Extrinsic: ""set_validator_count"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ValidatorCount (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.491
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.491
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_no_eras"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.798
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.798
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_new_era"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.772
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.772
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""force_new_era_always"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking ForceEra (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.825
              µs

Reads = 0
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.825
              µs

Reads = 0
Writes = 1

Pallet: ""pallet_staking"", Extrinsic: ""set_invulnerables"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Invulnerables (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    3.252
    + v    0.055
              µs

Reads = 0 + (0 * v)
Writes = 1 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v   mean µs  sigma µs       %
    0     2.795     0.019    0.6%
   20     4.318     0.048    1.1%
   40     5.514     0.041    0.7%
   60     6.602     0.051    0.7%
   80     7.807     0.049    0.6%
  100     8.893     0.033    0.3%
  120     9.989     0.016    0.1%
  140     11.16     0.042    0.3%
  160     12.18     0.019    0.1%
  180     13.43     0.057    0.4%
  200     14.22     0.058    0.4%
  220     15.62     0.129    0.8%
  240     16.67     0.053    0.3%
  260     17.37     0.037    0.2%
  280     18.96     0.066    0.3%
  300     19.62     0.056    0.2%
  320     20.73     0.069    0.3%
  340     22.13     0.167    0.7%
  360     22.96     0.042    0.1%
  380     24.54     0.088    0.3%
  400      25.1     0.071    0.2%
  420     26.75     0.209    0.7%
  440     27.67     0.268    0.9%
  460     28.44      0.09    0.3%
  480     29.56     0.043    0.1%
  500      30.7     0.039    0.1%
  520     31.66     0.094    0.2%
  540     32.77     0.072    0.2%
  560     34.03      0.07    0.2%
  580     35.11      0.05    0.1%
  600      36.3      0.06    0.1%
  620     37.34     0.054    0.1%
  640     38.42     0.054    0.1%
  660     39.57     0.046    0.1%
  680     40.71     0.082    0.2%
  700     41.81     0.063    0.1%
  720     42.91     0.069    0.1%
  740     44.12      0.06    0.1%
  760     45.22     0.094    0.2%
  780     46.26     0.063    0.1%
  800     47.57     0.101    0.2%
  820     48.61     0.068    0.1%
  840      49.7     0.036    0.0%
  860     50.75      0.07    0.1%
  880     51.81     0.044    0.0%
  900     53.18     0.355    0.6%
  920     53.96     0.086    0.1%
  940     55.17     0.103    0.1%
  960     56.19     0.023    0.0%
  980     57.37     0.063    0.1%
 1000      58.4     0.109    0.1%

Quality and confidence:
param     error
v             0

Model:
Time ~=    3.259
    + v    0.055
              µs

Reads = 0 + (0 * v)
Writes = 1 + (0 * v)

Pallet: ""pallet_staking"", Extrinsic: ""force_unstake"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Validators (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Ledger (r:0 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    60.29
    + s    2.367
              µs

Reads = 6 + (0 * s)
Writes = 6 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     55.91     0.215    0.3%
    2     64.01     0.171    0.2%
    4     68.42     0.144    0.2%
    6      74.2     0.173    0.2%
    8      80.2     0.854    1.0%
   10        84     0.105    0.1%
   12     89.27     0.811    0.9%
   14     93.51     0.172    0.1%
   16     98.62      0.34    0.3%
   18     102.9     0.145    0.1%
   20     107.7     0.259    0.2%
   22     112.9     0.175    0.1%
   24     117.7     0.269    0.2%
   26     122.1     0.286    0.2%
   28     126.9     0.283    0.2%
   30     131.5     0.303    0.2%
   32     136.5     0.326    0.2%
   34     140.7     0.231    0.1%
   36     145.9     0.428    0.2%
   38     150.4     0.305    0.2%
   40     155.5     0.406    0.2%
   42     159.8     0.185    0.1%
   44     164.7     0.273    0.1%
   46     169.6     0.574    0.3%
   48     173.9     0.286    0.1%
   50     178.7     0.567    0.3%
   52       182     0.252    0.1%
   54     187.1     0.545    0.2%
   56     192.9     0.375    0.1%
   58     198.1     0.502    0.2%
   60     201.4     0.308    0.1%
   62     209.5     5.783    2.7%
   64     211.4     0.565    0.2%
   66     215.6     0.806    0.3%
   68     219.9     0.266    0.1%
   70     225.4     0.376    0.1%
   72     229.2     0.353    0.1%
   74     235.2     0.257    0.1%
   76     239.3     0.645    0.2%
   78     244.9     0.562    0.2%
   80     248.4     0.573    0.2%
   82     253.7     0.669    0.2%
   84     257.6     0.613    0.2%
   86     263.3     0.955    0.3%
   88       274     2.297    0.8%
   90     287.6     1.239    0.4%
   92     286.8     2.737    0.9%
   94     282.4     0.651    0.2%
   96     287.5     0.503    0.1%
   98     291.9     0.266    0.0%
  100     296.9     0.832    0.2%

Quality and confidence:
param     error
s         0.004

Model:
Time ~=    59.44
    + s    2.391
              µs

Reads = 6 + (0 * s)
Writes = 6 + (1 * s)

Pallet: ""pallet_staking"", Extrinsic: ""cancel_deferred_slash"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking UnappliedSlashes (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     3128
    + s    16.23
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     225.7     1.317    0.5%
   20     828.8     11.11    1.3%
   39      1418     12.28    0.8%
   58      2009     12.92    0.6%
   77      2581     16.96    0.6%
   96      3149     17.62    0.5%
  115      3686      11.4    0.3%
  134      4213     11.84    0.2%
  153      4762     27.08    0.5%
  172      5246     12.32    0.2%
  191      5754     17.39    0.3%
  210      6241     21.74    0.3%
  229      6704      14.7    0.2%
  248      7173     10.45    0.1%
  267      7631     11.98    0.1%
  286      8069     19.63    0.2%
  305      8529      12.2    0.1%
  324      8937     23.04    0.2%
  343      9327     16.58    0.1%
  362      9741     21.53    0.2%
  381     10120     17.42    0.1%
  400     10480     23.45    0.2%
  419     10840     20.35    0.1%
  438     11190      23.2    0.2%
  457     11520        22    0.1%
  476     11860      20.9    0.1%
  495     12190     29.35    0.2%
  514     12480     11.79    0.0%
  533     12780     24.34    0.1%
  552     13050     19.06    0.1%
  571     13310     42.51    0.3%
  590     13570     31.46    0.2%
  609     13810     19.49    0.1%
  628     14040     31.56    0.2%
  647     14260     34.38    0.2%
  666     14470     15.46    0.1%
  685     14680     24.59    0.1%
  704     14850     27.73    0.1%
  723     15000     36.48    0.2%
  742     15180     27.18    0.1%
  761     15340     23.26    0.1%
  780     15480     50.44    0.3%
  799     15610      43.7    0.2%
  818     15730     24.25    0.1%
  837     15840     32.73    0.2%
  856     15900     31.94    0.2%
  875     15980     28.01    0.1%
  894     16110     35.58    0.2%
  913     16150      21.8    0.1%
  932     16180     36.82    0.2%
  951     16220     25.05    0.1%
  970     16250     29.67    0.1%
  989     16260     21.62    0.1%

Quality and confidence:
param     error
s         0.182

Model:
Time ~=     2783
    + s    16.22
              µs

Reads = 1 + (0 * s)
Writes = 1 + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""payout_stakers_dead_controller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasValidatorReward (r:1 w:0)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:1 w:1)
Storage: Staking ErasStakersClipped (r:1 w:0)
Storage: Staking ErasRewardPoints (r:1 w:0)
Storage: Staking ErasValidatorPrefs (r:1 w:0)
Storage: Staking Payee (r:2 w:0)
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    116.6
    + n    46.05
              µs

Reads = 10 + (3 * n)
Writes = 2 + (1 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     164.6     10.14    6.1%
    6     418.4     21.03    5.0%
   11     621.3     5.849    0.9%
   16     865.8     15.18    1.7%
   21      1098     14.16    1.2%
   26      1313     9.246    0.7%
   31      1559     16.79    1.0%
   36      1830     12.56    0.6%
   41      2002        10    0.4%
   46      2246     23.51    1.0%
   51      2477     12.47    0.5%
   56      2702     19.09    0.7%
   61      2919     18.92    0.6%
   66      3149     11.49    0.3%
   71      3396     8.054    0.2%
   76      3600     14.29    0.3%
   81      3832     10.61    0.2%
   86      4078     11.33    0.2%
   91      4276      14.3    0.3%
   96      4534     23.86    0.5%
  101      4728     24.59    0.5%
  106      5016     21.51    0.4%
  111      5199     10.59    0.2%
  116      5430     15.65    0.2%
  121      5656     13.45    0.2%
  126      5886     13.61    0.2%
  131      6089     14.56    0.2%
  136      6388     15.19    0.2%
  141      6613     20.12    0.3%
  146      6866     20.98    0.3%
  151      7070      13.2    0.1%
  156      7309     15.65    0.2%
  161      7542      13.5    0.1%
  166      7756     25.42    0.3%
  171      7973     18.92    0.2%
  176      8220     13.89    0.1%
  181      8478     23.87    0.2%
  186      8713     20.04    0.2%
  191      8934      22.2    0.2%
  196      9173     32.03    0.3%
  201      9418     17.04    0.1%
  206      9598      15.4    0.1%
  211      9790     23.28    0.2%
  216     10070     26.14    0.2%
  221     10320     29.83    0.2%
  226     10490     46.44    0.4%
  231     10770     27.08    0.2%
  236     11030     26.81    0.2%
  241     11170     28.91    0.2%
  246     11530     27.07    0.2%
  251     11710     26.47    0.2%
  256     11890     23.13    0.1%

Quality and confidence:
param     error
n         0.019

Model:
Time ~=    114.3
    + n    46.09
              µs

Reads = 10 + (3 * n)
Writes = 2 + (1 * n)

Pallet: ""pallet_staking"", Extrinsic: ""payout_stakers_alive_staked"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasValidatorReward (r:1 w:0)
Storage: Staking Bonded (r:2 w:0)
Storage: Staking Ledger (r:2 w:2)
Storage: Staking ErasStakersClipped (r:1 w:0)
Storage: Staking ErasRewardPoints (r:1 w:0)
Storage: Staking ErasValidatorPrefs (r:1 w:0)
Storage: Staking Payee (r:2 w:0)
Storage: System Account (r:2 w:2)
Storage: Balances Locks (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    161.1
    + n    59.22
              µs

Reads = 11 + (5 * n)
Writes = 3 + (3 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    1     208.7      0.38    0.1%
    6       509     2.098    0.4%
   11     801.3     2.909    0.3%
   16      1100     8.524    0.7%
   21      1414     12.76    0.9%
   26      1696     12.08    0.7%
   31      1987     12.49    0.6%
   36      2287     13.99    0.6%
   41      2567     9.384    0.3%
   46      2885     16.83    0.5%
   51      3195     17.36    0.5%
   56      3489     15.31    0.4%
   61      3817     11.18    0.2%
   66      4050     17.51    0.4%
   71      4344     15.64    0.3%
   76      4665     14.52    0.3%
   81      4941     7.318    0.1%
   86      5273     19.13    0.3%
   91      5536     11.99    0.2%
   96      5892     22.09    0.3%
  101      6184     13.23    0.2%
  106      6471     7.694    0.1%
  111      6694     12.51    0.1%
  116      7067      39.8    0.5%
  121      7321     28.77    0.3%
  126      7671     19.91    0.2%
  131      7923     29.72    0.3%
  136      8245     34.68    0.4%
  141      8484      31.8    0.3%
  146      8788     13.37    0.1%
  151      9066      10.3    0.1%
  156      9413      18.7    0.1%
  161      9706     33.67    0.3%
  166      9977     22.94    0.2%
  171     10360     27.26    0.2%
  176     10560     25.71    0.2%
  181     10900     32.46    0.2%
  186     11190     27.62    0.2%
  191     11520     35.36    0.3%
  196     11770     29.97    0.2%
  201     11980     23.77    0.1%
  206     12370     27.23    0.2%
  211     12650     59.93    0.4%
  216     12950     32.83    0.2%
  221     13280     31.19    0.2%
  226     13490      21.2    0.1%
  231     13860     33.19    0.2%
  236     14100     28.22    0.2%
  241     14370     49.66    0.3%
  246     14670     17.69    0.1%
  251     15070     27.85    0.1%
  256     15370      25.6    0.1%

Quality and confidence:
param     error
n         0.023

Model:
Time ~=    162.8
    + n    59.22
              µs

Reads = 11 + (5 * n)
Writes = 3 + (3 * n)

Pallet: ""pallet_staking"", Extrinsic: ""rebond"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:1)
Storage: Balances Locks (r:1 w:1)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    48.28
    + l    0.083
              µs

Reads = 3 + (0 * l)
Writes = 3 + (0 * l)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    l   mean µs  sigma µs       %
    1     47.69     0.191    0.4%
    2     47.65     0.145    0.3%
    3     47.97     0.426    0.8%
    4     48.58     0.097    0.1%
    5     48.99      0.23    0.4%
    6     49.31     0.149    0.3%
    7     49.28     0.167    0.3%
    8     48.14       0.3    0.6%
    9     48.66     0.526    1.0%
   10     48.47      0.11    0.2%
   11      49.2     0.196    0.3%
   12     49.88     0.234    0.4%
   13     49.63     0.111    0.2%
   14      48.7     0.123    0.2%
   15     49.16     0.418    0.8%
   16     48.68     0.074    0.1%
   17      50.1     0.128    0.2%
   18     50.27     0.154    0.3%
   19      50.2     0.084    0.1%
   20     49.26     0.188    0.3%
   21     49.73     0.548    1.1%
   22     49.49      0.14    0.2%
   23     50.59     0.198    0.3%
   24     50.45     0.185    0.3%
   25     50.32     0.191    0.3%
   26      50.7     0.132    0.2%
   27     50.93     0.132    0.2%
   28     50.33     0.552    1.0%
   29     50.39     0.193    0.3%
   30     49.64     0.102    0.2%
   31     49.54     0.225    0.4%
   32     50.86     0.169    0.3%

Quality and confidence:
param     error
l         0.003

Model:
Time ~=    48.14
    + l     0.08
              µs

Reads = 3 + (0 * l)
Writes = 3 + (0 * l)

Pallet: ""pallet_staking"", Extrinsic: ""set_history_depth"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CurrentEra (r:1 w:0)
Storage: Staking HistoryDepth (r:1 w:1)
Storage: Staking ErasStakersClipped (r:0 w:2)
Storage: Staking ErasValidatorPrefs (r:0 w:2)
Storage: Staking ErasValidatorReward (r:0 w:1)
Storage: Staking ErasRewardPoints (r:0 w:1)
Storage: Staking ErasStakers (r:0 w:2)
Storage: Staking ErasTotalStake (r:0 w:1)
Storage: Staking ErasStartSessionIndex (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + e    33.96
              µs

Reads = 2 + (0 * e)
Writes = 4 + (7 * e)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    e   mean µs  sigma µs       %
    1     41.45     0.191    0.4%
    2     68.23     0.209    0.3%
    3     93.22     0.204    0.2%
    4       119     0.936    0.7%
    5     142.4     0.243    0.1%
    6     167.9     0.303    0.1%
    7     193.6     0.398    0.2%
    8     225.3     0.581    0.2%
    9     245.5     0.578    0.2%
   10     276.4     0.776    0.2%
   11       302     1.217    0.4%
   12     326.6     0.931    0.2%
   13     353.1     0.839    0.2%
   14     382.7     0.852    0.2%
   15     409.9     1.147    0.2%
   16     436.8     0.698    0.1%
   17     478.2     14.55    3.0%
   18     492.7     0.653    0.1%
   19     530.6     9.565    1.8%
   20     550.4     1.573    0.2%
   21     582.8     2.583    0.4%
   22     607.7     1.773    0.2%
   23       635     1.518    0.2%
   24     676.1     14.38    2.1%
   25     707.3        12    1.6%
   26     732.1     3.047    0.4%
   27     770.5     16.24    2.1%
   28     795.9     10.04    1.2%
   29     834.5     14.58    1.7%
   30     860.4     11.76    1.3%
   31     888.6     9.445    1.0%
   32     914.2     15.16    1.6%
   33     938.4     1.056    0.1%
   34     979.2     11.87    1.2%
   35      1011     10.84    1.0%
   36      1044      11.5    1.1%
   37      1069     13.81    1.2%
   38      1092     12.61    1.1%
   39      1126     3.973    0.3%
   40      1160     10.58    0.9%
   41      1188     2.771    0.2%
   42      1247     14.54    1.1%
   43      1252     8.389    0.6%
   44      1285     13.32    1.0%
   45      1333     8.527    0.6%
   46      1362     11.89    0.8%
   47      1401     14.67    1.0%
   48      1418     4.448    0.3%
   49      1457     12.19    0.8%
   50      1482     7.579    0.5%
   51      1528     7.471    0.4%
   52      1587     15.66    0.9%
   53      1609     13.83    0.8%
   54      1640     6.692    0.4%
   55      1667     5.002    0.2%
   56      1695     9.356    0.5%
   57      1750     15.83    0.9%
   58      1783      13.9    0.7%
   59      1829     7.698    0.4%
   60      1872     12.95    0.6%
   61      1906     12.68    0.6%
   62      1941     12.98    0.6%
   63      1953     12.97    0.6%
   64      1995      14.5    0.7%
   65      2045     17.27    0.8%
   66      2069     16.57    0.8%
   67      2108     17.28    0.8%
   68      2198     9.139    0.4%
   69      2183     11.28    0.5%
   70      2215     9.328    0.4%
   71      2242      10.4    0.4%
   72      2285     12.57    0.5%
   73      2336     7.801    0.3%
   74      2328     12.05    0.5%
   75      2398     10.45    0.4%
   76      2419     12.65    0.5%
   77      2456     13.59    0.5%
   78      2506     11.66    0.4%
   79      2549     7.616    0.2%
   80      2580     8.708    0.3%
   81      2629     12.92    0.4%
   82      2663     6.914    0.2%
   83      2719     12.75    0.4%
   84      2756     6.967    0.2%
   85      2797     9.031    0.3%
   86      2841     10.81    0.3%
   87      2874     9.438    0.3%
   88      2934     7.487    0.2%
   89      2961     16.37    0.5%
   90      3019      19.7    0.6%
   91      3079     16.14    0.5%
   92      3148     9.051    0.2%
   93      3124     18.87    0.6%
   94      3177     12.12    0.3%
   95      3244     14.37    0.4%
   96      3287     9.805    0.2%
   97      3287     11.13    0.3%
   98      3365     18.57    0.5%
   99      3397     17.25    0.5%
  100      3397     21.75    0.6%

Quality and confidence:
param     error
e         0.076

Model:
Time ~=        0
    + e    34.25
              µs

Reads = 2 + (0 * e)
Writes = 4 + (7 * e)

Pallet: ""pallet_staking"", Extrinsic: ""reap_stash"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)
Storage: Staking Bonded (r:1 w:1)
Storage: Staking SlashingSpans (r:1 w:1)
Storage: Staking Validators (r:1 w:1)
Storage: Staking CounterForValidators (r:1 w:1)
Storage: Staking Nominators (r:1 w:0)
Storage: Balances Locks (r:1 w:1)
Storage: Staking Ledger (r:0 w:1)
Storage: Staking Payee (r:0 w:1)
Storage: Staking SpanSlash (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    70.84
    + s    2.363
              µs

Reads = 7 + (0 * s)
Writes = 8 + (1 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    1     71.74     0.176    0.2%
    2     74.46     0.142    0.1%
    3     76.59     0.154    0.2%
    4     81.83     0.151    0.1%
    5     82.52     0.174    0.2%
    6     84.59     0.146    0.1%
    7     86.91     0.172    0.1%
    8     89.09     0.146    0.1%
    9     92.02     0.138    0.1%
   10     94.23     0.213    0.2%
   11     96.63     0.309    0.3%
   12     99.44     0.202    0.2%
   13     101.5     0.285    0.2%
   14       104     0.223    0.2%
   15     106.4     0.288    0.2%
   16     108.4     0.208    0.1%
   17       111     0.195    0.1%
   18     113.5     0.299    0.2%
   19     115.7     0.321    0.2%
   20     118.2     0.242    0.2%
   21     120.4     0.355    0.2%
   22     122.2     0.229    0.1%
   23     124.6     0.316    0.2%
   24     127.7      0.28    0.2%
   25     130.2     0.324    0.2%
   26     132.3     0.228    0.1%
   27     134.4     0.657    0.4%
   28     137.2     0.344    0.2%
   29     139.1     0.285    0.2%
   30     141.9     0.412    0.2%
   31     144.5     0.324    0.2%
   32     146.7     0.319    0.2%
   33     149.1     0.323    0.2%
   34     151.7     0.278    0.1%
   35     153.9     0.386    0.2%
   36       156     0.339    0.2%
   37     158.6     0.253    0.1%
   38     160.7     0.225    0.1%
   39     163.4     0.324    0.1%
   40     166.2     0.264    0.1%
   41     168.7     0.488    0.2%
   42     170.8     0.252    0.1%
   43       173      0.43    0.2%
   44       175     0.457    0.2%
   45     177.5     0.263    0.1%
   46       180     0.984    0.5%
   47     181.9     0.288    0.1%
   48     185.3     0.486    0.2%
   49       187     0.556    0.2%
   50     188.2     0.456    0.2%
   51     190.4     0.489    0.2%
   52     194.5     1.656    0.8%
   53     195.5     0.419    0.2%
   54     197.8     0.387    0.1%
   55     201.1     0.266    0.1%
   56     202.6     0.435    0.2%
   57     205.4     0.627    0.3%
   58     209.5     1.731    0.8%
   59     210.3     0.336    0.1%
   60     211.3     0.389    0.1%
   61       215     0.479    0.2%
   62     218.8     1.303    0.5%
   63     220.2     0.281    0.1%
   64     222.6     1.226    0.5%
   65     224.7      0.28    0.1%
   66     226.8     0.638    0.2%
   67     228.5     0.964    0.4%
   68     231.5     0.505    0.2%
   69     234.3     0.483    0.2%
   70     236.1     0.573    0.2%
   71     238.8     0.576    0.2%
   72     240.4     0.913    0.3%
   73     242.9     0.844    0.3%
   74     245.8     1.022    0.4%
   75     247.7     0.166    0.0%
   76     249.5     0.848    0.3%
   77     255.2     3.703    1.4%
   78       255     0.616    0.2%
   79       258     0.882    0.3%
   80     259.7     0.817    0.3%
   81     262.3     2.117    0.8%
   82     265.7     1.084    0.4%
   83     267.3     0.686    0.2%
   84     268.7     0.678    0.2%
   85     270.7     0.559    0.2%
   86     273.2     0.834    0.3%
   87     278.2     5.405    1.9%
   88     277.9     0.689    0.2%
   89     280.3     0.579    0.2%
   90     282.7     2.345    0.8%
   91     284.6     0.611    0.2%
   92     291.5     2.281    0.7%
   93     290.4     0.627    0.2%
   94       293     0.835    0.2%
   95     293.4     0.604    0.2%
   96     298.1     0.809    0.2%
   97     299.4     0.602    0.2%
   98     303.5     0.852    0.2%
   99     304.8     0.855    0.2%
  100     307.9      0.51    0.1%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    70.79
    + s    2.366
              µs

Reads = 7 + (0 * s)
Writes = 8 + (1 * s)

Pallet: ""pallet_staking"", Extrinsic: ""new_era"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking CounterForNominators (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:0)
Storage: Staking Validators (r:2 w:0)
Storage: Staking Bonded (r:101 w:0)
Storage: Staking Ledger (r:101 w:0)
Storage: Staking SlashingSpans (r:1 w:0)
Storage: Staking Nominators (r:101 w:0)
Storage: Staking ValidatorCount (r:1 w:0)
Storage: Staking MinimumValidatorCount (r:1 w:0)
Storage: Staking CurrentEra (r:1 w:1)
Storage: Staking HistoryDepth (r:1 w:0)
Storage: Staking ErasStakersClipped (r:0 w:1)
Storage: Staking ErasValidatorPrefs (r:0 w:1)
Storage: Staking ErasStakers (r:0 w:1)
Storage: Staking ErasTotalStake (r:0 w:1)
Storage: Staking ErasStartSessionIndex (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    277.2
    + n    46.26
              µs

Reads = 9 + (3 * v) + (3 * n)
Writes = 3 + (3 * v) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v     n   mean µs  sigma µs       %
    1   100      2633     11.44    0.4%
    2   100      2911     17.53    0.6%
    3   100      3073     20.24    0.6%
    4   100      3299     14.68    0.4%
    5   100      3597     18.46    0.5%
    6   100      3871      13.8    0.3%
    7   100      4163     29.14    0.6%
    8   100      4386     15.43    0.3%
    9   100      4801     14.41    0.3%
   10     1     584.6     1.563    0.2%
   10     2     637.6     2.988    0.4%
   10     3     687.6     0.457    0.0%
   10     4     735.9     2.663    0.3%
   10     5     780.3     1.255    0.1%
   10     6     820.5     1.902    0.2%
   10     7     873.3     1.464    0.1%
   10     8     918.9     1.135    0.1%
   10     9     966.3     12.45    1.2%
   10    10      1017     3.215    0.3%
   10    11      1060     3.943    0.3%
   10    12      1088     13.43    1.2%
   10    13      1163     2.869    0.2%
   10    14      1214     2.421    0.1%
   10    15      1262     2.058    0.1%
   10    16      1300     3.822    0.2%
   10    17      1346     2.763    0.2%
   10    18      1372      13.2    0.9%
   10    19      1410     13.37    0.9%
   10    20      1461     12.42    0.8%
   10    21      1505     6.088    0.4%
   10    22      1554     7.117    0.4%
   10    23      1618     6.695    0.4%
   10    24      1646      12.3    0.7%
   10    25      1696     9.348    0.5%
   10    26      1754     6.596    0.3%
   10    27      1781     10.27    0.5%
   10    28      1821     7.379    0.4%
   10    29      1888      11.8    0.6%
   10    30      1920     10.23    0.5%
   10    31      1963     8.185    0.4%
   10    32      2032     8.717    0.4%
   10    33      2103      8.26    0.3%
   10    34      2130     7.101    0.3%
   10    35      2166     11.07    0.5%
   10    36      2210     6.266    0.2%
   10    37      2269     13.32    0.5%
   10    38      2296     8.222    0.3%
   10    39      2352     8.283    0.3%
   10    40      2438     16.06    0.6%
   10    41      2472     22.09    0.8%
   10    42      2513     6.884    0.2%
   10    43      2569     7.127    0.2%
   10    44      2621     23.29    0.8%
   10    45      2658     11.93    0.4%
   10    46      2717     16.95    0.6%
   10    47      2724     9.943    0.3%
   10    48      2824      12.5    0.4%
   10    49      2807     18.57    0.6%
   10    50      2883      10.4    0.3%
   10    51      2938     15.98    0.5%
   10    52      2953     8.568    0.2%
   10    53      3064      10.5    0.3%
   10    54      3017     14.93    0.4%
   10    55      3127     7.483    0.2%
   10    56      3158     11.99    0.3%
   10    57      3202     16.89    0.5%
   10    58      3252     15.13    0.4%
   10    59      3308     17.16    0.5%
   10    60      3385      9.29    0.2%
   10    61      3411     12.92    0.3%
   10    62      3460     13.02    0.3%
   10    63      3501     16.64    0.4%
   10    64      3562     14.64    0.4%
   10    65      3593     15.49    0.4%
   10    66      3623     18.35    0.5%
   10    67      3665     13.04    0.3%
   10    68      3725     19.21    0.5%
   10    69      3708      9.19    0.2%
   10    70      3803     14.46    0.3%
   10    71      3823     13.35    0.3%
   10    72      3879     25.43    0.6%
   10    73      3931     16.31    0.4%
   10    74      3951     10.63    0.2%
   10    75      4020     13.19    0.3%
   10    76      4087     19.38    0.4%
   10    77      4137     7.693    0.1%
   10    78      4160     13.83    0.3%
   10    79      4209     12.71    0.3%
   10    80      4248     11.64    0.2%
   10    81      4325     17.97    0.4%
   10    82      4358     19.28    0.4%
   10    83      4416     15.67    0.3%
   10    84      4391     13.39    0.3%
   10    85      4467     17.65    0.3%
   10    86      4466     13.55    0.3%
   10    87      4588     11.64    0.2%
   10    88      4599     17.48    0.3%
   10    89      4646      20.3    0.4%
   10    90      4705      18.2    0.3%
   10    91      4713     19.06    0.4%
   10    92      4831     11.04    0.2%
   10    93      4801     14.75    0.3%
   10    94      4847     12.09    0.2%
   10    95      4914     18.92    0.3%
   10    96      4993      9.26    0.1%
   10    97      5037        11    0.2%
   10    98      5046     25.28    0.5%
   10    99      5138     12.99    0.2%
   10   100      5118     18.25    0.3%

Quality and confidence:
param     error
v         0.887
n         0.044

Model:
Time ~=        0
    + v    295.7
    + n    45.92
              µs

Reads = 9 + (3 * v) + (3 * n)
Writes = 3 + (3 * v) + (0 * n)

Pallet: ""pallet_staking"", Extrinsic: ""get_npos_voters"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Validators (r:501 w:0)
Storage: Staking Bonded (r:1500 w:0)
Storage: Staking Ledger (r:1500 w:0)
Storage: Staking SlashingSpans (r:21 w:0)
Storage: Staking Nominators (r:1001 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + v    24.62
    + n    26.44
    + s    4.514
              µs

Reads = 3 + (3 * v) + (3 * n) + (1 * s)
Writes = 0 + (0 * v) + (0 * n) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v     n     s   mean µs  sigma µs       %
  500  1000    20     37620     118.5    0.3%
  510  1000    20     37780     116.2    0.3%
  520  1000    20     37990     120.4    0.3%
  530  1000    20     37820     87.82    0.2%
  540  1000    20     38810       214    0.5%
  550  1000    20     39420     154.6    0.3%
  560  1000    20     39300     238.6    0.6%
  570  1000    20     39520     123.8    0.3%
  580  1000    20     39760     116.3    0.2%
  590  1000    20     39340       137    0.3%
  600  1000    20     40770       157    0.3%
  610  1000    20     40930     132.3    0.3%
  620  1000    20     41210     123.3    0.2%
  630  1000    20     41280     147.5    0.3%
  640  1000    20     40930     138.4    0.3%
  650  1000    20     41840     209.6    0.5%
  660  1000    20     42330     168.1    0.3%
  670  1000    20     42290       202    0.4%
  680  1000    20     42230     162.9    0.3%
  690  1000    20     42730     204.8    0.4%
  700  1000    20     43150     117.6    0.2%
  710  1000    20     42960     255.3    0.5%
  720  1000    20     43170     245.9    0.5%
  730  1000    20     43950       114    0.2%
  740  1000    20     44140     312.3    0.7%
  750  1000    20     44140     200.5    0.4%
  760  1000    20     44490     247.2    0.5%
  770  1000    20     43890     163.1    0.3%
  780  1000    20     44580     241.3    0.5%
  790  1000    20     44890     238.1    0.5%
  800  1000    20     45200     289.9    0.6%
  810  1000    20     46120     163.2    0.3%
  820  1000    20     45290       167    0.3%
  830  1000    20     45630     175.6    0.3%
  840  1000    20     46490     292.9    0.6%
  850  1000    20     46960     252.1    0.5%
  860  1000    20     47290     179.2    0.3%
  870  1000    20     47000       114    0.2%
  880  1000    20     47770       243    0.5%
  890  1000    20     47050     316.9    0.6%
  900  1000    20     47420     218.8    0.4%
  910  1000    20     48150       275    0.5%
  920  1000    20     47950     227.7    0.4%
  930  1000    20     48610     146.6    0.3%
  940  1000    20     49040     281.9    0.5%
  950  1000    20     48980     305.2    0.6%
  960  1000    20     48940     165.1    0.3%
  970  1000    20     49320     132.9    0.2%
  980  1000    20     49380     238.3    0.4%
  990  1000    20     49850     154.9    0.3%
 1000   500    20     36290     126.7    0.3%
 1000   510    20     36610     158.4    0.4%
 1000   520    20     37420     176.5    0.4%
 1000   530    20     37550     186.5    0.4%
 1000   540    20     37680     172.9    0.4%
 1000   550    20     38680     121.2    0.3%
 1000   560    20     38170     215.4    0.5%
 1000   570    20     38780     117.1    0.3%
 1000   580    20     39090     97.99    0.2%
 1000   590    20     39180     253.5    0.6%
 1000   600    20     40040     133.7    0.3%
 1000   610    20     40460     107.7    0.2%
 1000   620    20     40820     134.1    0.3%
 1000   630    20     40800     148.2    0.3%
 1000   640    20     40780     225.3    0.5%
 1000   650    20     40770     140.6    0.3%
 1000   660    20     41520     169.9    0.4%
 1000   670    20     41460     95.94    0.2%
 1000   680    20     41660     141.4    0.3%
 1000   690    20     41520       170    0.4%
 1000   700    20     42710     213.2    0.4%
 1000   710    20     42460     205.2    0.4%
 1000   720    20     42680     394.9    0.9%
 1000   730    20     42590     99.24    0.2%
 1000   740    20     43850     166.8    0.3%
 1000   750    20     43210     207.6    0.4%
 1000   760    20     43450     170.4    0.3%
 1000   770    20     43520     290.6    0.6%
 1000   780    20     44210     169.1    0.3%
 1000   790    20     44950       107    0.2%
 1000   800    20     44330     182.3    0.4%
 1000   810    20     46030     194.3    0.4%
 1000   820    20     45230     133.1    0.2%
 1000   830    20     45970     178.8    0.3%
 1000   840    20     46100     171.8    0.3%
 1000   850    20     46390     192.3    0.4%
 1000   860    20     46290       198    0.4%
 1000   870    20     47270       157    0.3%
 1000   880    20     46960     120.1    0.2%
 1000   890    20     46650     125.4    0.2%
 1000   900    20     48160     270.6    0.5%
 1000   910    20     48400     123.3    0.2%
 1000   920    20     47820     288.9    0.6%
 1000   930    20     48330       379    0.7%
 1000   940    20     48640     274.8    0.5%
 1000   950    20     48110     132.7    0.2%
 1000   960    20     49480     106.9    0.2%
 1000   970    20     49530     275.5    0.5%
 1000   980    20     49450     237.1    0.4%
 1000   990    20     49750     193.4    0.3%
 1000  1000     1     49300     487.7    0.9%
 1000  1000     2     49680       365    0.7%
 1000  1000     3     49080     293.6    0.5%
 1000  1000     4     50510     282.3    0.5%
 1000  1000     5     50230     179.6    0.3%
 1000  1000     6     49540     302.4    0.6%
 1000  1000     7     50350     224.1    0.4%
 1000  1000     8     49860     95.84    0.1%
 1000  1000     9     50510     161.4    0.3%
 1000  1000    10     49310     117.7    0.2%
 1000  1000    11     49190     276.6    0.5%
 1000  1000    12     49830     180.5    0.3%
 1000  1000    13     50580     266.2    0.5%
 1000  1000    14     50050       202    0.4%
 1000  1000    15     49530     222.9    0.4%
 1000  1000    16     50040     268.9    0.5%
 1000  1000    17     50330     262.7    0.5%
 1000  1000    18     49220     107.5    0.2%
 1000  1000    19     49650     307.8    0.6%
 1000  1000    20     49890     245.8    0.4%

Quality and confidence:
param     error
v           0.1
n           0.1
s         3.429

Model:
Time ~=        0
    + v    24.55
    + n    26.41
    + s    26.23
              µs

Reads = 3 + (3 * v) + (3 * n) + (1 * s)
Writes = 0 + (0 * v) + (0 * n) + (0 * s)

Pallet: ""pallet_staking"", Extrinsic: ""get_npos_targets"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Validators (r:501 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.68
    + v    10.36
              µs

Reads = 1 + (1 * v)
Writes = 0 + (0 * v)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    v   mean µs  sigma µs       %
  500      5187     14.97    0.2%
  510      5225     31.52    0.6%
  520      5461     38.54    0.7%
  530      5585     49.73    0.8%
  540      5597     40.14    0.7%
  550      5804     30.24    0.5%
  560      5912     21.72    0.3%
  570      5891      39.2    0.6%
  580      6032     27.13    0.4%
  590      6176     36.71    0.5%
  600      6332      24.8    0.3%
  610      6401     38.76    0.6%
  620      6529      41.6    0.6%
  630      6453     42.51    0.6%
  640      6586     56.08    0.8%
  650      6945     38.96    0.5%
  660      6995     21.31    0.3%
  670      7093     30.83    0.4%
  680      7281     29.08    0.3%
  690      7303     33.45    0.4%
  700      7331     45.02    0.6%
  710      7511     48.61    0.6%
  720      7466     67.16    0.8%
  730      7875     62.62    0.7%
  740      7756     54.03    0.6%
  750      7741      41.7    0.5%
  760      8060     50.85    0.6%
  770      7980     40.25    0.5%
  780      7959     39.96    0.5%
  790      8090     45.55    0.5%
  800      8336     69.78    0.8%
  810      8386     70.85    0.8%
  820      8628     64.03    0.7%
  830      8552     55.41    0.6%
  840      8667     48.93    0.5%
  850      8802      46.7    0.5%
  860      8907      59.4    0.6%
  870      8996     52.07    0.5%
  880      8965     48.69    0.5%
  890      9189     59.45    0.6%
  900      9221     63.21    0.6%
  910      9357     33.63    0.3%
  920      9499     76.29    0.8%
  930      9869     48.78    0.4%
  940     10030     50.65    0.5%
  950      9855     53.15    0.5%
  960     10160     99.88    0.9%
  970     10240     57.85    0.5%
  980     10390     92.07    0.8%
  990     10400     57.38    0.5%
 1000     10390     109.5    1.0%

Quality and confidence:
param     error
v         0.037

Model:
Time ~=    41.72
    + v    10.38
              µs

Reads = 1 + (1 * v)
Writes = 0 + (0 * v)

Pallet: ""pallet_staking"", Extrinsic: ""set_staking_limits"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking MinValidatorBond (r:0 w:1)
Storage: Staking MaxValidatorsCount (r:0 w:1)
Storage: Staking ChillThreshold (r:0 w:1)
Storage: Staking MaxNominatorsCount (r:0 w:1)
Storage: Staking MinNominatorBond (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.367
              µs

Reads = 0
Writes = 5

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    6.367
              µs

Reads = 0
Writes = 5

Pallet: ""pallet_staking"", Extrinsic: ""chill_other"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Staking Ledger (r:1 w:0)
Storage: Staking ChillThreshold (r:1 w:0)
Storage: Staking Nominators (r:1 w:0)
Storage: Staking Validators (r:1 w:1)
Storage: Staking MaxValidatorsCount (r:1 w:0)
Storage: Staking CounterForValidators (r:1 w:1)
Storage: Staking MinValidatorBond (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     56.6
              µs

Reads = 7
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     56.6
              µs

Reads = 7
Writes = 2


```

</details>",9675,2021-09-05T04:16:00Z,0
1855,joao-paulo-parity,/benchmark runtime pallet pallet_balances,9675,2021-09-16T21:56:35Z,0
1856,parity-benchapp[bot],ERROR: Failed to query the currently active Rust toolchain,9675,2021-09-16T22:04:04Z,0
1857,parity-benchapp[bot],ERROR: Failed to query the currently active Rust toolchain,9675,2021-09-16T23:06:02Z,0
1858,parity-benchapp[bot],ERROR: Failed to query the currently active Rust toolchain,9675,2021-09-17T01:45:54Z,0
1859,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```

```

</details>",9675,2021-09-17T01:47:46Z,0
1860,parity-benchapp[bot],"Starting benchmark for branch: shawntabrizi-test-bench (vs master)

Toolchain: 
stable-x86_64-unknown-linux-gnu (default)
rustc 1.54.0 (a178d0322 2021-07-26)

 Comment will be updated.",9675,2021-09-17T03:48:38Z,0
1861,joao-paulo-parity,/benchmark runtime pallet pallet_balances,9675,2021-09-17T03:50:29Z,0
1862,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.68
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.68
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     55.2
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     55.2
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.05
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.05
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    36.11
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    36.11
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.93
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.93
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    67.49
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    67.49
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_unreserve"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.02
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.02
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-17T03:50:31Z,0
1863,joao-paulo-parity,/benchmark runtime pallet pallet_balances,9675,2021-09-17T03:50:45Z,0
1864,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     71.8
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     71.8
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.69
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.69
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     29.6
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     29.6
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.88
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.88
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.77
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.77
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    67.31
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    67.31
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_unreserve"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.57
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.57
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-17T03:50:47Z,0
1865,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     72.4
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     72.4
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.09
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.09
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.38
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.38
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    36.42
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    36.42
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.33
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.33
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     67.9
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     67.9
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_unreserve"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.62
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.62
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-17T04:01:09Z,0
1866,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.69
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    72.69
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.05
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.05
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.18
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.18
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    36.29
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    36.29
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.89
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    73.89
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.56
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.56
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_unreserve"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.76
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    28.76
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-09-17T04:01:16Z,0
1867,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9675,2021-10-17T05:14:40Z,0
1868,shawntabrizi,/benchmark runtime pallet pallet_balances,9675,2021-11-11T11:35:14Z,0
1869,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error: failed to parse manifest at `/home/benchbot/bench-bot/git/substrate/bin/node/cli/Cargo.toml`

Caused by:
  feature `edition2021` is required

  this Cargo does not support nightly features, but if you
  switch to nightly channel you can add
  `cargo-features = [""edition2021""]` to enable this feature

```

</details>

ERROR: Unable to commit file ./frame/balances/src/weights.rs",9675,2021-11-11T11:35:15Z,0
1870,shawntabrizi,/benchmark runtime pallet pallet_balances,9675,2021-11-11T12:03:24Z,0
1871,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    57.93
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    57.93
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.13
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.13
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.77
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.77
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.38
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.38
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     58.7
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     58.7
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.71
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    53.71
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_unreserve"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    23.91
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    23.91
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-11-11T12:03:25Z,0
1872,shawntabrizi,/benchmark runtime pallet pallet_balances,9675,2021-11-15T19:30:52Z,0
1873,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
error: failed to run custom build command for `node-runtime v3.0.0-dev (/home/benchbot/bench-bot/git/substrate/bin/node/runtime)`

Caused by:
  process didn't exit successfully: `/home/benchbot/bench-bot/git/substrate/target/release/build/node-runtime-947357eea249ff23/build-script-build` (exit status: 1)
  --- stdout
  [1;33mInformation that should be included in a bug report.[0m
  [1;33mExecuting build command:[0m ""rustup"" ""run"" ""nightly"" ""cargo"" ""rustc"" ""--target=wasm32-unknown-unknown"" ""--manifest-path=/home/benchbot/bench-bot/git/substrate/target/release/wbuild/node-runtime/Cargo.toml"" ""--color=always"" ""--release""
  [1;33mUsing rustc version:[0m rustc 1.58.0-nightly (82af160c2 2021-11-10)


  --- stderr
  [0m[1m[33mwarning[0m[0m[1m: unused import: `alloc::string::ToString`[0m
  [0m  [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/contracts/proc-macro/src/lib.rs:24:5[0m
  [0m   [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m24[0m[0m [0m[0m[1m[38;5;12m| [0m[0muse alloc::string::ToString;[0m
  [0m   [0m[0m[1m[38;5;12m| [0m[0m    [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^[0m
  [0m   [0m[0m[1m[38;5;12m|[0m
  [0m   [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_imports)]` on by default[0m

  [0m[1m[33mwarning[0m[0m[1m: unused imports: `DataStruct`, `Fields`[0m
  [0m  [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/contracts/proc-macro/src/lib.rs:27:54[0m
  [0m   [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m27[0m[0m [0m[0m[1m[38;5;12m| [0m[0muse syn::{parse_macro_input, spanned::Spanned, Data, DataStruct, DeriveInput, Fields, Ident};[0m
  [0m   [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^[0m[0m               [0m[0m[1m[33m^^^^^^[0m

  [0m[1m[33mwarning[0m[0m[1m: unused import: `spanned::Spanned`[0m
  [0m  [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/contracts/proc-macro/src/lib.rs:27:30[0m
  [0m   [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m27[0m[0m [0m[0m[1m[38;5;12m| [0m[0muse syn::{parse_macro_input, spanned::Spanned, Data, DataStruct, DeriveInput, Fields, Ident};[0m
  [0m   [0m[0m[1m[38;5;12m| [0m[0m                             [0m[0m[1m[33m^^^^^^^^^^^^^^^^[0m

  [0m[0m[1m[33mwarning[0m[1m:[0m `pallet-contracts-proc-macro` (lib) generated 3 warnings
  [0m[0m[1m[32m   Compiling[0m sp-sandbox v0.10.0-dev (/home/benchbot/bench-bot/git/substrate/primitives/sandbox)
  [0m[0m[1m[32m   Compiling[0m pallet-balances v4.0.0-dev (/home/benchbot/bench-bot/git/substrate/frame/balances)
  [0m[1m[38;5;9merror[E0599][0m[0m[1m: no function or associated item named `force_unreserve` found for associated type `<T as pallet::Config<I>>::WeightInfo` in the current scope[0m
  [0m   [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/balances/src/lib.rs:441:35[0m
  [0m    [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m441[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        #[pallet::weight(T::WeightInfo::force_unreserve())][0m
  [0m    [0m[0m[1m[38;5;12m| [0m[0m                                        [0m[0m[1m[38;5;9m^^^^^^^^^^^^^^^[0m[0m [0m[0m[1m[38;5;9mfunction or associated item not found in `<T as pallet::Config<I>>::WeightInfo`[0m

  [0m[1m[38;5;9merror[E0308][0m[0m[1m: mismatched types[0m
  [0m   [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/balances/src/lib.rs:248:12[0m
  [0m    [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m248[0m[0m [0m[0m[1m[38;5;12m| [0m[0m    #[pallet::call][0m
  [0m    [0m[0m[1m[38;5;12m| [0m[0m              [0m[0m[1m[38;5;9m^^^^[0m[0m [0m[0m[1m[38;5;9mexpected trait `ClassifyDispatch`, found trait `WeighData`[0m
  [0m    [0m[0m[1m[38;5;12m|[0m
  [0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: expected reference `[0m[0m[1m&dyn ClassifyDispatch<(&<<T as frame_system::Config>::Lookup as sp_runtime::traits::StaticLookup>::Source, &<T as pallet::Config<I>>::Balance)>[0m[0m`[0m
  [0m               found reference `[0m[0m[1m&dyn WeighData<(&<<T as frame_system::Config>::Lookup as sp_runtime::traits::StaticLookup>::Source, &<T as pallet::Config<I>>::Balance)>[0m[0m`[0m

  [0m[1m[38;5;9merror[E0308][0m[0m[1m: mismatched types[0m
  [0m   [0m[0m[1m[38;5;12m--> [0m[0m/home/benchbot/bench-bot/git/substrate/frame/balances/src/lib.rs:248:12[0m
  [0m    [0m[0m[1m[38;5;12m|[0m
  [0m[1m[38;5;12m248[0m[0m [0m[0m[1m[38;5;12m| [0m[0m    #[pallet::call][0m
  [0m    [0m[0m[1m[38;5;12m| [0m[0m              [0m[0m[1m[38;5;9m^^^^[0m[0m [0m[0m[1m[38;5;9mexpected trait `PaysFee`, found trait `WeighData`[0m
  [0m    [0m[0m[1m[38;5;12m|[0m
  [0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: expected reference `[0m[0m[1m&dyn PaysFee<(&<<T as frame_system::Config>::Lookup as sp_runtime::traits::StaticLookup>::Source, &<T as pallet::Config<I>>::Balance)>[0m[0m`[0m
  [0m               found reference `[0m[0m[1m&dyn WeighData<(&<<T as frame_system::Config>::Lookup as sp_runtime::traits::StaticLookup>::Source, &<T as pallet::Config<I>>::Balance)>[0m[0m`[0m

  [0m[1mSome errors have detailed explanations: E0308, E0599.[0m
  [0m[1mFor more information about an error, try `rustc --explain E0308`.[0m
  [0m[0m[1m[31merror[0m[1m:[0m could not compile `pallet-balances` due to 3 previous errors
error: build failed

```

</details>

ERROR: Unable to commit file ./frame/balances/src/weights.rs",9675,2021-11-15T19:30:54Z,0
1874,shawntabrizi,/benchmark runtime pallet pallet_balances,9675,2021-11-15T19:34:15Z,0
1875,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    58.61
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    58.61
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.58
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    45.58
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     25.6
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=     25.6
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.62
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    30.62
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    59.92
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    59.92
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.53
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.53
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_unreserve"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.33
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.33
              µs

Reads = 1
Writes = 1


```

</details>",9675,2021-11-15T19:34:16Z,0
1876,ggwpez,bot rebase,9675,2022-01-24T12:43:57Z,0
1877,paritytech-processbot[bot],Rebasing,9675,2022-01-24T12:43:59Z,0
1878,ggwpez,"
/benchmark runtime pallet pallet_balances",9675,2022-01-24T12:50:07Z,0
1879,shawntabrizi,/benchmark runtime pallet pallet_balances,9675,2022-01-24T13:29:43Z,0
1880,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""shawntabrizi-test-bench"" with command cargo run --quiet --profile=production  --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_balances --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/balances/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_balances"", Extrinsic: ""transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.06
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.06
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""transfer_keep_alive"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.54
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27.54
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_creating"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17.38
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    17.38
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""set_balance_killing"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.15
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    20.15
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.13
              µs

Reads = 2
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.13
              µs

Reads = 2
Writes = 2

Pallet: ""pallet_balances"", Extrinsic: ""transfer_all"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.27
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    32.27
              µs

Reads = 1
Writes = 1

Pallet: ""pallet_balances"", Extrinsic: ""force_unreserve"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    15.34
              µs

Reads = 1
Writes = 1

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    15.34
              µs

Reads = 1
Writes = 1


```

</details>",9675,2022-01-24T13:29:45Z,0
1881,athei,/benchmark runtime pallet pallet_contracts,10691,2022-01-18T15:59:24Z,0
1882,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-fix-precharge"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.614
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.614
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.62
    + k    0.835
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     13.52       0.1    0.7%
   20     32.15     0.177    0.5%
   40     48.02     0.111    0.2%
   60     62.62     0.278    0.4%
   80      76.5     0.444    0.5%
  100     93.16     0.319    0.3%
  120     108.7     0.381    0.3%
  140     126.7     0.389    0.3%
  160       142     0.145    0.1%
  180     159.7     0.441    0.2%
  200     175.6     0.307    0.1%
  220     193.9     0.335    0.1%
  240       211     0.591    0.2%
  260       235     1.052    0.4%
  280     245.7     0.487    0.1%
  300     263.5     1.214    0.4%
  320     281.9     1.094    0.3%
  340     299.8     1.103    0.3%
  360     316.2     0.602    0.1%
  380     334.6     2.018    0.6%
  400     352.7     1.272    0.3%
  420     367.8     0.911    0.2%
  440     384.9     1.215    0.3%
  460     401.2     1.378    0.3%
  480     418.5     1.247    0.2%
  500     434.2     0.704    0.1%
  520     453.3     1.299    0.2%
  540     475.3     5.766    1.2%
  560     484.9     3.046    0.6%
  580     498.6     1.485    0.2%
  600     517.6     1.102    0.2%
  620     533.3     3.003    0.5%
  640     547.8     1.456    0.2%
  660     562.6     1.648    0.2%
  680     588.4     9.522    1.6%
  700     597.6     2.712    0.4%
  720     623.6     9.594    1.5%
  740     642.2      11.5    1.7%
  760     651.2      8.88    1.3%
  780     662.1      1.67    0.2%
  800     680.2     2.882    0.4%
  820     695.2     2.416    0.3%
  840     712.6     3.058    0.4%
  860     746.6     9.006    1.2%
  880     763.9     11.35    1.4%
  900     760.5     2.939    0.3%
  920     772.9     1.186    0.1%
  940     788.9     2.949    0.3%
  960     803.1     4.337    0.5%
  980       826     5.488    0.6%
 1000       841      5.38    0.6%
 1020     859.3     3.144    0.3%

Quality and confidence:
param     error
k         0.001

Model:
Time ~=    14.02
    + k    0.835
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.84
    + q    0.153
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0      2.57     0.019    0.7%
   20     21.63     0.073    0.3%
   40     28.14     0.109    0.3%
   60      33.5     0.118    0.3%
   80     39.21     0.189    0.4%
  100     44.36     0.152    0.3%
  120     49.29     0.264    0.5%
  140     56.07     0.696    1.2%
  160     60.02     0.292    0.4%
  180     65.41     0.287    0.4%
  200     70.76     0.506    0.7%
  220     75.55     0.183    0.2%
  240     81.43     0.344    0.4%
  260     86.22     0.185    0.2%
  280     91.73     0.244    0.2%
  300     87.76      0.38    0.4%
  320      91.7     0.485    0.5%
  340     96.96     0.717    0.7%
  360       102     0.478    0.4%
  380     106.6      0.52    0.4%
  400       113     0.744    0.6%
  420     117.1     0.415    0.3%
  440     123.6     0.686    0.5%
  460     90.83     0.284    0.3%
  480     94.41     0.547    0.5%
  500     96.97     0.214    0.2%
  520     99.94     0.361    0.3%
  540     103.5     0.392    0.3%
  560       108     1.272    1.1%
  580     110.3     0.636    0.5%
  600     114.3      0.75    0.6%
  620     117.1     0.657    0.5%
  640     120.9     0.925    0.7%
  660     124.5     0.794    0.6%
  680     127.2     0.662    0.5%
  700     128.8     0.614    0.4%
  720     133.3     0.551    0.4%
  740     137.2      0.66    0.4%
  760     142.2     0.938    0.6%
  780     145.8     1.394    0.9%
  800     146.6     0.442    0.3%
  820     150.9     0.391    0.2%
  840     154.2     0.654    0.4%
  860     157.3     0.621    0.3%
  880     160.2     0.603    0.3%
  900     163.9     0.883    0.5%
  920     166.7     0.343    0.2%
  940     171.2     1.612    0.9%
  960     173.7     0.586    0.3%
  980     176.5     0.772    0.4%
 1000     179.2     0.723    0.4%
 1020     181.9     0.484    0.2%

Quality and confidence:
param     error
q         0.001

Model:
Time ~=    35.21
    + q    0.143
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    34.07
    + c    69.63
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     33.99     0.152    0.4%
    2     175.1     0.288    0.1%
    4     320.4     10.45    3.2%
    6     445.3     0.307    0.0%
    8       585     0.546    0.0%
   10     722.9     0.495    0.0%
   12     870.9     14.26    1.6%
   14      1030     9.317    0.9%
   16      1152      12.5    1.0%
   18      1295     12.49    0.9%
   20      1451     1.689    0.1%
   22      1572     3.274    0.2%
   24      1687     14.73    0.8%
   26      1852     13.96    0.7%
   28      1989     16.01    0.8%
   30      2139     7.207    0.3%
   32      2261     11.94    0.5%
   34      2400     12.67    0.5%
   36      2541     12.18    0.4%
   38      2678     7.808    0.2%
   40      2807     11.57    0.4%
   42      2932     15.43    0.5%
   44      3065      15.9    0.5%
   46      3204        14    0.4%
   48      3341     3.838    0.1%
   50      3541     11.94    0.3%
   52      3685     14.02    0.3%
   54      3800     10.51    0.2%
   56      3937     13.27    0.3%
   58      4062     13.03    0.3%
   60      4210     11.12    0.2%
   62      4336     3.196    0.0%
   64      4455     12.17    0.2%
   66      4638     17.77    0.3%
   68      4770     10.21    0.2%
   70      4901     8.094    0.1%
   72      5055     14.61    0.2%
   74      5176     10.21    0.1%
   76      5319     13.45    0.2%
   78      5460     21.43    0.3%
   80      5556     14.86    0.2%
   82      5714     23.32    0.4%
   84      5835     13.02    0.2%
   86      5976     12.57    0.2%
   88      6117     14.44    0.2%
   90      6246     13.99    0.2%
   92      6379     16.17    0.2%
   94      6526     22.75    0.3%
   96      6655     24.98    0.3%
   98      6914     26.15    0.3%
  100      7055     14.74    0.2%
  102      7183     23.14    0.3%
  104      7337     12.41    0.1%
  106      7449     18.53    0.2%
  108      7583     36.18    0.4%
  110      7731     24.03    0.3%
  112      7861     24.18    0.3%
  114      8003     20.76    0.2%
  116      8124     22.08    0.2%
  118      8243     14.62    0.1%
  120      8393     22.61    0.2%
  122      8533     17.33    0.2%
  124      8672     13.37    0.1%
  126      8854      41.5    0.4%
  128      8962     47.47    0.5%

Quality and confidence:
param     error
c         0.034

Model:
Time ~=    27.31
    + c    69.72
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    241.2
    + c    68.07
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     260.3     0.174    0.0%
    2     396.1     0.324    0.0%
    4     521.3     9.939    1.9%
    6     652.7     7.801    1.1%
    8     784.8      0.62    0.0%
   10     917.8     8.904    0.9%
   12      1045     8.533    0.8%
   14      1195     1.114    0.0%
   16      1342     11.56    0.8%
   18      1460     13.77    0.9%
   20      1580     10.52    0.6%
   22      1717     15.13    0.8%
   24      1845     13.45    0.7%
   26      2033     14.04    0.6%
   28      2174     9.385    0.4%
   30      2296     14.12    0.6%
   32      2425     13.02    0.5%
   34      2565     8.972    0.3%
   36      2686     13.74    0.5%
   38      2810      14.6    0.5%
   40      2933     14.07    0.4%
   42      3067      12.9    0.4%
   44      3199     12.04    0.3%
   46      3323     14.98    0.4%
   48      3447     12.05    0.3%
   50      3662     12.37    0.3%
   52      3800      8.52    0.2%
   54      3923     10.16    0.2%
   56      4113     33.71    0.8%
   58      4186     10.84    0.2%
   60      4319     10.58    0.2%
   62      4447     9.344    0.2%
   64      4665     7.801    0.1%
   66      4730     25.21    0.5%
   68      4851     10.56    0.2%
   70      4977     7.162    0.1%
   72      5111     12.17    0.2%
   74      5238      14.3    0.2%
   76      5366     18.62    0.3%
   78      5488     10.13    0.1%
   80      5628     11.28    0.2%
   82      5745     19.34    0.3%
   84      5887     18.86    0.3%
   86      6004     14.16    0.2%
   88      6143     16.05    0.2%
   90      6263     14.42    0.2%
   92      6398     19.03    0.2%
   94      6538     13.98    0.2%
   96      6669     30.87    0.4%
   98      7024      35.7    0.5%
  100      7160     22.79    0.3%
  102      7273     9.583    0.1%
  104      7409     21.97    0.2%
  106      7518     14.49    0.1%
  108      7654     16.35    0.2%
  110      7796     15.37    0.1%
  112      7922     12.14    0.1%
  114      8038     15.11    0.1%
  116      8181     21.94    0.2%
  118      8307     24.91    0.2%
  120      8421     24.76    0.2%
  122      8558     18.18    0.2%
  124      8707     23.84    0.2%
  126      8800     10.56    0.1%
  128      8937     13.15    0.1%

Quality and confidence:
param     error
c         0.055

Model:
Time ~=    228.4
    + c     68.2
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    293.8
    + c    165.3
    + s    1.824
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2172     14.55    0.6%
    1  1024      2329     17.67    0.7%
    2  1024      2491     21.75    0.8%
    3  1024      2502     13.57    0.5%
    4  1024      2828     16.63    0.5%
    5  1024      3011     8.841    0.2%
    6  1024      3007     13.53    0.4%
    7  1024      3331     9.457    0.2%
    8  1024      3566     2.545    0.0%
    9  1024      3518     7.351    0.2%
   10  1024      3841     12.48    0.3%
   11  1024      4008     14.91    0.3%
   12  1024      3987     18.32    0.4%
   13  1024      4331     13.16    0.3%
   14  1024      4514     23.43    0.5%
   15  1024      4492     23.29    0.5%
   16  1024      4817     12.29    0.2%
   17  1024      5000      11.2    0.2%
   18  1024      5007     15.29    0.3%
   19  1024      5328     14.14    0.2%
   20  1024      5511      13.3    0.2%
   21  1024      5478     15.95    0.2%
   22  1024      5822     18.18    0.3%
   23  1024      5991     25.76    0.4%
   24  1024      5986     23.43    0.3%
   25  1024      6340     21.87    0.3%
   26  1024      6520     30.88    0.4%
   27  1024      6492     16.52    0.2%
   28  1024      6800     25.98    0.3%
   29  1024      6954      25.9    0.3%
   30  1024      6966      20.9    0.3%
   31  1024      7285     27.14    0.3%
   32  1024      7444     16.87    0.2%
   33  1024      7547     55.26    0.7%
   34  1024      7832      16.7    0.2%
   35  1024      7986     22.32    0.2%
   36  1024      7982     18.77    0.2%
   37  1024      8293     19.43    0.2%
   38  1024      8482     7.823    0.0%
   39  1024      8478     16.32    0.1%
   40  1024      8814     52.15    0.5%
   41  1024      8969     43.43    0.4%
   42  1024      8964     47.84    0.5%
   43  1024      9316     35.44    0.3%
   44  1024      9428     24.32    0.2%
   45  1024      9429     26.59    0.2%
   46  1024      9759     33.62    0.3%
   47  1024      9930     34.21    0.3%
   48  1024      9904     38.16    0.3%
   49  1024     10330     20.46    0.1%
   50  1024     10480     26.36    0.2%
   51  1024     10500     18.13    0.1%
   52  1024     10820     19.32    0.1%
   53  1024     10960     39.09    0.3%
   54  1024     10980     38.22    0.3%
   55  1024     11300     32.13    0.2%
   56  1024     11470      30.8    0.2%
   57  1024     11440     15.26    0.1%
   58  1024     11770     27.88    0.2%
   59  1024     11930     28.27    0.2%
   60  1024     11920     18.32    0.1%
   61  1024     12250     37.26    0.3%
   62  1024     12410     24.29    0.1%
   63  1024     12420      30.6    0.2%
   64     0     10850     18.21    0.1%
   64    20     10920      21.5    0.1%
   64    40     10910      9.28    0.0%
   64    60     10970     27.47    0.2%
   64    80     11020     31.05    0.2%
   64   100     11010     14.96    0.1%
   64   120     11060     16.09    0.1%
   64   140     11130     23.89    0.2%
   64   160     11130      15.5    0.1%
   64   180     11170     21.03    0.1%
   64   200     11220        19    0.1%
   64   220     11280     45.93    0.4%
   64   240     11310     22.12    0.1%
   64   260     11310     28.85    0.2%
   64   280     11360     41.02    0.3%
   64   300     11370     28.35    0.2%
   64   320     11430     19.86    0.1%
   64   340     11450     30.34    0.2%
   64   360     11510     24.52    0.2%
   64   380     11520      28.2    0.2%
   64   400     11590     54.41    0.4%
   64   420     11620      34.1    0.2%
   64   440     11640     20.99    0.1%
   64   460     11680      31.5    0.2%
   64   480     11740     56.29    0.4%
   64   500     11760     37.76    0.3%
   64   520     11770     20.42    0.1%
   64   540     11870     51.73    0.4%
   64   560     11880        30    0.2%
   64   580     11920     33.54    0.2%
   64   600     11940     29.56    0.2%
   64   620     11960     22.95    0.1%
   64   640     12000     30.63    0.2%
   64   660     12050     17.47    0.1%
   64   680     12110     51.83    0.4%
   64   700     12100     22.01    0.1%
   64   720     12140     17.44    0.1%
   64   740     12210     22.46    0.1%
   64   760     12230     27.68    0.2%
   64   780     12260     36.08    0.2%
   64   800     12310     38.64    0.3%
   64   820     12320     26.89    0.2%
   64   840     12390     31.44    0.2%
   64   860     12550     65.75    0.5%
   64   880     12490     26.09    0.2%
   64   900     12520     38.83    0.3%
   64   920     12530     31.84    0.2%
   64   940     12600     37.93    0.3%
   64   960     12590     28.52    0.2%
   64   980     12620     17.62    0.1%
   64  1000     12650     27.84    0.2%
   64  1020     12760     35.93    0.2%
   64  1024     12720     25.21    0.1%

Quality and confidence:
param     error
c         0.118
s         0.007

Model:
Time ~=    267.8
    + c    165.4
    + s     1.82
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    185.2
    + s     1.75
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     183.9     0.422    0.2%
   20     218.9     0.449    0.2%
   40     254.5     0.316    0.1%
   60     289.8     0.526    0.1%
   80     325.5     1.126    0.3%
  100     360.5     0.709    0.1%
  120       400     10.63    2.6%
  140     430.5     1.098    0.2%
  160       465     0.906    0.1%
  180     512.7     14.34    2.7%
  200     535.2     1.214    0.2%
  220     576.6     14.27    2.4%
  240     603.9     0.538    0.0%
  260       639     0.659    0.1%
  280     677.8     10.48    1.5%
  300     720.7     16.37    2.2%
  320     749.7     11.93    1.5%
  340     795.3      16.3    2.0%
  360     820.9      13.3    1.6%
  380     855.6      13.2    1.5%
  400     884.5     0.999    0.1%
  420     931.3     15.45    1.6%
  440       954     1.438    0.1%
  460     988.9     1.288    0.1%
  480      1041     17.35    1.6%
  500      1068     13.71    1.2%
  520      1100        11    0.9%
  540      1152     13.53    1.1%
  560      1184     13.99    1.1%
  580      1208     10.77    0.8%
  600      1247     15.48    1.2%
  620      1285     15.29    1.1%
  640      1312     14.09    1.0%
  660      1344     12.83    0.9%
  680      1391     14.41    1.0%
  700      1415     12.21    0.8%
  720      1462     13.87    0.9%
  740      1501     13.56    0.9%
  760      1528     16.04    1.0%
  780      1571     16.27    1.0%
  800      1599      14.4    0.9%
  820      1636     14.44    0.8%
  840      1663     13.09    0.7%
  860      1702     14.46    0.8%
  880      1744     15.73    0.9%
  900      1780     11.57    0.6%
  920      1799     10.82    0.6%
  940      1847     11.95    0.6%
  960      1891     9.342    0.4%
  980      1921     9.461    0.4%
 1000      1956     16.28    0.8%
 1020      1982     14.16    0.7%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    184.4
    + s     1.77
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    138.3
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    138.3
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    68.81
    + c    70.66
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     64.31     0.159    0.2%
    1     142.6     0.554    0.3%
    2     211.9     2.068    0.9%
    3     277.4     0.653    0.2%
    4     353.8     10.98    3.1%
    5     417.4     0.763    0.1%
    6     483.3     0.513    0.1%
    7       560     0.285    0.0%
    8     627.7     3.805    0.6%
    9     706.8      12.7    1.7%
   10     772.9     9.881    1.2%
   11     843.1     13.94    1.6%
   12     910.4     11.53    1.2%
   13     996.6     15.28    1.5%
   14      1063     16.37    1.5%
   15      1134      16.6    1.4%
   16      1213     10.25    0.8%
   17      1276     15.84    1.2%
   18      1342     14.52    1.0%
   19      1412     12.87    0.9%
   20      1486     13.09    0.8%
   21      1549     11.48    0.7%
   22      1612     11.95    0.7%
   23      1676     14.64    0.8%
   24      1740     16.11    0.9%
   25      1857     13.99    0.7%
   26      1923     12.77    0.6%
   27      1979      15.8    0.7%
   28      2057     12.72    0.6%
   29      2128     12.35    0.5%
   30      2193     13.87    0.6%
   31      2264     10.81    0.4%
   32      2316     14.59    0.6%
   33      2412     14.29    0.5%
   34      2484     11.11    0.4%
   35      2568     14.27    0.5%
   36      2623      17.3    0.6%
   37      2691     17.75    0.6%
   38      2776     9.214    0.3%
   39      2815     20.37    0.7%
   40      2891     23.61    0.8%
   41      2960     19.89    0.6%
   42      3031     12.07    0.3%
   43      3091     7.877    0.2%
   44      3159     22.54    0.7%
   45      3207     18.09    0.5%
   46      3296     11.42    0.3%
   47      3364     12.11    0.3%
   48      3437     13.73    0.3%
   49      3559      6.56    0.1%
   50      3628     8.014    0.2%
   51      3701     13.61    0.3%
   52      3749     12.17    0.3%
   53      3822     11.98    0.3%
   54      3905     15.62    0.4%
   55      3997     15.09    0.3%
   56      4132     19.64    0.4%
   57      4111     12.29    0.2%
   58      4168     7.372    0.1%
   59      4229     7.881    0.1%
   60      4336     21.07    0.4%
   61      4376     16.22    0.3%
   62      4429     9.144    0.2%
   63      4501     9.861    0.2%
   64      4588     9.774    0.2%

Quality and confidence:
param     error
c         0.049

Model:
Time ~=    66.63
    + c    70.82
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.44
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    33.44
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.4
    + r    76.72
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.5     1.211    0.4%
    1     307.2     0.343    0.1%
    2     385.5     0.786    0.2%
    3     459.8     0.561    0.1%
    4     537.1     1.775    0.3%
    5     626.2     15.02    2.3%
    6       691     9.687    1.4%
    7     784.7     11.42    1.4%
    8     861.5     11.02    1.2%
    9     936.5     11.39    1.2%
   10      1031     13.76    1.3%
   11      1086     12.14    1.1%
   12      1170     13.52    1.1%
   13      1234     9.126    0.7%
   14      1312     2.401    0.1%
   15      1397     12.29    0.8%
   16      1467     10.46    0.7%
   17      1553     11.92    0.7%
   18      1615     12.04    0.7%
   19      1692     12.23    0.7%
   20      1774     13.92    0.7%

Quality and confidence:
param     error
r          0.15

Model:
Time ~=    237.7
    + r    77.03
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.8
    + r    77.77
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.5      0.15    0.0%
    1     308.4     0.372    0.1%
    2       391     3.831    0.9%
    3     463.1     1.025    0.2%
    4     543.6     6.499    1.1%
    5     615.2     0.832    0.1%
    6     690.7     0.773    0.1%
    7     791.2     10.76    1.3%
    8     868.8      8.72    1.0%
    9       942     10.57    1.1%
   10      1028     13.15    1.2%
   11      1106     15.68    1.4%
   12      1173     12.63    1.0%
   13      1255      13.2    1.0%
   14      1340      17.6    1.3%
   15      1415     14.45    1.0%
   16      1478     9.976    0.6%
   17      1571      14.1    0.8%
   18      1641     10.25    0.6%
   19      1720     11.73    0.6%
   20      1789     12.92    0.7%

Quality and confidence:
param     error
r         0.149

Model:
Time ~=    234.9
    + r    78.31
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.9
    + r    76.83
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.3     0.241    0.0%
    1     307.8     0.248    0.0%
    2     386.1     0.774    0.2%
    3     460.9      0.51    0.1%
    4       536     1.157    0.2%
    5     609.5      0.57    0.0%
    6     692.6     12.14    1.7%
    7     790.1     13.51    1.7%
    8     865.6     12.55    1.4%
    9       941     14.39    1.5%
   10      1024     16.49    1.6%
   11      1095     16.13    1.4%
   12      1168     13.36    1.1%
   13      1239      12.7    1.0%
   14      1315     11.11    0.8%
   15      1401     16.94    1.2%
   16      1469     14.77    1.0%
   17      1547     14.93    0.9%
   18      1619     13.99    0.8%
   19      1698      14.9    0.8%
   20      1783     15.11    0.8%

Quality and confidence:
param     error
r         0.166

Model:
Time ~=      236
    + r    77.34
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    241.8
    + r    218.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.4     0.113    0.0%
    1     456.2     5.323    1.1%
    2       672      2.38    0.3%
    3     891.9     10.63    1.1%
    4      1102     2.284    0.2%
    5      1320     7.973    0.6%
    6      1523     12.28    0.8%
    7      1773     9.915    0.5%
    8      2011      12.3    0.6%
    9      2230     4.924    0.2%
   10      2443     13.19    0.5%
   11      2670     8.211    0.3%
   12      2877      12.8    0.4%
   13      3092     9.097    0.2%
   14      3311     12.12    0.3%
   15      3511     8.697    0.2%
   16      3745     13.72    0.3%
   17      3948     8.457    0.2%
   18      4163     15.46    0.3%
   19      4376     15.13    0.3%
   20      4621      29.6    0.6%

Quality and confidence:
param     error
r          0.21

Model:
Time ~=    239.9
    + r    218.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    246.9
    + r    76.48
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     241.9     0.323    0.1%
    1     321.2     0.563    0.1%
    2     399.5     0.451    0.1%
    3     474.6     0.329    0.0%
    4       550     0.743    0.1%
    5     632.4     11.07    1.7%
    6     700.4     2.224    0.3%
    7     786.4      2.04    0.2%
    8     871.7     14.07    1.6%
    9     938.8     4.176    0.4%
   10      1013     1.581    0.1%
   11      1103     13.39    1.2%
   12      1176     15.19    1.2%
   13      1254     12.95    1.0%
   14      1298      1.62    0.1%
   15      1391     11.63    0.8%
   16      1465      13.6    0.9%
   17      1532     14.28    0.9%
   18      1605     10.83    0.6%
   19      1712     1.227    0.0%
   20      1762     15.77    0.8%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    249.5
    + r    76.15
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    251.7
    + r     75.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     241.9     0.164    0.0%
    1     321.1     0.342    0.1%
    2     399.3     2.618    0.6%
    3       474     0.869    0.1%
    4       553     11.66    2.1%
    5     622.2     0.513    0.0%
    6     697.5     1.506    0.2%
    7     791.2     14.33    1.8%
    8     858.8     6.274    0.7%
    9     936.2     11.24    1.2%
   10      1028     17.04    1.6%
   11      1086     10.14    0.9%
   12      1162     10.24    0.8%
   13      1238     12.03    0.9%
   14      1300     9.374    0.7%
   15      1367     7.751    0.5%
   16      1441     10.18    0.7%
   17      1527     14.22    0.9%
   18      1606     12.91    0.8%
   19      1669     10.08    0.6%
   20      1749     12.68    0.7%

Quality and confidence:
param     error
r         0.154

Model:
Time ~=    252.7
    + r    75.07
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    248.8
    + r    75.31
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       242     0.244    0.1%
    1     320.9     0.533    0.1%
    2     397.8     0.762    0.1%
    3     473.8     4.695    0.9%
    4     547.7     0.988    0.1%
    5       622     0.771    0.1%
    6     696.2     0.688    0.0%
    7     783.7     7.555    0.9%
    8     861.5     9.352    1.0%
    9     931.3     4.185    0.4%
   10      1003     0.619    0.0%
   11      1083     7.132    0.6%
   12      1166     14.58    1.2%
   13      1235     11.86    0.9%
   14      1295     9.765    0.7%
   15      1367     7.921    0.5%
   16      1449     11.18    0.7%
   17      1525     12.92    0.8%
   18      1601     10.03    0.6%
   19      1676     13.31    0.7%
   20      1755     15.49    0.8%

Quality and confidence:
param     error
r         0.121

Model:
Time ~=    248.8
    + r    75.29
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    243.4
    + r    75.49
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       242     0.297    0.1%
    1     320.6     0.522    0.1%
    2     400.1     0.711    0.1%
    3     475.6      0.65    0.1%
    4     536.7     3.693    0.6%
    5     614.1     9.301    1.5%
    6     684.7     0.918    0.1%
    7     772.2      8.58    1.1%
    8     842.2     1.572    0.1%
    9     923.6     9.791    1.0%
   10      1014      12.5    1.2%
   11      1078     9.495    0.8%
   12      1155     12.93    1.1%
   13      1224     11.35    0.9%
   14      1309     12.97    0.9%
   15      1384     10.59    0.7%
   16      1455     9.178    0.6%
   17      1527     10.93    0.7%
   18      1606     14.14    0.8%
   19      1681     13.36    0.7%
   20      1756     11.89    0.6%

Quality and confidence:
param     error
r         0.126

Model:
Time ~=    241.8
    + r    75.84
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    253.7
    + r    182.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     241.7     0.177    0.0%
    1     432.3      0.51    0.1%
    2     618.8     3.319    0.5%
    3     800.4     2.217    0.2%
    4     981.2     14.61    1.4%
    5      1185     10.12    0.8%
    6      1358     12.08    0.8%
    7      1552     9.242    0.5%
    8      1730     11.44    0.6%
    9      1909     10.06    0.5%
   10      2089     13.49    0.6%
   11      2261     8.979    0.3%
   12      2438     12.06    0.4%
   13      2622     6.792    0.2%
   14      2811     11.67    0.4%
   15      2978     10.63    0.3%
   16      3166     9.766    0.3%
   17      3364     8.472    0.2%
   18      3548     11.73    0.3%
   19      3782     8.313    0.2%
   20      3920     9.984    0.2%

Quality and confidence:
param     error
r         0.202

Model:
Time ~=    251.8
    + r    183.3
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    113.6
    + r    36.55
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     104.6     0.243    0.2%
    1     142.8     0.166    0.1%
    2     178.6     0.311    0.1%
    3     216.5     0.182    0.0%
    4     252.1     0.619    0.2%
    5     300.9     0.561    0.1%
    6     338.5     1.143    0.3%
    7     374.9     3.137    0.8%
    8     409.6     2.252    0.5%
    9     444.5     0.913    0.2%
   10     479.6     0.944    0.1%
   11     518.9      2.26    0.4%
   12     554.5     2.422    0.4%
   13     592.9      9.52    1.6%
   14     624.1     0.857    0.1%
   15     663.5     9.517    1.4%
   16     695.7     2.639    0.3%
   17     730.1     2.384    0.3%
   18     765.5     2.651    0.3%
   19     805.6     8.143    1.0%
   20     835.7     3.058    0.3%

Quality and confidence:
param     error
r         0.072

Model:
Time ~=    111.3
    + r    36.62
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      240
    + r    70.34
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.6     0.261    0.1%
    1       302     0.461    0.1%
    2     379.9     4.531    1.1%
    3       451     5.639    1.2%
    4     513.6     5.501    1.0%
    5     580.7      1.18    0.2%
    6     650.3     5.279    0.8%
    7       748      10.6    1.4%
    8     812.8     13.36    1.6%
    9     877.7     8.269    0.9%
   10     952.7     12.21    1.2%
   11      1018     13.33    1.3%
   12      1090     13.53    1.2%
   13      1152     6.092    0.5%
   14      1225     8.293    0.6%
   15      1305     12.58    0.9%
   16      1366     10.73    0.7%
   17      1433      8.91    0.6%
   18      1511     13.02    0.8%
   19      1579     13.71    0.8%
   20      1644     14.68    0.8%

Quality and confidence:
param     error
r         0.136

Model:
Time ~=    238.4
    + r    70.63
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    322.6
    + n    11.93
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     301.5     0.229    0.0%
   20     545.3     2.041    0.3%
   40     782.1     1.759    0.2%
   60      1030     12.58    1.2%
   80      1286     13.12    1.0%
  100      1513     15.54    1.0%
  120      1769     14.12    0.7%
  140      2006     8.972    0.4%
  160      2234     12.43    0.5%
  180      2480     5.513    0.2%
  200      2716     12.68    0.4%
  220      2951     9.707    0.3%
  240      3204     12.83    0.4%
  260      3404     11.29    0.3%
  280      3669      7.55    0.2%
  300      3909     18.72    0.4%
  320      4147     23.86    0.5%
  340      4399     19.62    0.4%
  360      4626     14.24    0.3%
  380      4868      19.4    0.3%
  400      5112     15.61    0.3%
  420      5323     9.815    0.1%
  440      5575     9.154    0.1%
  460      5815     23.11    0.3%
  480      6041     13.46    0.2%
  500      6300     23.06    0.3%
  520      6535     24.72    0.3%
  540      6783     23.01    0.3%
  560      7011     18.53    0.2%
  580      7249     19.84    0.2%
  600      7481     19.53    0.2%
  620      7752     24.65    0.3%
  640      7960      10.2    0.1%
  660      8193     14.96    0.1%
  680      8438     19.97    0.2%
  700      8674     26.08    0.3%
  720      8951     29.14    0.3%
  740      9167     19.96    0.2%
  760      9380     25.07    0.2%
  780      9624     20.84    0.2%
  800      9868      20.2    0.2%
  820     10100     25.74    0.2%
  840     10350     24.85    0.2%
  860     10590     44.49    0.4%
  880     10810     15.46    0.1%
  900     11070     30.67    0.2%
  920     11290     21.63    0.1%
  940     11550     47.82    0.4%
  960     11760     22.34    0.1%
  980     12000     10.04    0.0%
 1000     12240     40.37    0.3%
 1020     12480     31.04    0.2%

Quality and confidence:
param     error
n         0.003

Model:
Time ~=    325.6
    + n    11.93
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.3
    + r    1.247
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     237.3     0.168    0.0%
    1     238.6     0.152    0.0%

Quality and confidence:
param     error
r         0.075

Model:
Time ~=    237.3
    + r    1.257
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      226
    + n    0.229
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     225.8     0.237    0.1%
   20     230.5     0.385    0.1%
   40     235.2     0.251    0.1%
   60     239.6     0.123    0.0%
   80     244.4     0.157    0.0%
  100     250.6     4.294    1.7%
  120     253.5     0.301    0.1%
  140     259.6      3.69    1.4%
  160     264.3     4.419    1.6%
  180     268.9     3.959    1.4%
  200     272.2     0.397    0.1%
  220     276.2     0.132    0.0%
  240       281     0.159    0.0%
  260     285.4     0.176    0.0%
  280     296.7     0.215    0.0%
  300     296.9     2.836    0.9%
  320     299.2      0.23    0.0%
  340       304     0.272    0.0%
  360     308.3     0.162    0.0%
  380     313.1     0.252    0.0%
  400     319.5     5.971    1.8%
  420     321.9     0.285    0.0%
  440     326.7       0.2    0.0%
  460     331.2     0.251    0.0%
  480     335.7     0.244    0.0%
  500     341.1     1.407    0.4%
  520       349     5.817    1.6%
  540     356.4     6.472    1.8%
  560     359.3     6.262    1.7%
  580     361.3     5.139    1.4%
  600     372.4     8.294    2.2%
  620     371.8     5.874    1.5%
  640     386.9     13.82    3.5%
  660     382.6     6.261    1.6%
  680     387.3     6.781    1.7%
  700       390     5.918    1.5%
  720     394.7     5.938    1.5%
  740     402.1     6.572    1.6%
  760     407.9     6.423    1.5%
  780     409.8     6.353    1.5%
  800     420.3     6.709    1.5%
  820       420     6.108    1.4%
  840     428.5     7.179    1.6%
  860     429.4     6.737    1.5%
  880     438.5      8.13    1.8%
  900     437.7     6.159    1.4%
  920     445.8     8.732    1.9%
  940     446.9     7.307    1.6%
  960     450.9     6.667    1.4%
  980     455.5     6.071    1.3%
 1000       460     6.386    1.3%
 1020     466.8     6.308    1.3%

Quality and confidence:
param     error
n             0

Model:
Time ~=    225.1
    + n    0.238
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    228.3
    + r    84.19
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.3     0.239    0.1%
    1     312.7     0.473    0.1%

Quality and confidence:
param     error
r         0.176

Model:
Time ~=    228.3
    + r    84.33
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    239.2
    + r    251.2
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     241.8     0.194    0.0%
    1     481.6     1.347    0.2%
    2     744.1     4.611    0.6%
    3     984.3     13.59    1.3%
    4      1240     13.89    1.1%
    5      1520      13.1    0.8%
    6      1779     4.386    0.2%
    7      2004     12.43    0.6%
    8      2256     5.666    0.2%
    9      2487     9.604    0.3%
   10      2739     9.576    0.3%
   11      2984     5.312    0.1%
   12      3219      13.4    0.4%
   13      3465     11.83    0.3%
   14      3726       8.3    0.2%
   15      3974     16.96    0.4%
   16      4224     10.36    0.2%
   17      4542     14.05    0.3%
   18      4803     14.23    0.2%
   19      5064     18.06    0.3%
   20      5305     17.91    0.3%

Quality and confidence:
param     error
r         0.337

Model:
Time ~=    232.1
    + r    251.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      234
    + r    413.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     238.2     0.267    0.1%
    1     647.7     1.101    0.1%
    2      1067     14.16    1.3%
    3      1474     10.08    0.6%
    4      1905     11.21    0.5%
    5      2294      11.8    0.5%
    6      2715     14.88    0.5%
    7      3118     6.657    0.2%
    8      3525     7.039    0.1%
    9      3970     12.47    0.3%
   10      4379     13.48    0.3%
   11      4796     18.77    0.3%
   12      5197     19.31    0.3%
   13      5619     26.45    0.4%
   14      6035     17.45    0.2%
   15      6426     10.98    0.1%
   16      6852     8.423    0.1%
   17      7252     18.58    0.2%
   18      7658     13.26    0.1%
   19      8114     14.86    0.1%
   20      8648     15.79    0.1%

Quality and confidence:
param     error
r         0.383

Model:
Time ~=    225.3
    + r    415.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    734.9
    + t    408.3
    + n    86.52
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      2104     13.12    0.6%
    1    16      2544     15.16    0.5%
    2    16      2930     15.46    0.5%
    3    16      3351     11.94    0.3%
    4     0      2324     16.87    0.7%
    4     1      2422     9.918    0.4%
    4     2      2506     16.68    0.6%
    4     3      2567     10.53    0.4%
    4     4      2679     4.836    0.1%
    4     5      2696     10.51    0.3%
    4     6      2829     19.86    0.7%
    4     7      2904     11.26    0.3%
    4     8      2982     17.16    0.5%
    4     9      3069     13.05    0.4%
    4    10      3162     6.472    0.2%
    4    11      3245     12.62    0.3%
    4    12      3323     17.59    0.5%
    4    13      3414     14.42    0.4%
    4    14      3523     15.88    0.4%
    4    15      3605     7.942    0.2%
    4    16      3748     11.35    0.3%

Quality and confidence:
param     error
t         2.131
n          0.42

Model:
Time ~=    732.3
    + t    393.1
    + n    87.54
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    132.3
    + r    53.71
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     114.3     0.107    0.0%
    1     186.6     0.169    0.0%
    2     239.9     0.355    0.1%
    3     295.2     0.855    0.2%
    4     344.2     0.861    0.2%
    5     400.6     0.843    0.2%
    6     455.6     0.985    0.2%
    7     522.5      14.6    2.7%
    8     562.1     2.982    0.5%
    9     614.2     4.246    0.6%
   10     676.7     10.49    1.5%
   11     728.9     9.873    1.3%
   12     798.3     10.84    1.3%
   13     829.2     2.589    0.3%
   14     887.9     9.248    1.0%
   15     942.4     10.73    1.1%
   16     993.3     7.981    0.8%
   17      1053     11.29    1.0%
   18      1095     2.474    0.2%
   19      1154      11.3    0.9%
   20      1204     9.806    0.8%

Quality and confidence:
param     error
r         0.118

Model:
Time ~=    131.1
    + r    54.03
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    241.7
    + r    312.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.4      0.19    0.0%
    1     571.6     1.166    0.2%
    2     881.3     5.522    0.6%
    3      1204      14.7    1.2%
    4      1480     9.036    0.6%
    5      1817     14.34    0.7%
    6      2109     13.96    0.6%
    7      2412     12.52    0.5%
    8      2695     18.25    0.6%
    9      3070     16.22    0.5%
   10      3357     14.73    0.4%
   11      3675     17.84    0.4%
   12      3997     17.92    0.4%
   13      4258     12.32    0.2%
   14      4581     7.821    0.1%
   15      4899     13.08    0.2%
   16      5211     10.91    0.2%
   17      5520     13.34    0.2%
   18      5983     16.34    0.2%
   19      6259     20.94    0.3%
   20      6572      13.1    0.1%

Quality and confidence:
param     error
r         0.487

Model:
Time ~=    227.1
    + r    314.3
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_new_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    470.4
    + n    32.99
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     452.3     8.223    1.8%
    1     494.1     1.325    0.2%
    2       546     3.085    0.5%
    3     571.1     2.128    0.3%
    4     607.9     1.081    0.1%
    5     634.6     1.815    0.2%
    6     668.3      8.26    1.2%
    7     689.3     3.148    0.4%
    8     732.9     1.592    0.2%
    9     775.8     9.432    1.2%
   10     795.9     4.932    0.6%
   11     834.6     6.206    0.7%
   12     855.8     6.757    0.7%
   13     911.9     13.45    1.4%
   14     940.7      15.7    1.6%
   15     982.8     14.09    1.4%
   16     973.1     5.097    0.5%

Quality and confidence:
param     error
n         0.209

Model:
Time ~=    466.8
    + n    33.31
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_old_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    452.4
    + n    0.154
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     425.9     0.676    0.1%
    1     453.5     0.871    0.1%
    2     453.8     1.169    0.2%
    3       453     0.612    0.1%
    4     453.8     0.663    0.1%
    5     452.9     0.607    0.1%
    6     452.8      0.59    0.1%
    7     455.8     5.023    1.1%
    8       456     4.491    0.9%
    9     455.7     4.426    0.9%
   10     454.1     2.923    0.6%
   11     454.8     2.405    0.5%
   12     459.6     6.291    1.3%
   13     454.9     0.674    0.1%
   14       455      0.48    0.1%
   15     453.8     0.404    0.0%
   16     454.9     2.671    0.5%

Quality and confidence:
param     error
n         0.104

Model:
Time ~=    447.4
    + n    0.689
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    846.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.6     0.241    0.0%
    1     906.3     13.78    1.5%
    2      1632     19.07    1.1%
    3      2436     15.77    0.6%
    4      3242     19.39    0.5%
    5      4060      9.78    0.2%
    6      4834     18.23    0.3%
    7      5637     18.44    0.3%
    8      6394     23.71    0.3%
    9      7374     31.93    0.4%
   10      8150     24.78    0.3%
   11      9023     31.32    0.3%
   12      9902     20.38    0.2%
   13     10760     22.33    0.2%
   14     11630     39.06    0.3%
   15     12500     23.48    0.1%
   16     13360     55.79    0.4%
   17     14270     19.26    0.1%
   18     15340     50.22    0.3%
   19     16270     37.06    0.2%
   20     17150     42.39    0.2%

Quality and confidence:
param     error
r         2.073

Model:
Time ~=        0
    + r    849.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:2 w:2)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    412.1
    + n    0.065
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     413.4     0.631    0.1%
    1     413.1     0.746    0.1%
    2     416.3     3.956    0.9%
    3     418.4     9.442    2.2%
    4       412     0.461    0.1%
    5     410.9     0.535    0.1%
    6     412.8     2.538    0.6%
    7     411.4     0.579    0.1%
    8     414.9     8.512    2.0%
    9     411.8     0.808    0.1%
   10     412.5     1.142    0.2%
   11       416     5.639    1.3%
   12     413.6     0.316    0.0%
   13     412.1     0.417    0.1%
   14       413     0.463    0.1%
   15     414.4     2.909    0.7%
   16     417.1     7.384    1.7%

Quality and confidence:
param     error
n         0.072

Model:
Time ~=    413.6
    + n    0.022
              µs

Reads = 6 + (0 * n)
Writes = 4 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    130.4
    + r    440.3
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     231.3     0.158    0.0%
    1     613.9     2.883    0.4%
    2      1026     5.552    0.5%
    3      1468     11.87    0.8%
    4      1877      10.2    0.5%
    5      2303     13.92    0.6%
    6      2730     7.629    0.2%
    7      3143      10.6    0.3%
    8      3565     11.51    0.3%
    9      4093     14.28    0.3%
   10      4467     15.16    0.3%
   11      4942     25.47    0.5%
   12      5354     13.87    0.2%
   13      5818      23.4    0.4%
   14      6240     25.17    0.4%
   15      6751     37.59    0.5%
   16      7160     39.12    0.5%
   17      7622      33.8    0.4%
   18      8133     45.42    0.5%
   19      8589     40.52    0.4%
   20      9065     23.87    0.2%

Quality and confidence:
param     error
r         0.713

Model:
Time ~=    111.5
    + r    442.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    437.8
    + n    60.99
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     418.9     8.675    2.0%
    1     493.5     4.804    0.9%
    2     569.3     2.022    0.3%
    3     620.7     0.573    0.0%
    4     685.4     8.101    1.1%
    5     743.9      0.87    0.1%
    6     802.3     8.973    1.1%
    7     857.3     1.447    0.1%
    8     923.2     4.568    0.4%
    9     978.3     3.261    0.3%
   10      1036     9.592    0.9%
   11      1094     11.92    1.0%
   12      1180     14.08    1.1%
   13      1229     15.82    1.2%
   14      1285     9.605    0.7%
   15      1363     15.53    1.1%
   16      1421     5.389    0.3%

Quality and confidence:
param     error
n         0.189

Model:
Time ~=    432.1
    + n    61.45
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    22.14
    + r    560.3
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.1     0.158    0.0%
    1       703     2.573    0.3%
    2      1187     8.099    0.6%
    3      1704     10.44    0.6%
    4      2250     17.67    0.7%
    5      2772      18.1    0.6%
    6      3329     18.88    0.5%
    7      3884     27.38    0.7%
    8      4384     19.94    0.4%
    9      5010     22.08    0.4%
   10      5535     36.27    0.6%
   11      6094     33.39    0.5%
   12      6687     26.73    0.3%
   13      7313     50.25    0.6%
   14      7939     34.24    0.4%
   15      8428     39.51    0.4%
   16      9022     52.18    0.5%
   17      9504     37.01    0.3%
   18     10190      59.7    0.5%
   19     10850     44.72    0.4%
   20     11420     49.29    0.4%

Quality and confidence:
param     error
r         1.158

Model:
Time ~=     16.1
    + r    562.5
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    435.3
    + n    6.258
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     397.3     0.523    0.1%
    1     419.5      0.49    0.1%
    2     447.5      0.77    0.1%
    3     457.9     0.749    0.1%
    4     463.9     1.708    0.3%
    5     469.3     3.507    0.7%
    6     471.4     0.374    0.0%
    7     485.9      4.19    0.8%
    8       490     3.404    0.6%
    9     491.1      3.18    0.6%
   10     494.6     6.178    1.2%
   11     506.7     0.393    0.0%
   12     503.9     3.749    0.7%
   13     510.5     1.175    0.2%
   14     522.6     1.119    0.2%
   15     522.4      0.63    0.1%
   16     531.3     0.949    0.1%

Quality and confidence:
param     error
n         0.165

Model:
Time ~=      426
    + n    6.938
              µs

Reads = 5 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     94.2
    + r    543.4
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     244.6     0.158    0.0%
    1     738.4     11.24    1.5%
    2      1222     9.311    0.7%
    3      1738     12.31    0.7%
    4      2254     13.55    0.6%
    5      2790     17.48    0.6%
    6      3309     10.17    0.3%
    7      3826     22.83    0.5%
    8      4322        23    0.5%
    9      4990     28.17    0.5%
   10      5477     16.08    0.2%
  <truncated>...
```

</details>",10691,2022-01-18T15:59:25Z,0
1883,athei,/benchmark runtime pallet pallet_contracts,10691,2022-01-19T13:31:26Z,0
1884,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-fix-precharge"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.556
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.556
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    13.74
    + k    0.854
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     13.82     0.104    0.7%
   20     32.85     0.074    0.2%
   40     49.42     0.247    0.4%
   60     63.98     0.273    0.4%
   80     79.91     0.227    0.2%
  100     95.12       0.2    0.2%
  120     110.4     0.363    0.3%
  140     130.1     0.238    0.1%
  160     146.3     0.502    0.3%
  180     163.9     0.341    0.2%
  200       181      0.33    0.1%
  220     198.5     0.544    0.2%
  240     217.8     3.376    1.5%
  260     232.8     0.569    0.2%
  280     251.4     0.608    0.2%
  300     268.1     0.618    0.2%
  320     287.3     0.876    0.3%
  340     304.4     0.635    0.2%
  360       323     1.336    0.4%
  380     340.6     0.568    0.1%
  400     359.9     0.872    0.2%
  420     375.4      0.77    0.2%
  440     393.9     1.762    0.4%
  460     409.8     0.506    0.1%
  480     427.7      1.11    0.2%
  500     444.9     1.006    0.2%
  520     463.8     1.575    0.3%
  540     479.5     1.703    0.3%
  560     497.8     1.687    0.3%
  580     514.1     1.597    0.3%
  600     531.5      1.22    0.2%
  620     552.2     3.905    0.7%
  640     562.1     1.479    0.2%
  660     583.1     5.234    0.8%
  680     598.4     3.599    0.6%
  700     611.5     1.518    0.2%
  720     632.5     8.004    1.2%
  740       645      0.68    0.1%
  760     672.5     10.55    1.5%
  780     684.5     9.337    1.3%
  800     698.2      3.78    0.5%
  820       713     1.827    0.2%
  840     730.4     2.018    0.2%
  860     747.8      1.61    0.2%
  880     762.4     1.478    0.1%
  900     777.1     2.165    0.2%
  920     791.5     2.413    0.3%
  940     808.5     2.291    0.2%
  960     820.6     2.177    0.2%
  980     838.9     1.387    0.1%
 1000     860.1     4.376    0.5%
 1020     885.2     9.822    1.1%

Quality and confidence:
param     error
k             0

Model:
Time ~=    14.64
    + k    0.852
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.63
    + q    0.158
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.598     0.028    1.0%
   20      22.1     0.124    0.5%
   40     28.75     0.151    0.5%
   60     34.17      0.13    0.3%
   80     40.27     0.147    0.3%
  100     45.14     0.088    0.1%
  120     50.39      0.09    0.1%
  140     56.15     0.215    0.3%
  160     61.68     0.219    0.3%
  180     66.91     0.239    0.3%
  200     71.98     0.194    0.2%
  220     77.16     0.211    0.2%
  240     82.65      0.25    0.3%
  260     88.07      0.22    0.2%
  280     93.44      0.45    0.4%
  300     89.71     0.252    0.2%
  320      93.9     0.096    0.1%
  340     98.84      0.18    0.1%
  360     102.8     0.343    0.3%
  380     83.44     9.057   10.8%
  400     113.3     0.299    0.2%
  420     118.7     0.186    0.1%
  440     124.8     1.226    0.9%
  460     92.97     0.462    0.4%
  480     96.05     0.189    0.1%
  500     99.31     0.402    0.4%
  520       103     0.242    0.2%
  540     105.9     0.183    0.1%
  560     109.5     0.161    0.1%
  580     112.6     0.368    0.3%
  600     116.3     0.281    0.2%
  620     120.4     0.416    0.3%
  640     122.4     0.298    0.2%
  660     126.2     0.273    0.2%
  680     128.8     0.371    0.2%
  700     131.8     0.364    0.2%
  720     135.2     0.349    0.2%
  740     139.4     0.353    0.2%
  760     142.9     0.257    0.1%
  780     147.1       0.3    0.2%
  800     149.8     0.421    0.2%
  820     154.1      0.37    0.2%
  840     156.2      0.62    0.3%
  860     159.2     0.453    0.2%
  880     164.8     0.215    0.1%
  900     166.7     0.377    0.2%
  920     170.9     0.785    0.4%
  940       174     0.515    0.2%
  960       177     0.829    0.4%
  980     180.9     0.468    0.2%
 1000     183.4     0.694    0.3%
 1020     186.8      0.53    0.2%

Quality and confidence:
param     error
q         0.001

Model:
Time ~=    34.89
    + q    0.147
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    35.04
    + c    71.52
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0      33.9     0.109    0.3%
    2     179.2     0.397    0.2%
    4     319.2     0.321    0.1%
    6     459.9     8.754    1.9%
    8     599.2     0.838    0.1%
   10     745.4     8.341    1.1%
   12     877.3     0.676    0.0%
   14      1029     1.053    0.1%
   16      1185     16.59    1.3%
   18      1314     13.16    1.0%
   20      1458     16.38    1.1%
   22      1590     13.46    0.8%
   24      1766     2.384    0.1%
   26      1928     15.96    0.8%
   28      2056     4.066    0.1%
   30      2187     9.743    0.4%
   32      2322     18.39    0.7%
   34      2510     18.49    0.7%
   36      2609     13.85    0.5%
   38      2755     2.325    0.0%
   40      2884     3.295    0.1%
   42      3020      16.2    0.5%
   44      3157     4.856    0.1%
   46      3293     3.081    0.0%
   48      3485     5.161    0.1%
   50      3644     16.25    0.4%
   52      3776     14.98    0.3%
   54      3914     18.48    0.4%
   56      4034     31.78    0.7%
   58      4192     23.61    0.5%
   60      4335      17.9    0.4%
   62      4451     16.65    0.3%
   64      4592     13.08    0.2%
   66      4767     18.54    0.3%
   68      4895     22.49    0.4%
   70      5028     13.75    0.2%
   72      5181     16.07    0.3%
   74      5303     13.26    0.2%
   76      5432     17.01    0.3%
   78      5574     11.16    0.2%
   80      5716     14.51    0.2%
   82      5952     27.24    0.4%
   84      5978     8.536    0.1%
   86      6136     12.95    0.2%
   88      6371     13.83    0.2%
   90      6408     21.48    0.3%
   92      6543     20.89    0.3%
   94      6677     17.28    0.2%
   96      6820     22.95    0.3%
   98      7090     10.91    0.1%
  100      7238     29.61    0.4%
  102      7361     7.805    0.1%
  104      7513     14.13    0.1%
  106      7640     14.25    0.1%
  108      7785     18.12    0.2%
  110      7931     7.737    0.0%
  112      8059     26.65    0.3%
  114      8200     19.75    0.2%
  116      8359     19.01    0.2%
  118      8492     28.12    0.3%
  120      8604     13.15    0.1%
  122      8744      17.9    0.2%
  124      8953     39.48    0.4%
  126      9060      20.9    0.2%
  128      9184     20.24    0.2%

Quality and confidence:
param     error
c         0.036

Model:
Time ~=    30.92
    + c    71.56
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    252.4
    + c    68.61
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0       249     0.191    0.0%
    2     398.6     0.323    0.0%
    4     537.1     4.772    0.8%
    6     664.2     0.797    0.1%
    8     805.2     1.509    0.1%
   10     935.9     1.176    0.1%
   12      1072     9.179    0.8%
   14      1233        13    1.0%
   16      1350     8.001    0.5%
   18      1480     7.399    0.4%
   20      1614     13.46    0.8%
   22      1748     13.74    0.7%
   24      1886     18.85    0.9%
   26      2061      12.7    0.6%
   28      2197     7.343    0.3%
   30      2319     14.49    0.6%
   32      2430     15.67    0.6%
   34      2583     18.15    0.7%
   36      2734     13.71    0.5%
   38      2848     16.05    0.5%
   40      2978     3.058    0.1%
   42      3108     16.47    0.5%
   44      3223      15.8    0.4%
   46      3356     12.65    0.3%
   48      3493      8.27    0.2%
   50      3719     19.75    0.5%
   52      3853     13.34    0.3%
   54      3989     15.69    0.3%
   56      4112     20.93    0.5%
   58      4237      7.62    0.1%
   60      4366     14.76    0.3%
   62      4497     16.84    0.3%
   64      4633     15.24    0.3%
   66      4779        13    0.2%
   68      4912     31.23    0.6%
   70      5028     9.521    0.1%
   72      5169     20.96    0.4%
   74      5299     15.22    0.2%
   76      5426     11.45    0.2%
   78      5556     22.42    0.4%
   80      5690     9.814    0.1%
   82      5823     24.59    0.4%
   84      5956     22.35    0.3%
   86      6085     17.01    0.2%
   88      6206     13.45    0.2%
   90      6348     20.06    0.3%
   92      6465     14.23    0.2%
   94      6599     23.38    0.3%
   96      6720     17.79    0.2%
   98      7043        33    0.4%
  100      7193     19.47    0.2%
  102      7321     21.91    0.2%
  104      7434     19.43    0.2%
  106      7582     18.93    0.2%
  108      7704        13    0.1%
  110      7842     19.62    0.2%
  112      7996     41.45    0.5%
  114      8106     18.01    0.2%
  116      8239     24.06    0.2%
  118      8355     15.61    0.1%
  120      8494      16.7    0.1%
  122      8676     14.92    0.1%
  124      8768     30.24    0.3%
  126      8892      13.4    0.1%
  128      9037     12.91    0.1%

Quality and confidence:
param     error
c         0.047

Model:
Time ~=    242.2
    + c    68.68
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    317.2
    + c    168.7
    + s    1.792
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2157     13.63    0.6%
    1  1024      2432     41.03    1.6%
    2  1024      2521     12.43    0.4%
    3  1024      2523     12.89    0.5%
    4  1024      2845     17.29    0.6%
    5  1024      3002     13.72    0.4%
    6  1024      3002     18.95    0.6%
    7  1024      3354     14.71    0.4%
    8  1024      3498     12.44    0.3%
    9  1024      3545     18.99    0.5%
   10  1024      3853      11.1    0.2%
   11  1024      4030     14.06    0.3%
   12  1024      4025     18.54    0.4%
   13  1024      4356     18.11    0.4%
   14  1024      4527     11.41    0.2%
   15  1024      4528     14.59    0.3%
   16  1024      4867     23.82    0.4%
   17  1024      5073     22.63    0.4%
   18  1024      5059     23.17    0.4%
   19  1024      5393     19.01    0.3%
   20  1024      5552     26.43    0.4%
   21  1024      5545     16.73    0.3%
   22  1024      5871      26.9    0.4%
   23  1024      6034     17.69    0.2%
   24  1024      6037     17.39    0.2%
   25  1024      6445     51.15    0.7%
   26  1024      6589     20.76    0.3%
   27  1024      6565     17.46    0.2%
   28  1024      6919     22.38    0.3%
   29  1024      7069     25.05    0.3%
   30  1024      7069     22.85    0.3%
   31  1024      7362     21.82    0.2%
   32  1024      7538     37.61    0.4%
   33  1024      7600     21.69    0.2%
   34  1024      7955     19.12    0.2%
   35  1024      8122     20.35    0.2%
   36  1024      8121     22.36    0.2%
   37  1024      8440     21.44    0.2%
   38  1024      8584     22.53    0.2%
   39  1024      8616     21.88    0.2%
   40  1024      8933        36    0.4%
   41  1024      9095     21.88    0.2%
   42  1024      9089     22.42    0.2%
   43  1024      9419     31.09    0.3%
   44  1024      9624     46.31    0.4%
   45  1024      9593     41.21    0.4%
   46  1024      9928      38.4    0.3%
   47  1024     10090     36.86    0.3%
   48  1024     10070      22.7    0.2%
   49  1024     10480     31.33    0.2%
   50  1024     10640     32.21    0.3%
   51  1024     10650     29.31    0.2%
   52  1024     10970     36.96    0.3%
   53  1024     11130     28.28    0.2%
   54  1024     11130     14.59    0.1%
   55  1024     11610     45.05    0.3%
   56  1024     11640     22.67    0.1%
   57  1024     11640     39.72    0.3%
   58  1024     11950     29.07    0.2%
   59  1024     12120     34.84    0.2%
   60  1024     12120     31.21    0.2%
   61  1024     12440     25.43    0.2%
   62  1024     12600     16.77    0.1%
   63  1024     12600     38.04    0.3%
   64     0     11080     17.68    0.1%
   64    20     11100     29.73    0.2%
   64    40     11130     32.72    0.2%
   64    60     11190      35.1    0.3%
   64    80     11390     74.34    0.6%
   64   100     11240     28.67    0.2%
   64   120     11260     30.88    0.2%
   64   140     11340     42.51    0.3%
   64   160     11360     24.44    0.2%
   64   180     11390     18.42    0.1%
   64   200     11450     31.72    0.2%
   64   220     11500     41.66    0.3%
   64   240     11500      27.1    0.2%
   64   260     11540     42.11    0.3%
   64   280     11570     27.32    0.2%
   64   300     11610     26.95    0.2%
   64   320     11620     21.54    0.1%
   64   340     11710     37.66    0.3%
   64   360     11710     25.16    0.2%
   64   380     11740     30.02    0.2%
   64   400     11770     39.45    0.3%
   64   420     11800     36.24    0.3%
   64   440     11850     37.22    0.3%
   64   460     11870     37.26    0.3%
   64   480     11920     34.63    0.2%
   64   500     11980     27.14    0.2%
   64   520     11980     31.27    0.2%
   64   540     12020     20.26    0.1%
   64   560     12060      29.8    0.2%
   64   580     12140      30.6    0.2%
   64   600     12160      34.3    0.2%
   64   620     12170     21.81    0.1%
   64   640     12230      38.3    0.3%
   64   660     12260     31.58    0.2%
   64   680     12300     34.03    0.2%
   64   700     12320     27.28    0.2%
   64   720     12370      21.2    0.1%
   64   740     12470      38.1    0.3%
   64   760     12450     34.69    0.2%
   64   780     12440      13.6    0.1%
   64   800     12520     22.89    0.1%
   64   820     12560     25.28    0.2%
   64   840     12560     18.36    0.1%
   64   860     12650     35.15    0.2%
   64   880     12650      31.8    0.2%
   64   900     12680     23.16    0.1%
   64   920     12730     38.43    0.3%
   64   940     12810      37.7    0.2%
   64   960     12780     28.47    0.2%
   64   980     12840     43.55    0.3%
   64  1000     12850     36.65    0.2%
   64  1020     12860     27.27    0.2%
   64  1024     12910     42.11    0.3%

Quality and confidence:
param     error
c         0.126
s         0.008

Model:
Time ~=    295.3
    + c    168.5
    + s    1.793
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    173.9
    + s    1.749
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     171.8      0.41    0.2%
   20     207.3     0.396    0.1%
   40     243.7     0.558    0.2%
   60     278.8     0.524    0.1%
   80       316     5.069    1.6%
  100     351.8     5.169    1.4%
  120     383.2     0.325    0.0%
  140     418.3     0.368    0.0%
  160     456.4     7.919    1.7%
  180     492.8     10.47    2.1%
  200     524.2     2.211    0.4%
  220     558.3     1.126    0.2%
  240     598.2     12.03    2.0%
  260     655.4     13.88    2.1%
  280     662.6     0.572    0.0%
  300     697.1     0.676    0.0%
  320     733.9     0.995    0.1%
  340     788.8     13.94    1.7%
  360     821.7     1.949    0.2%
  380     858.8     2.591    0.3%
  400     894.7     8.896    0.9%
  420     918.1      14.5    1.5%
  440     943.6     4.076    0.4%
  460     977.8     2.053    0.2%
  480      1016     8.691    0.8%
  500      1065     14.26    1.3%
  520      1087     12.49    1.1%
  540      1122      14.7    1.3%
  560      1151     2.632    0.2%
  580      1189     9.736    0.8%
  600      1229     13.73    1.1%
  620      1270     16.56    1.3%
  640      1304     12.54    0.9%
  660      1334     15.76    1.1%
  680      1378      16.2    1.1%
  700      1404     12.22    0.8%
  720      1443     13.44    0.9%
  740      1486     15.94    1.0%
  760      1511      12.7    0.8%
  780      1559     14.66    0.9%
  800      1586      16.1    1.0%
  820      1613     14.83    0.9%
  840      1663      16.8    1.0%
  860      1693     15.06    0.8%
  880      1725     14.53    0.8%
  900      1758     13.06    0.7%
  920      1797     12.12    0.6%
  940      1832     11.85    0.6%
  960      1863     13.44    0.7%
  980      1896     12.15    0.6%
 1000      1950     2.657    0.1%
 1020      1983     9.583    0.4%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    174.4
    + s    1.765
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    129.5
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    129.5
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    67.96
    + c    71.53
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     65.92     0.171    0.2%
    1     145.6     0.185    0.1%
    2     211.7     0.268    0.1%
    3     281.3     0.478    0.1%
    4     352.3       0.6    0.1%
    5     421.3     0.358    0.0%
    6     490.6     0.551    0.1%
    7     566.9     0.256    0.0%
    8     635.5     8.148    1.2%
    9     708.1     1.777    0.2%
   10     775.9     1.624    0.2%
   11     853.7     12.51    1.4%
   12     930.5      15.2    1.6%
   13      1001     10.36    1.0%
   14      1080     15.09    1.3%
   15      1146     16.36    1.4%
   16      1221     17.32    1.4%
   17      1288     17.06    1.3%
   18      1356     15.42    1.1%
   19      1422     14.61    1.0%
   20      1486     15.85    1.0%
   21      1559     15.69    1.0%
   22      1630     15.65    0.9%
   23      1704     15.17    0.8%
   24      1774     15.93    0.8%
   25      1872     16.83    0.8%
   26      1940     12.36    0.6%
   27      2018     3.916    0.1%
   28      2076     15.72    0.7%
   29      2159       8.2    0.3%
   30      2214     14.49    0.6%
   31      2279     15.17    0.6%
   32      2359     7.113    0.3%
   33      2438     15.04    0.6%
   34      2516      9.17    0.3%
   35      2565     10.62    0.4%
   36      2635     16.94    0.6%
   37      2724     15.23    0.5%
   38      2780     11.57    0.4%
   39      2861     13.61    0.4%
   40      2927     12.63    0.4%
   41      2995     12.35    0.4%
   42      3068      12.1    0.3%
   43      3128     11.63    0.3%
   44      3192     14.76    0.4%
   45      3260     18.64    0.5%
   46      3332     22.68    0.6%
   47      3398     16.87    0.4%
   48      3484     18.79    0.5%
   49      3616     12.51    0.3%
   50      3683     5.846    0.1%
   51      3732     17.99    0.4%
   52      3824     16.96    0.4%
   53      3890     13.17    0.3%
   54      3946     8.446    0.2%
   55      4018     17.77    0.4%
   56      4094     18.83    0.4%
   57      4153     13.96    0.3%
   58      4237     24.39    0.5%
   59      4288     11.74    0.2%
   60      4363     19.44    0.4%
   61      4436      16.8    0.3%
   62      4506     19.29    0.4%
   63      4576     15.42    0.3%
   64      4653     24.96    0.5%

Quality and confidence:
param     error
c         0.041

Model:
Time ~=    64.84
    + c     71.7
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    34.22
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    34.22
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    252.1
    + r    77.79
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.1     0.148    0.0%
    1     329.4     8.018    2.4%
    2       404     0.276    0.0%
    3     487.5     6.488    1.3%
    4     563.5     8.554    1.5%
    5     637.6     0.511    0.0%
    6     735.2      10.9    1.4%
    7     812.8     9.081    1.1%
    8     880.1     8.061    0.9%
    9     968.9     16.68    1.7%
   10      1041     14.19    1.3%
   11      1117     12.83    1.1%
   12      1219     3.362    0.2%
   13      1277     15.18    1.1%
   14      1336     5.474    0.4%
   15      1414     7.557    0.5%
   16      1507     14.38    0.9%
   17      1574     12.59    0.7%
   18      1659     11.75    0.7%
   19      1735     12.23    0.7%
   20      1798     2.573    0.1%

Quality and confidence:
param     error
r         0.162

Model:
Time ~=    255.8
    + r    77.96
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    251.2
    + r     78.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.1     0.284    0.1%
    1     328.4     5.988    1.8%
    2     405.2      0.65    0.1%
    3     483.2     0.485    0.1%
    4     566.8     9.414    1.6%
    5       640     0.683    0.1%
    6     725.1     10.04    1.3%
    7     804.3       2.1    0.2%
    8     897.2     13.16    1.4%
    9     965.7     11.14    1.1%
   10      1043     10.23    0.9%
   11      1130     13.84    1.2%
   12      1206      13.9    1.1%
   13      1279     12.89    1.0%
   14      1341     3.941    0.2%
   15      1427      11.7    0.8%
   16      1506     12.65    0.8%
   17      1582     12.98    0.8%
   18      1657     7.385    0.4%
   19      1736     10.82    0.6%
   20      1824     12.83    0.7%

Quality and confidence:
param     error
r         0.141

Model:
Time ~=    252.8
    + r     78.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    248.4
    + r    77.85
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.8     0.236    0.0%
    1     324.3     0.312    0.0%
    2     403.2     0.403    0.0%
    3     480.6     0.593    0.1%
    4     559.6     2.161    0.3%
    5     637.9     6.612    1.0%
    6     716.2     6.447    0.9%
    7     798.7     2.483    0.3%
    8     883.9     13.19    1.4%
    9     951.6     1.202    0.1%
   10      1028     1.813    0.1%
   11      1116     12.18    1.0%
   12      1199     16.26    1.3%
   13      1271     12.54    0.9%
   14      1339     11.27    0.8%
   15      1416     11.03    0.7%
   16      1495     13.23    0.8%
   17      1583     10.57    0.6%
   18      1647     15.14    0.9%
   19      1722     9.336    0.5%
   20      1806     13.47    0.7%

Quality and confidence:
param     error
r         0.127

Model:
Time ~=    249.2
    + r    78.05
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    250.8
    + r    219.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.9     0.285    0.1%
    1     468.6     0.601    0.1%
    2     694.6     10.16    1.4%
    3     908.7     9.098    1.0%
    4      1127     8.599    0.7%
    5      1348     12.32    0.9%
    6      1575     10.14    0.6%
    7      1791     13.27    0.7%
    8      2018     11.49    0.5%
    9      2233     8.839    0.3%
   10      2461     6.217    0.2%
   11      2670     8.262    0.3%
   12      2904      7.79    0.2%
   13      3107     10.28    0.3%
   14      3320     7.029    0.2%
   15      3532     4.291    0.1%
   16      3758     12.13    0.3%
   17      4035     5.526    0.1%
   18      4189     13.93    0.3%
   19      4417     12.55    0.2%
   20      4643     18.79    0.4%

Quality and confidence:
param     error
r         0.191

Model:
Time ~=    252.3
    + r    219.7
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    238.8
    + r    79.05
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     244.2     0.166    0.0%
    1     312.5     1.433    0.4%
    2       391     0.329    0.0%
    3     470.6     3.649    0.7%
    4     547.7     0.704    0.1%
    5     625.3     0.817    0.1%
    6     703.6     4.284    0.6%
    7     803.5      8.29    1.0%
    8       877     3.297    0.3%
    9     952.1      2.35    0.2%
   10      1035     10.39    1.0%
   11      1113     8.904    0.7%
   12      1200     13.77    1.1%
   13      1266     10.07    0.7%
   14      1350     8.599    0.6%
   15      1436     12.78    0.8%
   16      1516     17.52    1.1%
   17      1586     15.48    0.9%
   18      1665     13.34    0.8%
   19      1736     10.08    0.5%
   20      1819     12.61    0.6%

Quality and confidence:
param     error
r          0.13

Model:
Time ~=    236.1
    + r     79.5
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    239.3
    + r    79.03
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     244.6     0.183    0.0%
    1     312.3     0.164    0.0%
    2     393.7     2.963    0.7%
    3     469.8     1.711    0.3%
    4     547.6      0.56    0.1%
    5     628.3     8.936    1.4%
    6     717.8     16.34    2.2%
    7     798.4     2.819    0.3%
    8       882     12.03    1.3%
    9     961.9     14.53    1.5%
   10      1036     11.57    1.1%
   11      1117     12.39    1.1%
   12      1189     8.499    0.7%
   13      1268     11.55    0.9%
   14      1345     4.425    0.3%
   15      1438      13.3    0.9%
   16      1504     7.772    0.5%
   17      1588     14.49    0.9%
   18      1665        11    0.6%
   19      1747        13    0.7%
   20      1819     11.62    0.6%

Quality and confidence:
param     error
r         0.131

Model:
Time ~=      238
    + r    79.42
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    236.3
    + r    78.45
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     244.6      0.55    0.2%
    1     310.7     0.223    0.0%
    2     388.8     0.204    0.0%
    3     465.5       0.6    0.1%
    4     544.5     0.922    0.1%
    5     619.3     0.396    0.0%
    6     698.7     4.595    0.6%
    7     800.7     11.16    1.3%
    8     876.3     11.35    1.2%
    9     943.8     1.169    0.1%
   10      1024     7.367    0.7%
   11      1109     14.56    1.3%
   12      1180     10.41    0.8%
   13      1253     8.104    0.6%
   14      1349     14.19    1.0%
   15      1424      14.6    1.0%
   16      1497     14.17    0.9%
   17      1569     10.03    0.6%
   18      1655     14.41    0.8%
   19      1733     12.96    0.7%
   20      1811     14.09    0.7%

Quality and confidence:
param     error
r         0.136

Model:
Time ~=    234.2
    + r    78.97
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    242.7
    + r    79.26
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.4     0.232    0.1%
    1     311.6     0.295    0.0%
    2     404.1     0.343    0.0%
    3     482.6     0.823    0.1%
    4       561     1.131    0.2%
    5       638      0.81    0.1%
    6     714.6     1.295    0.1%
    7     798.4     3.945    0.4%
    8     886.4     15.25    1.7%
    9     972.6     14.62    1.5%
   10      1040     13.05    1.2%
   11      1115     9.827    0.8%
   12      1191     11.94    1.0%
   13      1268     10.97    0.8%
   14      1358      14.2    1.0%
   15      1424     3.716    0.2%
   16      1509     11.95    0.7%
   17      1595     15.88    0.9%
   18      1661     11.59    0.6%
   19      1759      13.1    0.7%
   20      1863     1.939    0.1%

Quality and confidence:
param     error
r         0.152

Model:
Time ~=    237.9
    + r    79.95
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    245.7
    + r    184.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       246     2.525    1.0%
    1     421.3     0.802    0.1%
    2     617.6     1.291    0.2%
    3     791.3     3.949    0.4%
    4     993.7     12.75    1.2%
    5      1151     1.233    0.1%
    6      1358     12.08    0.8%
    7      1542      12.8    0.8%
    8      1718     12.62    0.7%
    9      1910     10.74    0.5%
   10      2086     11.35    0.5%
   11      2288     11.13    0.4%
   12      2474     9.944    0.4%
   13      2644     14.03    0.5%
   14      2847     12.48    0.4%
   15      3014        16    0.5%
   16      3206     15.56    0.4%
   17      3366     11.04    0.3%
   18      3573      11.5    0.3%
   19      3762     7.711    0.2%
   20      3943     13.55    0.3%

Quality and confidence:
param     error
r         0.159

Model:
Time ~=    243.2
    + r      185
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    124.2
    + r    36.48
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     118.5     0.136    0.1%
    1     158.5     0.249    0.1%
    2     195.9     0.342    0.1%
    3     233.7     0.205    0.0%
    4     271.3     1.752    0.6%
    5       295     0.403    0.1%
    6     347.6     0.836    0.2%
    7     385.8      2.42    0.6%
    8     428.4     11.94    2.7%
    9     458.2     2.503    0.5%
   10     493.2     1.069    0.2%
   11     521.9     1.254    0.2%
   12     558.7     2.049    0.3%
   13     595.1     1.537    0.2%
   14     634.5     5.256    0.8%
   15     668.1     2.618    0.3%
   16     712.2     8.877    1.2%
   17     741.8     1.574    0.2%
   18     786.5     10.24    1.3%
   19     813.7     2.429    0.2%
   20     855.7       9.4    1.0%

Quality and confidence:
param     error
r          0.08

Model:
Time ~=    123.5
    + r    36.57
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    248.2
    + r    72.09
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       243     0.112    0.0%
    1     318.6     0.214    0.0%
    2     392.3     0.613    0.1%
    3     463.7      1.15    0.2%
    4     536.4     0.546    0.1%
    5     606.8     0.577    0.0%
    6     679.1      2.44    0.3%
    7     763.2     10.95    1.4%
    8     827.9     0.552    0.0%
    9     905.6     11.29    1.2%
   10     971.2     1.216    0.1%
   11      1046     11.13    1.0%
   12      1119     11.78    1.0%
   13      1189      7.36    0.6%
   14      1252      4.34    0.3%
   15      1334     13.58    1.0%
   16      1398     10.59    0.7%
   17      1481     12.57    0.8%
   18      1554     11.03    0.7%
   19      1614     10.49    0.6%
   20      1696      15.6    0.9%

Quality and confidence:
param     error
r          0.11

Model:
Time ~=    247.5
    + r    72.36
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      348
    + n    11.89
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     318.7      0.16    0.0%
   20       564     4.383    0.7%
   40     802.3     5.036    0.6%
   60      1050     12.94    1.2%
   80      1291      13.7    1.0%
  100      1531     15.84    1.0%
  120      1781     12.51    0.7%
  140      2027     14.79    0.7%
  160      2259     19.91    0.8%
  180      2498      13.8    0.5%
  200      2742      3.29    0.1%
  220      2986     18.67    0.6%
  240      3219     7.987    0.2%
  260      3447     12.29    0.3%
  280      3682     15.25    0.4%
  300      3923     14.41    0.3%
  320      4167     10.42    0.2%
  340      4395     14.73    0.3%
  360      4656     19.16    0.4%
  380      4870     10.24    0.2%
  400      5116     16.14    0.3%
  420      5346     12.91    0.2%
  440      5582     15.61    0.2%
  460      5830     20.93    0.3%
  480      6060     12.86    0.2%
  500      6305        19    0.3%
  520      6530      20.7    0.3%
  540      6765     20.46    0.3%
  560      6999     16.92    0.2%
  580      7234     16.22    0.2%
  600      7480     16.94    0.2%
  620      7731     23.32    0.3%
  640      7991     43.13    0.5%
  660      8186     14.82    0.1%
  680      8440      14.5    0.1%
  700      8679     21.08    0.2%
  720      8902     19.47    0.2%
  740      9158     24.23    0.2%
  760      9399      28.3    0.3%
  780      9613     22.32    0.2%
  800      9858        31    0.3%
  820     10130     28.87    0.2%
  840     10330     28.24    0.2%
  860     10590     29.06    0.2%
  880     10810     31.21    0.2%
  900     11030      32.2    0.2%
  920     11280     33.93    0.3%
  940     11530     31.83    0.2%
  960     11750     22.53    0.1%
  980     12010     28.88    0.2%
 1000     12230      17.1    0.1%
 1020     12480     30.69    0.2%

Quality and confidence:
param     error
n         0.003

Model:
Time ~=    348.9
    + n    11.89
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      238
    + r    3.076
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       238     0.129    0.0%
    1     241.1     0.174    0.0%

Quality and confidence:
param     error
r         0.072

Model:
Time ~=      238
    + r    3.108
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    241.1
    + n    0.228
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     240.2     0.202    0.0%
   20     245.5     0.287    0.1%
   40     249.7      0.29    0.1%
   60     254.7     0.218    0.0%
   80     259.7     0.418    0.1%
  100     263.9     0.395    0.1%
  120     268.2     0.197    0.0%
  140     273.2     0.123    0.0%
  160     277.4     0.099    0.0%
  180     282.5      0.32    0.1%
  200     286.7     0.175    0.0%
  220     291.7     0.238    0.0%
  240     296.1      0.34    0.1%
  260     302.1     4.522    1.4%
  280       305     0.225    0.0%
  300     310.7     4.224    1.3%
  320     313.9     0.157    0.0%
  340     319.1     0.248    0.0%
  360     323.5     0.263    0.0%
  380     331.9     4.034    1.2%
  400     332.4     0.243    0.0%
  420     336.9     0.186    0.0%
  440     341.8     0.159    0.0%
  460     346.1     0.326    0.0%
  480     354.5     11.46    3.2%
  500     359.7     11.24    3.1%
  520       359     0.619    0.1%
  540     369.2     8.477    2.2%
  560     368.9     0.403    0.1%
  580     373.2     0.604    0.1%
  600     378.3     0.549    0.1%
  620     381.5     3.678    0.9%
  640       387     0.494    0.1%
  660     390.8     2.291    0.5%
  680       396     0.461    0.1%
  700     400.9     0.794    0.1%
  720       405     0.578    0.1%
  740     410.6     0.541    0.1%
  760     412.8     3.686    0.8%
  780     419.6       0.5    0.1%
  800     423.5     0.336    0.0%
  820     432.5     7.981    1.8%
  840     435.9     5.775    1.3%
  860     435.9     3.632    0.8%
  880     442.4     0.308    0.0%
  900     446.3     0.277    0.0%
  920     449.5     3.873    0.8%
  940     454.9     3.568    0.7%
  960     459.7     0.341    0.0%
  980     465.3     0.616    0.1%
 1000     469.8     0.493    0.1%
 1020     473.9     6.216    1.3%

Quality and confidence:
param     error
n             0

Model:
Time ~=    241.5
    + n    0.228
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    242.8
    + r    59.06
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     242.9     0.236    0.0%
    1     301.9     0.326    0.1%

Quality and confidence:
param     error
r         0.134

Model:
Time ~=    242.9
    + r    59.04
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    252.9
    + r    243.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.7     0.235    0.0%
    1     491.3     0.856    0.1%
    2     734.4     3.129    0.4%
    3     986.6     13.75    1.3%
    4      1238     11.21    0.9%
    5      1478     11.94    0.8%
    6      1713     8.823    0.5%
    7      1973     6.738    0.3%
    8      2197     13.64    0.6%
    9      2446     8.252    0.3%
   10      2698     5.928    0.2%
   11      2927     14.72    0.5%
   12      3179     16.31    0.5%
   13      3419     13.57    0.3%
   14      3656     7.929    0.2%
   15      3905     9.506    0.2%
   16      4152     16.43    0.3%
   17      4409     12.87    0.2%
   18      4637      12.7    0.2%
   19      4894     28.07    0.5%
   20      5130      23.7    0.4%

Quality and confidence:
param     error
r          0.17

Model:
Time ~=    251.5
    + r    243.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    264.9
    + r    408.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     239.2     0.144    0.0%
    1       665     1.436    0.2%
    2      1079     12.92    1.1%
    3      1493     11.09    0.7%
    4      1895     12.25    0.6%
    5      2305     10.76    0.4%
    6      2724     18.23    0.6%
    7      3130     11.28    0.3%
    8      3553     17.82    0.5%
    9      3948     12.59    0.3%
   10      4346     9.471    0.2%
   11      4775     24.25    0.5%
   12      5223     29.89    0.5%
   13      5610     17.03    0.3%
   14      6001     25.28    0.4%
   15      6371     19.04    0.2%
   16      6796     21.09    0.3%
   17      7216     23.44    0.3%
   18      7586     16.07    0.2%
   19      8002      20.8    0.2%
   20      8381     19.65    0.2%

Quality and confidence:
param     error
r         0.329

Model:
Time ~=    271.5
    + r    407.8
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    739.3
    + t      402
    + n    86.98
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      2069     7.833    0.3%
    1    16      2576     8.397    0.3%
    2    16      2948     9.057    0.3%
    3    16      3385     27.18    0.8%
    4     0      2301     11.66    0.5%
    4     1      2431     7.045    0.2%
    4     2      2476     12.13    0.4%
    4     3      2578     18.17    0.7%
    4     4      2662     20.83    0.7%
    4     5      2726     20.93    0.7%
    4     6      2802     10.96    0.3%
    4     7      2889     10.77    0.3%
    4     8      2964     11.93    0.4%
    4     9      3065     21.56    0.7%
    4    10      3174     8.206    0.2%
    4    11      3241     13.42    0.4%
    4    12      3327     14.04    0.4%
    4    13      3423     6.787    0.1%
    4    14      3533     10.24    0.2%
    4    15      3615     12.81    0.3%
    4    16      3711     14.01    0.3%

Quality and confidence:
param     error
t         2.401
n         0.473

Model:
Time ~=    726.7
    + t    392.2
    + n     88.1
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    127.2
    + r    55.43
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     128.8     0.184    0.1%
    1     188.8     0.262    0.1%
    2     232.1     0.464    0.1%
    3     305.4     2.651    0.8%
    4       341     0.623    0.1%
    5     409.1     0.482    0.1%
    6     456.3     1.092    0.2%
    7     509.5     0.883    0.1%
    8     571.8     13.57    2.3%
    9     621.3     3.168    0.5%
   10     674.5     1.232    0.1%
   11     735.4      2.15    0.2%
   12     806.8     18.23    2.2%
   13     849.9     7.716    0.9%
   14     907.1     13.33    1.4%
   15     954.8     2.571    0.2%
   16      1011     8.975    0.8%
   17      1075     9.953    0.9%
   18      1128     7.081    0.6%
   19      1189      12.3    1.0%
   20      1244     10.88    0.8%

Quality and confidence:
param     error
r         0.113

Model:
Time ~=      126
    + r    55.69
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    41.28
    + r    529.4
              µs

Reads = 4 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     243.9     0.265    0.1%
    1     692.1     2.561    0.3%
    2      1152     11.25    0.9%
    3      1661     10.16    0.6%
    4      2141      14.4    0.6%
    5      2663     12.47    0.4%
    6      3171     7.241    0.2%
    7      3684      12.9    0.3%
    8      4167     18.32    0.4%
    9      4757     21.48    0.4%
   10      5306     22.76    0.4%
   11      5830     24.48    0.4%
   12      6387     15.83    0.2%
   13      6887     18.96    0.2%
   14      7390     29.41    0.3%
   15      8003     45.48    0.5%
   16      8479     29.94    0.3%
   17      9031      25.4    0.2%
   18      9778     39.73    0.4%
   19     10280     48.11    0.4%
   20     10860     39.09    0.3%

Quality and confidence:
param     error
r         1.166

Model:
Time ~=    37.45
    + r    532.3
              µs

Reads = 4 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_new_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      770
    + n     31.4
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     703.4     13.93    1.9%
    1     815.4     11.99    1.4%
    2     838.6     2.727    0.3%
    3     868.9     6.609    0.7%
    4     901.7      9.37    1.0%
    5     924.4     3.946    0.4%
    6     963.4     11.52    1.1%
    7       988     5.761    0.5%
    8      1031     10.42    1.0%
    9      1054     13.65    1.2%
   10      1079     6.388    0.5%
   11      1136     4.997    0.4%
   12      1148      15.2    1.3%
   13      1183     11.97    1.0%
   14      1218     14.15    1.1%
   15      1245     12.46    1.0%
   16      1263     12.04    0.9%

Quality and confidence:
param     error
n         0.317

Model:
Time ~=    761.4
    + n     32.5
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_old_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    788.3
    + n    11.12
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     699.3     8.114    1.1%
    1     792.4     10.43    1.3%
    2     832.6      11.2    1.3%
    3     841.1     12.05    1.4%
    4     839.7     1.763    0.2%
    5     849.7     9.074    1.0%
    6     861.2     11.55    1.3%
    7       864     5.869    0.6%
    8     877.9     4.979    0.5%
    9       884     4.537    0.5%
   10     896.6     9.601    1.0%
   11     902.9     2.475    0.2%
   12     909.3     6.846    0.7%
   13     931.1     5.201    0.5%
   14     944.6     7.281    0.7%
   15     964.8     7.142    0.7%
   16     969.9     7.009    0.7%

Quality and confidence:
param     error
n         0.374

Model:
Time ~=    775.7
    + n     12.3
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    112.9
    + r    501.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.5     0.169    0.0%
    1     721.9     14.34    1.9%
    2      1156      10.3    0.8%
    3      1630     9.752    0.5%
    4      2093     12.34    0.5%
    5      2576      14.3    0.5%
    6      3064     13.97    0.4%
    7      3545     13.86    0.3%
    8      4112     20.99    0.5%
    9      4604     18.74    0.4%
   10      5089     28.02    0.5%
   11      5593     20.53    0.3%
   12      6095     16.02    0.2%
   13      6560     29.97    0.4%
   14      7098     26.08    0.3%
   15      7597         8    0.1%
   16      8098     29.09    0.3%
   17      8616      16.7    0.1%
   18      9262     44.52    0.4%
   19      9808     69.61    0.7%
   20     10350     23.44    0.2%

Quality and confidence:
param     error
r         0.961

Model:
Time ~=     99.2
    + r    503.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    753.2
    + n    11.23
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     697.4      1.45    0.2%
    1     751.7     2.153    0.2%
    2       786     1.933    0.2%
    3     794.8     2.399    0.3%
    4     801.6     1.164    0.1%
    5     824.3     11.82    1.4%
    6     821.2     4.087    0.4%
    7     829.1     2.235    0.2%
    8     846.7     7.952    0.9%
    9     845.9     3.521    0.4%
   10       853      3.08    0.3%
   11     865.7     3.331    0.3%
   12     866.5     1.227    0.1%
   13     902.9     9.214    1.0%
   14     903.3      1.55    0.1%
   15     928.8       7.9    0.8%
   16     941.5     6.237    0.6%

Quality and confidence:
param     error
n         0.259

Model:
Time ~=    742.8
    + n    12.01
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    123.4
    + r    441.3
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     244.9     0.229    0.0%
    1     628.9     11.19    1.7%
    2      1024     13.66    1.3%
    3      1459      7.27    0.4%
    4      1877     11.78    0.6%
    5      2289     8.477    0.3%
    6      2734     14.36    0.5%
    7      3157     13.32    0.4%
    8      3587     9.559    0.2%
    9      4112     17.49    0.4%
   10      4501     24.16    0.5%
   11      4941     23.56    0.4%
   12      5402     21.26    0.3%
   13      5847     14.75    0.2%
   14      6263     25.67    0.4%
   15      6702     19.64    0.2%
   16      7166     15.71    0.2%
   17      7626      32.9    0.4%
   18      8150     42.34    0.5%
   19      8719     72.02    0.8%
   20      9099     27.07    0.2%

Quality and confidence:
param     error
r         0.844

Model:
Time ~=    108.3
    + r    444.1
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    709.6
    + n    68.28
              µs

Reads = 104 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     629.4     2.634    0.4%
    1     760.4     5.208    0.6%
    2     867.8     8.045    0.9%
    3     927.5     8.283    0.8%
    4     994.5     9.797    0.9%
    5      1057     9.995    0.9%
    6      1125     9.968    0.8%
    7      1184       2.4    0.2%
    8      1253      11.3    0.9%
    9      1310     8.943    0.6%
   10      1387     14.08    1.0%
   11      1442     6.222    0.4%
   12      1504      7.82    0.5%
   13      1601     11.32    0.7%
   14      1659     13.89    0.8%
   15      1748     8.363    0.4%
   16      1810     14.13    0.7%

Quality and confidence:
param     error
n         0.376

Model:
Time ~=    695.3
    + n    69.45
              µs

Reads = 104 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    732.4
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     230.1     0.117    0.0%
    1     799.7     2.667    0.3%
    2      1457     10.51    0.7%
    3      2146     9.915    0.4%
    4      2866     10.89    0.3%
    5      3552     18.41    0.5%
    6      4267     20.63    0.4%
    7      4993     32.98    0.6%
    8      5690     30.84    0.5%
    9      6422     16.26    0.2%
   10      7174     23.94    0.3%
   11      7937     31.76    0.4%
   12      8658     27.62    0.3%
   13      9427     34.36    0.3%
   14     10110     19.92    0.1%
   15     10890     17.04    0.1%
   16     11640     36.92    0.3%
   17     12330     32.31    0.2%
   18     13340      42.7    0.3%
   19     14140     23.46    0.1%
   20     14910     39.86    0.2%

Quality and confidence:
param     error
r          1.58

Model:
Time ~=        0
    + r    736.2
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    643.2
    + n    10.04
              µs

Reads = 104 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     576.4     1.921    0.3%
    1     645.6     11.72    1.8%
    2     670.6     2.646    0.3%
    3     676.5     1.497    0.2%
    4     689.1     7.438    1.0%
    5     709.2      12.6    1.7%
    6     704.3     7.298    1.0%
    7     712.5     2.351    0.3%
    8     743.7     1.561    0.2%
    9     728.8     8.088    1.1%
   10     727.9     2.113    0.2%
   11     735.2     1.794    0.2%
   12     755.2     11.59    1.5%
   13       759     3.797    0.5%
   14     779.3     3.643    0.4%
   15     812.5     12.81    1.5%
   16     803.5     11.44    1.4%

Quality and confidence:
param     error
n         0.317

Model:
Time ~=      632
    + n    10.92
              µs

Reads = 104 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    95.36
    + r    549.9
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     246.2     0.375    0.1%
    1       730      3.54    0.4%
    2      1240     7.921    0.6%
    3      1774     9.404    0.5%
    4      2262     8.682    0.3%
    5      2816     14.17    0.5%
    6      3340      20.9    0.6%
    7      3866     13.81    0.3%
    8      4347     24.95    0.5%
    9      4991     29.98    0.6%
   10      5519     28.78    0.5%
   11      6105     19.18    0.3%
   12      6639     24.01    0.3%
   13      7202     36.84    0.5%
   14      7741     41.16    0.5%
   15      8284     18.73    0.2%
   16      9072     177.8    1.9%
   17      9489      56.6    0.5%
   18     10150     51.78    0.5%
   19     10650     20.32    0.1%
   20     11250      51.8    0.4%

Quality and confidence:
param     error
r         1.174

Model:
Time ~=    70.59
    + r    553.6
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    818.4
    + n    70.04
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     730.4     2.301    0.3%
    1     868.4     9.215    1.<truncated>...
```

</details>",10691,2022-01-19T13:31:29Z,0
1885,athei,/benchmark runtime pallet pallet_contracts,10691,2022-01-24T14:14:54Z,0
1886,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-fix-precharge"" with command cargo run --quiet --profile=production  --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

Toolchain: stable-x86_64-unknown-linux-gnu (default)
rustc 1.57.0 (f1edd0429 2021-11-29)

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    1.636
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    1.636
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    7.753
    + k    0.752
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     10.09      0.05    0.4%
   20     26.36     0.072    0.2%
   40     40.21       0.2    0.4%
   60     53.42     0.251    0.4%
   80     65.58     0.286    0.4%
  100     79.38      0.35    0.4%
  120     94.29     0.943    1.0%
  140     109.8     0.466    0.4%
  160     123.9     0.556    0.4%
  180     139.9     0.334    0.2%
  200     153.1     0.502    0.3%
  220     169.2       0.9    0.5%
  240     185.4     0.593    0.3%
  260     201.2     0.804    0.3%
  280     215.3     0.719    0.3%
  300     230.9     0.734    0.3%
  320     247.9     0.947    0.3%
  340     262.4     0.517    0.1%
  360     278.6     1.135    0.4%
  380     296.3     1.221    0.4%
  400     310.3     0.572    0.1%
  420     324.8      0.98    0.3%
  440     340.7     1.477    0.4%
  460     364.9     6.356    1.7%
  480     371.3     1.181    0.3%
  500     388.5     1.041    0.2%
  520     405.2     5.485    1.3%
  540     417.5     1.546    0.3%
  560     432.7     1.251    0.2%
  580       446     1.016    0.2%
  600     461.9     0.952    0.2%
  620     475.5     1.092    0.2%
  640     489.4     2.403    0.4%
  660     505.8     1.102    0.2%
  680     523.4     1.376    0.2%
  700       537     2.533    0.4%
  720     550.6     1.196    0.2%
  740     565.5     1.046    0.1%
  760     581.1     2.337    0.4%
  780     593.7     1.817    0.3%
  800     606.5     1.538    0.2%
  820     622.5      1.12    0.1%
  840       651     7.258    1.1%
  860     654.7     2.077    0.3%
  880     669.9     1.111    0.1%
  900     682.6     1.073    0.1%
  920     701.5     6.502    0.9%
  940     707.7     0.594    0.0%
  960       723     1.112    0.1%
  980     739.3     1.963    0.2%
 1000       757     3.808    0.5%
 1020     770.1     2.994    0.3%

Quality and confidence:
param     error
k             0

Model:
Time ~=     7.84
    + k    0.752
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     20.4
    + q    0.111
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     1.657     0.029    1.7%
   20     17.15      0.09    0.5%
   40     22.98      0.11    0.4%
   60     27.56     0.108    0.3%
   80     32.12     0.079    0.2%
  100     37.53     0.692    1.8%
  120     41.11     0.172    0.4%
  140     45.23     0.163    0.3%
  160      49.4     0.229    0.4%
  180     54.09     0.257    0.4%
  200     58.39     0.188    0.3%
  220     62.94     0.155    0.2%
  240     67.15     0.149    0.2%
  260     71.46     0.169    0.2%
  280        76     0.232    0.3%
  300     71.26     0.238    0.3%
  320     75.23     0.859    1.1%
  340     78.32     0.187    0.2%
  360     82.35     0.262    0.3%
  380     86.65     0.176    0.2%
  400     90.91     0.215    0.2%
  420     94.98     0.329    0.3%
  440     99.25     0.328    0.3%
  460     66.35     0.236    0.3%
  480     68.67     0.244    0.3%
  500     70.99     0.182    0.2%
  520     74.24     0.728    0.9%
  540     75.72     0.233    0.3%
  560     78.22     0.399    0.5%
  580     81.26     0.146    0.1%
  600     83.07     0.309    0.3%
  620     85.59     0.275    0.3%
  640     87.93      0.44    0.5%
  660     91.09     0.344    0.3%
  680     93.37     0.333    0.3%
  700     94.88     0.236    0.2%
  720     97.29     0.508    0.5%
  740     100.3     0.305    0.3%
  760     103.1     0.264    0.2%
  780     105.5     0.679    0.6%
  800     108.3      0.31    0.2%
  820       111     0.368    0.3%
  840     112.1     0.425    0.3%
  860     114.2     0.449    0.3%
  880     118.4     0.418    0.3%
  900       121     0.474    0.3%
  920     122.1     0.463    0.3%
  940     124.7       0.6    0.4%
  960     127.9     0.355    0.2%
  980     131.3       0.6    0.4%
 1000     132.1     0.493    0.3%
 1020     134.3      0.37    0.2%

Quality and confidence:
param     error
q         0.001

Model:
Time ~=    31.91
    + q    0.098
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""reinstrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    25.54
    + c    69.55
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     28.15     0.192    0.6%
    2     169.9     1.428    0.8%
    4     305.3     0.787    0.2%
    6     440.6     7.309    1.6%
    8     577.9     0.563    0.0%
   10     720.5     9.782    1.3%
   12     858.5     12.73    1.4%
   14      1016     13.31    1.3%
   16      1142      11.2    0.9%
   18      1276     12.94    1.0%
   20      1406     11.63    0.8%
   22      1537     11.47    0.7%
   24      1678     14.93    0.8%
   26      1841     12.29    0.6%
   28      1986     12.12    0.6%
   30      2114     12.71    0.6%
   32      2248     11.99    0.5%
   34      2392     15.02    0.6%
   36      2546     11.14    0.4%
   38      2670     4.561    0.1%
   40      2795     11.81    0.4%
   42      2936     2.447    0.0%
   44      3063     6.608    0.2%
   46      3190     6.639    0.2%
   48      3326     12.52    0.3%
   50      3523      15.8    0.4%
   52      3659     18.89    0.5%
   54      3804     11.91    0.3%
   56      3926     16.84    0.4%
   58      4070     22.75    0.5%
   60      4187     5.493    0.1%
   62      4325     9.278    0.2%
   64      4470      15.9    0.3%
   66      4625      16.1    0.3%
   68      4771     13.72    0.2%
   70      4905     12.32    0.2%
   72      5034     11.62    0.2%
   74      5158     16.94    0.3%
   76      5302     10.86    0.2%
   78      5437     6.992    0.1%
   80      5567     13.94    0.2%
   82      5698      13.4    0.2%
   84      5829     20.31    0.3%
   86      5975     15.61    0.2%
   88      6105     26.73    0.4%
   90      6227      15.9    0.2%
   92      6377     23.43    0.3%
   94      6506     19.47    0.2%
   96      6645     17.78    0.2%
   98      6905      13.8    0.1%
  100      7043     20.05    0.2%
  102      7166     17.16    0.2%
  104      7311     28.46    0.3%
  106      7460     22.12    0.2%
  108      7572      17.1    0.2%
  110      7725     23.04    0.2%
  112      7814     15.74    0.2%
  114      7979      15.2    0.1%
  116      8109     25.31    0.3%
  118      8235     13.48    0.1%
  120      8388     18.56    0.2%
  122      8511     17.14    0.2%
  124      8645      16.5    0.1%
  126      8801     15.57    0.1%
  128      8942     28.56    0.3%

Quality and confidence:
param     error
c         0.032

Model:
Time ~=    18.89
    + c    69.66
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""call_with_code_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    220.9
    + c    58.14
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     240.3     0.335    0.1%
    2     356.8     0.722    0.2%
    4     456.9     0.595    0.1%
    6     572.5     11.37    1.9%
    8     684.6     0.466    0.0%
   10     796.1     4.758    0.5%
   12     907.9     9.182    1.0%
   14      1042     11.07    1.0%
   16      1165     11.89    1.0%
   18      1254     7.119    0.5%
   20      1363     12.18    0.8%
   22      1482      14.6    0.9%
   24      1581     11.48    0.7%
   26      1756     13.66    0.7%
   28      1864     12.75    0.6%
   30      1965     11.21    0.5%
   32      2081     14.95    0.7%
   34      2199     17.21    0.7%
   36      2313     12.07    0.5%
   38      2416     16.07    0.6%
   40      2539     10.88    0.4%
   42      2645     22.96    0.8%
   44      2751     2.594    0.0%
   46      2855     12.31    0.4%
   48      2960     19.68    0.6%
   50      3155     9.597    0.3%
   52      3275     7.513    0.2%
   54      3348     8.777    0.2%
   56      3466     18.01    0.5%
   58      3587     20.92    0.5%
   60      3697     22.25    0.6%
   62      3801     18.58    0.4%
   64      3936     11.29    0.2%
   66      4044     17.49    0.4%
   68      4161     9.479    0.2%
   70      4268      6.41    0.1%
   72      4362     9.332    0.2%
   74      4488     16.36    0.3%
   76      4597     16.48    0.3%
   78      4717     30.05    0.6%
   80      4820     16.45    0.3%
   82      4908     13.51    0.2%
   84      5028     21.57    0.4%
   86      5139     18.52    0.3%
   88      5245     16.41    0.3%
   90      5350     21.26    0.3%
   92      5466      17.7    0.3%
   94      5559     15.44    0.2%
   96      5677     19.67    0.3%
   98      5997     13.23    0.2%
  100      6116     14.56    0.2%
  102      6242     23.87    0.3%
  104      6347     19.83    0.3%
  106      6464      12.5    0.1%
  108      6546     13.45    0.2%
  110      6688     15.83    0.2%
  112      6796     22.09    0.3%
  114      6905     16.61    0.2%
  116      6993      14.3    0.2%
  118      7109     18.02    0.2%
  120      7289        49    0.6%
  122      7328     16.96    0.2%
  124      7436     15.09    0.2%
  126      7548     16.14    0.2%
  128      7647      22.7    0.2%

Quality and confidence:
param     error
c         0.054

Model:
Time ~=    204.9
    + c    58.29
              µs

Reads = 4 + (0 * c)
Writes = 2 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    235.7
    + c    156.4
    + s    1.832
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2123      12.5    0.5%
    1  1024      2281     16.89    0.7%
    2  1024      2424     13.81    0.5%
    3  1024      2436     21.29    0.8%
    4  1024      2752      10.8    0.3%
    5  1024      2926     12.06    0.4%
    6  1024      2904     4.835    0.1%
    7  1024      3217     10.35    0.3%
    8  1024      3371     21.01    0.6%
    9  1024      3392     14.08    0.4%
   10  1024      3693      10.9    0.2%
   11  1024      3849     3.584    0.0%
   12  1024      3828      13.9    0.3%
   13  1024      4200     18.61    0.4%
   14  1024      4315     16.44    0.3%
   15  1024      4321     15.45    0.3%
   16  1024      4626     9.141    0.1%
   17  1024      4809      14.9    0.3%
   18  1024      4798     9.677    0.2%
   19  1024      5127     13.97    0.2%
   20  1024      5261     10.24    0.1%
   21  1024      5281     14.46    0.2%
   22  1024      5567      13.1    0.2%
   23  1024      5719     17.72    0.3%
   24  1024      5721     28.92    0.5%
   25  1024      6106     26.91    0.4%
   26  1024      6210     18.81    0.3%
   27  1024      6214     19.75    0.3%
   28  1024      6531     18.97    0.2%
   29  1024      6665      19.1    0.2%
   30  1024      6668     30.77    0.4%
   31  1024      6970     19.04    0.2%
   32  1024      7117      27.1    0.3%
   33  1024      7180     30.78    0.4%
   34  1024      7505     32.81    0.4%
   35  1024      7637     21.48    0.2%
   36  1024      7626     17.12    0.2%
   37  1024      7951     18.76    0.2%
   38  1024      8081     10.84    0.1%
   39  1024      8099     19.15    0.2%
   40  1024      8409     25.34    0.3%
   41  1024      8543     15.42    0.1%
   42  1024      8540     45.48    0.5%
   43  1024      8853     35.06    0.3%
   44  1024      9012     21.92    0.2%
   45  1024      8979     22.82    0.2%
   46  1024      9307     26.42    0.2%
   47  1024      9429     18.58    0.1%
   48  1024      9430     33.45    0.3%
   49  1024      9859     22.06    0.2%
   50  1024     10010      29.3    0.2%
   51  1024      9988     26.24    0.2%
   52  1024     10280      17.8    0.1%
   53  1024     10450     19.77    0.1%
   54  1024     10440     30.76    0.2%
   55  1024     10770     17.68    0.1%
   56  1024     10920     30.13    0.2%
   57  1024     10880     17.91    0.1%
   58  1024     11190     30.76    0.2%
   59  1024     11370     13.92    0.1%
   60  1024     11350     32.05    0.2%
   61  1024     11630     28.32    0.2%
   62  1024     11800     24.05    0.2%
   63  1024     11840     34.72    0.2%
   64     0     10230     30.64    0.2%
   64    20     10260     22.49    0.2%
   64    40     10300     23.95    0.2%
   64    60     10330     28.15    0.2%
   64    80     10370     43.78    0.4%
   64   100     10400     22.94    0.2%
   64   120     10440     32.84    0.3%
   64   140     10470     25.99    0.2%
   64   160     10510      29.4    0.2%
   64   180     10580     50.52    0.4%
   64   200     10580     26.09    0.2%
   64   220     10620     35.65    0.3%
   64   240     10640     20.64    0.1%
   64   260     10700     29.63    0.2%
   64   280     10730      31.9    0.2%
   64   300     10780     28.74    0.2%
   64   320     10820     37.24    0.3%
   64   340     10850     35.38    0.3%
   64   360     10860     22.81    0.2%
   64   380     10910     43.65    0.3%
   64   400     10940     26.81    0.2%
   64   420     10960     23.58    0.2%
   64   440     11010     24.64    0.2%
   64   460     11060     29.99    0.2%
   64   480     11080     10.99    0.0%
   64   500     11130     33.44    0.3%
   64   520     11210     58.88    0.5%
   64   540     11240     30.54    0.2%
   64   560     11230     18.56    0.1%
   64   580     11310     51.95    0.4%
   64   600     11330     32.39    0.2%
   64   620     11390     39.39    0.3%
   64   640     11410     17.89    0.1%
   64   660     11450     24.61    0.2%
   64   680     11490      25.8    0.2%
   64   700     11520     51.14    0.4%
   64   720     11550     39.48    0.3%
   64   740     11610     31.04    0.2%
   64   760     11630     38.42    0.3%
   64   780     11650     28.65    0.2%
   64   800     11700     27.56    0.2%
   64   820     11730     29.88    0.2%
   64   840     11780     17.98    0.1%
   64   860     11800     20.77    0.1%
   64   880     11930     98.18    0.8%
   64   900     11860     22.81    0.1%
   64   920     11940     34.29    0.2%
   64   940     11940     32.86    0.2%
   64   960     11950     39.09    0.3%
   64   980     11990     33.01    0.2%
   64  1000     12040     22.78    0.1%
   64  1020     12050     33.89    0.2%
   64  1024     12110      22.3    0.1%

Quality and confidence:
param     error
c         0.114
s         0.007

Model:
Time ~=    211.1
    + c    156.5
    + s     1.83
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 6 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    151.4
    + s     1.75
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     149.9     0.246    0.1%
   20     187.5     2.081    1.1%
   40     224.5      2.11    0.9%
   60       257     2.498    0.9%
   80       291     0.157    0.0%
  100     326.7     0.667    0.2%
  120     368.8     6.191    1.6%
  140     396.5     0.476    0.1%
  160     430.9      0.57    0.1%
  180     466.8     0.453    0.0%
  200       506     9.392    1.8%
  220     536.4     0.606    0.1%
  240     570.8     0.783    0.1%
  260     612.9     13.66    2.2%
  280     645.1     6.635    1.0%
  300     678.8     8.274    1.2%
  320     714.4     9.387    1.3%
  340     760.7     12.47    1.6%
  360       785     10.96    1.3%
  380     819.5     10.52    1.2%
  400     856.2     11.55    1.3%
  420     895.5     13.89    1.5%
  440     933.1     15.01    1.6%
  460     967.9     12.27    1.2%
  480     989.9     1.466    0.1%
  500      1038     15.68    1.5%
  520      1080      19.5    1.8%
  540      1108      13.6    1.2%
  560      1138     14.79    1.2%
  580      1175     13.84    1.1%
  600      1212     16.97    1.4%
  620      1247      15.2    1.2%
  640      1284     14.65    1.1%
  660      1310     11.72    0.8%
  680      1341     3.744    0.2%
  700      1396     15.11    1.0%
  720      1417     12.21    0.8%
  740      1458      14.8    1.0%
  760      1485     11.52    0.7%
  780      1558     12.89    0.8%
  800      1563     13.37    0.8%
  820      1591     12.01    0.7%
  840      1634     14.12    0.8%
  860      1676     14.84    0.8%
  880      1701     13.51    0.7%
  900      1733      14.5    0.8%
  920      1782     15.45    0.8%
  940      1803     13.93    0.7%
  960      1852     12.69    0.6%
  980      1896     11.57    0.6%
 1000      1905     12.22    0.6%
 1020      1972     8.682    0.4%

Quality and confidence:
param     error
s         0.001

Model:
Time ~=    150.4
    + s    1.769
              µs

Reads = 6 + (0 * s)
Writes = 5 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    117.2
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    117.2
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""upload_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)
Storage: Contracts OwnerInfoOf (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    55.02
    + c    72.42
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     51.24     0.365    0.7%
    1     128.9     0.302    0.2%
    2     197.5     0.325    0.1%
    3     271.5      2.55    0.9%
    4     346.1     0.404    0.1%
    5     416.5     0.324    0.0%
    6     478.9     1.074    0.2%
    7       556     0.821    0.1%
    8       627     0.541    0.0%
    9       703      8.67    1.2%
   10     773.8      4.35    0.5%
   11       845     10.83    1.2%
   12     918.4     14.97    1.6%
   13      1016     11.15    1.0%
   14      1076     15.65    1.4%
   15      1138     11.84    1.0%
   16      1215     12.19    1.0%
   17      1315     16.47    1.2%
   18      1356     15.46    1.1%
   19      1421     11.64    0.8%
   20      1502     16.05    1.0%
   21      1570     13.64    0.8%
   22      1630     16.07    0.9%
   23      1718     10.73    0.6%
   24      1784     12.12    0.6%
   25      1872     12.24    0.6%
   26      1968     5.572    0.2%
   27      2017     14.36    0.7%
   28      2087     13.75    0.6%
   29      2166     4.184    0.1%
   30      2228     13.75    0.6%
   31      2289     10.58    0.4%
   32      2369     12.51    0.5%
   33      2460     16.15    0.6%
   34      2516      12.7    0.5%
   35      2582     14.11    0.5%
   36      2668     10.34    0.3%
   37      2727     11.37    0.4%
   38      2786      9.32    0.3%
   39      2873     7.113    0.2%
   40      2935     13.59    0.4%
   41      3018     11.16    0.3%
   42      3083     13.42    0.4%
   43      3154     13.15    0.4%
   44      3219     13.54    0.4%
   45      3309      15.7    0.4%
   46      3364     17.39    0.5%
   47      3434     13.61    0.3%
   48      3508     13.57    0.3%
   49      3649     17.22    0.4%
   50      3722     15.22    0.4%
   51      3859     11.66    0.3%
   52      3860     15.36    0.3%
   53      3918     13.93    0.3%
   54      3985      8.66    0.2%
   55      4056     16.59    0.4%
   56      4124      24.2    0.5%
   57      4192     9.553    0.2%
   58      4264     14.85    0.3%
   59      4321     15.37    0.3%
   60      4404     10.77    0.2%
   61      4466     12.22    0.2%
   62      4560     21.08    0.4%
   63      4608     9.009    0.1%
   64      4676     7.783    0.1%

Quality and confidence:
param     error
c         0.049

Model:
Time ~=    51.12
    + c    72.62
              µs

Reads = 1 + (0 * c)
Writes = 3 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""remove_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts OwnerInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:0 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.22
              µs

Reads = 1
Writes = 3

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    24.22
              µs

Reads = 1
Writes = 3

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    221.5
    + r    56.05
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     226.7     0.238    0.1%
    1     271.9     0.236    0.0%
    2     329.1     0.427    0.1%
    3     383.2     0.542    0.1%
    4       440     1.774    0.4%
    5     493.5     2.151    0.4%
    6     547.6     1.765    0.3%
    7       624     6.108    0.9%
    8     680.4     11.87    1.7%
    9     728.5     0.576    0.0%
   10       797     8.757    1.0%
   11     838.3     6.501    0.7%
   12     902.4     12.28    1.3%
   13     949.7      9.55    1.0%
   14      1016     13.35    1.3%
   15      1068     13.37    1.2%
   16      1122     11.77    1.0%
   17      1181     15.68    1.3%
   18      1226     4.173    0.3%
   19      1286     11.22    0.8%
   20      1341     13.83    1.0%

Quality and confidence:
param     error
r         0.126

Model:
Time ~=    219.7
    + r    56.38
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      220
    + r    56.88
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       227     0.219    0.0%
    1     273.3     0.207    0.0%
    2     330.3     0.751    0.2%
    3       385     0.458    0.1%
    4     441.9     0.734    0.1%
    5     497.2     0.392    0.0%
    6     552.6     0.506    0.0%
    7       633     12.32    1.9%
    8     680.5     2.335    0.3%
    9     735.6     1.295    0.1%
   10     790.8     1.626    0.2%
   11     848.8     10.51    1.2%
   12       917     14.39    1.5%
   13       960     8.348    0.8%
   14      1019     5.471    0.5%
   15      1078     11.11    1.0%
   16      1131     8.422    0.7%
   17      1187     8.127    0.6%
   18      1250     12.66    1.0%
   19      1308     17.01    1.3%
   20      1357     14.42    1.0%

Quality and confidence:
param     error
r         0.117

Model:
Time ~=    218.3
    + r    57.24
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    221.4
    + r    56.28
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     226.9     0.199    0.0%
    1     272.4     0.206    0.0%
    2       329     0.296    0.0%
    3     383.8     0.412    0.1%
    4     441.1     2.328    0.5%
    5     495.5     1.998    0.4%
    6     548.9     2.091    0.3%
    7     626.1     7.578    1.2%
    8     675.5      0.78    0.1%
    9     731.1     1.632    0.2%
   10     784.4     0.662    0.0%
   11     843.6     9.449    1.1%
   12     892.8     0.805    0.0%
   13     954.6     8.599    0.9%
   14      1013     6.744    0.6%
   15      1073      13.7    1.2%
   16      1125     9.697    0.8%
   17      1181     14.02    1.1%
   18      1240     13.82    1.1%
   19      1288     11.82    0.9%
   20      1350     12.44    0.9%

Quality and confidence:
param     error
r         0.104

Model:
Time ~=    217.9
    + r    56.67
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    228.6
    + r    147.1
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     233.6     0.149    0.0%
    1     366.4     1.368    0.3%
    2     517.5     1.077    0.2%
    3     667.7     3.724    0.5%
    4     806.9     11.47    1.4%
    5     963.3     6.955    0.7%
    6      1110     6.973    0.6%
    7      1270     14.11    1.1%
    8      1415     11.01    0.7%
    9      1550     15.68    1.0%
   10      1702      13.4    0.7%
   11      1848     15.56    0.8%
   12      1989     12.37    0.6%
   13      2142     4.996    0.2%
   14      2301     11.87    0.5%
   15      2444     17.26    0.7%
   16      2588     9.821    0.3%
   17      2737     12.23    0.4%
   18      2869      20.7    0.7%
   19      3014     11.27    0.3%
   20      3178     15.16    0.4%

Quality and confidence:
param     error
r         0.155

Model:
Time ~=    226.9
    + r    147.4
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    233.8
    + r    55.13
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       227     0.179    0.0%
    1     285.2     0.147    0.0%
    2       343     1.981    0.5%
    3     398.1     1.768    0.4%
    4     454.7     4.563    1.0%
    5     514.4      5.18    1.0%
    6     562.2     0.557    0.0%
    7     624.1     5.908    0.9%
    8     679.2     4.754    0.6%
    9     731.7     1.861    0.2%
   10     791.1     9.752    1.2%
   11     844.5     9.317    1.1%
   12     903.9     9.144    1.0%
   13     954.5     8.877    0.9%
   14      1008     13.99    1.3%
   15      1060     12.76    1.2%
   16      1107     4.495    0.4%
   17      1175     12.87    1.0%
   18      1221     9.976    0.8%
   19      1285     15.34    1.1%
   20      1342     14.34    1.0%

Quality and confidence:
param     error
r          0.11

Model:
Time ~=    233.1
    + r    55.33
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    234.3
    + r     54.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.1     0.156    0.0%
    1     285.8     1.636    0.5%
    2     341.2     0.263    0.0%
    3     396.4     0.632    0.1%
    4     456.3     4.884    1.0%
    5       506     0.513    0.1%
    6       561     3.744    0.6%
    7     622.3     5.192    0.8%
    8     680.8     12.49    1.8%
    9     737.1     11.06    1.5%
   10     782.7     2.186    0.2%
   11     849.3     7.804    0.9%
   12     901.9     15.13    1.6%
   13     945.8     4.264    0.4%
   14      1000     12.44    1.2%
   15      1054     11.54    1.0%
   16      1111     13.73    1.2%
   17      1153     2.751    0.2%
   18      1221     13.14    1.0%
   19      1270     14.35    1.1%
   20      1323     10.81    0.8%

Quality and confidence:
param     error
r         0.122

Model:
Time ~=    235.3
    + r     54.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    233.1
    + r    54.31
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.1     0.135    0.0%
    1     284.6     0.297    0.1%
    2     340.8     0.468    0.1%
    3     394.8     0.709    0.1%
    4     450.1     0.341    0.0%
    5       504     0.487    0.0%
    6     561.2       2.3    0.4%
    7       618     2.209    0.3%
    8     679.7     7.748    1.1%
    9     724.1     0.581    0.0%
   10     777.4     0.835    0.1%
   11     838.8     11.19    1.3%
   12       886     1.242    0.1%
   13     951.8     13.87    1.4%
   14     989.8     8.553    0.8%
   15      1046     9.781    0.9%
   16      1095     1.677    0.1%
   17      1159     13.09    1.1%
   18      1224     14.04    1.1%
   19      1265     13.37    1.0%
   20      1315     10.91    0.8%

Quality and confidence:
param     error
r         0.108

Model:
Time ~=    232.8
    + r    54.51
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    226.4
    + r    54.67
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.2     0.148    0.0%
    1       284     0.189    0.0%
    2     345.5     5.748    1.6%
    3     402.9      4.81    1.1%
    4     437.9     0.578    0.1%
    5     492.3     0.859    0.1%
    6     547.1     1.242    0.2%
    7     604.2     2.355    0.3%
    8     667.3      10.7    1.6%
    9     716.1     9.515    1.3%
   10     772.8     10.12    1.3%
   11     827.7     11.86    1.4%
   12     889.3     15.41    1.7%
   13     929.2     3.138    0.3%
   14      1008     11.49    1.1%
   15      1044     2.113    0.2%
   16      1103     10.72    0.9%
   17      1167     13.61    1.1%
   18      1216     13.77    1.1%
   19      1265     8.522    0.6%
   20      1325     12.68    0.9%

Quality and confidence:
param     error
r         0.126

Model:
Time ~=      226
    + r    54.89
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    237.7
    + r    132.5
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.1     0.116    0.0%
    1     366.1     1.369    0.3%
    2     501.9     3.351    0.6%
    3     634.5     5.109    0.8%
    4     751.2     8.423    1.1%
    5     904.7     13.26    1.4%
    6      1037     12.84    1.2%
    7      1165     10.52    0.9%
    8      1305      13.4    1.0%
    9      1434     9.409    0.6%
   10      1560     13.58    0.8%
   11      1695     7.269    0.4%
   12      1819     18.05    0.9%
   13      1972     13.79    0.6%
   14      2108     7.774    0.3%
   15      2232     11.34    0.5%
   16      2356     10.28    0.4%
   17      2489     12.84    0.5%
   18      2625     9.532    0.3%
   19      2760     12.98    0.4%
   20      2879     11.49    0.3%

Quality and confidence:
param     error
r         0.146

Model:
Time ~=    234.7
    + r    132.8
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    96.67
    + r    27.94
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     90.48      0.15    0.1%
    1     120.3     0.146    0.1%
    2     147.8     1.425    0.9%
    3       175     0.202    0.1%
    4     201.5     0.134    0.0%
    5     241.8     0.164    0.0%
    6     270.5     0.989    0.3%
    7       297     0.874    0.2%
    8     323.2     1.312    0.4%
    9     348.4     0.439    0.1%
   10     382.9     11.63    3.0%
   11     408.3     1.638    0.4%
   12     434.5     1.823    0.4%
   13     460.5     1.392    0.3%
   14     487.1     1.469    0.3%
   15     516.6     3.854    0.7%
   16     542.4     4.326    0.7%
   17     567.9     3.643    0.6%
   18     592.6     2.242    0.3%
   19     624.2       7.1    1.1%
   20     649.9     10.61    1.6%

Quality and confidence:
param     error
r          0.07

Model:
Time ~=    96.24
    + r    27.91
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    222.2
    + r    54.07
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     226.8     0.144    0.0%
    1       272     2.436    0.8%
    2     324.8     0.239    0.0%
    3     377.5     0.264    0.0%
    4     431.3      0.35    0.0%
    5     484.2     0.491    0.1%
    6     539.2     7.902    1.4%
    7     614.4      10.3    1.6%
    8     662.5     5.809    0.8%
    9     715.2     10.19    1.4%
   10     774.1     13.06    1.6%
   11     819.1     9.044    1.1%
   12       898     14.87    1.6%
   13     939.2     11.94    1.2%
   14     983.4      8.63    0.8%
   15      1036     7.729    0.7%
   16      1088     5.359    0.4%
   17      1142     7.148    0.6%
   18      1195     12.36    1.0%
   19      1247     14.13    1.1%
   20      1301     12.27    0.9%

Quality and confidence:
param     error
r         0.139

Model:
Time ~=    221.6
    + r    54.38
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      304
    + n    11.92
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     270.6     0.275    0.1%
   20       512     0.542    0.1%
   40     760.1     12.23    1.6%
   60      1010     14.82    1.4%
   80      1249     15.62    1.2%
  100      1493     14.21    0.9%
  120      1733     13.47    0.7%
  140      1970     11.47    0.5%
  160      2206     14.54    0.6%
  180      2459     8.488    0.3%
  200      2693     12.14    0.4%
  220      2931     9.703    0.3%
  240      3168     9.709    0.3%
  260      3476     15.32    0.4%
  280      3653     12.63    0.3%
  300      3893     12.94    0.3%
  320      4131     14.42    0.3%
  340      4369     13.85    0.3%
  360      4613     20.22    0.4%
  380      4835     16.69    0.3%
  400      5077     12.57    0.2%
  420      5308     13.93    0.2%
  440      5556     17.48    0.3%
  460      5794     25.28    0.4%
  480      6030     29.55    0.4%
  500      6258     16.32    0.2%
  520      6507        15    0.2%
  540      6755     22.64    0.3%
  560      7013     32.64    0.4%
  580      7221     19.19    0.2%
  600      7477     26.71    0.3%
  620      7708     37.55    0.4%
  640      7943     22.41    0.2%
  660      8176      18.6    0.2%
  680      8414     25.19    0.2%
  700      8640     22.85    0.2%
  720      8883        20    0.2%
  740      9124     17.24    0.1%
  760      9338     16.83    0.1%
  780      9597     15.13    0.1%
  800      9829     14.44    0.1%
  820     10070     23.93    0.2%
  840     10290     16.97    0.1%
  860     10560     30.81    0.2%
  880     10790     11.45    0.1%
  900     11010     21.22    0.1%
  920     11250     18.83    0.1%
  940     11500     21.51    0.1%
  960     11730     13.19    0.1%
  980     12000     32.79    0.2%
 1000     12230     29.13    0.2%
 1020     12460     25.86    0.2%

Quality and confidence:
param     error
n         0.003

Model:
Time ~=    306.4
    + n    11.91
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    222.1
    + r    3.209
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     222.1     0.114    0.0%
    1     225.3     0.186    0.0%

Quality and confidence:
param     error
r         0.072

Model:
Time ~=    222.1
    + r    3.223
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    211.5
    + n    0.229
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     211.1     0.121    0.0%
   20       216     0.118    0.0%
   40     220.8     0.283    0.1%
   60     225.2     0.158    0.0%
   80     229.9     0.126    0.0%
  100     234.4     0.155    0.0%
  120     239.1     0.133    0.0%
  140     243.7     0.181    0.0%
  160     248.6     1.667    0.6%
  180     252.8     0.162    0.0%
  200     257.4     0.154    0.0%
  220     266.6     2.184    0.8%
  240     268.5      5.08    1.8%
  260     271.2     0.186    0.0%
  280     275.9     0.202    0.0%
  300     281.7      4.91    1.7%
  320     284.8     0.223    0.0%
  340     289.6      0.24    0.0%
  360     298.8     5.846    1.9%
  380     305.3       0.2    0.0%
  400     308.7     7.266    2.3%
  420     307.6     0.124    0.0%
  440     316.3     4.442    1.4%
  460     316.6      0.19    0.0%
  480     321.4      0.29    0.0%
  500     326.1      0.16    0.0%
  520     335.9     5.902    1.7%
  540       339     5.628    1.6%
  560     344.9     6.072    1.7%
  580     348.6     5.501    1.5%
  600     357.2     5.303    1.4%
  620     358.4     5.918    1.6%
  640     362.9     6.221    1.7%
  660       371     8.756    2.3%
  680     372.3     6.138    1.6%
  700     375.6     6.073    1.6%
  720     381.3     5.956    1.5%
  740     384.9     5.625    1.4%
  760     390.1      6.17    1.5%
  780     395.9     6.387    1.6%
  800     402.7     8.891    2.2%
  820     412.8     11.14    2.6%
  840     408.5     6.019    1.4%
  860     418.4     2.785    0.6%
  880     419.4     6.459    1.5%
  900     426.4     4.643    1.0%
  920     428.3     6.161    1.4%
  940     431.6     6.012    1.3%
  960     436.2      6.19    1.4%
  980     441.8     6.196    1.4%
 1000     445.4     5.899    1.3%
 1020     451.1     6.474    1.4%

Quality and confidence:
param     error
n             0

Model:
Time ~=      211
    + n    0.237
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: Contracts OwnerInfoOf (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      214
    + r     64.4
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     213.9     0.106    0.0%
    1     278.4     0.293    0.1%

Quality and confidence:
param     error
r         0.104

Model:
Time ~=    213.9
    + r    64.45
              µs

Reads = 4 + (4 * r)
Writes = 1 + (5 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    232.2
    + r    166.6
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.5     0.115    0.0%
    1     390.5      8.14    2.0%
    2     565.5     3.297    0.5%
    3     716.6     5.405    0.7%
    4     896.2     6.549    0.7%
    5      1062     8.981    0.8%
    6      1233     12.44    1.0%
    7      1407     13.97    0.9%
    8      1566     14.55    0.9%
    9      1739     3.848    0.2%
   10      1909     7.363    0.3%
   11      2063     8.399    0.4%
   12      2237     6.032    0.2%
   13      2383     17.72    0.7%
   14      2560     11.14    0.4%
   15      2732     8.575    0.3%
   16      2883        14    0.4%
   17      3059     14.63    0.4%
   18      3231     11.96    0.3%
   19      3408     15.58    0.4%
   20      3577     9.503    0.2%

Quality and confidence:
param     error
r          0.15

Model:
Time ~=    228.2
    + r    166.9
              µs

Reads = 5 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    229.7
    + r    288.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     223.9     0.134    0.0%
    1       511      1.42    0.2%
    2     800.1     2.431    0.3%
    3      1095     12.31    1.1%
    4      1395     10.01    0.7%
    5      1675     7.377    0.4%
    6      1964     5.967    0.3%
    7      2247     8.074    0.3%
    8      2536     12.05    0.4%
    9      2844     11.34    0.3%
   10      3124     9.727    0.3%
   11      3405     12.07    0.3%
   12      3695      9.47    0.2%
   13      4001      9.62    0.2%
   14      4256     14.79    0.3%
   15      4561     13.41    0.2%
   16      4843     14.59    0.3%
   17      5141     17.01    0.3%
   18      5425     10.87    0.2%
   19      5719     19.59    0.3%
   20      5990     19.07    0.3%

Quality and confidence:
param     error
r         0.163

Model:
Time ~=    230.3
    + r    288.6
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    593.3
    + t    282.4
    + n    85.08
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      1983      16.3    0.8%
    1    16      2214     11.07    0.5%
    2    16      2505      16.4    0.6%
    3    16      2789     13.93    0.4%
    4     0      1705     10.96    0.6%
    4     1      1841     11.92    0.6%
    4     2      1896     14.82    0.7%
    4     3      1972     10.03    0.5%
    4     4      2050     10.23    0.4%
    4     5      2144     9.464    0.4%
    4     6      2245     17.21    0.7%
    4     7      2289     12.99    0.5%
    4     8      2362     12.69    0.5%
    4     9      2460     10.71    0.4%
    4    10      2557     10.59    0.4%
    4    11      2645     17.98    0.6%
    4    12      2733     17.45    0.6%
    4    13      2819     6.303    0.2%
    4    14      2926     5.322    0.1%
    4    15      2995      17.8    0.5%
    4    16      3090      14.1    0.4%

Quality and confidence:
param     error
t         1.566
n         0.308

Model:
Time ~=    601.6
    + t      279
    + n    84.81
              µs

Reads = 4 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: System Account (r:1 w:0)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    116.8
    + r    44.58
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     99.79     0.103    0.1%
    1     161.4     0.202    0.1%
    2     207.4     1.804    0.8%
    3     251.4     0.234    0.0%
    4     296.9     4.524    1.5%
    5       338     0.298    0.0%
    6     387.3     0.485    0.1%
    7       430     0.296    0.0%
    8     473.8     0.324    0.0%
    9     515.7     0.435    0.0%
   10     560.8     3.361    0.5%
   11     609.8     2.371    0.3%
   12     651.9     0.622    0.0%
   13     698.4     4.866    0.6%
   14     739.4     0.667    0.0%
   15     783.5     2.077    0.2%
   16       825     1.075    0.1%
   17     877.9     4.917    0.5%
   18     922.6     5.683    0.6%
   19     962.6     1.459    0.1%
   20      1019     13.42    1.3%

Quality and confidence:
param     error
r         0.067

Model:
Time ~=    113.5
    + r    44.89
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    69.65
    + r    411.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     214.2     0.183    0.0%
    1     577.5     1.767    0.3%
    2     946.2     10.95    1.1%
    3      1340     3.937    0.2%
    4      1705     11.18    0.6%
    5      2116     10.36    0.4%
    6      2496     16.36    0.6%
    7      2879     14.55    0.5%
    8      3252     14.88    0.4%
    9      3754     7.642    0.2%
   10      4137     19.56    0.4%
   11      4577     14.99    0.3%
   12      4990     15.55    0.3%
   13      5382     22.04    0.4%
   14      5788     38.91    0.6%
   15      6203     22.58    0.3%
   16      6652     21.13    0.3%
   17      7096     49.24    0.6%
   18      7640     17.26    0.2%
   19      8071      22.6    0.2%
   20      8512     28.73    0.3%

Quality and confidence:
param     error
r         0.995

Model:
Time ~=    59.01
    + r    414.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_new_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    623.6
    + n     30.4
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     578.8     10.12    1.7%
    1     651.9     4.447    0.6%
    2     684.3     7.376    1.0%
    3     723.6     9.859    1.3%
    4     758.3     6.339    0.8%
    5     780.5     8.993    1.1%
    6     821.3     12.95    1.5%
    7     843.4     11.17    1.3%
    8     874.3     13.07    1.4%
    9     900.7     9.908    1.0%
   10     930.6     11.89    1.2%
   11     964.2     7.217    0.7%
   12       993     13.27    1.3%
   13      1020     6.343    0.6%
   14      1047     5.247    0.5%
   15      1074     2.066    0.1%
   16      1108      5.66    0.5%

Quality and confidence:
param     error
n         0.242

Model:
Time ~=    620.4
    + n    30.94
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_old_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    647.3
    + n    10.22
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     567.6     1.729    0.3%
    1     641.7     1.897    0.2%
    2     677.1     2.505    0.3%
    3     690.5      9.26    1.3%
    4     695.7     2.089    0.3%
    5     705.9      5.26    0.7%
    6     711.8     4.432    0.6%
    7     719.8     3.866    0.5%
    8     730.2     10.37    1.4%
    9     729.9      3.18    0.4%
   10     745.4     8.373    1.1%
   11     749.3     1.909    0.2%
   12     760.2     8.371    1.1%
   13     770.4     1.897    0.2%
   14     784.7     2.903    0.3%
   15     808.2     4.925    0.6%
   16     816.1     5.112    0.6%

Quality and confidence:
param     error
n         0.317

Model:
Time ~=    632.3
    + n    11.43
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    106.7
    + r    384.7
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.1     1.839    0.8%
    1     578.9     1.262    0.2%
    2     908.3     4.378    0.4%
    3      1290     8.158    0.6%
    4      1628     7.969    0.4%
    5      2014     7.748    0.3%
    6      2369     7.358    0.3%
    7      2742     14.22    0.5%
    8      3079     12.65    0.4%
    9      3570     17.27    0.4%
   10      3902     16.01    0.4%
   11      4348     15.87    0.3%
   12      4692     21.77    0.4%
   13      5072     18.76    0.3%
   14      5459     16.15    0.2%
   15      5870     11.38    0.1%
   16      6228     15.24    0.2%
   17      6638     30.38    0.4%
   18      7170     28.66    0.3%
   19      7612      38.2    0.5%
   20      7937     46.92    0.5%

Quality and confidence:
param     error
r         0.878

Model:
Time ~=    96.62
    + r    387.2
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    635.3
    + n     10.3
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     575.8      2.08    0.3%
    1     631.3     1.974    0.3%
    2     672.6     8.337    1.2%
    3       674     1.311    0.1%
    4     684.1     4.296    0.6%
    5     700.5     9.316    1.3%
    6     698.7     8.547    1.2%
    7     707.9     3.709    0.5%
    8     718.1     7.962    1.1%
    9     721.4     1.618    0.2%
   10     738.6     11.16    1.5%
   11     746.1      1.69    0.2%
   12     747.6     5.551    0.7%
   13     767.9     8.231    1.0%
   14     772.5     1.596    0.2%
   15       791     1.618    0.2%
   16     811.6     11.99    1.4%

Quality and confidence:
param     error
n          0.27

Model:
Time ~=    625.9
    + n    11.17
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    135.1
    + r    328.8
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     216.3     0.167    0.0%
    1     506.8     8.409    1.6%
    2     817.4     6.161    0.7%
    3      1136     7.968    0.7%
    4      1457     14.08    0.9%
    5      1776     11.57    0.6%
    6      2053     9.743    0.4%
    7      2394     14.86    0.6%
    8      2673     9.633    0.3%
    9      3075     21.84    0.7%
   10      3378     12.63    0.3%
   11      3731     11.97    0.3%
   12      4068     24.64    0.6%
   13      4365     16.56    0.3%
   14      4729     35.18    0.7%
   15      5046     18.68    0.3%
   16      5362     15.82    0.2%
   17      5720     26.73    0.4%
   18      6196     46.09    0.7%
   19      6504     24.22    0.3%
   20      6863     32.51    0.4%

Quality and confidence:
param     error
r         0.741

Model:
Time ~=    115.1
    + r    331.7
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    597.9
    + n    67.36
              µs

Reads = 104 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0       522      10.3    1.9%
    1     646.7     6.287    0.9%
    2     748.1      7.94    1.0%
    3     809.1     8.737    1.0%
    4     879.3      10.8    1.2%
    5     944.4     11.04    1.1%
    6      1008     7.637    0.7%
    7      1059     3.535    0.3%
    8      1130     11.06    0.9%
    9      1192     10.29    0.8%
   10      1254     5.411    0.4%
   11      1318     8.365    0.6%
   12      1383     9.748    0.7%
   13      1465     14.81    1.0%
   14      1541      14.4    0.9%
   15      1616     12.63    0.7%
   16      1686     10.89    0.6%

Quality and confidence:
param     error
n          0.36

Model:
Time ~=    582.5
    + n    68.42
              µs

Reads = 104 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    140.5
    + r    293.2
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     228.3      1.18    0.5%
    1     480.9     3.475    0.7%
    2     732.2     7.476    1.0%
    3      1026     8.122    0.7%
    4      1291     12.09    0.9%
    5      1590     11.92    0.7%
    6      1862     13.97    0.7%
    7      2154     13.71    0.6%
    8      2412      19.7    0.8%
    9      2764     12.07    0.4%
   10      3052     13.21    0.4%
   11      3343     24.66    0.7%
   12      3658     20.33    0.5%
   13      3923     11.76    0.2%
   14      4239     18.85    0.4%
   15      4527     32.53    0.7%
   16      4812     25.47    0.5%
   17      5103     33.21    0.6%
   18      5473     16.84    0.3%
   19      5820     24.76    0.4%
   20      6083     30.55    0.5%

Quality and confidence:
param     error
r         0.555

Model:
Time ~=      130
    + r    294.5
              µs

Reads = 4 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_contains_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    538.8
    + n    9.758
              µs

Reads = 104 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     484.9     8.321    1.7%
    1     531.5     1.712    0.3%
    2     572.8      6.45    1.1%
    3     576.5     9.241    1.6%
    4     586.2     1.781    0.3%
    5     593.9     4.449    0.7%
    6     598.3     1.301    0.2%
    7     605.8     2.255    0.3%
    8     612.3     1.354    0.2%
    9     615.5     5.287    0.8%
   10       623     0.969    0.1%
   11     638.9     8.592    1.3%
   12     640.8     1.893    0.2%
   13     655.5     6.432    0.9%
   14     672.8     4.766    0.7%
   15     691.8     2.157    0.3%
   16     697.7     2.529    0.3%

Quality and confidence:
param     error
n         0.246

Model:
Time ~=    528.7
    + n    10.37
              µs

Reads = 104 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    111.6
    + r    427.1
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.6     0.222    0.0%
    1     617.6     2.387    0.3%
    2      1000     9.529    0.9%
    3      1421     7.904    0.5%
    4      1797     8.183    0.4%
    5      2233     9.772    0.4%
    6      2633       9.9    0.3%
    7      3034     16.84    0.5%
    8      3441     18.17    0.5%
    9      3938     18.59    0.4%
   10      4333     7.284    0.1%
   11      4790     24.89    0.5%
   12      5225        14    0.2%
   13      5622     24.47    0.4%
   14      6032     28.95    0.4%
   15      6472     24.15    0.3%
   16      6920     26.68    0.3%
   17      7388     45.66    0.6%
   18      7932     31.82    0.4%
   19      8404     28.82    0.3%
   20      8841     26.84    0.3%

Quality and confidence:
param     error
r         0.906

Model:
Time ~=    95.34
    + r      430
              µs

Reads = 5 + (100 * r)
Writes = 3 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_take_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    690.5
    + n    69.55
              µs

Reads = 105 + (0 * n)
Writes = 103 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     616.8      5.63    0.9%
    1     738.2    <truncated>...
```

</details>",10691,2022-01-24T14:14:56Z,0
1887,athei,bot merge,10691,2022-01-24T20:14:22Z,0
1888,shawntabrizi,"cc @thiolliere 

We were already thinking about making a pretty large change to events in Substrate to help with PoV size, and isolate them from other parts of the runtime.

Specifically, creating the following keys:

* `:CURRENT_EVENT_LEN`
* `:CURRENT_EVENT_LEVEL`
* `:EVENTS_<LEVEL>`

And then placing up to `MAX_EVENT_LEN` data into each level.

With this change, we could also introduce some of the encoding changes to the events as you suggested.",9480,2021-08-03T09:08:29Z,0
1889,ascjones,"> #8615 will introduce embedded type definition to the runtime metadata. Ideally it will provide sufficient information to decode all the event data.

> It's the best solution for dynamically-typed sdk like Polkadot.js. However, we think it may not be perfect for statically-typed languages like Rust & Go. For the latter ones, developers have to define or generate the types before compilation.

Actually you should be able to use the metadata to dynamically ""skip"" over non statically defined events/types. This is what `subxt` does, although not very well at the moment because of the missing type definitions. In fact that was one of the original motivations for doing this work.

I've already done some work on this and I will resume it once I'm back from holiday at the end of the month (and #8615 is merged)",9480,2021-08-03T09:09:01Z,0
1890,xlc,"More issues about events:

- It is not light client friendly. i.e. it can be expensive to proof something happened on a parachain to another parachain
  - We have event topics but no one is using it. I bet most of pallet developers does not know such feature exists.
- It is hard to judge between too many events vs not enough events e.g. https://github.com/paritytech/substrate/pull/9425
- Event parameters are unnamed and we are currently relying on non-standard syntax in docs comment to document it.

I am not sure what's the solution here but we do need a major refactor.",9480,2021-08-03T09:22:50Z,0
1891,bkchr,"> cc @thiolliere
> 
> We were already thinking about making a pretty large change to events in Substrate to help with PoV size, and isolate them from other parts of the runtime.
> 
> Specifically, creating the following keys:
> 
>     * `:CURRENT_EVENT_LEN`
> 
>     * `:CURRENT_EVENT_LEVEL`
> 
>     * `:EVENTS_<LEVEL>`
> 
> 
> And then placing up to `MAX_EVENT_LEN` data into each level.
> 
> With this change, we could also introduce some of the encoding changes to the events as you suggested.

In what way should that help the PoV size? And in what way are the events to the PoV size at all? I mean, the only problem is the deletion of the events from the old block, but that stuff is a ""bug"" in the trie.",9480,2021-08-03T09:30:57Z,0
1892,thiolliere,"> Event parameters are unnamed and we are currently relying on non-standard syntax in docs comment to document it.

if I don't missundertand this should be fixed, we can now use named fields for events like:
```
#[pallet::event]
pub enum Event {
    Foo { bar: u32 },
}",9480,2021-08-03T09:39:02Z,0
1893,ascjones,The named Event params will definitely work now with #8615.,9480,2021-08-03T09:41:20Z,0
1894,thiolliere,"> > cc @thiolliere
> > We were already thinking about making a pretty large change to events in Substrate to help with PoV size, and isolate them from other parts of the runtime.
> > Specifically, creating the following keys:
> > ```
> > * `:CURRENT_EVENT_LEN`
> > 
> > * `:CURRENT_EVENT_LEVEL`
> > 
> > * `:EVENTS_<LEVEL>`
> > ```
> > 
> > 
> >     
> >       
> >     
> > 
> >       
> >     
> > 
> >     
> >   
> > And then placing up to `MAX_EVENT_LEN` data into each level.
> > With this change, we could also introduce some of the encoding changes to the events as you suggested.
> 
> In what way should that help the PoV size? And in what way are the events to the PoV size at all? I mean, the only problem is the deletion of the events from the old block, but that stuff is a ""bug"" in the trie.

I opened a issue with the related ideas https://github.com/paritytech/substrate/issues/9482",9480,2021-08-03T09:58:51Z,0
1895,thiolliere,"I think modifying Event codec implementation so that it is decodable as `Vec<u8>` makes complete sense, we do that for some types already. It can be done in construct_runtime when generating the runtime event.

> It is hard to judge between too many events vs not enough events

Yes it would be great to have some rocksdb benchmark to know what is our constraint here.

> It is not light client friendly. i.e. it can be expensive to proof something happened on a parachain to another parachain.
> We have event topics but no one is using it. I bet most of pallet developers does not know such feature exists.

maybe we should create more function and types around topic to make it usable ? or is there some other direction we should take to improve this ?",9480,2021-08-03T10:05:21Z,0
1896,thiolliere,"is #8615 an ok solution all in all ?

Or otherwise it shouldn't be difficult to implement `EventRecord` codec so it is decodable as a `Vec<u8>`.
Or implement `Event` codec so it is decodable as a `Vec<u8>`.
What would be the more handy for external tools ? EventRecord or Event or doesn't matter.",9480,2021-09-08T13:52:50Z,0
1897,ascjones,"Off the top of my head I would say the `Event` itself, since that is the part that is ""dynamic"".

As long as the topic type `T` of `EventRecord` can be statically defined in external tools.",9480,2021-09-08T13:59:23Z,0
1898,thiolliere,"It seems scale-info metadata should solve this issue, we could also make event decodable as a `Vec<u8>` which is implemented in this PR https://github.com/paritytech/substrate/pull/9738 but it is an important breaking change. Considering scale-info metadata should already solve this issue, it seems the breaking change is not worth it.

So I'll close the PR, if more people ask for it maybe we can reconsider the PR.",9480,2021-09-30T10:41:14Z,0
1899,jsdw,"I was pointed at this issue (and #9738) after wondering why we are doing a bunch of event decoding (and indeed have issues owing to our decoding not actually 100% working yet) in `subxt`. I can see that it would cause breakage and that would need to be managed and timed appropriately, but I think it has merit.

Decoding events is tricky and not guaranteed to be successful. Adding the byte length before the event data would make events more consistent with extrinsics (which fortunately do have this prefix iirc), reduce the chance of errors (we don't have to try and decode all events in places like `subxt` when users only care about handling a few specific ones), and perhaps most importantly reduce the fallout from an error happening (if it's easy to split events, any decode errors can be contained to one event and not screw up decoding of all future events).

I hope that the issue receives consideration in the future, prior to a 1.0 release.
",9480,2022-01-24T10:35:53Z,0
1900,bkchr,@jsdw @ascjones can you not use scale-info to skip unwanted events?,9480,2022-01-24T10:42:55Z,0
1901,jsdw,"@bkchr what did you have in mind?

As far as I am aware, given a block of SCALE encoded events, the only way that we can ""skip"" over an event is to use the type information contained within the metadata to attempt to decode the event. Since different events (even of the same type) can consume different numbers of bytes, attmepting to decode it byte by byte is the only way to know how many bytes the event will ultimately take up, and where the next event will begin.

",9480,2022-01-24T12:22:23Z,0
1902,ascjones,"> @jsdw @ascjones can you not use scale-info to skip unwanted events?

Yes we can, that is what we already do. Though as @jsdw says it involves recursing the type definitions and consuming the bytes as we go.

Adding the len prefix would just mean we could delete all that code, and just skip over the `len` bytes instead. 

So as discussed previously: not an absolute requirement, it would just mean a lot less code required by any clients who want to peek into the `EventRecord` stream of events.",9480,2022-01-24T13:05:26Z,0
1903,bkchr,But wouldn't the code for skipping just be something like using  `decode_use_scale_info` and throwing the result away? ,9480,2022-01-24T13:39:42Z,0
1904,ascjones,"This works only if we know about all event types at compile time. 

For tooling which should operate on a specific pallet e.g. `pallet-contracts`, then a `subxt` API can be generated against a static version of that pallet. As long as the target runtime has a compatible version of `pallet-contracts` then it should be able to interact with that pallet. For events that means we should be able to decode compile time known events e.g. `pallet_contracts::Event` and skip over events not necessarily known at compile time e.g. missing and/or different pallet events. 

This is currently achieved by downloading the metadata at runtime and dynamically partitioning the stream of `Vec<EventRecord>` into chunks of bytes, then allowing the user to statically decode the event(s) that we are interested in e.g. 

```
let instantiated = result
            .find_first_event::<api::contracts::events::Instantiated>()?
            .ok_or(anyhow::anyhow!(""Failed to find Instantiated event""))?;
```
This feature is required for [ `cargo-contract`](https://github.com/paritytech/cargo-contract/pull/79/files#diff-bd5d43e78c196262cb43cc0b46929e829df1b5000cba01c65de70a11e6dfa0caR283), it should operate against any chain with a compatible version of `pallet-contracts`. Otherwise it would require recompiling for every different chain and possibly different runtime versions too.

I guess the difference with `polkadot.js` is that it allows downloading the metadata and (re)generating the types at runtime?
",9480,2022-01-24T16:32:30Z,0
1905,xlc,"We might as well refactor the whole event system... The current one doesn't work for light clients and terrible to generate proof of exist of event for XCM purpose. No one is using the event topic. If we need to make a breaking change, should really make sure it is light client friendly and XCM friendly.",9480,2022-01-25T00:53:54Z,0
1906,shaunxw,Related discussion https://github.com/paritytech/substrate/discussions/7788#discussioncomment-582938,8975,2021-06-03T04:00:16Z,0
1907,shawntabrizi,"@cheme Can you give insight into what kind of overhead a transactional extrinsic will have?

Basically are we just clearing the overlay cache?

Is it possible that a failed transactional extrinsic is more expensive than a successful one? (sounds like it could never be, since writing to the DB will always be more expensive can clearing the overlay cache)

Are there any other overheads?

Why would we not choose to make transactional extrinsics default?",8975,2021-06-03T05:29:10Z,0
1908,cheme,"Overhead is mainly some memory to keep changes and additional access to values at end of transaction.
(keep old value in memory and at end iterate all changes done in tx to update value).
So constant with the number of change done in transaction.
But that is mainly in memory btreemap value accesses, not too expensive (just not 0 cost).

> Basically are we just clearing the overlay cache?

Yes on every transaction end.

> Is it possible that a failed transactional extrinsic is more expensive than a successful one? (sounds like it could never be, since writing to the DB will always be more expensive can clearing the overlay cache)

Not possible.

> Why would we not choose to make transactional extrinsics default?

If it is not needed, this is an additional cost (but extrinsics from my point of view is rather large grain so could be fine).

cc\ @athei (in case I wrote something wrong)",8975,2021-06-03T07:06:09Z,0
1909,shawntabrizi,"> Overhead is mainly some memory to keep changes and additional access to values at end of transaction.

@cheme So when an extrinsic is not marked as transactional, this overhead does not exist?

Where precisely can we see the extra code used for making an extrinsic transactional, and how would we enable that code for the benchmarks?

I.e. we have developed a very comprehensive benchmarking system for the FRAME pallets. How can I easily turn on this overhead for all the extrinsics and have it be caught in the benchmarking?",8975,2021-06-03T07:12:11Z,0
1910,cheme,"> So when an extrinsic is not marked as transactional, this overhead does not exist?

Yes, but it is generally not a big overhead, but my general opinion on it is 'if you don't need it, don't use it'.

What would be interesting is with x the max number of writes in a block compare processing time without transaction, with 2 nested transactions and with n nested transactions. (all writes happening in the deeper transaction).
Using `with_transaction` instead of #[transaction].
We might see that given the max number of write in a block, transaction overhead is irrelevant, or at least get a better idea of the cost.
Then remains the fact that if all extrinsics uses #[transaction], we would store some additional changes when they writes the same value (but in fact it will allocate only once the first time and then memory would probably not be unallocated so would not be too bad).",8975,2021-06-03T07:32:35Z,0
1911,shawntabrizi,"@cheme could you make a branch where transactional is always used, and we can compare the benchmarks?

Would any other modifications be needed to our benchmarking system to account for transactional storage?",8975,2021-06-03T07:51:29Z,0
1912,athei,"There is an overhead for using a transaction. I made sure that there is no overhead when writing or reading keys. However, committing or rolling back a transaction scales linearly with the amount of dirty keys in that transaction. See the original PR: #6269

That said, I imagine it to be fast because it never touches any storage. Maybe this won't cost us that much.  Maybe just enable it and re-benchmark?
",8975,2021-06-03T08:04:42Z,0
1913,shawntabrizi,"@cheme also pointed out to me in chat that there is increased wasm memory usage when using transactional storage.

There will be two overlays:

* a stable overlay (from all the completed transactions)
* an ""inprogress"" overlay (from the transaction that is in progress)

This means that storage keys that are touched during the in progress transaction will exist in both overlays and be in memory twice.

Imagine touching a large storage item like the wasm blob, or system events, or anything else, you will basically double the memory usage with transactional storage.

If we have a limited heap size (only 128 mb) this can be relevant. If we had unlimited heap size (4 GB) then this would not really be a concern",8975,2021-06-03T08:12:46Z,0
1914,athei,There are no two overlays. The original one gained the ability for transactions.  Therefore there are not necessarily at least two copies for every value you write. A copy exists in memory for each transaction in which a specific key was written. You only pay for what you are using. So if you start a transaction write the wasm blob and then commit or roll back there is only this one copy that exists in the first transaction and is **moved** to the parent transaction.,8975,2021-06-03T08:28:10Z,0
1915,shawntabrizi,"Yes, my understanding was when the transaction completes, we collapse the changes, and have only one ""final"" copy of the key and value.

But in the middle of the transaction, there will be two copies of that key/value?",8975,2021-06-03T08:36:00Z,0
1916,athei,Only if there are written in more than one transaction.,8975,2021-06-03T08:41:40Z,0
1917,cheme,"> @cheme could you make a branch where transactional is always used, and we can compare the benchmarks?

This branch should do it https://github.com/paritytech/substrate/compare/master...cheme:all_ext_tx .",8975,2021-06-03T09:55:22Z,0
1918,cheme,"Quick mention that to account for cost, we also could change the state-machine overlay to not apply change on revert/commit, trading it with a higher memory footprint.
Would Make worst case easier to evaluate.
But considering that this memory will end as PoV verification wasm memory usage in cumulus, I am no longer convinced it can be the right move.
And in fact we might just realize through benches, that overhead on commit/revert is negligeable relatively to maximum number of modified value of a block.",8975,2021-06-03T10:07:50Z,0
1919,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",8975,2021-07-07T16:13:51Z,0
1920,gww-parity,"Yes, indeed, some analysis could give a good insight 👍🏻 ",8975,2021-07-14T06:34:52Z,0
1921,shawntabrizi,"Bumping this to propose what I think can be done in the short term, while aligning with all kinds of long term uses of multiple memory overlays.

1) We should update the `#[transactional]` tag to have a single u8 as an input which controls the number of ""transactional layers"" supported for an extrinsic. For example `#[transactional(0)]` would be what we have today by default. `#[transactional(1)]` would be supporting at most one additional memory overlay, which can then be wiped to undo any changes from that extrinsic. `#[transactional(32)]` would support up to 32 nested transactional layers for things like smart contracts or nested extrinsics or other heavy calls.

2) By default, all substrate extrinsics should use `#[transactional(1)]`, without needing to annotate anything. This will solve a majority of potential common issues with users writing runtime code which can have some fundamental ""verify first, write last"" error. This is how people expect to write code coming from Ethereum, and really is the way that we should be writing code with Rust, handling every potential error, versus forcing us to create infalliable functions where it may not always be the case.

3) The overhead of `#[transactional(1)]` should be nominal (and needs to be benchmarked), but for any functions which does not even need this feature, we can explicitly put `#[transactional(0)]`, for example for a simple never fail setter function.

4) Long term, we may want to get rid of this annotation all together, and have it be a signed extension which the user controls, and the weight function can react to. That is, a user can know they want to use N transactional layers for a specific call execution. To do that, they include N as part of their extrinsic, and then the weight function can read that, and take it into account when calculating the max weight of the extrinsic given the number of layers. This would require the benchmarking pipeline to understand how transactional layers come into play with the weight of funcitons, but should be doable.",8975,2022-01-23T23:31:16Z,0
1922,shawntabrizi,"More thoughts on this:

Since the beginning of frame, we have been teaching the ""verify first, write last"" pattern, which specifically points out a fatal flaw runtime developers can have when writing their runtime code where they modify storage, and then return an `Err` in their extrinsic, which would not unwind the storage write that occurred.

I am pretty convinced this is really not the best decision for our platform and developer usability in the long term, and I propose that we take advantage of a more conservative use of `#[transactional]` extrinsics to support this.

Right now, `#[transactional]` extrinsics have an ""unmeasured and unpredictable"" overhead to extrinsic. Specifically, each transactional layer will generate a new storage memory overlay. If the transactional layer would to return an `Err`, that memory overlay would be dropped, and the base memory overlay would be unchanged. However, if the transactional layer resolves successfully, that new memory overlay would then commit it's results to the base overlay, and we would continue. The current issue with `#[transactional]` is that there is no way to know how many transactional layers will be formed when calling an extrinsic. This means, at a high enough scale, copying storage changes from up to 32 transactional layers could be a really large amount of weight, which we currently do not have a reasonable way to measure.

However, I believe that we can use a more conservative version of `#[transactional]`, where we allow at most 1 transactional layer by default for all extrinsic. If an additional layer would try to be formed, we should return an error on the whole extrinsic. However, for a majority of extrinsics within FRAME Pallets, we would only ever need 1 transactional layer. And for that, we can probably have all extrinsics eat the cost of copying all changed data across one memory layer. We could even build this overhead into our benchmarking pipeline explicitly.

So why introduce a new default which can have slightly more overhead in some situations? (although probably nominal to be honest)

Because it allows us to write code the way that Rust intends users to write code.

There are numerous APIs throughout substrate that play around this ""verify first, write last"" behavior. We have functions like `can_modify_thing` + `modify_thing` where we are expected to check one before we actually call the other. Or we have apis which are built to be infallible to begin with, but due to other limitations we have learned about blockchain development, shouldn't be infallible. (Looking at AccountIdConversion trait, adding balance locks to an account, etc...)

Even a hard to read pattern of:

```
Storage1::try_mutate(
    Storage2::try_mutate(
        ...
    )
)
```

Is mostly caused by making sure we don't write to one storage until we know that the other storage has been written to.

Rust seems to me to be all about properly handling all error conditions. That is, we have `Option` and `Result` so that we can explicitly have functions which force developers to write code that handles all possible outcomes. Instead, in Substrate, we have been forced to make some APIs infallible when they don't need to be or sprinkle around `expects`, which do have formal proofs, but shouldn't really need to exist in the runtime.

When new Ethereum developers come into our ecosystem, they expect to be able to return an error at any point and undo all their changes, and the fact that we dont enable this hurts adoption of our tech.

As listed above, if there are legit uses of optimized, non-transactional extrinsics, we could mark those with `#[transactional(0)]`, but by default, we should allow users to write the more functional code.",8975,2022-01-23T23:48:51Z,0
1923,shawntabrizi,"Some examples of ""bad APIs"" which were created because of ""verify first, write last"".

1) Seems like re-entrancy stuff like this is caused by not wanting to commit changes to a balance directly into memory: https://github.com/paritytech/substrate/issues/10432
2) This warning when updating locks breaks fundamental bounding restrictions, and is due to the fact this API must be infallible for storage updates: https://github.com/paritytech/substrate/blob/master/frame/balances/src/lib.rs#L934
3) Swallowing errors like incrementing reference counters is also a result of this: https://github.com/paritytech/substrate/blob/master/frame/balances/src/lib.rs#L971
5) `can_dec_provider` to check we can modify a reference counter beforehand, kind of same as above.
6) `can_transfer` exist because we cannot just call `transfer` directly, afraid of changing storage: https://github.com/paritytech/substrate/blob/ded44948e2d5a398abcb4e342b0513cb690961bb/frame/support/src/traits/tokens/nonfungible.rs#L60
7) `can_add_vesting_schedule` is another example of this: https://github.com/paritytech/substrate/blob/master/frame/vesting/src/lib.rs#L507
8) Nested try mutate calls which can be hard to read: https://github.com/paritytech/substrate/blob/master/frame/balances/src/lib.rs#L1004

And these are just looking at balances related items",8975,2022-01-24T00:06:35Z,0
1924,xlc,"Sounds like is is the time to do more  optimization on the implementation of `with_tranasctional` to reduce the overhead so we can use it without considering too much about the downsides.

https://github.com/paritytech/substrate/pull/6269#issuecomment-648042539",8975,2022-01-24T00:16:32Z,0
1925,shawntabrizi,"@xlc I think my proposal skirts around the need for any optimization in the short term. If there is only a single additional transactional layer, we just need to account for that single memory write in the benchmarks. It seems easy enough to just measure this explicitly in the benchmarking.

Basically, whatever the storage diff is after running the benchmark, write it to memory one more time.",8975,2022-01-24T00:19:23Z,0
1926,athei,"If I understand you correctly you want to change the default behavior of the client when calling into the runtime to not persist changes on error. A few thoughts on this:

AFAIK the client has no idea whether a call was successful. It isn't a concept that exists in the client. This is a FRAME concept. The client just gets an opaque blob of data back. This blob encodes a Rust `Result` in the case of FRAME but it could be really anything. So there must be something else so signal to the client whether something needs to be rolled back. And we have this `start_transaction` and `{commit, rollback}_transaction`. The Rest is up to the runtime.

This will be a breaking change for all runtimes. Given that we consider a runtime which persist changes on error as buggy this **should** be OK. However, we would need an announcement and some time for runtime authors to adapt their runtime before we merge and then activate that change for polkadot.

Not sure if I understood you correctly, though. Can you point out which of those changes you think should happen in the client and which inside the FRAME macros?",8975,2022-01-24T08:26:54Z,0
1927,shawntabrizi,"I think all of this should be happening in the FRAME macros, not really asking for any client changes. Basically, where `#[transactional]` was an optional addition to an extrinsic, it will now be default, with the restriction that nesting of transactional layers is limited to 1.",8975,2022-01-24T09:06:02Z,0
1928,apopiak,":+1: For creating safer defaults.

> [...] If there is only a single additional transactional layer, we just need to account for that single memory write in the benchmarks. It seems easy enough to just measure this explicitly in the benchmarking.

How do you envision nesting to work? E.g. `batch_all` and proposal execution? (Not in the general case in the future, that is covered by your SignedExtension idea, but short-term.)

Callbacks would also be a concern if they happen inside of the transactional part, right?

> If an additional layer would try to be formed, we should return an error on the whole extrinsic. 

So you mean to adjust the return value of `with_transaction`? (Or introduce a version 2?)
",8975,2022-01-24T09:57:22Z,0
1929,bkchr,"> This blob encodes a Rust `Result` in the case of FRAME but it could be really anything. So there must be something else so signal to the client whether something needs to be rolled back.

This would be wrong. Even if a transaction is returning an error, we still need to let the user pay fees and account for the weight. If the client would throw away the entire result, this would mean we have wasted work.",8975,2022-01-24T10:41:02Z,0
1930,athei,Yeah it is a can of worms. I didn't give it much thought. This should all be handled by FRAME.,8975,2022-01-24T11:08:36Z,0
1931,shawntabrizi,"Just talked to Gav, and he approved this direction.

> How do you envision nesting to work?

Extrinsics can specify a default number of allowed nesting layers. For example `#[transactional(5)]` and the benchmarking pipeline should be able to handle benchmarking the overhead of of up to that many transactional layers.

In the long term, the user who submits the transaction should be able to specify how many layers they want, and we would have weight formulas that support dynamic number of layers, and calculates worst case weight.

If in any situation, more layers than allowed would be used, we immediately return an error for the extrinsic.

> This would be wrong. Even if a transaction is returning an error, we still need to let the user pay fees and account for the weight. If the client would throw away the entire result, this would mean we have wasted work.

Yes, as should already be the case, transactional layers should not apply to the fees. Dunno yet how that works, but that will be part of the feature requirement.",8975,2022-01-24T16:39:11Z,0
1932,xlc,"Transactional only wraps dispatched calls, and fees are charged by signed extension so there is no issue with fees handling.
Not very sure if we need to allow user to specify number of nesting, how do you estimate it? Shouldn't it just be similar to weight function that hardcoded for each extrinsic?",8975,2022-01-25T00:56:50Z,0
1933,athei,"I also don't get why fees should be a problem. Transactional overhead should be included in the dispatchables weight due to benchmarking, right?",8975,2022-01-25T03:47:28Z,0
1934,athei,/benchmark runtime pallet pallet_contracts,10266,2021-11-15T11:32:37Z,0
1935,parity-benchapp[bot],"Benchmark **Runtime Pallet** for branch ""at-wasmer-weights"" with command cargo run --quiet --release --features=runtime-benchmarks --manifest-path=bin/node/cli/Cargo.toml -- benchmark --chain=dev --steps=50 --repeat=20 --pallet=pallet_contracts --extrinsic=""*"" --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./frame/contracts/src/weights.rs --template=./.maintain/frame-weight-template.hbs

<details>
<summary>Results</summary>

```
Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.812
              µs

Reads = 1
Writes = 0

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=    2.812
              µs

Reads = 1
Writes = 0

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_trie_key"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + k    2.177
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    k   mean µs  sigma µs       %
    0     67.86     0.164    0.2%
   20     61.96     0.582    0.9%
   40     99.61     0.768    0.7%
   60     136.1     0.763    0.5%
   80     174.3     1.322    0.7%
  100     214.5     3.321    1.5%
  120     254.3      1.97    0.7%
  140     297.6     2.292    0.7%
  160     341.9     3.868    1.1%
  180     379.3     4.974    1.3%
  200     420.7     2.485    0.5%
  220     463.2     5.121    1.1%
  240     510.2     3.516    0.6%
  260     553.3     8.279    1.4%
  280     602.3     4.777    0.7%
  300     642.8     6.901    1.0%
  320     681.8     4.599    0.6%
  340     732.5     12.49    1.7%
  360     778.6     6.711    0.8%
  380     850.4     6.925    0.8%
  400     859.7     4.186    0.4%
  420     914.3     4.053    0.4%
  440     952.5     9.017    0.9%
  460     986.2     8.878    0.9%
  480      1020      3.64    0.3%
  500      1076     7.122    0.6%
  520      1124     18.48    1.6%
  540      1169      14.9    1.2%
  560      1232     15.42    1.2%
  580      1274     13.77    1.0%
  600      1302     12.14    0.9%
  620      1342     15.83    1.1%
  640      1407     16.37    1.1%
  660      1420      12.9    0.9%
  680      1513     11.02    0.7%
  700      1539     16.11    1.0%
  720      1573     5.562    0.3%
  740      1621     4.234    0.2%
  760      1636     13.39    0.8%
  780      1716     15.03    0.8%
  800      1783     15.14    0.8%
  820      1814      14.1    0.7%
  840      1862      17.1    0.9%
  860      1927     16.55    0.8%
  880      1917     17.87    0.9%
  900      1951      24.8    1.2%
  920      1985     22.51    1.1%
  940      2042      27.2    1.3%
  960      2069     13.63    0.6%
  980      2128     17.13    0.8%
 1000      2163     20.82    0.9%
 1020      2239     14.54    0.6%

Quality and confidence:
param     error
k         0.003

Model:
Time ~=        0
    + k    2.183
              µs

Reads = 1 + (0 * k)
Writes = 1 + (1 * k)

Pallet: ""pallet_contracts"", Extrinsic: ""on_initialize_per_queue_item"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts DeletionQueue (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    112.1
    + q    0.362
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    q   mean µs  sigma µs       %
    0     2.851     0.043    1.5%
   20     84.45     0.445    0.5%
   40     98.49     0.663    0.6%
   60     112.3     1.338    1.1%
   80     121.7     0.803    0.6%
  100       134     1.507    1.1%
  120     142.5     3.839    2.6%
  140     148.6     3.841    2.5%
  160     159.9     1.754    1.0%
  180     168.9     2.258    1.3%
  200       179     1.704    0.9%
  220     198.1     4.941    2.4%
  240     214.8      2.92    1.3%
  260     220.2     6.616    3.0%
  280     222.8      7.53    3.3%
  300     229.4      5.77    2.5%
  320     233.7     3.254    1.3%
  340       244     4.401    1.8%
  360     254.7     6.166    2.4%
  380     259.5     3.329    1.2%
  400     266.4     2.549    0.9%
  420       273     2.195    0.8%
  440     279.6     3.795    1.3%
  460     286.8     1.982    0.6%
  480     295.6     2.721    0.9%
  500     301.5     2.241    0.7%
  520     309.1     2.426    0.7%
  540     314.9      1.73    0.5%
  560     322.3     2.058    0.6%
  580     329.1     2.265    0.6%
  600     333.4     2.293    0.6%
  620     340.2       2.7    0.7%
  640     347.6     3.026    0.8%
  660     350.4     6.534    1.8%
  680     351.9     7.103    2.0%
  700     366.1      13.8    3.7%
  720     385.2     3.997    1.0%
  740       366     5.812    1.5%
  760     377.8     9.754    2.5%
  780     389.4     10.89    2.7%
  800     401.1     11.98    2.9%
  820     408.2     2.209    0.5%
  840     399.6     2.206    0.5%
  860     406.4     7.432    1.8%
  880     420.7     5.281    1.2%
  900     424.7      3.86    0.9%
  920     427.8     4.891    1.1%
  940     425.4     2.807    0.6%
  960     442.2     6.555    1.4%
  980     462.8     5.607    1.2%
 1000     459.6     10.47    2.2%
 1020     468.8     3.161    0.6%

Quality and confidence:
param     error
q         0.002

Model:
Time ~=    102.6
    + q    0.371
              µs

Reads = 1 + (0 * q)
Writes = 1 + (0 * q)

Pallet: ""pallet_contracts"", Extrinsic: ""instrument"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts PristineCode (r:1 w:0)
Storage: Contracts CodeStorage (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    54.08
    + c    90.04
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     54.68     0.524    0.9%
    2     235.5     0.234    0.0%
    4     411.9      0.38    0.0%
    6     595.5     15.21    2.5%
    8     787.2     1.158    0.1%
   10     958.5     1.486    0.1%
   12      1119     10.27    0.9%
   14      1321     15.57    1.1%
   16      1483     15.13    1.0%
   18      1682     10.35    0.6%
   20      1847      11.5    0.6%
   22      1994     15.14    0.7%
   24      2156     14.36    0.6%
   26      2423      19.5    0.8%
   28      2600     17.57    0.6%
   30      2766     11.88    0.4%
   32      2918      17.2    0.5%
   34      3124     12.77    0.4%
   36      3280     11.48    0.3%
   38      3443      12.3    0.3%
   40      3613     10.76    0.2%
   42      3775     23.18    0.6%
   44      3935     8.065    0.2%
   46      4097     11.94    0.2%
   48      4240     19.52    0.4%
   50      4637      11.8    0.2%
   52      4790     3.737    0.0%
   54      4970     16.95    0.3%
   56      5127     21.06    0.4%
   58      5283     25.93    0.4%
   60      5465     11.89    0.2%
   62      5623     12.79    0.2%
   64      5798     11.55    0.1%
   66      6026     13.75    0.2%
   68      6197     16.65    0.2%
   70      6375     17.55    0.2%
   72      6518     9.824    0.1%
   74      6696     21.95    0.3%
   76      6842     18.67    0.2%
   78      7015     17.99    0.2%
   80      7183      28.3    0.3%
   82      7352      20.4    0.2%
   84      7501        13    0.1%
   86      7658     24.08    0.3%
   88      7831     21.31    0.2%
   90      7999     20.87    0.2%
   92      8160     32.44    0.3%
   94      8321     12.44    0.1%
   96      8500      17.8    0.2%
   98      9084     25.97    0.2%
  100      9228     15.62    0.1%
  102      9407     20.67    0.2%
  104      9565     24.43    0.2%
  106      9717     29.55    0.3%
  108      9869     12.81    0.1%
  110     10030     13.23    0.1%
  112     10230     31.92    0.3%
  114     10360     18.12    0.1%
  116     10520     16.26    0.1%
  118     10710     17.18    0.1%
  120     10840     13.69    0.1%
  122     11030     14.88    0.1%
  124     11180     8.277    0.0%
  126     11370     28.38    0.2%
  128     11500     21.11    0.1%

Quality and confidence:
param     error
c         0.087

Model:
Time ~=    34.98
    + c    90.18
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_load"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    5.526
    + c    1.426
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     4.987     0.062    1.2%
    2     8.432     0.042    0.4%
    4     11.31      0.04    0.3%
    6     14.14     0.064    0.4%
    8     16.71     0.041    0.2%
   10     19.68     0.063    0.3%
   12     22.43     0.058    0.2%
   14     25.48     0.029    0.1%
   16     27.99     0.063    0.2%
   18     31.87     0.037    0.1%
   20     34.78     0.077    0.2%
   22     37.77     0.046    0.1%
   24     40.06     0.061    0.1%
   26     42.86      0.05    0.1%
   28     45.35     0.053    0.1%
   30     48.89     0.474    0.9%
   32     50.86     0.109    0.2%
   34     54.08     0.104    0.1%
   36     56.98     0.251    0.4%
   38     60.42     0.429    0.7%
   40     62.62      0.12    0.1%
   42     66.86     0.057    0.0%
   44     68.36     0.061    0.0%
   46     71.04     0.147    0.2%
   48     74.13      0.35    0.4%
   50     76.65      0.12    0.1%
   52     79.52     0.095    0.1%
   54     82.33     0.097    0.1%
   56     85.22     0.058    0.0%
   58     87.95     0.064    0.0%
   60     90.89     0.099    0.1%
   62     93.78     0.083    0.0%
   64     96.66     0.503    0.5%
   66     99.59     0.546    0.5%
   68     102.6     0.288    0.2%
   70     105.4     0.223    0.2%
   72     107.9     0.106    0.0%
   74     110.7     0.179    0.1%
   76     113.5     0.179    0.1%
   78     116.5     0.239    0.2%
   80     119.2     0.074    0.0%
   82     122.5     0.128    0.1%
   84     124.9      0.14    0.1%
   86     127.7     0.175    0.1%
   88     130.7     0.103    0.0%
   90     133.5     0.133    0.0%
   92     136.4       0.1    0.0%
   94     139.2     0.091    0.0%
   96     142.4     0.249    0.1%
   98     144.9     0.088    0.0%
  100       149     0.311    0.2%
  102     150.8     0.686    0.4%
  104     154.2     0.273    0.1%
  106     157.4     0.089    0.0%
  108     158.5     0.164    0.1%
  110     161.6     0.207    0.1%
  112     164.6     0.098    0.0%
  114     168.5     0.265    0.1%
  116     171.3     0.248    0.1%
  118     174.2     0.262    0.1%
  120     177.1     0.234    0.1%
  122     180.6     0.651    0.3%
  124       183      0.29    0.1%
  126     185.8     0.235    0.1%
  128     188.7     0.116    0.0%

Quality and confidence:
param     error
c             0

Model:
Time ~=    5.539
    + c    1.427
              µs

Reads = 1 + (0 * c)
Writes = 0 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""code_refcount"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    8.966
    + c    2.275
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c   mean µs  sigma µs       %
    0     8.589     0.073    0.8%
    2     13.68     0.064    0.4%
    4     18.36      0.07    0.3%
    6     22.89     0.091    0.3%
    8     27.15     0.078    0.2%
   10     31.74     0.104    0.3%
   12     36.42     0.124    0.3%
   14        40     0.147    0.3%
   16      44.8     0.052    0.1%
   18     49.78     0.522    1.0%
   20     54.46     0.295    0.5%
   22     59.38      0.22    0.3%
   24     63.61     0.118    0.1%
   26     67.74     0.085    0.1%
   28     72.88     0.234    0.3%
   30     77.97     0.748    0.9%
   32     81.53     0.083    0.1%
   34     86.31     0.282    0.3%
   36     90.69     0.121    0.1%
   38     96.73     0.838    0.8%
   40     99.98     0.181    0.1%
   42     104.9     0.068    0.0%
   44     109.4     0.092    0.0%
   46     115.2     0.849    0.7%
   48     120.1     0.096    0.0%
   50     124.8     1.041    0.8%
   52     127.2      0.27    0.2%
   54     131.8     0.462    0.3%
   56     136.3     0.117    0.0%
   58     140.3      0.29    0.2%
   60     144.8     0.129    0.0%
   62     149.2     0.087    0.0%
   64     155.2     1.644    1.0%
   66     158.4     0.087    0.0%
   68     163.2     0.562    0.3%
   70     169.8     2.055    1.2%
   72     172.4     0.315    0.1%
   74     178.4     1.599    0.8%
   76     181.5     0.338    0.1%
   78     185.9     0.275    0.1%
   80     190.6     0.274    0.1%
   82       195     0.102    0.0%
   84     199.7     0.163    0.0%
   86     203.8     0.353    0.1%
   88     208.7     0.224    0.1%
   90     213.2     0.171    0.0%
   92     217.9     0.267    0.1%
   94     222.5     0.241    0.1%
   96     228.1     0.667    0.2%
   98     231.5     0.248    0.1%
  100     237.4     0.337    0.1%
  102     241.1     0.738    0.3%
  104     246.3     0.244    0.0%
  106     251.1     0.183    0.0%
  108     254.2     0.369    0.1%
  110     258.6     0.668    0.2%
  112     262.8     0.712    0.2%
  114     268.6     0.619    0.2%
  116     273.3     0.306    0.1%
  118     277.8      0.25    0.0%
  120     282.6     0.481    0.1%
  122     287.9     1.075    0.3%
  124     291.3     0.399    0.1%
  126     295.9     0.731    0.2%
  128     300.7      0.53    0.1%

Quality and confidence:
param     error
c             0

Model:
Time ~=    9.033
    + c    2.276
              µs

Reads = 1 + (0 * c)
Writes = 1 + (0 * c)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate_with_code"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts PristineCode (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      138
    + c    339.9
    + s    2.261
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 5 + (0 * c) + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    c     s   mean µs  sigma µs       %
    0  1024      2478      29.7    1.1%
    1  1024      2916     24.19    0.8%
    2  1024      3208     14.67    0.4%
    3  1024      3522     12.78    0.3%
    4  1024      3848     13.39    0.3%
    5  1024      4210      13.3    0.3%
    6  1024      4542     14.52    0.3%
    7  1024      4938     15.12    0.3%
    8  1024      5143     22.04    0.4%
    9  1024      5567     21.94    0.3%
   10  1024      5796     21.25    0.3%
   11  1024      6203     17.78    0.2%
   12  1024      6500     24.92    0.3%
   13  1024      6952     19.23    0.2%
   14  1024      7278     23.88    0.3%
   15  1024      7599     12.29    0.1%
   16  1024      7844     10.63    0.1%
   17  1024      8271     17.89    0.2%
   18  1024      8553     26.23    0.3%
   19  1024      8885     34.33    0.3%
   20  1024      9135     18.59    0.2%
   21  1024      9443     16.82    0.1%
   22  1024      9752     30.16    0.3%
   23  1024     10090     11.93    0.1%
   24  1024     10370     27.02    0.2%
   25  1024     10900     25.67    0.2%
   26  1024     11120     17.59    0.1%
   27  1024     11630     15.94    0.1%
   28  1024     12070     13.03    0.1%
   29  1024     12230     24.17    0.1%
   30  1024     12550     41.87    0.3%
   31  1024     12930     44.86    0.3%
   32  1024     13280     19.72    0.1%
   33  1024     13690     15.13    0.1%
   34  1024     14010     12.11    0.0%
   35  1024     14280     30.03    0.2%
   36  1024     14600     46.74    0.3%
   37  1024     14980     22.07    0.1%
   38  1024     15320     19.96    0.1%
   39  1024     15620     21.15    0.1%
   40  1024     16310     341.7    2.0%
   41  1024     16260     24.27    0.1%
   42  1024     16650     15.84    0.0%
   43  1024     16950     11.46    0.0%
   44  1024     17250     38.11    0.2%
   45  1024     17480     54.01    0.3%
   46  1024     17830     79.55    0.4%
   47  1024     18230     72.99    0.4%
   48  1024     18470     51.73    0.2%
   49  1024     19240     72.49    0.3%
   50  1024     19480      42.6    0.2%
   51  1024     19780     53.65    0.2%
   52  1024     20310     13.25    0.0%
   53  1024     20680     48.33    0.2%
   54  1024     20950     138.2    0.6%
   55  1024     21380     31.61    0.1%
   56  1024     21660     50.27    0.2%
   57  1024     22000     17.81    0.0%
   58  1024     22150     108.4    0.4%
   59  1024     22650     133.2    0.5%
   60  1024     23020     19.72    0.0%
   61  1024     23350     53.49    0.2%
   62  1024     23680     19.19    0.0%
   63  1024     24000     30.02    0.1%
   64     0     22100     31.91    0.1%
   64    20     21920      95.1    0.4%
   64    40     21930     34.48    0.1%
   64    60     22060     65.89    0.2%
   64    80     22140       109    0.4%
   64   100     22080     58.02    0.2%
   64   120     22480     326.4    1.4%
   64   140     22360     71.67    0.3%
   64   160     22340       114    0.5%
   64   180     22490     14.32    0.0%
   64   200     22070     33.96    0.1%
   64   220     22600     39.43    0.1%
   64   240     22640      28.9    0.1%
   64   260     22640     87.57    0.3%
   64   280     22240     39.54    0.1%
   64   300     22290     49.91    0.2%
   64   320     22370     44.74    0.1%
   64   340     22410     53.39    0.2%
   64   360     22570     32.24    0.1%
   64   380     22630     60.66    0.2%
   64   400     22610     43.62    0.1%
   64   420     22630     44.85    0.1%
   64   440     23030     59.34    0.2%
   64   460     23130     42.81    0.1%
   64   480     23150     26.37    0.1%
   64   500     23200     15.79    0.0%
   64   520     23210     16.77    0.0%
   64   540     23270     43.42    0.1%
   64   560     23060     38.52    0.1%
   64   580     23350     28.92    0.1%
   64   600     23260     23.87    0.1%
   64   620     23390     25.85    0.1%
   64   640     24450     36.52    0.1%
   64   660     24530     17.19    0.0%
   64   680     23690     453.3    1.9%
   64   700     23640     18.38    0.0%
   64   720     23620     19.82    0.0%
   64   740     23610     30.04    0.1%
   64   760     23700     23.18    0.0%
   64   780     23560     24.92    0.1%
   64   800     23570     14.29    0.0%
   64   820     23640     19.52    0.0%
   64   840     23880     55.56    0.2%
   64   860     23770     110.8    0.4%
   64   880     23700     115.7    0.4%
   64   900     24050     48.11    0.2%
   64   920     23640     55.53    0.2%
   64   940     23990     50.75    0.2%
   64   960     24160     28.04    0.1%
   64   980     24260     27.69    0.1%
   64  1000     24240      35.8    0.1%
   64  1020     24290     21.75    0.0%
   64  1024     24310     21.69    0.0%

Quality and confidence:
param     error
c         0.368
s         0.024

Model:
Time ~=    80.43
    + c    341.6
    + s    2.269
              µs

Reads = 5 + (0 * c) + (0 * s)
Writes = 5 + (0 * c) + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""instantiate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts CodeStorage (r:1 w:1)
Storage: Contracts AccountCounter (r:1 w:1)
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    242.6
    + s    2.043
              µs

Reads = 5 + (0 * s)
Writes = 4 + (0 * s)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    s   mean µs  sigma µs       %
    0     211.9     1.099    0.5%
   20       253     0.378    0.1%
   40     337.3     5.517    1.6%
   60     371.7     0.939    0.2%
   80     413.4     2.344    0.5%
  100       454     2.303    0.5%
  120     480.9     15.81    3.2%
  140     506.1     15.23    3.0%
  160     548.2     14.37    2.6%
  180     600.7     17.23    2.8%
  200     632.6     15.83    2.5%
  220     677.5     15.16    2.2%
  240     720.6     15.97    2.2%
  260     760.1     16.88    2.2%
  280     795.6     13.28    1.6%
  300     835.3     10.79    1.2%
  320       897     1.981    0.2%
  340     942.2     1.223    0.1%
  360     984.5     2.738    0.2%
  380      1021     2.802    0.2%
  400      1061     2.519    0.2%
  420      1103     2.291    0.2%
  440      1139     5.028    0.4%
  460      1180     6.563    0.5%
  480      1216     4.582    0.3%
  500      1261     7.001    0.5%
  520      1307      12.7    0.9%
  540      1346     7.574    0.5%
  560      1389     3.606    0.2%
  580      1428      14.3    1.0%
  600      1470     4.112    0.2%
  620      1498      12.5    0.8%
  640      1556     14.84    0.9%
  660      1581     15.04    0.9%
  680      1627     15.29    0.9%
  700      1673     16.65    0.9%
  720      1717     11.31    0.6%
  740      1779     6.614    0.3%
  760      1781     13.47    0.7%
  780      1825     12.58    0.6%
  800      1900     45.21    2.3%
  820      1913     11.53    0.6%
  840      1944     15.44    0.7%
  860      1973     15.42    0.7%
  880      2013     11.67    0.5%
  900      2086      4.06    0.1%
  920      2132     9.538    0.4%
  940      2157     11.43    0.5%
  960      2222     40.07    1.8%
  980      2230     12.18    0.5%
 1000      2268     14.04    0.6%
 1020      2328     17.92    0.7%

Quality and confidence:
param     error
s         0.002

Model:
Time ~=    233.9
    + s    2.051
              µs

Reads = 5 + (0 * s)
Writes = 4 + (0 * s)

Pallet: ""pallet_contracts"", Extrinsic: ""call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      209
              µs

Reads = 4
Writes = 2

Min Squares Analysis
========
-- Extrinsic Time --

Model:
Time ~=      209
              µs

Reads = 4
Writes = 2

Pallet: ""pallet_contracts"", Extrinsic: ""seal_caller"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    264.9
    + r    272.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     213.7     6.866    3.2%
    1     476.3     7.895    1.6%
    2     738.6      2.42    0.3%
    3      1020     30.23    2.9%
    4      1398     9.162    0.6%
    5      1668     8.621    0.5%
    6      1926     4.215    0.2%
    7      2216     30.83    1.3%
    8      2471     3.533    0.1%
    9      2631     42.15    1.6%
   10      3025     13.42    0.4%
   11      3266     11.47    0.3%
   12      3535     8.175    0.2%
   13      3812     17.08    0.4%
   14      4100     28.74    0.7%
   15      4309     8.954    0.2%
   16      4604      20.7    0.4%
   17      4892      23.5    0.4%
   18      5145     14.42    0.2%
   19      5420     27.28    0.5%
   20      5682      9.36    0.1%

Quality and confidence:
param     error
r         0.503

Model:
Time ~=    248.7
    + r      273
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_address"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    325.1
    + r    267.9
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     227.2     5.413    2.3%
    1     508.7     20.39    4.0%
    2     836.1     22.25    2.6%
    3      1126     6.144    0.5%
    4      1415      8.48    0.5%
    5      1677     8.365    0.4%
    6      1950     4.245    0.2%
    7      2200     9.077    0.4%
    8      2491     2.133    0.0%
    9      2746     4.819    0.1%
   10      3014     10.88    0.3%
   11      3283     7.474    0.2%
   12      3544     9.998    0.2%
   13      3834     17.46    0.4%
   14      4096      20.5    0.5%
   15      4342     13.75    0.3%
   16      4610     14.55    0.3%
   17      4786     32.81    0.6%
   18      5046     32.46    0.6%
   19      5333     36.48    0.6%
   20      5683     11.08    0.1%

Quality and confidence:
param     error
r         0.539

Model:
Time ~=    314.2
    + r    267.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas_left"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    324.3
    + r    271.1
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     208.6     4.101    1.9%
    1     473.2     4.904    1.0%
    2     862.2     13.54    1.5%
    3      1151     7.552    0.6%
    4      1422     4.109    0.2%
    5      1689     4.377    0.2%
    6      1969     4.264    0.2%
    7      2243     6.463    0.2%
    8      2504     4.422    0.1%
    9      2768     7.892    0.2%
   10      3047     7.531    0.2%
   11      3331     10.16    0.3%
   12      3580     28.38    0.7%
   13      3793     35.28    0.9%
   14      4046     22.04    0.5%
   15      4385     11.15    0.2%
   16      4580     23.81    0.5%
   17      4956     15.44    0.3%
   18      5192     13.71    0.2%
   19      5433     27.78    0.5%
   20      5742     13.75    0.2%

Quality and confidence:
param     error
r         0.539

Model:
Time ~=    299.3
    + r    271.8
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    288.5
    + r    481.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       210     4.088    1.9%
    1     774.2     11.56    1.4%
    2      1225     42.14    3.4%
    3      1645     2.764    0.1%
    4      2252     6.038    0.2%
    5      2744     10.84    0.3%
    6      3219     5.125    0.1%
    7      3952     23.47    0.5%
    8      4214     10.19    0.2%
    9      4623     24.72    0.5%
   10      5065     25.29    0.4%
   11      5531     36.79    0.6%
   12      6080     9.715    0.1%
   13      6470     51.77    0.8%
   14      6982     25.83    0.3%
   15      7498      21.1    0.2%
   16      8013     21.06    0.2%
   17      8421     10.13    0.1%
   18      8966     40.98    0.4%
   19      9431     13.72    0.1%
   20      9915     22.61    0.2%

Quality and confidence:
param     error
r         0.931

Model:
Time ~=    302.7
    + r    480.3
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_value_transferred"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    254.4
    + r    278.8
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     217.9      2.21    1.0%
    1     520.4      24.5    4.7%
    2     868.4     11.45    1.3%
    3      1024     1.409    0.1%
    4      1297     1.535    0.1%
    5      1564      2.49    0.1%
    6      1982     3.338    0.1%
    7      2258      3.88    0.1%
    8      2520     5.253    0.2%
    9      2795     10.32    0.3%
   10      3079     10.53    0.3%
   11      3338     11.34    0.3%
   12      3576      7.16    0.2%
   13      3890      11.1    0.2%
   14      4189     23.26    0.5%
   15      4471      25.6    0.5%
   16      4689      8.04    0.1%
   17      4958     19.06    0.3%
   18      5241     19.45    0.3%
   19      5556     37.09    0.6%
   20      5821     14.46    0.2%

Quality and confidence:
param     error
r          0.51

Model:
Time ~=    246.8
    + r    279.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_minimum_balance"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    249.4
    + r    274.8
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     213.2     2.584    1.2%
    1     496.1     14.81    2.9%
    2     747.7     1.817    0.2%
    3      1018     2.241    0.2%
    4      1282      2.39    0.1%
    5      1554     2.006    0.1%
    6      1947     8.145    0.4%
    7      2231     9.807    0.4%
    8      2511     5.571    0.2%
    9      2900     53.19    1.8%
   10      3062     7.729    0.2%
   11      3313     10.33    0.3%
   12      3556     8.207    0.2%
   13      3806     39.11    1.0%
   14      4119     14.66    0.3%
   15      4297     29.06    0.6%
   16      4657     9.817    0.2%
   17      4941     12.93    0.2%
   18      5176        17    0.3%
   19      5416     9.918    0.1%
   20      5726     17.53    0.3%

Quality and confidence:
param     error
r         0.713

Model:
Time ~=    243.1
    + r    275.5
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_tombstone_deposit"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    310.4
    + r    273.7
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     235.5     5.555    2.3%
    1     552.3     22.09    3.9%
    2     838.6     28.34    3.3%
    3      1118      11.8    1.0%
    4      1411     9.473    0.6%
    5      1699     5.632    0.3%
    6      1966      3.55    0.1%
    7      2237     5.027    0.2%
    8      2511     4.568    0.1%
    9      2780      8.14    0.2%
   10      3078     7.562    0.2%
   11      3325     9.476    0.2%
   12      3591     7.941    0.2%
   13      3879     7.669    0.1%
   14      4149     15.28    0.3%
   15      4403     9.339    0.2%
   16      4649     18.23    0.3%
   17      4947     12.29    0.2%
   18      5226     22.06    0.4%
   19      5460     17.66    0.3%
   20      5750     10.24    0.1%

Quality and confidence:
param     error
r         0.327

Model:
Time ~=    304.5
    + r    273.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_block_number"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    300.4
    + r    272.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     216.4     8.407    3.8%
    1     473.5     7.286    1.5%
    2     825.8     16.93    2.0%
    3      1176     24.52    2.0%
    4      1393      19.2    1.3%
    5      1668     3.815    0.2%
    6      1962      8.43    0.4%
    7      2237     3.071    0.1%
    8      2529     90.62    3.5%
    9      2648     24.87    0.9%
   10      3057     7.998    0.2%
   11      3317     6.058    0.1%
   12      3591     9.563    0.2%
   13      4065     251.2    6.1%
   14      4120     14.92    0.3%
   15      4404     10.93    0.2%
   16      4672     30.62    0.6%
   17      4903     7.079    0.1%
   18      5162     12.96    0.2%
   19      5439     23.45    0.4%
   20      5691     21.39    0.3%

Quality and confidence:
param     error
r         1.031

Model:
Time ~=      293
    + r    273.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_now"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    310.5
    + r    272.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0       227     11.65    5.1%
    1     511.7     17.52    3.4%
    2     825.7        18    2.1%
    3      1144     6.274    0.5%
    4      1417      8.93    0.6%
    5      1685     4.936    0.2%
    6      1960     11.08    0.5%
    7      2225     3.252    0.1%
    8      2499      4.63    0.1%
    9      2778     7.836    0.2%
   10      3049     8.174    0.2%
   11      3297      7.93    0.2%
   12      3584     8.286    0.2%
   13      3839     8.649    0.2%
   14      4101     17.22    0.4%
   15      4387     7.267    0.1%
   16      4681     17.86    0.3%
   17      4955     20.77    0.4%
   18      5194     28.54    0.5%
   19      5460     10.58    0.1%
   20      5719     24.05    0.4%

Quality and confidence:
param     error
r         0.357

Model:
Time ~=    295.1
    + r      273
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_weight_to_fee"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    316.9
    + r    451.7
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     222.8     8.544    3.8%
    1     672.1     20.32    3.0%
    2      1150     37.44    3.2%
    3      1694     5.087    0.3%
    4      2153     3.535    0.1%
    5      2592     15.67    0.6%
    6      3056     7.561    0.2%
    7      3485     11.15    0.3%
    8      3937     12.08    0.3%
    9      4388     17.52    0.3%
   10      4843     17.49    0.3%
   11      5332     26.01    0.4%
   12      5781     15.44    0.2%
   13      6161     18.17    0.2%
   14      6625     25.93    0.3%
   15      7057     20.81    0.2%
   16      7542     25.38    0.3%
   17      8003        30    0.3%
   18      8377     24.31    0.2%
   19      8851     37.75    0.4%
   20      9323     50.17    0.5%

Quality and confidence:
param     error
r         0.549

Model:
Time ~=    299.6
    + r    452.1
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_gas"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    293.9
    + r    146.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     198.1     4.155    2.0%
    1     408.7     14.24    3.4%
    2     569.9     12.91    2.2%
    3     721.8     14.34    1.9%
    4     868.3     9.247    1.0%
    5      1040     10.04    0.9%
    6      1202     2.489    0.2%
    7      1346     2.719    0.2%
    8      1487     2.818    0.1%
    9      1588     43.91    2.7%
   10      1774     3.492    0.1%
   11      1929     2.295    0.1%
   12      2066     3.168    0.1%
   13      2207     6.004    0.2%
   14      2344     7.178    0.3%
   15      2485     5.758    0.2%
   16      2580      42.1    1.6%
   17      2768     5.674    0.2%
   18      2923     4.764    0.1%
   19      3065     6.608    0.2%
   20      3211     4.202    0.1%

Quality and confidence:
param     error
r          0.37

Model:
Time ~=    279.8
    + r    147.2
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      315
    + r    255.5
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     215.6     12.15    5.6%
    1     530.5     13.45    2.5%
    2     820.4     11.61    1.4%
    3      1134     6.412    0.5%
    4      1358     8.503    0.6%
    5      1516     52.44    3.4%
    6      1872     4.649    0.2%
    7      2126     9.185    0.4%
    8      2371      7.52    0.3%
    9      2634     5.032    0.1%
   10      2770     15.29    0.5%
   11      3118      21.9    0.7%
   12      3282     22.87    0.6%
   13      3647     8.112    0.2%
   14      3905     9.912    0.2%
   15      4150     8.897    0.2%
   16      4409      18.5    0.4%
   17      4619     17.87    0.3%
   18      4881     12.23    0.2%
   19      5195      22.1    0.4%
   20      5405     22.12    0.4%

Quality and confidence:
param     error
r         0.546

Model:
Time ~=    293.9
    + r    256.1
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_input_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      463
    + n     8.59
              µs

Reads = 3 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     478.6      28.6    5.9%
   20     606.4     2.406    0.3%
   40     870.6     11.91    1.3%
   60     979.8     13.39    1.3%
   80      1125     27.27    2.4%
  100      1229     19.76    1.6%
  120      1364     23.39    1.7%
  140      1642     20.85    1.2%
  160      1832     23.17    1.2%
  180      2036      16.1    0.7%
  200      2177     25.38    1.1%
  220      2391     39.72    1.6%
  240      2525     45.02    1.7%
  260      2710     32.62    1.2%
  280      2887     47.34    1.6%
  300      3048     5.958    0.1%
  320      3176     45.72    1.4%
  340      3428     24.76    0.7%
  360      3601     54.46    1.5%
  380      3820     61.73    1.6%
  400      3882     40.33    1.0%
  420      4141      43.2    1.0%
  440      4356     16.24    0.3%
  460      4457     49.57    1.1%
  480      4540     32.26    0.7%
  500      4733      63.7    1.3%
  520      5017     39.72    0.7%
  540      5070     71.39    1.4%
  560      5238     48.78    0.9%
  580      5493     59.02    1.0%
  600      5657     73.27    1.2%
  620      5801     57.85    0.9%
  640      5995     52.96    0.8%
  660      6159     130.7    2.1%
  680      6280     74.09    1.1%
  700      6600      83.1    1.2%
  720      6763     95.82    1.4%
  740      6748     68.57    1.0%
  760      6890     80.89    1.1%
  780      7234     103.6    1.4%
  800      7389     78.34    1.0%
  820      7594     103.2    1.3%
  840      7760     128.1    1.6%
  860      7767     52.78    0.6%
  880      8148     74.78    0.9%
  900      8080     63.84    0.7%
  920      8125     69.82    0.8%
  940      8398     63.48    0.7%
  960      8620     80.25    0.9%
  980      8989     71.33    0.7%
 1000      9011     144.4    1.6%
 1020      9210     123.2    1.3%

Quality and confidence:
param     error
n         0.014

Model:
Time ~=      475
    + n    8.574
              µs

Reads = 3 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    208.7
    + r    34.99
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     208.3     1.517    0.7%
    1     247.3     9.389    3.7%

Quality and confidence:
param     error
r          3.17

Model:
Time ~=    208.3
    + r    38.95
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_return_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      253
    + n    0.507
              µs

Reads = 3 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     237.9     1.608    0.6%
   20     243.8      4.16    1.7%
   40     255.4     3.512    1.3%
   60     265.7     4.904    1.8%
   80     308.1     9.634    3.1%
  100     313.7     5.464    1.7%
  120     326.4     6.879    2.1%
  140     331.3     5.384    1.6%
  160     332.9     5.208    1.5%
  180     341.6     4.154    1.2%
  200     356.6     7.895    2.2%
  220     364.5     6.638    1.8%
  240     380.7     7.075    1.8%
  260     365.7     2.345    0.6%
  280     423.2     21.34    5.0%
  300     406.2     6.987    1.7%
  320     385.7     1.684    0.4%
  340     427.2     15.58    3.6%
  360     427.2     0.991    0.2%
  380     429.3      5.83    1.3%
  400     464.3     7.396    1.5%
  420     471.1     9.105    1.9%
  440     491.1     6.159    1.2%
  460     504.2     15.56    3.0%
  480     507.1     5.682    1.1%
  500     517.1     6.522    1.2%
  520     532.9     3.126    0.5%
  540       523     5.369    1.0%
  560     542.5     2.579    0.4%
  580     550.4     6.278    1.1%
  600       557     3.536    0.6%
  620     568.5      6.34    1.1%
  640     582.1     3.174    0.5%
  660       588     8.423    1.4%
  680     604.7     1.483    0.2%
  700     612.3     2.865    0.4%
  720     624.6     7.744    1.2%
  740     637.4     8.965    1.4%
  760     627.8     8.826    1.4%
  780     650.7     6.142    0.9%
  800     634.5     6.903    1.0%
  820     673.2     7.152    1.0%
  840     681.3     6.201    0.9%
  860     691.7     8.242    1.1%
  880     697.2     3.237    0.4%
  900     707.3     5.068    0.7%
  920     720.7     1.495    0.2%
  940     713.6     8.082    1.1%
  960     714.9     5.246    0.7%
  980     727.3     6.709    0.9%
 1000     738.6     9.828    1.3%
 1020     773.3     5.429    0.7%

Quality and confidence:
param     error
n         0.002

Model:
Time ~=    254.2
    + n    0.503
              µs

Reads = 3 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_terminate"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: Contracts DeletionQueue (r:1 w:1)
Storage: System Account (r:2 w:2)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    223.7
    + r    116.3
              µs

Reads = 3 + (3 * r)
Writes = 1 + (4 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     223.4     6.552    2.9%
    1     339.5     17.35    5.1%

Quality and confidence:
param     error
r         6.184

Model:
Time ~=    223.4
    + r      116
              µs

Reads = 3 + (3 * r)
Writes = 1 + (4 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_random"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      336
    + r      545
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     216.3     9.624    4.4%
    1     815.4      39.3    4.8%
    2      1404     40.35    2.8%
    3      1986     9.929    0.4%
    4      2526     7.516    0.2%
    5      3099      7.81    0.2%
    6      3639     5.759    0.1%
    7      4198     10.61    0.2%
    8      4636     31.43    0.6%
    9      5210     40.05    0.7%
   10      5872     29.41    0.5%
   11      6306     39.89    0.6%
   12      6913     23.31    0.3%
   13      7403     22.31    0.3%
   14      7933      25.2    0.3%
   15      8527     30.75    0.3%
   16      9037     48.36    0.5%
   17      9557        33    0.3%
   18     10080     35.52    0.3%
   19     10700        36    0.3%
   20     11100     33.23    0.2%

Quality and confidence:
param     error
r         0.687

Model:
Time ~=    328.6
    + r    544.2
              µs

Reads = 4 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    342.6
    + r    729.9
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     210.4     5.437    2.5%
    1      1068     17.04    1.5%
    2      1694      10.2    0.6%
    3      2555     7.068    0.2%
    4      3310     36.44    1.1%
    5      4015     11.91    0.2%
    6      4753     12.14    0.2%
    7      5459     16.69    0.3%
    8      6201     33.57    0.5%
    9      6870     31.09    0.4%
   10      7683     21.65    0.2%
   11      8389     18.61    0.2%
   12      9124     26.66    0.2%
   13      9804     23.16    0.2%
   14     10570     16.24    0.1%
   15     11320     56.55    0.4%
   16     12000     35.93    0.2%
   17     12690     25.26    0.1%
   18     13430     41.38    0.3%
   19     14170     37.92    0.2%
   20     14930     25.47    0.1%

Quality and confidence:
param     error
r         0.617

Model:
Time ~=    327.7
    + r    730.4
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_deposit_event_per_topic_and_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System EventTopics (r:100 w:100)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=     1215
    + t    453.6
    + n    125.9
              µs

Reads = 3 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     n   mean µs  sigma µs       %
    0    16      3170     12.18    0.3%
    1    16      3747     11.77    0.3%
    2    16      4125     28.68    0.6%
    3    16      4607      11.2    0.2%
    4     0      2958     7.684    0.2%
    4     1      3142     13.43    0.4%
    4     2      3296     15.31    0.4%
    4     3      3403     35.41    1.0%
    4     4      3522     25.12    0.7%
    4     5      3608     47.89    1.3%
    4     6      3702     48.91    1.3%
    4     7      3907     12.06    0.3%
    4     8      4022     49.08    1.2%
    4     9      4161     72.23    1.7%
    4    10      4321     35.15    0.8%
    4    11      4454     15.48    0.3%
    4    12      4494     31.74    0.7%
    4    13      4621     11.79    0.2%
    4    14      4751      12.8    0.2%
    4    15      4876     24.78    0.5%
    4    16      5034     26.49    0.5%

Quality and confidence:
param     error
t         3.363
n         0.662

Model:
Time ~=     1196
    + t    451.8
    + n    126.8
              µs

Reads = 3 + (100 * t) + (0 * n)
Writes = 1 + (100 * t) + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_debug_message"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    344.8
    + r    173.3
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     221.8     8.256    3.7%
    1     458.2     12.77    2.7%
    2     671.7     8.787    1.3%
    3     919.4     7.432    0.8%
    4      1104     5.327    0.4%
    5      1362     7.305    0.5%
    6      1588     2.325    0.1%
    7      1790     4.044    0.2%
    8      1995     3.908    0.1%
    9      1942     59.98    3.0%
   10      2067     4.356    0.2%
   11      2244     1.949    0.0%
   12      2408     6.624    0.2%
   13      2596      3.01    0.1%
   14      2769     1.851    0.0%
   15      2942     4.939    0.1%
   16      3116     5.715    0.1%
   17      3284     3.695    0.1%
   18      3478     5.663    0.1%
   19      3639     4.026    0.1%
   20      3800     3.992    0.1%

Quality and confidence:
param     error
r         1.085

Model:
Time ~=    404.2
    + r      171
              µs

Reads = 3 + (0 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=      311
    + r    370.6
              µs

Reads = 3 + (0 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     225.1     1.929    0.8%
    1     690.7     21.45    3.1%
    2      1073     3.551    0.3%
    3      1429     6.607    0.4%
    4      1817     25.37    1.3%
    5      2165     12.59    0.5%
    6      2520      7.72    0.3%
    7      2916      27.8    0.9%
    8      3266     42.52    1.3%
    9      3645     10.24    0.2%
   10      4014     9.128    0.2%
   11      4367     10.94    0.2%
   12      4766     5.714    0.1%
   13      5100     27.03    0.5%
   14      5523     22.96    0.4%
   15      5872     25.46    0.4%
   16      6226     25.81    0.4%
   17      6507      28.3    0.4%
   18      6981     36.61    0.5%
   19      7421     27.35    0.3%
   20      7712     20.72    0.2%

Quality and confidence:
param     error
r         0.475

Model:
Time ~=    303.2
    + r    370.8
              µs

Reads = 3 + (0 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_set_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:0 w:1)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    673.8
    + n    40.05
              µs

Reads = 3 + (0 * n)
Writes = 2 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     647.1     11.63    1.7%
    1     730.6     9.871    1.3%
    2     771.8     1.783    0.2%
    3     777.6     15.59    2.0%
    4     721.4     8.305    1.1%
    5     827.4     54.43    6.5%
    6     921.6     5.239    0.5%
    7     949.3     11.77    1.2%
    8      1011     2.478    0.2%
    9      1038     6.171    0.5%
   10      1051     24.17    2.2%
   11      1123     10.34    0.9%
   12      1074     50.97    4.7%
   13      1200     12.85    1.0%
   14      1245      11.5    0.9%
   15      1284     6.416    0.4%
   16      1271     6.421    0.5%

Quality and confidence:
param     error
n         0.655

Model:
Time ~=    656.2
    + n    40.38
              µs

Reads = 3 + (0 * n)
Writes = 2 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_clear_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    473.2
    + r    317.5
              µs

Reads = 3 + (0 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     233.2     6.601    2.8%
    1     736.3     19.74    2.6%
    2      1102     10.42    0.9%
    3      1468     32.58    2.2%
    4      1789     16.91    0.9%
    5      2074     14.02    0.6%
    6      2354     14.96    0.6%
    7      2737     24.93    0.9%
    8      3004     25.74    0.8%
    9      3414     18.27    0.5%
   10      3675     18.72    0.5%
   11      3968     10.84    0.2%
   12      4321     14.09    0.3%
   13      4589     28.37    0.6%
   14      4925     12.59    0.2%
   15      5173     22.58    0.4%
   16      5478     35.15    0.6%
   17      5838        23    0.3%
   18      6252     27.68    0.4%
   19      6453     22.08    0.3%
   20      6818     40.61    0.5%

Quality and confidence:
param     error
r         0.792

Model:
Time ~=    446.9
    + r    319.1
              µs

Reads = 3 + (0 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Skipped Metadata (r:0 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    253.6
    + r    698.2
              µs

Reads = 3 + (100 * r)
Writes = 1 + (0 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     218.1     8.239    3.7%
    1     988.7     5.449    0.5%
    2      1681     14.86    0.8%
    3      2357     11.21    0.4%
    4      3047     18.32    0.6%
    5      3765     11.46    0.3%
    6      4418     23.03    0.5%
    7      5141     30.84    0.5%
    8      5782     28.15    0.4%
    9      6488     24.13    0.3%
   10      7246     31.62    0.4%
   11      7950     42.01    0.5%
   12      8608     15.65    0.1%
   13      9325     26.64    0.2%
   14      9971     30.29    0.3%
   15     10660     28.12    0.2%
   16     11440      41.2    0.3%
   17     12100     32.16    0.2%
   18     12890     32.33    0.2%
   19     13530     41.59    0.3%
   20     14300     31.33    0.2%

Quality and confidence:
param     error
r         0.535

Model:
Time ~=    242.2
    + r    699.3
              µs

Reads = 3 + (100 * r)
Writes = 1 + (0 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_get_storage_per_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    807.3
    + n    82.25
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    n   mean µs  sigma µs       %
    0     670.8     14.98    2.2%
    1       905     5.029    0.5%
    2     997.5     13.66    1.3%
    3      1080     5.869    0.5%
    4      1132     8.642    0.7%
    5      1121     23.18    2.0%
    6      1335     4.413    0.3%
    7      1375     6.983    0.5%
    8      1390     34.56    2.4%
    9      1597     37.54    2.3%
   10      1648     7.706    0.4%
   11      1708     5.254    0.3%
   12      1756     28.49    1.6%
   13      1889     8.365    0.4%
   14      1943     11.12    0.5%
   15      2052     3.089    0.1%
   16      2090     37.64    1.8%

Quality and confidence:
param     error
n         0.809

Model:
Time ~=    781.7
    + n    83.87
              µs

Reads = 4 + (0 * n)
Writes = 1 + (0 * n)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_transfer"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:101 w:101)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    244.8
    + r     3923
              µs

Reads = 4 + (100 * r)
Writes = 2 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     221.9     5.929    2.6%
    1      4276     8.936    0.2%
    2      8176     53.91    0.6%
    3     12010     36.62    0.3%
    4     15860     30.26    0.1%
    5     19920     58.92    0.2%
    6     23660     48.94    0.2%
    7     27560     96.03    0.3%
    8     31500     49.89    0.1%
    9     35560     94.67    0.2%
   10     39460     88.89    0.2%
   11     43370     73.91    0.1%
   12     47370     80.18    0.1%
   13     51350     44.81    0.0%
   14     54630     40.71    0.0%
   15     59110     69.21    0.1%
   16     62460     115.3    0.1%
   17     67070     81.49    0.1%
   18     71170     63.61    0.0%
   19     74120     123.7    0.1%
   20     79230     76.53    0.0%

Quality and confidence:
param     error
r         3.149

Model:
Time ~=    235.8
    + r     3920
              µs

Reads = 4 + (100 * r)
Writes = 2 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:1 w:1)
Storage: Contracts CodeStorage (r:1 w:0)
Storage: Timestamp Now (r:1 w:0)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=        0
    + r    15740
              µs

Reads = 4 + (100 * r)
Writes = 1 + (100 * r)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    r   mean µs  sigma µs       %
    0     229.3     9.966    4.3%
    1     15630     165.7    1.0%
    2     31240     290.3    0.9%
    3     46100     431.4    0.9%
    4     62540     433.9    0.6%
    5     78660     659.6    0.8%
    6     94560     633.4    0.6%
    7    109800     336.1    0.3%
    8    125900      1085    0.8%
    9    141100     755.1    0.5%
   10    156700     794.7    0.5%
   11    172400      1163    0.6%
   12    189200      1197    0.6%
   13    203600      1519    0.7%
   14    219800      1151    0.5%
   15    236000      1855    0.7%
   16    252000      1268    0.5%
   17    267000      2372    0.8%
   18    284200      1587    0.5%
   19    299100      1816    0.6%
   20    314800      1723    0.5%

Quality and confidence:
param     error
r         14.57

Model:
Time ~=        0
    + r    15750
              µs

Reads = 4 + (100 * r)
Writes = 1 + (100 * r)

Pallet: ""pallet_contracts"", Extrinsic: ""seal_call_per_transfer_input_output_kb"", Lowest values: [], Highest values: [], Steps: 50, Repeat: 20
Raw Storage Info
========
Storage: Contracts ContractInfoOf (r:101 w:101)
Storage: Contracts CodeStorage (r:2 w:0)
Storage: Timestamp Now (r:1 w:0)
Storage: System Account (r:101 w:101)

Median Slopes Analysis
========
-- Extrinsic Time --

Model:
Time ~=    27020
    + t     3324
    + i    34.45
    + o    59.72
              µs

Reads = 104 + (101 * t) + (0 * i) + (0 * o)
Writes = 101 + (101 * t) + (0 * i) + (0 * o)

Min Squares Analysis
========
-- Extrinsic Time --

Data points distribution:
    t     i     o   mean µs  sigma µs       %
    0  1024   960    119500     453.5    0.3%
    1     0   960     87100     478.5    0.5%
    1    20   960     87920     360.3    0.4%
    1    40   960     88080     811.6    0.9%
    1    60   960     89610       573    0.6%
    1    80   960     89440       710    0.7%
    1   100   960     90420     609.9    0.6%
    1   120   960     91520     561.9    0.6%
    1   140   960     91870     808.9    0.8%
    1   160   960     92680     327.8    0.3%
    1   180   960     93920     327.3    0.3%
    1   200   960     94430     329.4    0.3%
    1   220   960     95160     277.3    0.2%
    1   240   960     95920     459.2    0.4%
    1   260   960     96390     623.4    0.6%
    1   280   960     96530     869.6    0.9%
    1   300   960     97170     611.3    0.6%
    1   320   960     96930      1095    1.1%
    1   340   960     98210     976.4    0.9%
    1   360   960     99400     440.3    0.4%
    1   380   960    100500     471.8    0.4%
    1   400   960    100700       436    0.4%
    1   420   960    101900     622.4    0.6%
    1   440   960    102200     389.1    0.3%
    1   460   960    103200     567.1    0.5%
    1   480   960    104200     580.5    0.5%
    1   500   960    104400     229.8    0.2%
    1   520   960    105000     430.5    0.4%
    1   540   960    106000     661.8    0.6%
    1   560   960    105900     390.6    0.3%
    1   580   960    107300     377.3    0.3%
    1   600   960    107800     521.4    0.4%
    1   620   960    109200     778.1    0.7%
    1   640   960    108500     644.8    0.5%
    1   660   960    109600     264.1    0.2%
    1   680   960    111000     293.1    0.2%
    1   700   960    111500     415.9    0.3%
    1   720   960    111400       881    0.7%
    1   740   960    112700     895.4    0.7%
    1   760   960    113600     498.7    0.4%
    1   780   960    114100     381.6    0.3%
    1   800   960    114900     449.5    0.3%
    1   820   960    115900     381.1    0.3%
    1   840   960    116300     555.4    0.4%
    1   860   960    116300     516.3    0.4%
    1   880   960    117600     561.8    0.4%
    1   900   960    118200       568    0.4%
    1   920   960    118500     418.8    0.3%
    1   940   960    120200     546.2    0.4%
    1   960   960    120600     491.2    0.4%
    1   980   960    120600     603.1    0.5%
    1  1000   960    121000     810.4    0.6%
    1  1020   960    121300     528.2    0.4%
    1  1024     0     64880     421.1    0.6%
    1  1024    19     65990       613    0.9%
    1  1024    38     67490     287.3    0.4%
    1  1024    57     68540     627.5    0.9%
    1  1024    76     69770     563.5    0.8%
    1  1024    95     70990     334.3    0.4%
    1  1024   114     72240     636.7    0.8%
    1  1024   133     73040     699.9    0.9%
    1  1024   152     74080     508.6    0.6%
    1  1024   171     75930     396.8    0.5%
    1  1024   190     76650     183.1    0.2%
    1  1024   209     77740     460.6    0.5%
    1  1024   228  <truncated>...
```

</details>",10266,2021-11-15T11:32:40Z,0
1936,athei,"Insights:

- Host functions are roughly double the weight on wasmer (see for example `seal_caller` benchmark)
- There is a 50us static overhead (see `call`benchmark).
- Instruction weights are much lower (1/8)",10266,2021-11-15T16:32:45Z,0
1937,athei,The tracing now tracks each basic block of the executed contract. I updated the top post.,9481,2021-08-09T11:17:36Z,0
1938,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",9481,2021-10-10T10:11:45Z,0
1939,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10361,2022-01-03T06:52:59Z,0
1940,bkchr,Ping @ECJ222 ?,10361,2022-01-03T08:24:53Z,0
1941,ECJ222,"Hi @bkchr,

Hope you are doing good, I have been a little busy I will jump back on this issue.",10361,2022-01-03T11:18:37Z,0
1942,bkchr,Can you please resolve the requested changes? ,10361,2022-01-08T20:09:28Z,0
1943,ECJ222,"Hey @bkchr, 

I have resolved your requested changes.",10361,2022-01-09T07:18:28Z,0
1944,ECJ222,"@kianenigma, @athei ",10361,2022-01-12T17:35:37Z,0
1945,kianenigma,bot merge,10361,2022-01-25T07:20:41Z,0
1946,paritytech-processbot[bot],Waiting for commit status.,10361,2022-01-25T07:20:50Z,0
1947,kianenigma,@ECJ222 please run `cargo +nightly fmt` and we're good to go. ,10361,2022-01-25T07:34:29Z,0
1948,paritytech-processbot[bot],Merge cancelled due to error. Error: Head SHA changed from 497067988f0dd37f9902237f2c843f8473d751ab to 3f71ad7b56834dd00c309b7e0337b34a1b745c42,10361,2022-01-25T07:46:19Z,0
1949,ECJ222,"> @ECJ222 please run `cargo +nightly fmt` and we're good to go.

I have formatted my code changes @kianenigma  👍 ",10361,2022-01-25T08:36:38Z,0
1950,bkchr,@koushiro CI is still not happy.,10632,2022-01-20T09:21:12Z,0
1951,bkchr,bot merge,10632,2022-01-20T09:34:01Z,0
1952,paritytech-processbot[bot],Waiting for commit status.,10632,2022-01-20T09:34:17Z,0
1953,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 38f7b7c654e9fd55dfddcefbc556d26f9abcc95a,10632,2022-01-20T09:49:58Z,0
1954,koushiro,@bkchr could you merge this PR? I don't want to resolve the conflicts again :(,10632,2022-01-24T14:12:05Z,0
1955,KiChjang,bot merge,10632,2022-01-24T16:28:29Z,0
1956,bkchr,/tip small,10632,2022-01-24T19:28:11Z,0
1957,substrate-tip-bot[bot],"A small tip was successfully submitted for koushiro (15XuanNimo5951s3RjFTPX1AvYVnCwfr3SDhb3AV4fQF3LpK on polkadot). 

 https://polkadot.js.org/apps/#/treasury/tips",10632,2022-01-24T19:28:15Z,0
1958,cla-bot-2021[bot],"User @SupremaLex, please sign the CLA [here](https://cla.parity.io/sign_cla/20213174/3).",10729,2022-01-25T11:14:23Z,0
1959,bkchr,Please merge latest master to fix CI.,10729,2022-01-25T12:05:09Z,0
1960,emostov,"~~@shawntabrizi feel free to merge into your branch if you think it looks ok~~ na
",10649,2022-01-13T17:48:57Z,0
1961,emostov,bot merge,10649,2022-01-18T03:06:17Z,0
1962,kianenigma,@emostov what is the plan here? I thought we are not going to merge this? ,10649,2022-01-23T14:07:59Z,0
1963,emostov,"@kianenigma we merged this, but are waiting to apply it on polkadot/kusama until the fix is enacted. I'll reopen this once ready https://github.com/paritytech/polkadot/pull/4710",10649,2022-01-23T20:38:46Z,0
1964,emostov,Ah I see this made its way into the polkadot release notes - will try and take it out,10649,2022-01-23T21:07:18Z,0
1965,emostov,#10649 targets this branch and adds a complementary migration. https://github.com/paritytech/polkadot/pull/4710 applies the aforementioned migration to Polkadot and Kusama.,10646,2022-01-13T02:02:04Z,0
1966,shawntabrizi,bot merge,10646,2022-01-14T01:42:51Z,0
1967,emostov,Overall looks good just want to make sure I understand https://github.com/paritytech/substrate/pull/10663#discussion_r785159983,10663,2022-01-14T20:47:17Z,0
1968,kianenigma,@georgesdib would you like to prepare the appropriate companions for this one as well? should be fairly understandable for you. ,10663,2022-01-20T07:40:49Z,0
1969,georgesdib,"> @georgesdib would you like to prepare the appropriate companions for this one as well? should be fairly understandable for you.

I just created that under:

Polkadot companion: paritytech/polkadot#4757

cumulus seem to build fine.",10663,2022-01-20T23:09:04Z,0
1970,kianenigma,"Updated the PR a little bit -- not `RoundSnapshot`, the corresponding type of nominations in `pallet-election-provider-multi-phase` is also bounded by the same type. 

As you see, I also squeezed a simple `bounded_vec!` macro in there as well. ",10601,2022-01-07T14:25:34Z,0
1971,georgesdib,"I have created the accompanying Polkadot PR: paritytech/polkadot#4709
But I cannot edit the PR description.

Cumulus actually compiles, but it's failing because its polkadot needs to pull the above PR.",10601,2022-01-12T21:42:05Z,0
1972,shawntabrizi,"> All in all though, this PR has ZERO logical changes. It is all a matter of abstraction.

There is a change in behavior to chill.",10601,2022-01-19T03:39:57Z,0
1973,kianenigma,bot merge,10601,2022-01-24T16:31:58Z,0
1974,paritytech-processbot[bot],Waiting for commit status.,10601,2022-01-24T16:32:11Z,0
1975,paritytech-processbot[bot],Merge cancelled due to error. Error: Checks failed for 7fe85d23a20e85c5afd27735a17b2b1867c57f9a,10601,2022-01-24T17:05:56Z,0
1976,kianenigma,bot merge,10601,2022-01-25T14:43:55Z,0
1977,kianenigma,bot merge ,10601,2022-01-25T14:44:06Z,0
1978,paritytech-processbot[bot], Error: Github API says https://github.com/paritytech/substrate/pull/10601 is not mergeable,10601,2022-01-25T14:44:34Z,0
1979,cla-bot-2021[bot],"User @becominginsane, please sign the CLA [here](https://cla.parity.io/sign_cla/79259309/3).",10423,2021-12-06T04:42:30Z,0
1980,becominginsane,Notice hasn't been removed because we lack the labels and we are not able to add them (or at least not me),10423,2021-12-06T04:42:53Z,0
1981,stale[bot],"Hey, is anyone still working on this? Due to the inactivity this issue has been automatically marked as stale. It will be closed if no further activity occurs. Thank you for your contributions.
",10423,2022-01-15T20:26:01Z,0
1982,shawntabrizi,"@imlvts awesome write up!

The original benchmark test we did was about 1.5 years ago, and done by @NikVolf.

I also am not 100% positive of exactly the setup that was used, but I don't think you were that far off.

One thing that I don't see you have noted was that this benchmarking network used a 3 second blocktime versus the 6 second block time you find on average across Substrate and Polkadot.

There also was some tuning done to the transaction pool, things like increasing the memory allocated to the tx pool or something like that, since we also saw that without it, tx throughput started going down as we got past a ""sweet spot"".

Also, did you run your throughput test using wasm or native execution?

> The client was capable of generating up to 3000 TPS when used on 12-node network. However, most transactions were dropped. This demonstrates that the client was not the bottleneck.

What does this mean? Are you saying that a client is simply able to sign up to 3000 tranactions per second? Not exactly sure how this is relevant?

We recently hired @ggwpez into Parity, with the singular focus on benchmarking and optimization within FRAME and runtime development. We too were about to go through the process of rebenchmarking all of Substrate, and do so in a reproducible well documented way, so your message comes at perfect timing.",10720,2022-01-24T09:26:02Z,0
1983,shawntabrizi,"Also, @imlvts what team do you work on, or what is prompting you to look at Substrate in this way?

Would be very happy to include you into our efforts here more closely if you are open to that.",10720,2022-01-24T09:28:53Z,0
1984,imlvts,"@shawntabrizi thank you for your swift response.

> Also, did you run your throughput test using wasm or native execution?

Not on the target machines. I'll be sure to do that and get back with the results.

> What does this mean? Are you saying that a client is simply able to sign up to 3000 tranactions per second? Not exactly sure how this is relevant?

This means that the client was able to send 3000 extrinsics per second to multiple nodes in total over HTTP RPC. Retrospectively, it may be more efficient to use P2P protocol instead. This is relevant because *was* a bottleneck at some point.",10720,2022-01-24T09:50:11Z,0
1985,bkchr,"> * Increasing the client TPS above that _decreased_ the number of transactions in block, meaning more transactions were dropped as the load increased.

If you have a way to reproduce this easily, please share your scripts. Then I can take a look and fix this.",10720,2022-01-24T09:55:47Z,0
1986,burdges,Is there a sensible strategy for measuring how much the memepool consumes? ,10720,2022-01-24T16:41:04Z,0
1987,bkchr,"> Is there a sensible strategy for measuring how much the memepool consumes?

Consumes what?",10720,2022-01-24T19:29:59Z,0
1988,shawntabrizi,Does this address a specific open issue? Can you link to it or provide a specification and user story for these changes?,10717,2022-01-23T00:00:22Z,0
1989,Doordashcon,"> Does this address a specific open issue? Can you link to it or provide a specification and user story for these changes?

@joshua-mir could provide more insights",10717,2022-01-23T08:39:44Z,0
1990,joshua-mir,"sorry, have notifications muted. 

no open issue, just a discussion I had with Seun during his parachain recovery attempt - a proposal was made to the public democracy queue which precluded TC from being able to fast-track it, the idea behind this is it would be nice if it were possible for the queue that has ""more privileges"" to ""adopt"" proposals from other queues instead of having to submit a modified proposal in scenarios that are time-critical - might still be worth implementing here even if there is a democracy overhaul that would address the problem in another way. ",10717,2022-01-25T18:48:22Z,0
1991,bkchr,bot merge,10697,2022-01-25T19:57:44Z,0
1992,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10697,2022-01-25T19:57:55Z,0
1993,dependabot[bot],"Dependabot tried to update this pull request, but something went wrong. We're looking into it, but in the meantime you can retry the update by commenting `@dependabot rebase`.",10685,2022-01-24T16:42:38Z,0
1994,dependabot[bot],"Dependabot tried to update this pull request, but something went wrong. We're looking into it, but in the meantime you can retry the update by commenting `@dependabot rebase`.",10685,2022-01-25T20:01:08Z,0
1995,dependabot[bot],"Dependabot tried to update this pull request, but something went wrong. We're looking into it, but in the meantime you can retry the update by commenting `@dependabot rebase`.",10703,2022-01-24T16:41:13Z,0
1996,KiChjang,Still requires an upgrade to `libp2p:0.41.1` or later,10703,2022-01-24T16:44:56Z,0
1997,dependabot[bot],"Dependabot tried to update this pull request, but something went wrong. We're looking into it, but in the meantime you can retry the update by commenting `@dependabot rebase`.",10703,2022-01-25T20:01:07Z,0
1998,koute,"Just a note for the future: I see that you took a significant chunk of code essentially unchanged from one file and split it into multiple files (e.g. `tests.rs` or `keys.rs`). It would be significantly easier to review if that was done in a separate commit instead of being also mixed with actual code changes. Right now we basically have a diff here where two files are 100% deleted, and a bunch of files which are 100% new, and when reviewing one has to manually diff the changes between those with their eyes instead of letting the tool do that automatically.",10708,2022-01-21T07:00:25Z,0
1999,RGafiyatullin,"@koute I've considerably reworked the `sc-utils::pubsub`.
Would you have a look again please?",10708,2022-01-21T16:27:04Z,0
2000,bkchr,Can you please merge master?,10696,2022-01-25T13:19:40Z,0
2001,koushiro,"> Can you please merge master?

Done",10696,2022-01-25T14:30:19Z,0
2002,bkchr,bot merge,10696,2022-01-25T19:39:28Z,0
2003,paritytech-processbot[bot],Waiting for commit status.,10696,2022-01-25T19:39:39Z,0
2004,paritytech-processbot[bot],"Bot will approve on the behalf of @bkchr, since they are a team lead, in an attempt to reach the minimum approval count",10696,2022-01-25T19:48:45Z,0
2005,emostov,"> Looks broadly good, I want to think if there are any test scenarios to add.
> 
> Can you eliminate MAX_UNLOOCKING as well and
> 
> 1. make it a Get<>
> 2. use bounded vec in Ledger<>

Added in 54198dc",10670,2022-01-16T03:23:01Z,0
2006,Wizdave97,"Polkadot companion has been updated, CI checks need to be restarted",10664,2022-01-17T20:17:27Z,0
2007,Wizdave97,"The polkadot companion has been fixed, the CI checks need to be restarted",10669,2022-01-17T19:45:17Z,0
2008,acatangiu,"@bkchr please take a look at this PR and its companion, thanks!",10669,2022-01-25T11:50:58Z,0
2009,seunlanlege,"> The issue mentions to find out why commitments are send twice and not to just prevent sending them multiple times from the rpc layer.

@bkchr 

Because of the way networking works, peers could still be broadcasting votes for a round that has already concluded. The best we can do is dedupe the notifications sent to the rpc clients.",10684,2022-01-25T15:43:26Z,0
2010,bkchr,CC @athei ,10730,2022-01-25T16:26:20Z,0
2011,athei,This isn't possible because from a dispatchable we can only return a `DispatchError` which does not allow to include arbitrary data. So we couldn't include the `bytes`. If you need your contract to communicate something to the off chain world the way of doing that would be to emit an event.,10730,2022-01-26T08:53:50Z,0
2012,cla-bot-2021[bot],"User @pmikolajczyk41, please sign the CLA [here](https://cla.parity.io/sign_cla/27450471/3).",10728,2022-01-24T19:23:51Z,0
2013,apopiak,@sacha-l @NukeManDan Any docs updates?,10735,2022-01-26T09:37:55Z,0
2014,apopiak,"See my comments on the PR, boiling down to:
Why do you want this change and have you considered that it seems a bad idea to me to query assets by name on-chain?",10732,2022-01-26T11:55:55Z,0
2015,cla-bot-2021[bot],"User @anonymousGiga, please sign the CLA [here](https://cla.parity.io/sign_cla/43949039/3).",10733,2022-01-26T06:02:26Z,0
2016,apopiak,"@bkchr Not sure I'd call this trivial.
For one it changes the fungibles API and requires downstream changes for implementers of `InspectMetadata`. Wouldn't merge this without approval from @shawntabrizi 
(Or maybe you both disagree with me.)",10733,2022-01-26T11:57:22Z,0
2017,bkchr,"> @bkchr Not sure I'd call this trivial. For one it changes the fungibles API and requires downstream changes for implementers of `InspectMetadata`. Wouldn't merge this without approval from @shawntabrizi (Or maybe you both disagree with me.)

1. I did not merge it.
2. I did request a review from @shawntabrizi.
3. `trivial` is about if this requires an audit and this doesn't require an audit.",10733,2022-01-26T12:12:42Z,0
2018,cla-bot-2021[bot],"User @ggwpez, please sign the CLA [here](https://cla.parity.io/sign_cla/10380170/3).",10473,2021-12-11T18:21:48Z,0
2019,ggwpez,"I addressed all your comments and merged `master` into here.  
@thiolliere ",10473,2021-12-14T19:29:04Z,0
2020,thiolliere,maybe master needs to merged again to make CI happy.,10473,2021-12-15T03:56:28Z,0
2021,wi1dcard,"Hi @wpank , do you have any update on this issue? Is there an estimated time of removing the flag?",8103,2021-05-02T07:34:11Z,0
2022,bLd75,"Hi little bot, the issue is still to be addressed :)",8103,2021-10-12T11:50:28Z,0
2023,paradox-tt,Seconded. ,8103,2021-10-12T11:52:36Z,0
2024,bkchr,"We will working on this in the near future.

This issue should be tackled in the following way:

1. Remove the automatic enabling of ""archive mode"" when `--validator` is given. https://github.com/paritytech/substrate/blob/293fbeb6903904a7d02d462d9cf8614715c1f117/client/cli/src/params/pruning_params.rs#L42-L65
2. Remove `--unsafe-pruning` cli flag or better make the node fail with an error message that it isn't required anymore: https://github.com/paritytech/substrate/blob/293fbeb6903904a7d02d462d9cf8614715c1f117/client/cli/src/params/import_params.rs#L48-L54
3. Old nodes should continue to work without requiring to resync or anything. Meaning we should maybe introduce some new `PrunningMode::Auto` or whatever that ensures that validators that are still running with archive mode continue in archive mode. Any new started validator with a new db should start with a pruned db. https://github.com/paritytech/substrate/blob/293fbeb6903904a7d02d462d9cf8614715c1f117/client/state-db/src/lib.rs#L267-L278 here we check that the pruning modes are matching.",8103,2022-01-26T13:37:25Z,0
2025,seunlanlege,you beauty 😍 ,10699,2022-01-19T18:42:48Z,0
2026,davxy,"@bkchr @andresilva 

### TL;DR

A fairly meticulous inspection of `finality_notification_stream` consumers; 

In particular assumptions about sequential block finalization messages were checked and eventually fixed.

 **Looks like** receiving the last finalized block message was sufficient for almost all consumers with the exception of txpool, where a fix is already contained in this PR. 
 
A review from more experienced people for the single components is still required.

Follows a recap for Substrate, Cumulus and Polkadot with code references to simplify the inspection.


# Substrate

### Transaction Pool

- Stream read by `notification_future` [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/transaction-pool/src/lib.rs#L732-L747)
- Validated transaction pool assumes to receive a notification message for each finalized block.
- Message handler has been adjusted to send the full finalized list to `pool.validated_pool().on_block_finalized()`

See [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/transaction-pool/src/lib.rs#L715-L723)

### Beefy

- Stream read by `BeefyWorker` [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/beefy/src/worker.rs#L407-L412)
- Message is then processed [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/beefy/src/worker.rs#L215)

- Looks happy with final head notification.

### Networking

- Stream is read within `build_network_future` [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/service/src/lib.rs#L155-L156)
- A wrapper to find the last finalized block was present [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/service/src/lib.rs#L158-L173). This is not required anymore.
- ~~`build_network_future` forwards finality notification to `network.on_block_finalized(hash, number)` [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/service/src/lib.rs#L200-L201)~~
- ~~message arrives to `ChainSync::on_block_finalized` [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/network/src/protocol/sync.rs#L1646)~~.
- ~~message is forwarded to `ExtraRequests::on_block_finalized` in [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/network/src/protocol/sync/extra_requests.rs#L160)~~

### RPC

- Stream read messages are forwarded to subscribers of `subscribe_finalized_heads` API [here](https://github.com/paritytech/substrate/blob/55e470a0c44ec35d37f0221fc44e4189c0037b24/client/rpc/src/chain/mod.rs#L162-L178)

- **WARNING**: we are now sending notifications only for finalized heads but external applications may rely on previous behaviour?


# Cumulus

### PovRecovery

- Stream is read within `PovRecovery::run` [here](https://github.com/paritytech/cumulus/blob/3994f6cbeca18ac37c9b6b1d04c5b47004eb2687/client/pov-recovery/src/lib.rs#L393-L395)
- Calls `handle_block_finalized(finalized_number)` that is used to remove from `self.pending_candidates` blocks with `number <= finalized_number` [here](https://github.com/paritytech/cumulus/blob/3994f6cbeca18ac37c9b6b1d04c5b47004eb2687/client/pov-recovery/src/lib.rs#L207-L209)

- **Seems happy with final head notification**

### RelaychainClient

- Stream is read within `RelaychainClient for RCInterface :: finalized_heads` implementation [here](https://github.com/paritytech/cumulus/blob/3994f6cbeca18ac37c9b6b1d04c5b47004eb2687/client/consensus/common/src/parachain_consensus.rs#L393-L403)
- The stream result is then used in `follow_finalized_head`. [here](https://github.com/paritytech/cumulus/blob/3994f6cbeca18ac37c9b6b1d04c5b47004eb2687/client/consensus/common/src/parachain_consensus.rs#L72)
    - for each new finalized head the  `parachain.finalize_block(finalized_hash)` is called.
    - this is already correctly handled by Substrate `Client` implementation for `Finalizer` trait.

- **Seems happy with final head notification**

# Polkadot

### Overseer

node/overseer/src/lib.rs
- `forward_events()` forwards stream messages to the overseer wrapper using `Handle::block_finalized` [here](https://github.com/paritytech/polkadot/blob/dee0681cccc650d7b2ba5face7f15eb49bdc9b98/node/overseer/src/lib.rs#L281)
- `Handle::block_finalized` sends messages to Overseer task.
- The event is catched within the `Overseer::run` and managed using `Overseer::block_finalized` [here](https://github.com/paritytech/polkadot/blob/dee0681cccc650d7b2ba5face7f15eb49bdc9b98/node/overseer/src/lib.rs#L621-L623)
   - This prunes leaves below the finalized head [here](https://github.com/paritytech/polkadot/blob/dee0681cccc650d7b2ba5face7f15eb49bdc9b98/node/overseer/src/lib.rs#L685)
",10639,2022-01-17T17:30:37Z,0
2027,bkchr,@davxy ty for the detailed report. Looks good as far as I can see :) ,10639,2022-01-18T12:09:36Z,0
